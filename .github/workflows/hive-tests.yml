name: hive tests

on:
  pull_request:

env:
  # An envar that signals to tests we are executing in the CI environment
  CONTINUOUS_INTEGRATION: true
  MAVEN_OPTS: "-Xmx1024M -XX:+ExitOnOutOfMemoryError"
  MAVEN_INSTALL_OPTS: "-Xmx2G -XX:+ExitOnOutOfMemoryError"
  MAVEN_FAST_INSTALL: "-B -V --quiet -T 1C -DskipTests -Dair.check.skip-all --no-transfer-progress -Dmaven.javadoc.skip=true"
  MAVEN_TEST: "-B -Dair.check.skip-all -Dmaven.javadoc.skip=true -DLogTestDurationListener.enabled=true --no-transfer-progress --fail-at-end"
  RETRY: .github/bin/retry

jobs:
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      codechange: ${{ steps.filter.outputs.codechange }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          codechange:
            - '!presto-docs/**'

  hive-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.codechange == 'true'
    timeout-minutes: 60
    concurrency:
      group: ${{ github.workflow }}-hive-tests-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Install Hive Module
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl :presto-hive-hadoop2
      - name: Run Hive Tests
        run: presto-hive-hadoop2/bin/run_hive_tests.sh
      - name: Run Hive S3 Tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.HIVE_AWS_ACCESSKEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.HIVE_AWS_SECRETKEY }}
          S3_BUCKET: "presto-ci-test"
          S3_BUCKET_ENDPOINT: "s3.us-east-2.amazonaws.com"
        run: |
          if [ "${AWS_ACCESS_KEY_ID}" != "" ]; then
              presto-hive-hadoop2/bin/run_hive_s3_tests.sh
          fi
      - name: Run Hive Glue Tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.HIVE_AWS_ACCESSKEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.HIVE_AWS_SECRETKEY }}
        run: |
          if [ "${HIVE_AWS_ACCESS_KEY_ID}" != "" ]; then
              ./mvnw test ${MAVEN_TEST} -pl :presto-hive -P test-hive-glue
          fi

  hive-dockerized-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.codechange == 'true'
    timeout-minutes: 20
    concurrency:
      group: ${{ github.workflow }}-hive-dockerized-tests-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Install Hive Module
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl :presto-hive
      - name: Run Hive Dockerized Tests
        run: ./mvnw test ${MAVEN_TEST} -pl :presto-hive -P test-hive-insert-overwrite