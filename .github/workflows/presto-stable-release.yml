name: Presto Stable Release Workflow

on:
  workflow_dispatch:

jobs:
  presto-release:
    name: Presto Stable Release Workflow
    runs-on: ubuntu-latest
    environment: release

    permissions:
      contents: write
      packages: write

    steps:
      - name: Check actor
        if: ${{ github.actor != 'prestodb-ci' }}
        run: echo "Unauthorized actor. Please login with prestodb-ci to run this action." && exit 1

      - name: Check branch
        if: ${{ github.ref != 'refs/heads/master' }}
        run: echo "Invalid branch. This action can only be run on the master branch." && exit 1

      - name: Checkout presto source
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRESTODB_CI_TOKEN }}
          ref: master
          show-progress: false

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Configure git
        run: |
          git config --global --add safe.directory ${{github.workspace}}
          git config --global user.email "ci@lists.prestodb.io"
          git config --global user.name "prestodb-ci"
          git config pull.rebase false

      - name: Set maven version
        run: |
          unset MAVEN_CONFIG && ./mvnw versions:set -DremoveSnapshot -ntp

      - name: Get Presto release version
        id: get-version
        run: |
          PRESTO_RELEASE_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate \
            -Dexpression=project.version -q -ntp -DforceStdout | tail -n 1)
          echo "PRESTO_RELEASE_VERSION=$PRESTO_RELEASE_VERSION"
          echo "PRESTO_RELEASE_VERSION=$PRESTO_RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in master
        env:
          PRESTO_RELEASE_VERSION: ${{ steps.get-version.outputs.PRESTO_RELEASE_VERSION }}
        run: |
          git reset --hard
          unset MAVEN_CONFIG && ./mvnw release:prepare --batch-mode \
            -DskipTests \
            -DautoVersionSubmodules \
            -DdevelopmentVersion=${{ env.PRESTO_RELEASE_VERSION }} \
            -DreleaseVersion=${{ env.PRESTO_RELEASE_VERSION }}
          git push --follow-tags origin master

      - name: Push release branch
        env:
          PRESTO_RELEASE_VERSION: ${{ steps.get-version.outputs.PRESTO_RELEASE_VERSION }}
        run: |
          git checkout -b release-${{ env.PRESTO_RELEASE_VERSION }}
          git push origin release-${{ env.PRESTO_RELEASE_VERSION }}
