// DO NOT EDIT : This file is generated by presto_protocol-to-thrift-json.py
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is generated DO NOT EDIT @generated

#include "presto_cpp/main/thrift/ProtocolToThrift.h"
#include "presto_cpp/main/thrift/ThriftIO.h"
#include "presto_cpp/presto_protocol/core/ConnectorProtocol.h"

namespace facebook::presto::thrift {

// These could be covered by a more general template but this way only
// conversions to supported Thrift data types can be generated.
void toThrift(const std::string& proto, std::string& thrift) {
  thrift = proto;
}
void toThrift(const bool& proto, bool& thrift) {
  thrift = proto;
}
void toThrift(const int16_t& proto, int16_t& thrift) {
  thrift = proto;
}
void toThrift(const int32_t& proto, int32_t& thrift) {
  thrift = proto;
}
void toThrift(const int64_t& proto, int64_t& thrift) {
  thrift = proto;
}
void toThrift(const double& proto, double& thrift) {
  thrift = proto;
}
void toThrift(
    const facebook::presto::protocol::Duration& duration,
    double& thrift) {
  thrift =
      duration.getValue(facebook::presto::protocol::TimeUnit::MILLISECONDS);
}
void toThrift(
    const facebook::presto::protocol::DataSize& dataSize,
    double& thrift) {
  thrift = dataSize.getValue(facebook::presto::protocol::DataUnit::BYTE);
}

template <typename P, typename T>
void toThrift(const std::shared_ptr<P>& proto, std::shared_ptr<T>& thrift) {
  if (proto) {
    thrift = std::make_shared<T>();
    toThrift(*proto, *thrift);
  }
}

template <typename P, typename T>
void toThrift(const std::shared_ptr<P>& proto, T& thrift) {
  if (proto) {
    toThrift(*proto, thrift);
  }
}

template <typename V, typename S>
void toThrift(const std::vector<V>& v, std::set<S>& s) {
  S toItem;
  for (const auto& fromItem : v) {
    toThrift(fromItem, toItem);
    s.insert(std::move(toItem));
  }
}

template <typename P, typename T>
void toThrift(const std::vector<P>& p, std::vector<T>& t) {
  t.reserve(p.size());
  T toItem;
  for (const auto& fromItem : p) {
    toThrift(fromItem, toItem);
    t.emplace_back(std::move(toItem));
  }
}

template <typename K1, typename V1, typename K2, typename V2>
void toThrift(const std::map<K1, V1>& protoMap, std::map<K2, V2>& thriftMap) {
  K2 toKey;
  V2 toValue;
  for (const auto& [fromKey, fromValue] : protoMap) {
    toThrift(fromKey, toKey);
    toThrift(fromValue, toValue);
    thriftMap.emplace(std::move(toKey), std::move(toValue));
  }
}

template <typename P, typename T>
void toThrift(
    const std::shared_ptr<P>& proto,
    apache::thrift::optional_field_ref<T> thrift) {
  if (proto) {
    thrift.ensure();
    toThrift(*proto, apache::thrift::can_throw(*thrift));
  }
}

void fromThrift(const std::string& thrift, std::string& proto) {
  proto = thrift;
}
void fromThrift(const bool& thrift, bool& proto) {
  proto = thrift;
}
void fromThrift(const int16_t& thrift, int16_t& proto) {
  proto = thrift;
}
void fromThrift(const int32_t& thrift, int32_t& proto) {
  proto = thrift;
}
void fromThrift(const int64_t& thrift, int64_t& proto) {
  proto = thrift;
}
void fromThrift(const double& thrift, double& proto) {
  proto = thrift;
}

void fromThrift(
    const double& thrift,
    facebook::presto::protocol::Duration& duration) {
  duration = facebook::presto::protocol::Duration(
      thrift, facebook::presto::protocol::TimeUnit::MILLISECONDS);
}

void fromThrift(
    const double& thrift,
    facebook::presto::protocol::DataSize& dataSize) {
  dataSize = facebook::presto::protocol::DataSize(
      thrift, facebook::presto::protocol::DataUnit::BYTE);
}

template <typename P, typename T>
void fromThrift(
    const apache::thrift::optional_field_ref<T>& thrift,
    std::shared_ptr<P>& proto) {
  if (thrift.has_value()) {
    proto = std::make_shared<P>();
    fromThrift(*thrift, *proto);
  }
}

template <typename P, typename T>
void fromThrift(const T& thrift, std::shared_ptr<P>& proto) {
  proto = std::make_shared<P>();
  fromThrift(thrift, *proto);
}

template <typename P, typename T>
void fromThrift(const std::shared_ptr<P>& thrift, std::shared_ptr<T>& proto) {
  if (thrift) {
    proto = std::make_shared<T>();
    fromThrift(*thrift, *proto);
  }
}

template <typename V, typename S>
void fromThrift(const std::set<S>& thrift, std::vector<V>& proto) {
  proto.reserve(thrift.size());
  V toItem;
  for (const auto& fromItem : thrift) {
    fromThrift(fromItem, toItem);
    proto.emplace_back(std::move(toItem));
  }
}

template <typename P, typename T>
void fromThrift(const std::vector<P>& thrift, std::vector<T>& proto) {
  proto.reserve(thrift.size());
  T toItem;
  for (const auto& fromItem : thrift) {
    fromThrift(fromItem, toItem);
    proto.emplace_back(std::move(toItem));
  }
}

template <typename K1, typename V1, typename K2, typename V2>
void fromThrift(const std::map<K1, V1>& thriftMap, std::map<K2, V2>& protoMap) {
  K2 toKey;
  V2 toValue;
  for (const auto& [fromKey, fromValue] : thriftMap) {
    fromThrift(fromKey, toKey);
    fromThrift(fromValue, toValue);
    protoMap.emplace(std::move(toKey), std::move(toValue));
  }
}

void toThrift(
    const facebook::presto::protocol::TaskState& proto,
    TaskState& thrift) {
  thrift = (TaskState)(static_cast<int>(proto));
}
void fromThrift(
    const TaskState& thrift,
    facebook::presto::protocol::TaskState& proto) {
  proto = (facebook::presto::protocol::TaskState)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::ErrorType& proto,
    ErrorType& thrift) {
  thrift = (ErrorType)(static_cast<int>(proto));
}
void fromThrift(
    const ErrorType& thrift,
    facebook::presto::protocol::ErrorType& proto) {
  proto = (facebook::presto::protocol::ErrorType)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::ErrorCause& proto,
    ErrorCause& thrift) {
  thrift = (ErrorCause)(static_cast<int>(proto));
}
void fromThrift(
    const ErrorCause& thrift,
    facebook::presto::protocol::ErrorCause& proto) {
  proto = (facebook::presto::protocol::ErrorCause)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::BufferState& proto,
    BufferState& thrift) {
  thrift = (BufferState)(static_cast<int>(proto));
}
void fromThrift(
    const BufferState& thrift,
    facebook::presto::protocol::BufferState& proto) {
  proto = (facebook::presto::protocol::BufferState)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::BlockedReason& proto,
    BlockedReason& thrift) {
  thrift = (BlockedReason)(static_cast<int>(proto));
}
void fromThrift(
    const BlockedReason& thrift,
    facebook::presto::protocol::BlockedReason& proto) {
  proto = (facebook::presto::protocol::BlockedReason)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::RuntimeUnit& proto,
    RuntimeUnit& thrift) {
  thrift = (RuntimeUnit)(static_cast<int>(proto));
}
void fromThrift(
    const RuntimeUnit& thrift,
    facebook::presto::protocol::RuntimeUnit& proto) {
  proto = (facebook::presto::protocol::RuntimeUnit)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::JoinType& proto,
    JoinType& thrift) {
  thrift = (JoinType)(static_cast<int>(proto));
}
void fromThrift(
    const JoinType& thrift,
    facebook::presto::protocol::JoinType& proto) {
  proto = (facebook::presto::protocol::JoinType)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::SelectedRoleType& proto,
    Type& thrift) {
  thrift = (Type)(static_cast<int>(proto));
}
void fromThrift(
    const Type& thrift,
    facebook::presto::protocol::SelectedRoleType& proto) {
  proto =
      (facebook::presto::protocol::SelectedRoleType)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::Determinism& proto,
    Determinism& thrift) {
  thrift = (Determinism)(static_cast<int>(proto));
}
void fromThrift(
    const Determinism& thrift,
    facebook::presto::protocol::Determinism& proto) {
  proto = (facebook::presto::protocol::Determinism)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::NullCallClause& proto,
    NullCallClause& thrift) {
  thrift = (NullCallClause)(static_cast<int>(proto));
}
void fromThrift(
    const NullCallClause& thrift,
    facebook::presto::protocol::NullCallClause& proto) {
  proto =
      (facebook::presto::protocol::NullCallClause)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::FunctionKind& proto,
    FunctionKind& thrift) {
  thrift = (FunctionKind)(static_cast<int>(proto));
}
void fromThrift(
    const FunctionKind& thrift,
    facebook::presto::protocol::FunctionKind& proto) {
  proto = (facebook::presto::protocol::FunctionKind)(static_cast<int>(thrift));
}

void toThrift(
    const facebook::presto::protocol::BufferType& proto,
    BufferType& thrift) {
  thrift = (BufferType)(static_cast<int>(proto));
}
void fromThrift(
    const BufferType& thrift,
    facebook::presto::protocol::BufferType& proto) {
  proto = (facebook::presto::protocol::BufferType)(static_cast<int>(thrift));
}

void toThrift(
    const std::shared_ptr<facebook::presto::protocol::ConnectorSplit>& proto,
    ConnectorSplit& thrift) {}
void fromThrift(
    const ConnectorSplit& thrift,
    std::shared_ptr<facebook::presto::protocol::ConnectorSplit>& proto) {
  if (thrift.connectorId().has_value() &&
      thrift.customSerializedValue().has_value()) {
    if (thrift.connectorId() == "$remote") {
      auto protoRemoteSplit =
          std::make_shared<facebook::presto::protocol::RemoteSplit>();
      auto thriftRemoteSplit = std::make_shared<RemoteSplit>();
      thriftRead(thrift.customSerializedValue().value(), thriftRemoteSplit);
      facebook::presto::thrift::fromThrift(thriftRemoteSplit, protoRemoteSplit);
      proto = protoRemoteSplit;
      return;
    }
    facebook::presto::protocol::getConnectorProtocol(
        thrift.connectorId().value())
        .deserialize(thrift.customSerializedValue().value(), proto);
  } else if (thrift.jsonValue().has_value()) {
    json j = json::parse(thrift.jsonValue().value());
    from_json(j, proto);
  }
}
void toThrift(
    const std::shared_ptr<
        facebook::presto::protocol::ConnectorTransactionHandle>& proto,
    ConnectorTransactionHandle& thrift) {}
void fromThrift(
    const ConnectorTransactionHandle& thrift,
    std::shared_ptr<facebook::presto::protocol::ConnectorTransactionHandle>&
        proto) {
  if (thrift.connectorId().has_value() &&
      thrift.customSerializedValue().has_value()) {
    if (thrift.connectorId() == "$remote") {
      auto protoRemoteTransactionHandle = std::make_shared<
          facebook::presto::protocol::RemoteTransactionHandle>();
      auto thriftRemoteTransactionHandle =
          std::make_shared<RemoteTransactionHandle>();
      thriftRead(
          thrift.customSerializedValue().value(),
          thriftRemoteTransactionHandle);
      facebook::presto::thrift::fromThrift(
          thriftRemoteTransactionHandle, protoRemoteTransactionHandle);
      proto = protoRemoteTransactionHandle;
      return;
    }
    facebook::presto::protocol::getConnectorProtocol(
        thrift.connectorId().value())
        .deserialize(thrift.customSerializedValue().value(), proto);
  } else if (thrift.jsonValue().has_value()) {
    json j = json::parse(thrift.jsonValue().value());
    from_json(j, proto);
  }
}
void toThrift(
    const std::shared_ptr<
        facebook::presto::protocol::ConnectorOutputTableHandle>& proto,
    ConnectorOutputTableHandle& thrift) {}
void fromThrift(
    const ConnectorOutputTableHandle& thrift,
    std::shared_ptr<facebook::presto::protocol::ConnectorOutputTableHandle>&
        proto) {
  if (thrift.connectorId().has_value() &&
      thrift.customSerializedValue().has_value()) {
    facebook::presto::protocol::getConnectorProtocol(
        thrift.connectorId().value())
        .deserialize(thrift.customSerializedValue().value(), proto);
  } else if (thrift.jsonValue().has_value()) {
    json j = json::parse(thrift.jsonValue().value());
    from_json(j, proto);
  }
}

void toThrift(
    const std::shared_ptr<
        facebook::presto::protocol::ConnectorDeleteTableHandle>& proto,
    ConnectorDeleteTableHandle& thrift) {}
void fromThrift(
    const ConnectorDeleteTableHandle& thrift,
    std::shared_ptr<facebook::presto::protocol::ConnectorDeleteTableHandle>&
        proto) {
  if (thrift.connectorId().has_value() &&
      thrift.customSerializedValue().has_value()) {
    facebook::presto::protocol::getConnectorProtocol(
        thrift.connectorId().value())
        .deserialize(thrift.customSerializedValue().value(), proto);
  } else if (thrift.jsonValue().has_value()) {
    json j = json::parse(thrift.jsonValue().value());
    from_json(j, proto);
  }
}

void toThrift(
    const std::shared_ptr<
        facebook::presto::protocol::ConnectorInsertTableHandle>& proto,
    ConnectorInsertTableHandle& thrift) {}
void fromThrift(
    const ConnectorInsertTableHandle& thrift,
    std::shared_ptr<facebook::presto::protocol::ConnectorInsertTableHandle>&
        proto) {
  if (thrift.connectorId().has_value() &&
      thrift.customSerializedValue().has_value()) {
    facebook::presto::protocol::getConnectorProtocol(
        thrift.connectorId().value())
        .deserialize(thrift.customSerializedValue().value(), proto);
  } else if (thrift.jsonValue().has_value()) {
    json j = json::parse(thrift.jsonValue().value());
    from_json(j, proto);
  }
}

void toThrift(
    const std::shared_ptr<facebook::presto::protocol::ConnectorTableHandle>&
        proto,
    ConnectorTableHandle& thrift) {}
void fromThrift(
    const ConnectorTableHandle& thrift,
    std::shared_ptr<facebook::presto::protocol::ConnectorTableHandle>& proto) {
  if (thrift.connectorId().has_value() &&
      thrift.customSerializedValue().has_value()) {
    facebook::presto::protocol::getConnectorProtocol(
        thrift.connectorId().value())
        .deserialize(thrift.customSerializedValue().value(), proto);
  } else if (thrift.jsonValue().has_value()) {
    json j = json::parse(thrift.jsonValue().value());
    from_json(j, proto);
  }
}

void toThrift(
    const std::shared_ptr<
        facebook::presto::protocol::ConnectorTableLayoutHandle>& proto,
    ConnectorTableLayoutHandle& thrift) {}
void fromThrift(
    const ConnectorTableLayoutHandle& thrift,
    std::shared_ptr<facebook::presto::protocol::ConnectorTableLayoutHandle>&
        proto) {
  if (thrift.connectorId().has_value() &&
      thrift.customSerializedValue().has_value()) {
    facebook::presto::protocol::getConnectorProtocol(
        thrift.connectorId().value())
        .deserialize(thrift.customSerializedValue().value(), proto);
  } else if (thrift.jsonValue().has_value()) {
    json j = json::parse(thrift.jsonValue().value());
    from_json(j, proto);
  }
}

void toThrift(
    const facebook::presto::protocol::RemoteTransactionHandle& proto,
    RemoteTransactionHandle& thrift) {}
void fromThrift(
    const RemoteTransactionHandle& thrift,
    facebook::presto::protocol::RemoteTransactionHandle& proto) {}

void toThrift(
    const facebook::presto::protocol::Lifespan& proto,
    Lifespan& thrift) {
  toThrift(proto.isgroup, *thrift.grouped_ref());
  toThrift(proto.groupid, *thrift.groupId_ref());
}
void fromThrift(
    const Lifespan& thrift,
    facebook::presto::protocol::Lifespan& proto) {
  fromThrift(*thrift.grouped_ref(), proto.isgroup);
  fromThrift(*thrift.groupId_ref(), proto.groupid);
}

void toThrift(
    const facebook::presto::protocol::ErrorLocation& proto,
    ErrorLocation& thrift) {
  toThrift(proto.lineNumber, *thrift.lineNumber_ref());
  toThrift(proto.columnNumber, *thrift.columnNumber_ref());
}
void fromThrift(
    const ErrorLocation& thrift,
    facebook::presto::protocol::ErrorLocation& proto) {
  fromThrift(*thrift.lineNumber_ref(), proto.lineNumber);
  fromThrift(*thrift.columnNumber_ref(), proto.columnNumber);
}

void toThrift(
    const facebook::presto::protocol::HostAddress& proto,
    HostAddress& thrift) {
  toThrift(proto, *thrift.hostPortString_ref());
}
void fromThrift(
    const HostAddress& thrift,
    facebook::presto::protocol::HostAddress& proto) {
  fromThrift(*thrift.hostPortString_ref(), proto);
}
void toThrift(
    const facebook::presto::protocol::OutputBufferId& proto,
    OutputBufferId& thrift) {
  toThrift(std::stoi(proto), *thrift.id_ref());
}
void fromThrift(
    const OutputBufferId& thrift,
    facebook::presto::protocol::OutputBufferId& proto) {
  fromThrift(std::to_string(*thrift.id_ref()), proto);
}
void toThrift(
    const facebook::presto::protocol::PageBufferInfo& proto,
    PageBufferInfo& thrift) {
  toThrift(proto.partition, *thrift.partition_ref());
  toThrift(proto.bufferedPages, *thrift.bufferedPages_ref());
  toThrift(proto.bufferedBytes, *thrift.bufferedBytes_ref());
  toThrift(proto.rowsAdded, *thrift.rowsAdded_ref());
  toThrift(proto.pagesAdded, *thrift.pagesAdded_ref());
}
void fromThrift(
    const PageBufferInfo& thrift,
    facebook::presto::protocol::PageBufferInfo& proto) {
  fromThrift(*thrift.partition_ref(), proto.partition);
  fromThrift(*thrift.bufferedPages_ref(), proto.bufferedPages);
  fromThrift(*thrift.bufferedBytes_ref(), proto.bufferedBytes);
  fromThrift(*thrift.rowsAdded_ref(), proto.rowsAdded);
  fromThrift(*thrift.pagesAdded_ref(), proto.pagesAdded);
}

void toThrift(
    const facebook::presto::protocol::PlanNodeId& proto,
    PlanNodeId& thrift) {
  toThrift(proto, *thrift.id_ref());
}
void fromThrift(
    const PlanNodeId& thrift,
    facebook::presto::protocol::PlanNodeId& proto) {
  fromThrift(*thrift.id_ref(), proto);
}
void toThrift(
    const facebook::presto::protocol::DistributionSnapshot& proto,
    DistributionSnapshot& thrift) {
  toThrift(proto.maxError, *thrift.maxError_ref());
  toThrift(proto.count, *thrift.count_ref());
  toThrift(proto.total, *thrift.total_ref());
  toThrift(proto.p01, *thrift.p01_ref());
  toThrift(proto.p05, *thrift.p05_ref());
  toThrift(proto.p10, *thrift.p10_ref());
  toThrift(proto.p25, *thrift.p25_ref());
  toThrift(proto.p50, *thrift.p50_ref());
  toThrift(proto.p75, *thrift.p75_ref());
  toThrift(proto.p90, *thrift.p90_ref());
  toThrift(proto.p95, *thrift.p95_ref());
  toThrift(proto.p99, *thrift.p99_ref());
  toThrift(proto.min, *thrift.min_ref());
  toThrift(proto.max, *thrift.max_ref());
  toThrift(proto.avg, *thrift.avg_ref());
}
void fromThrift(
    const DistributionSnapshot& thrift,
    facebook::presto::protocol::DistributionSnapshot& proto) {
  fromThrift(*thrift.maxError_ref(), proto.maxError);
  fromThrift(*thrift.count_ref(), proto.count);
  fromThrift(*thrift.total_ref(), proto.total);
  fromThrift(*thrift.p01_ref(), proto.p01);
  fromThrift(*thrift.p05_ref(), proto.p05);
  fromThrift(*thrift.p10_ref(), proto.p10);
  fromThrift(*thrift.p25_ref(), proto.p25);
  fromThrift(*thrift.p50_ref(), proto.p50);
  fromThrift(*thrift.p75_ref(), proto.p75);
  fromThrift(*thrift.p90_ref(), proto.p90);
  fromThrift(*thrift.p95_ref(), proto.p95);
  fromThrift(*thrift.p99_ref(), proto.p99);
  fromThrift(*thrift.min_ref(), proto.min);
  fromThrift(*thrift.max_ref(), proto.max);
  fromThrift(*thrift.avg_ref(), proto.avg);
}

void toThrift(
    const facebook::presto::protocol::RuntimeStats& proto,
    RuntimeStats& thrift) {
  toThrift(proto, *thrift.metrics_ref());
}
void fromThrift(
    const RuntimeStats& thrift,
    facebook::presto::protocol::RuntimeStats& proto) {
  fromThrift(*thrift.metrics_ref(), proto);
}
void toThrift(
    const facebook::presto::protocol::DynamicFilterStats& proto,
    DynamicFilterStats& thrift) {
  toThrift(proto.producerNodeIds, *thrift.producerNodeIds_ref());
}
void fromThrift(
    const DynamicFilterStats& thrift,
    facebook::presto::protocol::DynamicFilterStats& proto) {
  fromThrift(*thrift.producerNodeIds_ref(), proto.producerNodeIds);
}

void toThrift(
    const facebook::presto::protocol::DriverStats& proto,
    DriverStats& thrift) {
  toThrift(proto.lifespan, *thrift.lifespan_ref());
  toThrift(proto.createTimeInMillis, *thrift.createTimeInMillis_ref());
  toThrift(proto.startTimeInMillis, *thrift.startTimeInMillis_ref());
  toThrift(proto.endTimeInMillis, *thrift.endTimeInMillis_ref());
  toThrift(proto.queuedTime, *thrift.queuedTime_ref());
  toThrift(proto.elapsedTime, *thrift.elapsedTime_ref());
  toThrift(
      proto.userMemoryReservationInBytes,
      *thrift.userMemoryReservationInBytes_ref());
  toThrift(
      proto.revocableMemoryReservationInBytes,
      *thrift.revocableMemoryReservationInBytes_ref());
  toThrift(
      proto.systemMemoryReservationInBytes,
      *thrift.systemMemoryReservationInBytes_ref());
  toThrift(proto.totalScheduledTime, *thrift.totalScheduledTime_ref());
  toThrift(proto.totalCpuTime, *thrift.totalCpuTime_ref());
  toThrift(proto.totalBlockedTime, *thrift.totalBlockedTime_ref());
  toThrift(proto.fullyBlocked, *thrift.fullyBlocked_ref());
  toThrift(proto.blockedReasons, *thrift.blockedReasons_ref());
  toThrift(proto.totalAllocationInBytes, *thrift.totalAllocationInBytes_ref());
  toThrift(
      proto.rawInputDataSizeInBytes, *thrift.rawInputDataSizeInBytes_ref());
  toThrift(proto.rawInputReadTime, *thrift.rawInputReadTime_ref());
  toThrift(proto.rawInputPositions, *thrift.rawInputPositions_ref());
  toThrift(
      proto.processedInputDataSizeInBytes,
      *thrift.processedInputDataSizeInBytes_ref());
  toThrift(
      proto.processedInputPositions, *thrift.processedInputPositions_ref());
  toThrift(proto.outputDataSizeInBytes, *thrift.outputDataSizeInBytes_ref());
  toThrift(proto.outputPositions, *thrift.outputPositions_ref());
  toThrift(
      proto.physicalWrittenDataSizeInBytes,
      *thrift.physicalWrittenDataSizeInBytes_ref());
  toThrift(proto.operatorStats, *thrift.operatorStats_ref());
}
void fromThrift(
    const DriverStats& thrift,
    facebook::presto::protocol::DriverStats& proto) {
  fromThrift(*thrift.lifespan_ref(), proto.lifespan);
  fromThrift(*thrift.createTimeInMillis_ref(), proto.createTimeInMillis);
  fromThrift(*thrift.startTimeInMillis_ref(), proto.startTimeInMillis);
  fromThrift(*thrift.endTimeInMillis_ref(), proto.endTimeInMillis);
  fromThrift(*thrift.queuedTime_ref(), proto.queuedTime);
  fromThrift(*thrift.elapsedTime_ref(), proto.elapsedTime);
  fromThrift(
      *thrift.userMemoryReservationInBytes_ref(),
      proto.userMemoryReservationInBytes);
  fromThrift(
      *thrift.revocableMemoryReservationInBytes_ref(),
      proto.revocableMemoryReservationInBytes);
  fromThrift(
      *thrift.systemMemoryReservationInBytes_ref(),
      proto.systemMemoryReservationInBytes);
  fromThrift(*thrift.totalScheduledTime_ref(), proto.totalScheduledTime);
  fromThrift(*thrift.totalCpuTime_ref(), proto.totalCpuTime);
  fromThrift(*thrift.totalBlockedTime_ref(), proto.totalBlockedTime);
  fromThrift(*thrift.fullyBlocked_ref(), proto.fullyBlocked);
  fromThrift(*thrift.blockedReasons_ref(), proto.blockedReasons);
  fromThrift(
      *thrift.totalAllocationInBytes_ref(), proto.totalAllocationInBytes);
  fromThrift(
      *thrift.rawInputDataSizeInBytes_ref(), proto.rawInputDataSizeInBytes);
  fromThrift(*thrift.rawInputReadTime_ref(), proto.rawInputReadTime);
  fromThrift(*thrift.rawInputPositions_ref(), proto.rawInputPositions);
  fromThrift(
      *thrift.processedInputDataSizeInBytes_ref(),
      proto.processedInputDataSizeInBytes);
  fromThrift(
      *thrift.processedInputPositions_ref(), proto.processedInputPositions);
  fromThrift(*thrift.outputDataSizeInBytes_ref(), proto.outputDataSizeInBytes);
  fromThrift(*thrift.outputPositions_ref(), proto.outputPositions);
  fromThrift(
      *thrift.physicalWrittenDataSizeInBytes_ref(),
      proto.physicalWrittenDataSizeInBytes);
  fromThrift(*thrift.operatorStats_ref(), proto.operatorStats);
}

void toThrift(
    const facebook::presto::protocol::TransactionId& proto,
    TransactionId& thrift) {
  toThrift(proto, *thrift.uuid_ref());
}
void fromThrift(
    const TransactionId& thrift,
    facebook::presto::protocol::TransactionId& proto) {
  fromThrift(*thrift.uuid_ref(), proto);
}
void toThrift(
    const facebook::presto::protocol::TimeZoneKey& proto,
    TimeZoneKey& thrift) {
  toThrift(proto, *thrift.timeZoneKey_ref());
}
void fromThrift(
    const TimeZoneKey& thrift,
    facebook::presto::protocol::TimeZoneKey& proto) {
  fromThrift(*thrift.timeZoneKey_ref(), proto);
}
void toThrift(
    const facebook::presto::protocol::ResourceEstimates& proto,
    ResourceEstimates& thrift) {
  toThrift(proto.executionTime, thrift.executionTime_ref());
  toThrift(proto.cpuTime, thrift.cpuTime_ref());
  toThrift(proto.peakMemory, thrift.peakMemory_ref());
  toThrift(proto.peakTaskMemory, thrift.peakTaskMemory_ref());
}
void fromThrift(
    const ResourceEstimates& thrift,
    facebook::presto::protocol::ResourceEstimates& proto) {
  fromThrift(thrift.executionTime_ref(), proto.executionTime);
  fromThrift(thrift.cpuTime_ref(), proto.cpuTime);
  fromThrift(thrift.peakMemory_ref(), proto.peakMemory);
  fromThrift(thrift.peakTaskMemory_ref(), proto.peakTaskMemory);
}

void toThrift(
    const facebook::presto::protocol::ConnectorId& proto,
    ConnectorId& thrift) {
  toThrift(proto, *thrift.catalogName_ref());
}
void fromThrift(
    const ConnectorId& thrift,
    facebook::presto::protocol::ConnectorId& proto) {
  fromThrift(*thrift.catalogName_ref(), proto);
}
void toThrift(
    const facebook::presto::protocol::SqlFunctionId& proto,
    SqlFunctionId& thrift) {
  toThrift(proto, *thrift.signature_ref());
}
void fromThrift(
    const SqlFunctionId& thrift,
    facebook::presto::protocol::SqlFunctionId& proto) {
  fromThrift(*thrift.signature_ref(), proto);
}
void toThrift(
    const facebook::presto::protocol::TypeSignature& proto,
    TypeSignature& thrift) {
  toThrift(proto, *thrift.signature_ref());
}
void fromThrift(
    const TypeSignature& thrift,
    facebook::presto::protocol::TypeSignature& proto) {
  fromThrift(*thrift.signature_ref(), proto);
}
void toThrift(
    const facebook::presto::protocol::Language& proto,
    Language& thrift) {
  toThrift(proto.language, *thrift.language_ref());
}
void fromThrift(
    const Language& thrift,
    facebook::presto::protocol::Language& proto) {
  fromThrift(*thrift.language_ref(), proto.language);
}

void toThrift(
    const facebook::presto::protocol::QualifiedObjectName& proto,
    QualifiedObjectName& thrift) {
  std::vector<std::string> parts;
  folly::split(".", proto, parts);
  if (parts.size() == 3) {
    thrift.catalogName_ref() = parts[0];
    thrift.schemaName_ref() = parts[1];
    thrift.objectName_ref() = parts[2];
  }
}
void fromThrift(
    const QualifiedObjectName& thrift,
    facebook::presto::protocol::QualifiedObjectName& proto) {
  std::string qualifiedObjectNameStr = *thrift.catalogName_ref() + "." +
      *thrift.schemaName_ref() + "." + *thrift.objectName_ref();
  fromThrift(qualifiedObjectNameStr, proto);
}
void toThrift(
    const facebook::presto::protocol::TypeVariableConstraint& proto,
    TypeVariableConstraint& thrift) {
  toThrift(proto.name, *thrift.name_ref());
  toThrift(proto.comparableRequired, *thrift.comparableRequired_ref());
  toThrift(proto.orderableRequired, *thrift.orderableRequired_ref());
  toThrift(proto.variadicBound, *thrift.variadicBound_ref());
  toThrift(
      proto.nonDecimalNumericRequired, *thrift.nonDecimalNumericRequired_ref());
}
void fromThrift(
    const TypeVariableConstraint& thrift,
    facebook::presto::protocol::TypeVariableConstraint& proto) {
  fromThrift(*thrift.name_ref(), proto.name);
  fromThrift(*thrift.comparableRequired_ref(), proto.comparableRequired);
  fromThrift(*thrift.orderableRequired_ref(), proto.orderableRequired);
  fromThrift(*thrift.variadicBound_ref(), proto.variadicBound);
  fromThrift(
      *thrift.nonDecimalNumericRequired_ref(), proto.nonDecimalNumericRequired);
}

void toThrift(
    const facebook::presto::protocol::LongVariableConstraint& proto,
    LongVariableConstraint& thrift) {
  toThrift(proto.name, *thrift.name_ref());
  toThrift(proto.expression, *thrift.expression_ref());
}
void fromThrift(
    const LongVariableConstraint& thrift,
    facebook::presto::protocol::LongVariableConstraint& proto) {
  fromThrift(*thrift.name_ref(), proto.name);
  fromThrift(*thrift.expression_ref(), proto.expression);
}

void toThrift(
    const facebook::presto::protocol::TaskSource& proto,
    TaskSource& thrift) {
  toThrift(proto.planNodeId, *thrift.planNodeId_ref());
  toThrift(proto.splits, *thrift.splits_ref());
  toThrift(
      proto.noMoreSplitsForLifespan, *thrift.noMoreSplitsForLifespan_ref());
  toThrift(proto.noMoreSplits, *thrift.noMoreSplits_ref());
}
void fromThrift(
    const TaskSource& thrift,
    facebook::presto::protocol::TaskSource& proto) {
  fromThrift(*thrift.planNodeId_ref(), proto.planNodeId);
  fromThrift(*thrift.splits_ref(), proto.splits);
  fromThrift(
      *thrift.noMoreSplitsForLifespan_ref(), proto.noMoreSplitsForLifespan);
  fromThrift(*thrift.noMoreSplits_ref(), proto.noMoreSplits);
}

void toThrift(
    const facebook::presto::protocol::SplitContext& proto,
    SplitContext& thrift) {
  toThrift(proto.cacheable, *thrift.cacheable_ref());
}
void fromThrift(
    const SplitContext& thrift,
    facebook::presto::protocol::SplitContext& proto) {
  fromThrift(*thrift.cacheable_ref(), proto.cacheable);
}

void toThrift(
    const facebook::presto::protocol::OutputTableHandle& proto,
    OutputTableHandle& thrift) {
  toThrift(proto.connectorId, *thrift.connectorId_ref());
  toThrift(proto.transactionHandle, *thrift.transactionHandle_ref());
  toThrift(proto.connectorHandle, *thrift.connectorHandle_ref());
}
void fromThrift(
    const OutputTableHandle& thrift,
    facebook::presto::protocol::OutputTableHandle& proto) {
  fromThrift(*thrift.connectorId_ref(), proto.connectorId);
  fromThrift(*thrift.transactionHandle_ref(), proto.transactionHandle);
  fromThrift(*thrift.connectorHandle_ref(), proto.connectorHandle);
}

void toThrift(
    const facebook::presto::protocol::SchemaTableName& proto,
    SchemaTableName& thrift) {
  toThrift(proto.schema, *thrift.schema_ref());
  toThrift(proto.table, *thrift.table_ref());
}
void fromThrift(
    const SchemaTableName& thrift,
    facebook::presto::protocol::SchemaTableName& proto) {
  fromThrift(*thrift.schema_ref(), proto.schema);
  fromThrift(*thrift.table_ref(), proto.table);
}

void toThrift(
    const facebook::presto::protocol::InsertTableHandle& proto,
    InsertTableHandle& thrift) {
  toThrift(proto.connectorId, *thrift.connectorId_ref());
  toThrift(proto.transactionHandle, *thrift.transactionHandle_ref());
  toThrift(proto.connectorHandle, *thrift.connectorHandle_ref());
}
void fromThrift(
    const InsertTableHandle& thrift,
    facebook::presto::protocol::InsertTableHandle& proto) {
  fromThrift(*thrift.connectorId_ref(), proto.connectorId);
  fromThrift(*thrift.transactionHandle_ref(), proto.transactionHandle);
  fromThrift(*thrift.connectorHandle_ref(), proto.connectorHandle);
}

void toThrift(
    const facebook::presto::protocol::DeleteTableHandle& proto,
    DeleteTableHandle& thrift) {
  toThrift(proto.connectorId, *thrift.connectorId_ref());
  toThrift(proto.transactionHandle, *thrift.transactionHandle_ref());
  toThrift(proto.connectorHandle, *thrift.connectorHandle_ref());
}
void fromThrift(
    const DeleteTableHandle& thrift,
    facebook::presto::protocol::DeleteTableHandle& proto) {
  fromThrift(*thrift.connectorId_ref(), proto.connectorId);
  fromThrift(*thrift.transactionHandle_ref(), proto.transactionHandle);
  fromThrift(*thrift.connectorHandle_ref(), proto.connectorHandle);
}

void toThrift(
    const facebook::presto::protocol::RefreshMaterializedViewHandle& proto,
    RefreshMaterializedViewHandle& thrift) {
  toThrift(proto.handle, *thrift.handle_ref());
  toThrift(proto.schemaTableName, *thrift.schemaTableName_ref());
}
void fromThrift(
    const RefreshMaterializedViewHandle& thrift,
    facebook::presto::protocol::InsertHandle& proto) {
  fromThrift(*thrift.handle_ref(), proto.handle);
  fromThrift(*thrift.schemaTableName_ref(), proto.schemaTableName);
}

void toThrift(
    const facebook::presto::protocol::TableHandle& proto,
    TableHandle& thrift) {
  toThrift(proto.connectorId, *thrift.connectorId_ref());
  toThrift(proto.connectorHandle, *thrift.connectorHandle_ref());
  toThrift(proto.transaction, *thrift.transaction_ref());
  toThrift(proto.connectorTableLayout, *thrift.connectorTableLayout_ref());
}
void fromThrift(
    const TableHandle& thrift,
    facebook::presto::protocol::TableHandle& proto) {
  fromThrift(*thrift.connectorId_ref(), proto.connectorId);
  fromThrift(*thrift.connectorHandle_ref(), proto.connectorHandle);
  fromThrift(*thrift.transaction_ref(), proto.transaction);
  fromThrift(*thrift.connectorTableLayout_ref(), proto.connectorTableLayout);
}

void toThrift(
    const facebook::presto::protocol::AnalyzeTableHandle& proto,
    AnalyzeTableHandle& thrift) {
  toThrift(proto.connectorId, *thrift.connectorId_ref());
  toThrift(proto.transactionHandle, *thrift.transactionHandle_ref());
  toThrift(proto.connectorHandle, *thrift.connectorHandle_ref());
}
void fromThrift(
    const AnalyzeTableHandle& thrift,
    facebook::presto::protocol::AnalyzeTableHandle& proto) {
  fromThrift(*thrift.connectorId_ref(), proto.connectorId);
  fromThrift(*thrift.transactionHandle_ref(), proto.transactionHandle);
  fromThrift(*thrift.connectorHandle_ref(), proto.connectorHandle);
}

void toThrift(
    const facebook::presto::protocol::Location& proto,
    Location& thrift) {
  toThrift(proto.location, *thrift.location_ref());
}
void fromThrift(
    const Location& thrift,
    facebook::presto::protocol::Location& proto) {
  fromThrift(*thrift.location_ref(), proto.location);
}

void toThrift(
    const facebook::presto::protocol::TaskStatus& proto,
    TaskStatus& thrift) {
  toThrift(
      proto.taskInstanceIdLeastSignificantBits,
      *thrift.taskInstanceIdLeastSignificantBits_ref());
  toThrift(
      proto.taskInstanceIdMostSignificantBits,
      *thrift.taskInstanceIdMostSignificantBits_ref());
  toThrift(proto.version, *thrift.version_ref());
  toThrift(proto.state, *thrift.state_ref());
  toThrift(proto.self, *thrift.selfUri_ref());
  toThrift(proto.completedDriverGroups, *thrift.completedDriverGroups_ref());
  toThrift(proto.failures, *thrift.failures_ref());
  toThrift(
      proto.queuedPartitionedDrivers, *thrift.queuedPartitionedDrivers_ref());
  toThrift(
      proto.runningPartitionedDrivers, *thrift.runningPartitionedDrivers_ref());
  toThrift(
      proto.outputBufferUtilization, *thrift.outputBufferUtilization_ref());
  toThrift(
      proto.outputBufferOverutilized, *thrift.outputBufferOverutilized_ref());
  toThrift(
      proto.physicalWrittenDataSizeInBytes,
      *thrift.physicalWrittenDataSizeInBytes_ref());
  toThrift(
      proto.memoryReservationInBytes, *thrift.memoryReservationInBytes_ref());
  toThrift(
      proto.systemMemoryReservationInBytes,
      *thrift.systemMemoryReservationInBytes_ref());
  toThrift(proto.fullGcCount, *thrift.fullGcCount_ref());
  toThrift(proto.fullGcTimeInMillis, *thrift.fullGcTimeInMillis_ref());
  toThrift(
      proto.peakNodeTotalMemoryReservationInBytes,
      *thrift.peakNodeTotalMemoryReservationInBytes_ref());
  toThrift(proto.totalCpuTimeInNanos, *thrift.totalCpuTimeInNanos_ref());
  toThrift(proto.taskAgeInMillis, *thrift.taskAgeInMillis_ref());
  toThrift(
      proto.queuedPartitionedSplitsWeight,
      *thrift.queuedPartitionedSplitsWeight_ref());
  toThrift(
      proto.runningPartitionedSplitsWeight,
      *thrift.runningPartitionedSplitsWeight_ref());
}
void fromThrift(
    const TaskStatus& thrift,
    facebook::presto::protocol::TaskStatus& proto) {
  fromThrift(
      *thrift.taskInstanceIdLeastSignificantBits_ref(),
      proto.taskInstanceIdLeastSignificantBits);
  fromThrift(
      *thrift.taskInstanceIdMostSignificantBits_ref(),
      proto.taskInstanceIdMostSignificantBits);
  fromThrift(*thrift.version_ref(), proto.version);
  fromThrift(*thrift.state_ref(), proto.state);
  fromThrift(*thrift.selfUri_ref(), proto.self);
  fromThrift(*thrift.completedDriverGroups_ref(), proto.completedDriverGroups);
  fromThrift(*thrift.failures_ref(), proto.failures);
  fromThrift(
      *thrift.queuedPartitionedDrivers_ref(), proto.queuedPartitionedDrivers);
  fromThrift(
      *thrift.runningPartitionedDrivers_ref(), proto.runningPartitionedDrivers);
  fromThrift(
      *thrift.outputBufferUtilization_ref(), proto.outputBufferUtilization);
  fromThrift(
      *thrift.outputBufferOverutilized_ref(), proto.outputBufferOverutilized);
  fromThrift(
      *thrift.physicalWrittenDataSizeInBytes_ref(),
      proto.physicalWrittenDataSizeInBytes);
  fromThrift(
      *thrift.memoryReservationInBytes_ref(), proto.memoryReservationInBytes);
  fromThrift(
      *thrift.systemMemoryReservationInBytes_ref(),
      proto.systemMemoryReservationInBytes);
  fromThrift(*thrift.fullGcCount_ref(), proto.fullGcCount);
  fromThrift(*thrift.fullGcTimeInMillis_ref(), proto.fullGcTimeInMillis);
  fromThrift(
      *thrift.peakNodeTotalMemoryReservationInBytes_ref(),
      proto.peakNodeTotalMemoryReservationInBytes);
  fromThrift(*thrift.totalCpuTimeInNanos_ref(), proto.totalCpuTimeInNanos);
  fromThrift(*thrift.taskAgeInMillis_ref(), proto.taskAgeInMillis);
  fromThrift(
      *thrift.queuedPartitionedSplitsWeight_ref(),
      proto.queuedPartitionedSplitsWeight);
  fromThrift(
      *thrift.runningPartitionedSplitsWeight_ref(),
      proto.runningPartitionedSplitsWeight);
}

void toThrift(
    const facebook::presto::protocol::ErrorCode& proto,
    ErrorCode& thrift) {
  toThrift(proto.code, *thrift.code_ref());
  toThrift(proto.name, *thrift.name_ref());
  toThrift(proto.type, *thrift.type_ref());
  toThrift(proto.retriable, *thrift.retriable_ref());
}
void fromThrift(
    const ErrorCode& thrift,
    facebook::presto::protocol::ErrorCode& proto) {
  fromThrift(*thrift.code_ref(), proto.code);
  fromThrift(*thrift.name_ref(), proto.name);
  fromThrift(*thrift.type_ref(), proto.type);
  fromThrift(*thrift.retriable_ref(), proto.retriable);
}

void toThrift(
    const facebook::presto::protocol::OutputBufferInfo& proto,
    OutputBufferInfo& thrift) {
  toThrift(proto.type, *thrift.type_ref());
  toThrift(proto.state, *thrift.state_ref());
  toThrift(proto.buffers, *thrift.buffers_ref());
  toThrift(proto.canAddBuffers, *thrift.canAddBuffers_ref());
  toThrift(proto.canAddPages, *thrift.canAddPages_ref());
  toThrift(proto.totalBufferedBytes, *thrift.totalBufferedBytes_ref());
  toThrift(proto.totalBufferedPages, *thrift.totalBufferedPages_ref());
  toThrift(proto.totalRowsSent, *thrift.totalRowsSent_ref());
  toThrift(proto.totalPagesSent, *thrift.totalPagesSent_ref());
}
void fromThrift(
    const OutputBufferInfo& thrift,
    facebook::presto::protocol::OutputBufferInfo& proto) {
  fromThrift(*thrift.type_ref(), proto.type);
  fromThrift(*thrift.state_ref(), proto.state);
  fromThrift(*thrift.buffers_ref(), proto.buffers);
  fromThrift(*thrift.canAddBuffers_ref(), proto.canAddBuffers);
  fromThrift(*thrift.canAddPages_ref(), proto.canAddPages);
  fromThrift(*thrift.totalBufferedBytes_ref(), proto.totalBufferedBytes);
  fromThrift(*thrift.totalBufferedPages_ref(), proto.totalBufferedPages);
  fromThrift(*thrift.totalRowsSent_ref(), proto.totalRowsSent);
  fromThrift(*thrift.totalPagesSent_ref(), proto.totalPagesSent);
}

void toThrift(
    const facebook::presto::protocol::BufferInfo& proto,
    BufferInfo& thrift) {
  toThrift(proto.bufferId, *thrift.bufferId_ref());
  toThrift(proto.finished, *thrift.finished_ref());
  toThrift(proto.bufferedPages, *thrift.bufferedPages_ref());
  toThrift(proto.pagesSent, *thrift.pagesSent_ref());
  toThrift(proto.pageBufferInfo, *thrift.pageBufferInfo_ref());
}
void fromThrift(
    const BufferInfo& thrift,
    facebook::presto::protocol::BufferInfo& proto) {
  fromThrift(*thrift.bufferId_ref(), proto.bufferId);
  fromThrift(*thrift.finished_ref(), proto.finished);
  fromThrift(*thrift.bufferedPages_ref(), proto.bufferedPages);
  fromThrift(*thrift.pagesSent_ref(), proto.pagesSent);
  fromThrift(*thrift.pageBufferInfo_ref(), proto.pageBufferInfo);
}

void toThrift(
    const facebook::presto::protocol::TaskStats& proto,
    TaskStats& thrift) {
  toThrift(proto.createTimeInMillis, *thrift.createTimeInMillis_ref());
  toThrift(proto.firstStartTimeInMillis, *thrift.firstStartTimeInMillis_ref());
  toThrift(proto.lastStartTimeInMillis, *thrift.lastStartTimeInMillis_ref());
  toThrift(proto.lastEndTimeInMillis, *thrift.lastEndTimeInMillis_ref());
  toThrift(proto.endTimeInMillis, *thrift.endTimeInMillis_ref());
  toThrift(proto.elapsedTimeInNanos, *thrift.elapsedTimeInNanos_ref());
  toThrift(proto.queuedTimeInNanos, *thrift.queuedTimeInNanos_ref());
  toThrift(proto.totalDrivers, *thrift.totalDrivers_ref());
  toThrift(proto.queuedDrivers, *thrift.queuedDrivers_ref());
  toThrift(proto.runningDrivers, *thrift.runningDrivers_ref());
  toThrift(proto.blockedDrivers, *thrift.blockedDrivers_ref());
  toThrift(proto.completedDrivers, *thrift.completedDrivers_ref());
  toThrift(proto.cumulativeUserMemory, *thrift.cumulativeUserMemory_ref());
  toThrift(proto.cumulativeTotalMemory, *thrift.cumulativeTotalMemory_ref());
  toThrift(
      proto.userMemoryReservationInBytes,
      *thrift.userMemoryReservationInBytes_ref());
  toThrift(
      proto.revocableMemoryReservationInBytes,
      *thrift.revocableMemoryReservationInBytes_ref());
  toThrift(
      proto.systemMemoryReservationInBytes,
      *thrift.systemMemoryReservationInBytes_ref());
  toThrift(proto.peakUserMemoryInBytes, *thrift.peakUserMemoryInBytes_ref());
  toThrift(proto.peakTotalMemoryInBytes, *thrift.peakTotalMemoryInBytes_ref());
  toThrift(
      proto.peakNodeTotalMemoryInBytes,
      *thrift.peakNodeTotalMemoryInBytes_ref());
  toThrift(
      proto.totalScheduledTimeInNanos, *thrift.totalScheduledTimeInNanos_ref());
  toThrift(proto.totalCpuTimeInNanos, *thrift.totalCpuTimeInNanos_ref());
  toThrift(
      proto.totalBlockedTimeInNanos, *thrift.totalBlockedTimeInNanos_ref());
  toThrift(proto.fullyBlocked, *thrift.fullyBlocked_ref());
  toThrift(proto.blockedReasons, *thrift.blockedReasons_ref());
  toThrift(proto.totalAllocationInBytes, *thrift.totalAllocationInBytes_ref());
  toThrift(
      proto.rawInputDataSizeInBytes, *thrift.rawInputDataSizeInBytes_ref());
  toThrift(proto.rawInputPositions, *thrift.rawInputPositions_ref());
  toThrift(
      proto.processedInputDataSizeInBytes,
      *thrift.processedInputDataSizeInBytes_ref());
  toThrift(
      proto.processedInputPositions, *thrift.processedInputPositions_ref());
  toThrift(proto.outputDataSizeInBytes, *thrift.outputDataSizeInBytes_ref());
  toThrift(proto.outputPositions, *thrift.outputPositions_ref());
  toThrift(
      proto.physicalWrittenDataSizeInBytes,
      *thrift.physicalWrittenDataSizeInBytes_ref());
  toThrift(proto.pipelines, *thrift.pipelines_ref());
  toThrift(
      proto.queuedPartitionedDrivers, *thrift.queuedPartitionedDrivers_ref());
  toThrift(
      proto.queuedPartitionedSplitsWeight,
      *thrift.queuedPartitionedSplitsWeight_ref());
  toThrift(
      proto.runningPartitionedDrivers, *thrift.runningPartitionedDrivers_ref());
  toThrift(
      proto.runningPartitionedSplitsWeight,
      *thrift.runningPartitionedSplitsWeight_ref());
  toThrift(proto.fullGcCount, *thrift.fullGcCount_ref());
  toThrift(proto.fullGcTimeInMillis, *thrift.fullGcTimeInMillis_ref());
  toThrift(proto.runtimeStats, *thrift.runtimeStats_ref());
  toThrift(proto.totalSplits, *thrift.totalSplits_ref());
  toThrift(proto.queuedSplits, *thrift.queuedSplits_ref());
  toThrift(proto.runningSplits, *thrift.runningSplits_ref());
  toThrift(proto.completedSplits, *thrift.completedSplits_ref());
  toThrift(proto.totalNewDrivers, *thrift.totalNewDrivers_ref());
  toThrift(proto.queuedNewDrivers, *thrift.queuedNewDrivers_ref());
  toThrift(proto.runningNewDrivers, *thrift.runningNewDrivers_ref());
  toThrift(proto.completedNewDrivers, *thrift.completedNewDrivers_ref());
}
void fromThrift(
    const TaskStats& thrift,
    facebook::presto::protocol::TaskStats& proto) {
  fromThrift(*thrift.createTimeInMillis_ref(), proto.createTimeInMillis);
  fromThrift(
      *thrift.firstStartTimeInMillis_ref(), proto.firstStartTimeInMillis);
  fromThrift(*thrift.lastStartTimeInMillis_ref(), proto.lastStartTimeInMillis);
  fromThrift(*thrift.lastEndTimeInMillis_ref(), proto.lastEndTimeInMillis);
  fromThrift(*thrift.endTimeInMillis_ref(), proto.endTimeInMillis);
  fromThrift(*thrift.elapsedTimeInNanos_ref(), proto.elapsedTimeInNanos);
  fromThrift(*thrift.queuedTimeInNanos_ref(), proto.queuedTimeInNanos);
  fromThrift(*thrift.totalDrivers_ref(), proto.totalDrivers);
  fromThrift(*thrift.queuedDrivers_ref(), proto.queuedDrivers);
  fromThrift(*thrift.runningDrivers_ref(), proto.runningDrivers);
  fromThrift(*thrift.blockedDrivers_ref(), proto.blockedDrivers);
  fromThrift(*thrift.completedDrivers_ref(), proto.completedDrivers);
  fromThrift(*thrift.cumulativeUserMemory_ref(), proto.cumulativeUserMemory);
  fromThrift(*thrift.cumulativeTotalMemory_ref(), proto.cumulativeTotalMemory);
  fromThrift(
      *thrift.userMemoryReservationInBytes_ref(),
      proto.userMemoryReservationInBytes);
  fromThrift(
      *thrift.revocableMemoryReservationInBytes_ref(),
      proto.revocableMemoryReservationInBytes);
  fromThrift(
      *thrift.systemMemoryReservationInBytes_ref(),
      proto.systemMemoryReservationInBytes);
  fromThrift(*thrift.peakUserMemoryInBytes_ref(), proto.peakUserMemoryInBytes);
  fromThrift(
      *thrift.peakTotalMemoryInBytes_ref(), proto.peakTotalMemoryInBytes);
  fromThrift(
      *thrift.peakNodeTotalMemoryInBytes_ref(),
      proto.peakNodeTotalMemoryInBytes);
  fromThrift(
      *thrift.totalScheduledTimeInNanos_ref(), proto.totalScheduledTimeInNanos);
  fromThrift(*thrift.totalCpuTimeInNanos_ref(), proto.totalCpuTimeInNanos);
  fromThrift(
      *thrift.totalBlockedTimeInNanos_ref(), proto.totalBlockedTimeInNanos);
  fromThrift(*thrift.fullyBlocked_ref(), proto.fullyBlocked);
  fromThrift(*thrift.blockedReasons_ref(), proto.blockedReasons);
  fromThrift(
      *thrift.totalAllocationInBytes_ref(), proto.totalAllocationInBytes);
  fromThrift(
      *thrift.rawInputDataSizeInBytes_ref(), proto.rawInputDataSizeInBytes);
  fromThrift(*thrift.rawInputPositions_ref(), proto.rawInputPositions);
  fromThrift(
      *thrift.processedInputDataSizeInBytes_ref(),
      proto.processedInputDataSizeInBytes);
  fromThrift(
      *thrift.processedInputPositions_ref(), proto.processedInputPositions);
  fromThrift(*thrift.outputDataSizeInBytes_ref(), proto.outputDataSizeInBytes);
  fromThrift(*thrift.outputPositions_ref(), proto.outputPositions);
  fromThrift(
      *thrift.physicalWrittenDataSizeInBytes_ref(),
      proto.physicalWrittenDataSizeInBytes);
  fromThrift(*thrift.pipelines_ref(), proto.pipelines);
  fromThrift(
      *thrift.queuedPartitionedDrivers_ref(), proto.queuedPartitionedDrivers);
  fromThrift(
      *thrift.queuedPartitionedSplitsWeight_ref(),
      proto.queuedPartitionedSplitsWeight);
  fromThrift(
      *thrift.runningPartitionedDrivers_ref(), proto.runningPartitionedDrivers);
  fromThrift(
      *thrift.runningPartitionedSplitsWeight_ref(),
      proto.runningPartitionedSplitsWeight);
  fromThrift(*thrift.fullGcCount_ref(), proto.fullGcCount);
  fromThrift(*thrift.fullGcTimeInMillis_ref(), proto.fullGcTimeInMillis);
  fromThrift(*thrift.runtimeStats_ref(), proto.runtimeStats);
  fromThrift(*thrift.totalSplits_ref(), proto.totalSplits);
  fromThrift(*thrift.queuedSplits_ref(), proto.queuedSplits);
  fromThrift(*thrift.runningSplits_ref(), proto.runningSplits);
  fromThrift(*thrift.completedSplits_ref(), proto.completedSplits);
  fromThrift(*thrift.totalNewDrivers_ref(), proto.totalNewDrivers);
  fromThrift(*thrift.queuedNewDrivers_ref(), proto.queuedNewDrivers);
  fromThrift(*thrift.runningNewDrivers_ref(), proto.runningNewDrivers);
  fromThrift(*thrift.completedNewDrivers_ref(), proto.completedNewDrivers);
}

void toThrift(
    const facebook::presto::protocol::PipelineStats& proto,
    PipelineStats& thrift) {
  toThrift(proto.pipelineId, *thrift.pipelineId_ref());
  toThrift(proto.firstStartTimeInMillis, *thrift.firstStartTimeInMillis_ref());
  toThrift(proto.lastStartTimeInMillis, *thrift.lastStartTimeInMillis_ref());
  toThrift(proto.lastEndTimeInMillis, *thrift.lastEndTimeInMillis_ref());
  toThrift(proto.inputPipeline, *thrift.inputPipeline_ref());
  toThrift(proto.outputPipeline, *thrift.outputPipeline_ref());
  toThrift(proto.totalDrivers, *thrift.totalDrivers_ref());
  toThrift(proto.queuedDrivers, *thrift.queuedDrivers_ref());
  toThrift(
      proto.queuedPartitionedDrivers, *thrift.queuedPartitionedDrivers_ref());
  toThrift(
      proto.queuedPartitionedSplitsWeight,
      *thrift.queuedPartitionedSplitsWeight_ref());
  toThrift(proto.runningDrivers, *thrift.runningDrivers_ref());
  toThrift(
      proto.runningPartitionedDrivers, *thrift.runningPartitionedDrivers_ref());
  toThrift(
      proto.runningPartitionedSplitsWeight,
      *thrift.runningPartitionedSplitsWeight_ref());
  toThrift(proto.blockedDrivers, *thrift.blockedDrivers_ref());
  toThrift(proto.completedDrivers, *thrift.completedDrivers_ref());
  toThrift(
      proto.userMemoryReservationInBytes,
      *thrift.userMemoryReservationInBytes_ref());
  toThrift(
      proto.revocableMemoryReservationInBytes,
      *thrift.revocableMemoryReservationInBytes_ref());
  toThrift(
      proto.systemMemoryReservationInBytes,
      *thrift.systemMemoryReservationInBytes_ref());
  toThrift(proto.queuedTime, *thrift.queuedTime_ref());
  toThrift(proto.elapsedTime, *thrift.elapsedTime_ref());
  toThrift(
      proto.totalScheduledTimeInNanos, *thrift.totalScheduledTimeInNanos_ref());
  toThrift(proto.totalCpuTimeInNanos, *thrift.totalCpuTimeInNanos_ref());
  toThrift(
      proto.totalBlockedTimeInNanos, *thrift.totalBlockedTimeInNanos_ref());
  toThrift(proto.fullyBlocked, *thrift.fullyBlocked_ref());
  toThrift(proto.blockedReasons, *thrift.blockedReasons_ref());
  toThrift(proto.totalAllocationInBytes, *thrift.totalAllocationInBytes_ref());
  toThrift(
      proto.rawInputDataSizeInBytes, *thrift.rawInputDataSizeInBytes_ref());
  toThrift(proto.rawInputPositions, *thrift.rawInputPositions_ref());
  toThrift(
      proto.processedInputDataSizeInBytes,
      *thrift.processedInputDataSizeInBytes_ref());
  toThrift(
      proto.processedInputPositions, *thrift.processedInputPositions_ref());
  toThrift(proto.outputDataSizeInBytes, *thrift.outputDataSizeInBytes_ref());
  toThrift(proto.outputPositions, *thrift.outputPositions_ref());
  toThrift(
      proto.physicalWrittenDataSizeInBytes,
      *thrift.physicalWrittenDataSizeInBytes_ref());
  toThrift(proto.operatorSummaries, *thrift.operatorSummaries_ref());
  toThrift(proto.drivers, *thrift.drivers_ref());
}
void fromThrift(
    const PipelineStats& thrift,
    facebook::presto::protocol::PipelineStats& proto) {
  fromThrift(*thrift.pipelineId_ref(), proto.pipelineId);
  fromThrift(
      *thrift.firstStartTimeInMillis_ref(), proto.firstStartTimeInMillis);
  fromThrift(*thrift.lastStartTimeInMillis_ref(), proto.lastStartTimeInMillis);
  fromThrift(*thrift.lastEndTimeInMillis_ref(), proto.lastEndTimeInMillis);
  fromThrift(*thrift.inputPipeline_ref(), proto.inputPipeline);
  fromThrift(*thrift.outputPipeline_ref(), proto.outputPipeline);
  fromThrift(*thrift.totalDrivers_ref(), proto.totalDrivers);
  fromThrift(*thrift.queuedDrivers_ref(), proto.queuedDrivers);
  fromThrift(
      *thrift.queuedPartitionedDrivers_ref(), proto.queuedPartitionedDrivers);
  fromThrift(
      *thrift.queuedPartitionedSplitsWeight_ref(),
      proto.queuedPartitionedSplitsWeight);
  fromThrift(*thrift.runningDrivers_ref(), proto.runningDrivers);
  fromThrift(
      *thrift.runningPartitionedDrivers_ref(), proto.runningPartitionedDrivers);
  fromThrift(
      *thrift.runningPartitionedSplitsWeight_ref(),
      proto.runningPartitionedSplitsWeight);
  fromThrift(*thrift.blockedDrivers_ref(), proto.blockedDrivers);
  fromThrift(*thrift.completedDrivers_ref(), proto.completedDrivers);
  fromThrift(
      *thrift.userMemoryReservationInBytes_ref(),
      proto.userMemoryReservationInBytes);
  fromThrift(
      *thrift.revocableMemoryReservationInBytes_ref(),
      proto.revocableMemoryReservationInBytes);
  fromThrift(
      *thrift.systemMemoryReservationInBytes_ref(),
      proto.systemMemoryReservationInBytes);
  fromThrift(*thrift.queuedTime_ref(), proto.queuedTime);
  fromThrift(*thrift.elapsedTime_ref(), proto.elapsedTime);
  fromThrift(
      *thrift.totalScheduledTimeInNanos_ref(), proto.totalScheduledTimeInNanos);
  fromThrift(*thrift.totalCpuTimeInNanos_ref(), proto.totalCpuTimeInNanos);
  fromThrift(
      *thrift.totalBlockedTimeInNanos_ref(), proto.totalBlockedTimeInNanos);
  fromThrift(*thrift.fullyBlocked_ref(), proto.fullyBlocked);
  fromThrift(*thrift.blockedReasons_ref(), proto.blockedReasons);
  fromThrift(
      *thrift.totalAllocationInBytes_ref(), proto.totalAllocationInBytes);
  fromThrift(
      *thrift.rawInputDataSizeInBytes_ref(), proto.rawInputDataSizeInBytes);
  fromThrift(*thrift.rawInputPositions_ref(), proto.rawInputPositions);
  fromThrift(
      *thrift.processedInputDataSizeInBytes_ref(),
      proto.processedInputDataSizeInBytes);
  fromThrift(
      *thrift.processedInputPositions_ref(), proto.processedInputPositions);
  fromThrift(*thrift.outputDataSizeInBytes_ref(), proto.outputDataSizeInBytes);
  fromThrift(*thrift.outputPositions_ref(), proto.outputPositions);
  fromThrift(
      *thrift.physicalWrittenDataSizeInBytes_ref(),
      proto.physicalWrittenDataSizeInBytes);
  fromThrift(*thrift.operatorSummaries_ref(), proto.operatorSummaries);
  fromThrift(*thrift.drivers_ref(), proto.drivers);
}

void toThrift(
    const facebook::presto::protocol::RuntimeMetric& proto,
    RuntimeMetric& thrift) {
  toThrift(proto.name, *thrift.name_ref());
  toThrift(proto.sum, *thrift.sum_ref());
  toThrift(proto.count, *thrift.count_ref());
  toThrift(proto.max, *thrift.max_ref());
  toThrift(proto.min, *thrift.min_ref());
  toThrift(proto.unit, *thrift.unit_ref());
}
void fromThrift(
    const RuntimeMetric& thrift,
    facebook::presto::protocol::RuntimeMetric& proto) {
  fromThrift(*thrift.name_ref(), proto.name);
  fromThrift(*thrift.sum_ref(), proto.sum);
  fromThrift(*thrift.count_ref(), proto.count);
  fromThrift(*thrift.max_ref(), proto.max);
  fromThrift(*thrift.min_ref(), proto.min);
  fromThrift(*thrift.unit_ref(), proto.unit);
}

void toThrift(
    const facebook::presto::protocol::SessionRepresentation& proto,
    SessionRepresentation& thrift) {
  toThrift(proto.queryId, *thrift.queryId_ref());
  toThrift(proto.transactionId, thrift.transactionId_ref());
  toThrift(
      proto.clientTransactionSupport, *thrift.clientTransactionSupport_ref());
  toThrift(proto.user, *thrift.user_ref());
  toThrift(proto.principal, thrift.principal_ref());
  toThrift(proto.source, thrift.source_ref());
  toThrift(proto.catalog, thrift.catalog_ref());
  toThrift(proto.schema, thrift.schema_ref());
  toThrift(proto.traceToken, thrift.traceToken_ref());
  toThrift(proto.timeZoneKey, *thrift.timeZoneKey_ref());
  toThrift(proto.locale, *thrift.locale_ref());
  toThrift(proto.remoteUserAddress, thrift.remoteUserAddress_ref());
  toThrift(proto.userAgent, thrift.userAgent_ref());
  toThrift(proto.clientInfo, thrift.clientInfo_ref());
  toThrift(proto.clientTags, *thrift.clientTags_ref());
  toThrift(proto.resourceEstimates, *thrift.resourceEstimates_ref());
  toThrift(proto.startTime, *thrift.startTime_ref());
  toThrift(proto.systemProperties, *thrift.systemProperties_ref());
  toThrift(proto.catalogProperties, *thrift.catalogProperties_ref());
  toThrift(
      proto.unprocessedCatalogProperties,
      *thrift.unprocessedCatalogProperties_ref());
  toThrift(proto.roles, *thrift.roles_ref());
  toThrift(proto.preparedStatements, *thrift.preparedStatements_ref());
  toThrift(proto.sessionFunctions, *thrift.sessionFunctions_ref());
}
void fromThrift(
    const SessionRepresentation& thrift,
    facebook::presto::protocol::SessionRepresentation& proto) {
  fromThrift(*thrift.queryId_ref(), proto.queryId);
  fromThrift(thrift.transactionId_ref(), proto.transactionId);
  fromThrift(
      *thrift.clientTransactionSupport_ref(), proto.clientTransactionSupport);
  fromThrift(*thrift.user_ref(), proto.user);
  fromThrift(thrift.principal_ref(), proto.principal);
  fromThrift(thrift.source_ref(), proto.source);
  fromThrift(thrift.catalog_ref(), proto.catalog);
  fromThrift(thrift.schema_ref(), proto.schema);
  fromThrift(thrift.traceToken_ref(), proto.traceToken);
  fromThrift(*thrift.timeZoneKey_ref(), proto.timeZoneKey);
  fromThrift(*thrift.locale_ref(), proto.locale);
  fromThrift(thrift.remoteUserAddress_ref(), proto.remoteUserAddress);
  fromThrift(thrift.userAgent_ref(), proto.userAgent);
  fromThrift(thrift.clientInfo_ref(), proto.clientInfo);
  fromThrift(*thrift.clientTags_ref(), proto.clientTags);
  fromThrift(*thrift.resourceEstimates_ref(), proto.resourceEstimates);
  fromThrift(*thrift.startTime_ref(), proto.startTime);
  fromThrift(*thrift.systemProperties_ref(), proto.systemProperties);
  fromThrift(*thrift.catalogProperties_ref(), proto.catalogProperties);
  fromThrift(
      *thrift.unprocessedCatalogProperties_ref(),
      proto.unprocessedCatalogProperties);
  fromThrift(*thrift.roles_ref(), proto.roles);
  fromThrift(*thrift.preparedStatements_ref(), proto.preparedStatements);
  fromThrift(*thrift.sessionFunctions_ref(), proto.sessionFunctions);
}

void toThrift(
    const facebook::presto::protocol::SelectedRole& proto,
    SelectedRole& thrift) {
  toThrift(proto.type, *thrift.type_ref());
  toThrift(proto.role, thrift.role_ref());
}
void fromThrift(
    const SelectedRole& thrift,
    facebook::presto::protocol::SelectedRole& proto) {
  fromThrift(*thrift.type_ref(), proto.type);
  fromThrift(thrift.role_ref(), proto.role);
}

void toThrift(
    const facebook::presto::protocol::Parameter& proto,
    Parameter& thrift) {
  toThrift(proto.name, *thrift.name_ref());
  toThrift(proto.type, *thrift.type_ref());
}
void fromThrift(
    const Parameter& thrift,
    facebook::presto::protocol::Parameter& proto) {
  fromThrift(*thrift.name_ref(), proto.name);
  fromThrift(*thrift.type_ref(), proto.type);
}

void toThrift(
    const facebook::presto::protocol::RoutineCharacteristics& proto,
    RoutineCharacteristics& thrift) {
  toThrift(proto.language, *thrift.language_ref());
  toThrift(proto.determinism, *thrift.determinism_ref());
  toThrift(proto.nullCallClause, *thrift.nullCallClause_ref());
}
void fromThrift(
    const RoutineCharacteristics& thrift,
    facebook::presto::protocol::RoutineCharacteristics& proto) {
  fromThrift(*thrift.language_ref(), proto.language);
  fromThrift(*thrift.determinism_ref(), proto.determinism);
  fromThrift(*thrift.nullCallClause_ref(), proto.nullCallClause);
}

void toThrift(
    const facebook::presto::protocol::Signature& proto,
    Signature& thrift) {
  toThrift(proto.name, *thrift.name_ref());
  toThrift(proto.kind, *thrift.kind_ref());
  toThrift(proto.returnType, *thrift.returnType_ref());
  toThrift(proto.argumentTypes, *thrift.argumentTypes_ref());
  toThrift(proto.variableArity, *thrift.variableArity_ref());
  toThrift(
      proto.typeVariableConstraints, *thrift.typeVariableConstraints_ref());
  toThrift(
      proto.longVariableConstraints, *thrift.longVariableConstraints_ref());
}
void fromThrift(
    const Signature& thrift,
    facebook::presto::protocol::Signature& proto) {
  fromThrift(*thrift.name_ref(), proto.name);
  fromThrift(*thrift.kind_ref(), proto.kind);
  fromThrift(*thrift.returnType_ref(), proto.returnType);
  fromThrift(*thrift.argumentTypes_ref(), proto.argumentTypes);
  fromThrift(*thrift.variableArity_ref(), proto.variableArity);
  fromThrift(
      *thrift.typeVariableConstraints_ref(), proto.typeVariableConstraints);
  fromThrift(
      *thrift.longVariableConstraints_ref(), proto.longVariableConstraints);
}

void toThrift(const facebook::presto::protocol::Split& proto, Split& thrift) {
  toThrift(proto.connectorId, *thrift.connectorId_ref());
  toThrift(proto.transactionHandle, *thrift.transactionHandle_ref());
  toThrift(proto.connectorSplit, *thrift.connectorSplit_ref());
  toThrift(proto.lifespan, *thrift.lifespan_ref());
  toThrift(proto.splitContext, *thrift.splitContext_ref());
}
void fromThrift(const Split& thrift, facebook::presto::protocol::Split& proto) {
  fromThrift(*thrift.connectorId_ref(), proto.connectorId);
  fromThrift(*thrift.transactionHandle_ref(), proto.transactionHandle);
  fromThrift(*thrift.connectorSplit_ref(), proto.connectorSplit);
  fromThrift(*thrift.lifespan_ref(), proto.lifespan);
  fromThrift(*thrift.splitContext_ref(), proto.splitContext);
}

void toThrift(
    const facebook::presto::protocol::OutputBuffers& proto,
    OutputBuffers& thrift) {
  toThrift(proto.type, *thrift.type_ref());
  toThrift(proto.version, *thrift.version_ref());
  toThrift(proto.noMoreBufferIds, *thrift.noMoreBufferIds_ref());
  toThrift(proto.buffers, *thrift.buffers_ref());
}
void fromThrift(
    const OutputBuffers& thrift,
    facebook::presto::protocol::OutputBuffers& proto) {
  fromThrift(*thrift.type_ref(), proto.type);
  fromThrift(*thrift.version_ref(), proto.version);
  fromThrift(*thrift.noMoreBufferIds_ref(), proto.noMoreBufferIds);
  fromThrift(*thrift.buffers_ref(), proto.buffers);
}

void toThrift(
    const facebook::presto::protocol::CreateHandle& proto,
    CreateHandle& thrift) {
  toThrift(proto.handle, *thrift.handle_ref());
  toThrift(proto.schemaTableName, *thrift.schemaTableName_ref());
}
void fromThrift(
    const CreateHandle& thrift,
    facebook::presto::protocol::CreateHandle& proto) {
  fromThrift(*thrift.handle_ref(), proto.handle);
  fromThrift(*thrift.schemaTableName_ref(), proto.schemaTableName);
}

void toThrift(
    const facebook::presto::protocol::InsertHandle& proto,
    InsertHandle& thrift) {
  toThrift(proto.handle, *thrift.handle_ref());
  toThrift(proto.schemaTableName, *thrift.schemaTableName_ref());
}
void fromThrift(
    const InsertHandle& thrift,
    facebook::presto::protocol::InsertHandle& proto) {
  fromThrift(*thrift.handle_ref(), proto.handle);
  fromThrift(*thrift.schemaTableName_ref(), proto.schemaTableName);
}

void toThrift(
    const facebook::presto::protocol::DeleteHandle& proto,
    DeleteHandle& thrift) {
  toThrift(proto.handle, *thrift.handle_ref());
  toThrift(proto.schemaTableName, *thrift.schemaTableName_ref());
}
void fromThrift(
    const DeleteHandle& thrift,
    facebook::presto::protocol::DeleteHandle& proto) {
  fromThrift(*thrift.handle_ref(), proto.handle);
  fromThrift(*thrift.schemaTableName_ref(), proto.schemaTableName);
}

void toThrift(
    const facebook::presto::protocol::UpdateHandle& proto,
    UpdateHandle& thrift) {
  toThrift(proto.handle, *thrift.handle_ref());
  toThrift(proto.schemaTableName, *thrift.schemaTableName_ref());
}
void fromThrift(
    const UpdateHandle& thrift,
    facebook::presto::protocol::UpdateHandle& proto) {
  fromThrift(*thrift.handle_ref(), proto.handle);
  fromThrift(*thrift.schemaTableName_ref(), proto.schemaTableName);
}

void toThrift(
    const facebook::presto::protocol::ExecutionFailureInfo& proto,
    ExecutionFailureInfo& thrift) {
  toThrift(proto.type, *thrift.type_ref());
  toThrift(proto.message, *thrift.message_ref());
  toThrift(proto.cause, thrift.cause_ref());
  toThrift(proto.suppressed, *thrift.suppressed_ref());
  toThrift(proto.stack, *thrift.stack_ref());
  toThrift(proto.errorLocation, *thrift.errorLocation_ref());
  toThrift(proto.errorCode, *thrift.errorCode_ref());
  toThrift(proto.remoteHost, *thrift.remoteHost_ref());
  toThrift(proto.errorCause, *thrift.errorCause_ref());
}
void fromThrift(
    const ExecutionFailureInfo& thrift,
    facebook::presto::protocol::ExecutionFailureInfo& proto) {
  fromThrift(*thrift.type_ref(), proto.type);
  fromThrift(*thrift.message_ref(), proto.message);
  fromThrift(thrift.cause_ref(), proto.cause);
  fromThrift(*thrift.suppressed_ref(), proto.suppressed);
  fromThrift(*thrift.stack_ref(), proto.stack);
  fromThrift(*thrift.errorLocation_ref(), proto.errorLocation);
  fromThrift(*thrift.errorCode_ref(), proto.errorCode);
  fromThrift(*thrift.remoteHost_ref(), proto.remoteHost);
  fromThrift(*thrift.errorCause_ref(), proto.errorCause);
}

void toThrift(const facebook::presto::protocol::TaskId& proto, TaskId& thrift) {
  std::vector<std::string> parts;
  folly::split(".", proto, parts);
  if (parts.size() == 5) {
    thrift.stageExecutionId_ref()->stageId_ref()->queryId_ref() = parts[0];
    thrift.stageExecutionId_ref()->stageId_ref()->id_ref() =
        std::stoi(parts[1]);
    thrift.stageExecutionId_ref()->id_ref() = std::stoi(parts[2]);
    thrift.id_ref() = std::stoi(parts[3]);
    thrift.attemptNumber_ref() = std::stoi(parts[4]);
  }
}
void fromThrift(
    const TaskId& thrift,
    facebook::presto::protocol::TaskId& proto) {
  std::string taskIdStr =
      *thrift.stageExecutionId_ref()->stageId_ref()->queryId_ref() + "." +
      std::to_string(*thrift.stageExecutionId_ref()->stageId_ref()->id_ref()) +
      "." + std::to_string(*thrift.stageExecutionId_ref()->id_ref()) + "." +
      std::to_string(*thrift.id_ref()) + "." +
      std::to_string(*thrift.attemptNumber_ref());
  fromThrift(taskIdStr, proto);
}
void toThrift(
    const facebook::presto::protocol::OperatorInfo& proto,
    OperatorInfoUnion& thrift) {}
void fromThrift(
    const OperatorInfoUnion& thrift,
    facebook::presto::protocol::OperatorInfo& proto) {}
void toThrift(
    const facebook::presto::protocol::SqlInvokedFunction& proto,
    SqlInvokedFunction& thrift) {
  toThrift(proto.parameters, *thrift.parameters_ref());
  toThrift(proto.description, *thrift.description_ref());
  toThrift(proto.routineCharacteristics, *thrift.routineCharacteristics_ref());
  toThrift(proto.body, *thrift.body_ref());
  toThrift(proto.variableArity, *thrift.variableArity_ref());
  toThrift(proto.signature, *thrift.signature_ref());
  toThrift(proto.functionId, *thrift.functionId_ref());
}
void fromThrift(
    const SqlInvokedFunction& thrift,
    facebook::presto::protocol::SqlInvokedFunction& proto) {
  fromThrift(*thrift.parameters_ref(), proto.parameters);
  fromThrift(*thrift.description_ref(), proto.description);
  fromThrift(
      *thrift.routineCharacteristics_ref(), proto.routineCharacteristics);
  fromThrift(*thrift.body_ref(), proto.body);
  fromThrift(*thrift.variableArity_ref(), proto.variableArity);
  fromThrift(*thrift.signature_ref(), proto.signature);
  fromThrift(*thrift.functionId_ref(), proto.functionId);
}

void toThrift(
    const facebook::presto::protocol::ScheduledSplit& proto,
    ScheduledSplit& thrift) {
  toThrift(proto.sequenceId, *thrift.sequenceId_ref());
  toThrift(proto.planNodeId, *thrift.planNodeId_ref());
  toThrift(proto.split, *thrift.split_ref());
}
void fromThrift(
    const ScheduledSplit& thrift,
    facebook::presto::protocol::ScheduledSplit& proto) {
  fromThrift(*thrift.sequenceId_ref(), proto.sequenceId);
  fromThrift(*thrift.planNodeId_ref(), proto.planNodeId);
  fromThrift(*thrift.split_ref(), proto.split);
}

void toThrift(
    const std::shared_ptr<facebook::presto::protocol::ExecutionWriterTarget>&
        proto,
    apache::thrift::optional_field_ref<ExecutionWriterTargetUnion&> thrift) {
  if (proto) {
    thrift.ensure();
    toThrift(proto, *thrift);
  }
}
void toThrift(
    const std::shared_ptr<facebook::presto::protocol::ExecutionWriterTarget>&
        proto,
    ExecutionWriterTargetUnion& thrift) {
  if (auto createHandle =
          std::dynamic_pointer_cast<facebook::presto::protocol::CreateHandle>(
              proto)) {
    CreateHandle thriftCreateHandle;
    toThrift(*createHandle, thriftCreateHandle);
    thrift.set_createHandle(std::move(thriftCreateHandle));
  }
  if (auto insertHandle =
          std::dynamic_pointer_cast<facebook::presto::protocol::InsertHandle>(
              proto)) {
    InsertHandle thriftInsertHandle;
    toThrift(*insertHandle, thriftInsertHandle);
    thrift.set_insertHandle(std::move(thriftInsertHandle));
  }
  if (auto deleteHandle =
          std::dynamic_pointer_cast<facebook::presto::protocol::DeleteHandle>(
              proto)) {
    DeleteHandle thriftDeleteHandle;
    toThrift(*deleteHandle, thriftDeleteHandle);
    thrift.set_deleteHandle(std::move(thriftDeleteHandle));
  }
  if (auto refreshMaterializedViewHandle = std::dynamic_pointer_cast<
          facebook::presto::protocol::RefreshMaterializedViewHandle>(proto)) {
    RefreshMaterializedViewHandle thriftRefreshMaterializedViewHandle;
    toThrift(
        *refreshMaterializedViewHandle, thriftRefreshMaterializedViewHandle);
    thrift.set_refreshMaterializedViewHandle(
        std::move(thriftRefreshMaterializedViewHandle));
  }
  if (auto updateHandle =
          std::dynamic_pointer_cast<facebook::presto::protocol::UpdateHandle>(
              proto)) {
    UpdateHandle thriftUpdateHandle;
    toThrift(*updateHandle, thriftUpdateHandle);
    thrift.set_updateHandle(std::move(thriftUpdateHandle));
  }
}
void fromThrift(
    apache::thrift::optional_field_ref<const ExecutionWriterTargetUnion&>
        thrift,
    std::shared_ptr<facebook::presto::protocol::ExecutionWriterTarget>& proto) {
  if (thrift.has_value()) {
    proto =
        std::make_shared<facebook::presto::protocol::ExecutionWriterTarget>();
    fromThrift(thrift.value(), proto);
  }
}
void fromThrift(
    const ExecutionWriterTargetUnion& thrift,
    std::shared_ptr<facebook::presto::protocol::ExecutionWriterTarget>& proto) {
  if (thrift.getType() == ExecutionWriterTargetUnion::Type::createHandle) {
    std::shared_ptr<facebook::presto::protocol::CreateHandle> createHandle;
    fromThrift(thrift.get_createHandle(), createHandle);
    proto = createHandle;
  }
  if (thrift.getType() == ExecutionWriterTargetUnion::Type::insertHandle) {
    std::shared_ptr<facebook::presto::protocol::InsertHandle> insertHandle;
    fromThrift(thrift.get_insertHandle(), insertHandle);
    proto = insertHandle;
  }
  if (thrift.getType() == ExecutionWriterTargetUnion::Type::deleteHandle) {
    std::shared_ptr<facebook::presto::protocol::DeleteHandle> deleteHandle;
    fromThrift(thrift.get_deleteHandle(), deleteHandle);
    proto = deleteHandle;
  }
  if (thrift.getType() ==
      ExecutionWriterTargetUnion::Type::refreshMaterializedViewHandle) {
    std::shared_ptr<facebook::presto::protocol::InsertHandle>
        refreshMaterializedViewHandle;
    fromThrift(
        thrift.get_refreshMaterializedViewHandle(),
        refreshMaterializedViewHandle);
    proto = refreshMaterializedViewHandle;
  }
  if (thrift.getType() == ExecutionWriterTargetUnion::Type::updateHandle) {
    std::shared_ptr<facebook::presto::protocol::UpdateHandle> updateHandle;
    fromThrift(thrift.get_updateHandle(), updateHandle);
    proto = updateHandle;
  }
}

void toThrift(
    const facebook::presto::protocol::TaskInfo& proto,
    TaskInfo& thrift) {
  toThrift(proto.taskId, *thrift.taskId_ref());
  toThrift(proto.taskStatus, *thrift.taskStatus_ref());
  toThrift(proto.lastHeartbeatInMillis, *thrift.lastHeartbeatInMillis_ref());
  toThrift(proto.outputBuffers, *thrift.outputBuffers_ref());
  toThrift(proto.noMoreSplits, *thrift.noMoreSplits_ref());
  toThrift(proto.stats, *thrift.stats_ref());
  toThrift(proto.needsPlan, *thrift.needsPlan_ref());
  toThrift(proto.nodeId, *thrift.nodeId_ref());
}
void fromThrift(
    const TaskInfo& thrift,
    facebook::presto::protocol::TaskInfo& proto) {
  fromThrift(*thrift.taskId_ref(), proto.taskId);
  fromThrift(*thrift.taskStatus_ref(), proto.taskStatus);
  fromThrift(*thrift.lastHeartbeatInMillis_ref(), proto.lastHeartbeatInMillis);
  fromThrift(*thrift.outputBuffers_ref(), proto.outputBuffers);
  fromThrift(*thrift.noMoreSplits_ref(), proto.noMoreSplits);
  fromThrift(*thrift.stats_ref(), proto.stats);
  fromThrift(*thrift.needsPlan_ref(), proto.needsPlan);
  fromThrift(*thrift.nodeId_ref(), proto.nodeId);
}

void toThrift(
    const facebook::presto::protocol::RemoteSplit& proto,
    RemoteSplit& thrift) {
  toThrift(proto.location, *thrift.location_ref());
  toThrift(proto.remoteSourceTaskId, *thrift.remoteSourceTaskId_ref());
}
void fromThrift(
    const RemoteSplit& thrift,
    facebook::presto::protocol::RemoteSplit& proto) {
  fromThrift(*thrift.location_ref(), proto.location);
  fromThrift(*thrift.remoteSourceTaskId_ref(), proto.remoteSourceTaskId);
}

void toThrift(
    const facebook::presto::protocol::OperatorStats& proto,
    OperatorStats& thrift) {
  toThrift(proto.stageId, *thrift.stageId_ref());
  toThrift(proto.stageExecutionId, *thrift.stageExecutionId_ref());
  toThrift(proto.pipelineId, *thrift.pipelineId_ref());
  toThrift(proto.operatorId, *thrift.operatorId_ref());
  toThrift(proto.planNodeId, *thrift.planNodeId_ref());
  toThrift(proto.operatorType, *thrift.operatorType_ref());
  toThrift(proto.totalDrivers, *thrift.totalDrivers_ref());
  toThrift(proto.addInputCalls, *thrift.addInputCalls_ref());
  toThrift(proto.addInputWall, *thrift.addInputWall_ref());
  toThrift(proto.addInputCpu, *thrift.addInputCpu_ref());
  toThrift(
      proto.addInputAllocationInBytes, *thrift.addInputAllocationInBytes_ref());
  toThrift(
      proto.rawInputDataSizeInBytes, *thrift.rawInputDataSizeInBytes_ref());
  toThrift(proto.rawInputPositions, *thrift.rawInputPositions_ref());
  toThrift(proto.inputDataSizeInBytes, *thrift.inputDataSizeInBytes_ref());
  toThrift(proto.inputPositions, *thrift.inputPositions_ref());
  toThrift(
      proto.sumSquaredInputPositions, *thrift.sumSquaredInputPositions_ref());
  toThrift(proto.getOutputCalls, *thrift.getOutputCalls_ref());
  toThrift(proto.getOutputWall, *thrift.getOutputWall_ref());
  toThrift(proto.getOutputCpu, *thrift.getOutputCpu_ref());
  toThrift(
      proto.getOutputAllocationInBytes,
      *thrift.getOutputAllocationInBytes_ref());
  toThrift(proto.outputDataSizeInBytes, *thrift.outputDataSizeInBytes_ref());
  toThrift(proto.outputPositions, *thrift.outputPositions_ref());
  toThrift(
      proto.physicalWrittenDataSizeInBytes,
      *thrift.physicalWrittenDataSizeInBytes_ref());
  toThrift(proto.additionalCpu, *thrift.additionalCpu_ref());
  toThrift(proto.blockedWall, *thrift.blockedWall_ref());
  toThrift(proto.finishCalls, *thrift.finishCalls_ref());
  toThrift(proto.finishWall, *thrift.finishWall_ref());
  toThrift(proto.finishCpu, *thrift.finishCpu_ref());
  toThrift(
      proto.finishAllocationInBytes, *thrift.finishAllocationInBytes_ref());
  toThrift(
      proto.userMemoryReservationInBytes,
      *thrift.userMemoryReservationInBytes_ref());
  toThrift(
      proto.revocableMemoryReservationInBytes,
      *thrift.revocableMemoryReservationInBytes_ref());
  toThrift(
      proto.systemMemoryReservationInBytes,
      *thrift.systemMemoryReservationInBytes_ref());
  toThrift(
      proto.peakUserMemoryReservationInBytes,
      *thrift.peakUserMemoryReservationInBytes_ref());
  toThrift(
      proto.peakSystemMemoryReservationInBytes,
      *thrift.peakSystemMemoryReservationInBytes_ref());
  toThrift(
      proto.peakTotalMemoryReservationInBytes,
      *thrift.peakTotalMemoryReservationInBytes_ref());
  toThrift(proto.spilledDataSizeInBytes, *thrift.spilledDataSizeInBytes_ref());
  toThrift(proto.runtimeStats, *thrift.runtimeStats_ref());
  toThrift(proto.blockedReason, thrift.blockedReason_ref());
  toThrift(proto.info, *thrift.infoUnion_ref());
  toThrift(proto.nullJoinBuildKeyCount, *thrift.nullJoinBuildKeyCount_ref());
  toThrift(proto.joinBuildKeyCount, *thrift.joinBuildKeyCount_ref());
  toThrift(proto.nullJoinProbeKeyCount, *thrift.nullJoinProbeKeyCount_ref());
  toThrift(proto.joinProbeKeyCount, *thrift.joinProbeKeyCount_ref());
  toThrift(proto.dynamicFilterStats, *thrift.dynamicFilterStats_ref());
  toThrift(proto.isBlockedCalls, *thrift.isBlockedCalls_ref());
  toThrift(proto.isBlockedWall, *thrift.isBlockedWall_ref());
  toThrift(proto.isBlockedCpu, *thrift.isBlockedCpu_ref());
  toThrift(
      proto.isBlockedAllocationInBytes,
      *thrift.isBlockedAllocationInBytes_ref());
}
void fromThrift(
    const OperatorStats& thrift,
    facebook::presto::protocol::OperatorStats& proto) {
  fromThrift(*thrift.stageId_ref(), proto.stageId);
  fromThrift(*thrift.stageExecutionId_ref(), proto.stageExecutionId);
  fromThrift(*thrift.pipelineId_ref(), proto.pipelineId);
  fromThrift(*thrift.operatorId_ref(), proto.operatorId);
  fromThrift(*thrift.planNodeId_ref(), proto.planNodeId);
  fromThrift(*thrift.operatorType_ref(), proto.operatorType);
  fromThrift(*thrift.totalDrivers_ref(), proto.totalDrivers);
  fromThrift(*thrift.addInputCalls_ref(), proto.addInputCalls);
  fromThrift(*thrift.addInputWall_ref(), proto.addInputWall);
  fromThrift(*thrift.addInputCpu_ref(), proto.addInputCpu);
  fromThrift(
      *thrift.addInputAllocationInBytes_ref(), proto.addInputAllocationInBytes);
  fromThrift(
      *thrift.rawInputDataSizeInBytes_ref(), proto.rawInputDataSizeInBytes);
  fromThrift(*thrift.rawInputPositions_ref(), proto.rawInputPositions);
  fromThrift(*thrift.inputDataSizeInBytes_ref(), proto.inputDataSizeInBytes);
  fromThrift(*thrift.inputPositions_ref(), proto.inputPositions);
  fromThrift(
      *thrift.sumSquaredInputPositions_ref(), proto.sumSquaredInputPositions);
  fromThrift(*thrift.getOutputCalls_ref(), proto.getOutputCalls);
  fromThrift(*thrift.getOutputWall_ref(), proto.getOutputWall);
  fromThrift(*thrift.getOutputCpu_ref(), proto.getOutputCpu);
  fromThrift(
      *thrift.getOutputAllocationInBytes_ref(),
      proto.getOutputAllocationInBytes);
  fromThrift(*thrift.outputDataSizeInBytes_ref(), proto.outputDataSizeInBytes);
  fromThrift(*thrift.outputPositions_ref(), proto.outputPositions);
  fromThrift(
      *thrift.physicalWrittenDataSizeInBytes_ref(),
      proto.physicalWrittenDataSizeInBytes);
  fromThrift(*thrift.additionalCpu_ref(), proto.additionalCpu);
  fromThrift(*thrift.blockedWall_ref(), proto.blockedWall);
  fromThrift(*thrift.finishCalls_ref(), proto.finishCalls);
  fromThrift(*thrift.finishWall_ref(), proto.finishWall);
  fromThrift(*thrift.finishCpu_ref(), proto.finishCpu);
  fromThrift(
      *thrift.finishAllocationInBytes_ref(), proto.finishAllocationInBytes);
  fromThrift(
      *thrift.userMemoryReservationInBytes_ref(),
      proto.userMemoryReservationInBytes);
  fromThrift(
      *thrift.revocableMemoryReservationInBytes_ref(),
      proto.revocableMemoryReservationInBytes);
  fromThrift(
      *thrift.systemMemoryReservationInBytes_ref(),
      proto.systemMemoryReservationInBytes);
  fromThrift(
      *thrift.peakUserMemoryReservationInBytes_ref(),
      proto.peakUserMemoryReservationInBytes);
  fromThrift(
      *thrift.peakSystemMemoryReservationInBytes_ref(),
      proto.peakSystemMemoryReservationInBytes);
  fromThrift(
      *thrift.peakTotalMemoryReservationInBytes_ref(),
      proto.peakTotalMemoryReservationInBytes);
  fromThrift(
      *thrift.spilledDataSizeInBytes_ref(), proto.spilledDataSizeInBytes);
  fromThrift(*thrift.runtimeStats_ref(), proto.runtimeStats);
  fromThrift(thrift.blockedReason_ref(), proto.blockedReason);
  fromThrift(*thrift.infoUnion_ref(), proto.info);
  fromThrift(*thrift.nullJoinBuildKeyCount_ref(), proto.nullJoinBuildKeyCount);
  fromThrift(*thrift.joinBuildKeyCount_ref(), proto.joinBuildKeyCount);
  fromThrift(*thrift.nullJoinProbeKeyCount_ref(), proto.nullJoinProbeKeyCount);
  fromThrift(*thrift.joinProbeKeyCount_ref(), proto.joinProbeKeyCount);
  fromThrift(*thrift.dynamicFilterStats_ref(), proto.dynamicFilterStats);
  fromThrift(*thrift.isBlockedCalls_ref(), proto.isBlockedCalls);
  fromThrift(*thrift.isBlockedWall_ref(), proto.isBlockedWall);
  fromThrift(*thrift.isBlockedCpu_ref(), proto.isBlockedCpu);
  fromThrift(
      *thrift.isBlockedAllocationInBytes_ref(),
      proto.isBlockedAllocationInBytes);
}

void toThrift(
    const facebook::presto::protocol::TableWriteInfo& proto,
    TableWriteInfo& thrift) {
  toThrift(proto.writerTarget, *thrift.writerTargetUnion_ref());
  toThrift(proto.analyzeTableHandle, thrift.analyzeTableHandle_ref());
}
void fromThrift(
    const TableWriteInfo& thrift,
    facebook::presto::protocol::TableWriteInfo& proto) {
  fromThrift(*thrift.writerTargetUnion_ref(), proto.writerTarget);
  fromThrift(thrift.analyzeTableHandle_ref(), proto.analyzeTableHandle);
}

void toThrift(
    const facebook::presto::protocol::TaskUpdateRequest& proto,
    TaskUpdateRequest& thrift) {
  toThrift(proto.session, *thrift.session_ref());
  toThrift(proto.extraCredentials, *thrift.extraCredentials_ref());
  toThrift(proto.fragment, thrift.fragment_ref());
  toThrift(proto.sources, *thrift.sources_ref());
  toThrift(proto.outputIds, *thrift.outputIds_ref());
  toThrift(proto.tableWriteInfo, thrift.tableWriteInfo_ref());
}
void fromThrift(
    const TaskUpdateRequest& thrift,
    facebook::presto::protocol::TaskUpdateRequest& proto) {
  fromThrift(*thrift.session_ref(), proto.session);
  fromThrift(*thrift.extraCredentials_ref(), proto.extraCredentials);
  fromThrift(thrift.fragment_ref(), proto.fragment);
  fromThrift(*thrift.sources_ref(), proto.sources);
  fromThrift(*thrift.outputIds_ref(), proto.outputIds);
  fromThrift(thrift.tableWriteInfo_ref(), proto.tableWriteInfo);
}

} // namespace facebook::presto::thrift
