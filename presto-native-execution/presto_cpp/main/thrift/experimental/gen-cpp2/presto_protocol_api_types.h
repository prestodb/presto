/**
 * Autogenerated by Thrift for presto_protocol_api.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated  
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct split;
struct tableWriteInfo;
struct metadataUpdates;
struct grouped;
struct groupId;
struct lineNumber;
struct columnNumber;
struct host;
struct port;
struct queryId;
struct id;
struct id;
struct partition;
struct bufferedPages;
struct bufferedBytes;
struct rowsAdded;
struct pagesAdded;
struct id;
struct maxError;
struct count;
struct total;
struct p01;
struct p05;
struct p10;
struct p25;
struct p50;
struct p75;
struct p90;
struct p95;
struct p99;
struct min;
struct max;
struct avg;
struct metrics;
struct bufferedBytes;
struct maxBufferedBytes;
struct averageBytesPerRequest;
struct successfulRequestsCount;
struct bufferedPages;
struct noMoreLocations;
struct pageBufferClientStatuses;
struct uri;
struct state;
struct lastUpdate;
struct rowsReceived;
struct pagesReceived;
struct rowsRejected;
struct pagesRejected;
struct requestsScheduled;
struct requestsCompleted;
struct requestsFailed;
struct httpRequestState;
struct bufferedBytes;
struct bufferedPages;
struct serializedConnectorOutputMetadata;
struct jsonLengthLimitExceeded;
struct statisticsWallTime;
struct statisticsCpuTime;
struct splitInfoMap;
struct weightedSumSquaredHashCollisions;
struct weightedHashCollisions;
struct weightedExpectedHashCollisions;
struct rowsAdded;
struct pagesAdded;
struct outputBufferPeakMemoryUsage;
struct windowInfos;
struct sumSquaredDifferencesPositionsOfIndex;
struct sumSquaredDifferencesSizeOfIndex;
struct sumSquaredDifferencesSizeInPartition;
struct totalPartitionsCount;
struct totalRowsCount;
struct numberOfIndexes;
struct pageSinkPeakMemoryUsage;
struct statisticsWallTime;
struct statisticsCpuTime;
struct validationCpuTime;
struct statisticsWallTime;
struct statisticsCpuTime;
struct producerNodeIds;
struct lifespan;
struct createTimeInMillis;
struct startTimeInMillis;
struct endTimeInMillis;
struct queuedTime;
struct elapsedTime;
struct userMemoryReservationInBytes;
struct revocableMemoryReservationInBytes;
struct systemMemoryReservationInBytes;
struct totalScheduledTime;
struct totalCpuTime;
struct totalBlockedTime;
struct fullyBlocked;
struct blockedReasons;
struct totalAllocationInBytes;
struct rawInputDataSizeInBytes;
struct rawInputReadTime;
struct rawInputPositions;
struct processedInputDataSizeInBytes;
struct processedInputPositions;
struct outputDataSizeInBytes;
struct outputPositions;
struct physicalWrittenDataSizeInBytes;
struct operatorStats;
struct uuid;
struct id;
struct key;
struct executionTime;
struct cpuTime;
struct peakMemory;
struct peakTaskMemory;
struct catalogName;
struct signature;
struct signature;
struct ignore;
struct language;
struct catalogName;
struct schemaName;
struct objectName;
struct name;
struct comparableRequired;
struct orderableRequired;
struct variadicBound;
struct nonDecimalNumericRequired;
struct name;
struct expression;
struct planNodeId;
struct splits;
struct noMoreSplitsForLifespan;
struct noMoreSplits;
struct sequenceId;
struct planNodeId;
struct split;
struct taskInstanceIdLeastSignificantBits;
struct taskInstanceIdMostSignificantBits;
struct version;
struct state;
struct selfUri;
struct completedDriverGroups;
struct failures;
struct queuedPartitionedDrivers;
struct runningPartitionedDrivers;
struct outputBufferUtilization;
struct outputBufferOverutilized;
struct physicalWrittenDataSizeInBytes;
struct memoryReservationInBytes;
struct systemMemoryReservationInBytes;
struct fullGcCount;
struct fullGcTimeInMillis;
struct peakNodeTotalMemoryReservationInBytes;
struct totalCpuTimeInNanos;
struct taskAgeInMillis;
struct queuedPartitionedSplitsWeight;
struct runningPartitionedSplitsWeight;
struct code;
struct name;
struct type;
struct retriable;
struct stageId;
struct id;
struct type;
struct state;
struct buffers;
struct canAddBuffers;
struct canAddPages;
struct totalBufferedBytes;
struct totalBufferedPages;
struct totalRowsSent;
struct totalPagesSent;
struct bufferId;
struct finished;
struct bufferedPages;
struct pagesSent;
struct pageBufferInfo;
struct createTimeInMillis;
struct firstStartTimeInMillis;
struct lastStartTimeInMillis;
struct lastEndTimeInMillis;
struct endTimeInMillis;
struct elapsedTimeInNanos;
struct queuedTimeInNanos;
struct totalDrivers;
struct queuedDrivers;
struct runningDrivers;
struct blockedDrivers;
struct completedDrivers;
struct cumulativeUserMemory;
struct cumulativeTotalMemory;
struct userMemoryReservationInBytes;
struct revocableMemoryReservationInBytes;
struct systemMemoryReservationInBytes;
struct peakUserMemoryInBytes;
struct peakTotalMemoryInBytes;
struct peakNodeTotalMemoryInBytes;
struct totalScheduledTimeInNanos;
struct totalCpuTimeInNanos;
struct totalBlockedTimeInNanos;
struct fullyBlocked;
struct blockedReasons;
struct totalAllocationInBytes;
struct rawInputDataSizeInBytes;
struct rawInputPositions;
struct processedInputDataSizeInBytes;
struct processedInputPositions;
struct outputDataSizeInBytes;
struct outputPositions;
struct physicalWrittenDataSizeInBytes;
struct pipelines;
struct queuedPartitionedDrivers;
struct queuedPartitionedSplitsWeight;
struct runningPartitionedDrivers;
struct runningPartitionedSplitsWeight;
struct fullGcCount;
struct fullGcTimeInMillis;
struct runtimeStats;
struct pipelineId;
struct firstStartTimeInMillis;
struct lastStartTimeInMillis;
struct lastEndTimeInMillis;
struct inputPipeline;
struct outputPipeline;
struct totalDrivers;
struct queuedDrivers;
struct queuedPartitionedDrivers;
struct queuedPartitionedSplitsWeight;
struct runningDrivers;
struct runningPartitionedDrivers;
struct runningPartitionedSplitsWeight;
struct blockedDrivers;
struct completedDrivers;
struct userMemoryReservationInBytes;
struct revocableMemoryReservationInBytes;
struct systemMemoryReservationInBytes;
struct queuedTime;
struct elapsedTime;
struct totalScheduledTimeInNanos;
struct totalCpuTimeInNanos;
struct totalBlockedTimeInNanos;
struct fullyBlocked;
struct blockedReasons;
struct totalAllocationInBytes;
struct rawInputDataSizeInBytes;
struct rawInputPositions;
struct processedInputDataSizeInBytes;
struct processedInputPositions;
struct outputDataSizeInBytes;
struct outputPositions;
struct physicalWrittenDataSizeInBytes;
struct operatorSummaries;
struct drivers;
struct name;
struct sum;
struct count;
struct max;
struct min;
struct unit;
struct joinType;
struct logHistogramProbes;
struct logHistogramOutput;
struct lookupSourcePositions;
struct queryId;
struct transactionId;
struct clientTransactionSupport;
struct user;
struct principal;
struct source;
struct catalog;
struct schema;
struct traceToken;
struct timeZoneKey;
struct locale;
struct remoteUserAddress;
struct userAgent;
struct clientInfo;
struct clientTags;
struct resourceEstimates;
struct startTime;
struct systemProperties;
struct catalogProperties;
struct unprocessedCatalogProperties;
struct roles;
struct preparedStatements;
struct sessionFunctions;
struct type;
struct role;
struct name;
struct type;
struct language;
struct determinism;
struct nullCallClause;
struct name;
struct kind;
struct returnType;
struct argumentTypes;
struct variableArity;
struct typeVariableConstraints;
struct longVariableConstraints;
struct type;
struct version;
struct noMoreBufferIds;
struct buffers;
struct session;
struct extraCredentials;
struct fragment;
struct sources;
struct outputIds;
struct tableWriteInfo;
struct type;
struct message;
struct cause;
struct suppressed;
struct stack;
struct errorLocation;
struct errorCode;
struct remoteHost;
struct errorCause;
struct stageExecutionId;
struct id;
struct attemptNumber;
struct exchangeClientStatus;
struct localExchangeBufferInfo;
struct tableFinishInfo;
struct splitOperatorInfo;
struct hashCollisionsInfo;
struct partitionedOutputInfo;
struct joinOperatorInfo;
struct windowInfo;
struct tableWriterInfo;
struct tableWriterMergeInfo;
struct parameters;
struct description;
struct routineCharacteristics;
struct body;
struct variableArity;
struct signature;
struct functionId;
struct taskId;
struct taskStatus;
struct lastHeartbeatInMillis;
struct outputBuffers;
struct noMoreSplits;
struct stats;
struct needsPlan;
struct metadataUpdates;
struct nodeId;
struct stageId;
struct stageExecutionId;
struct pipelineId;
struct operatorId;
struct planNodeId;
struct operatorType;
struct totalDrivers;
struct addInputCalls;
struct addInputWall;
struct addInputCpu;
struct addInputAllocationInBytes;
struct rawInputDataSizeInBytes;
struct rawInputPositions;
struct inputDataSizeInBytes;
struct inputPositions;
struct sumSquaredInputPositions;
struct getOutputCalls;
struct getOutputWall;
struct getOutputCpu;
struct getOutputAllocationInBytes;
struct outputDataSizeInBytes;
struct outputPositions;
struct physicalWrittenDataSizeInBytes;
struct additionalCpu;
struct blockedWall;
struct finishCalls;
struct finishWall;
struct finishCpu;
struct finishAllocationInBytes;
struct userMemoryReservationInBytes;
struct revocableMemoryReservationInBytes;
struct systemMemoryReservationInBytes;
struct peakUserMemoryReservationInBytes;
struct peakSystemMemoryReservationInBytes;
struct peakTotalMemoryReservationInBytes;
struct spilledDataSizeInBytes;
struct runtimeStats;
struct blockedReason;
struct infoUnion;
struct nullJoinBuildKeyCount;
struct joinBuildKeyCount;
struct nullJoinProbeKeyCount;
struct joinProbeKeyCount;
struct dynamicFilterStats;
struct isBlockedCalls;
struct isBlockedWall;
struct isBlockedCpu;
struct isBlockedAllocationInBytes;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_split
#define APACHE_THRIFT_ACCESSOR_split
APACHE_THRIFT_DEFINE_ACCESSOR(split);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tableWriteInfo
#define APACHE_THRIFT_ACCESSOR_tableWriteInfo
APACHE_THRIFT_DEFINE_ACCESSOR(tableWriteInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_metadataUpdates
#define APACHE_THRIFT_ACCESSOR_metadataUpdates
APACHE_THRIFT_DEFINE_ACCESSOR(metadataUpdates);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_grouped
#define APACHE_THRIFT_ACCESSOR_grouped
APACHE_THRIFT_DEFINE_ACCESSOR(grouped);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_groupId
#define APACHE_THRIFT_ACCESSOR_groupId
APACHE_THRIFT_DEFINE_ACCESSOR(groupId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lineNumber
#define APACHE_THRIFT_ACCESSOR_lineNumber
APACHE_THRIFT_DEFINE_ACCESSOR(lineNumber);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_columnNumber
#define APACHE_THRIFT_ACCESSOR_columnNumber
APACHE_THRIFT_DEFINE_ACCESSOR(columnNumber);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_host
#define APACHE_THRIFT_ACCESSOR_host
APACHE_THRIFT_DEFINE_ACCESSOR(host);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_port
#define APACHE_THRIFT_ACCESSOR_port
APACHE_THRIFT_DEFINE_ACCESSOR(port);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queryId
#define APACHE_THRIFT_ACCESSOR_queryId
APACHE_THRIFT_DEFINE_ACCESSOR(queryId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_partition
#define APACHE_THRIFT_ACCESSOR_partition
APACHE_THRIFT_DEFINE_ACCESSOR(partition);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bufferedPages
#define APACHE_THRIFT_ACCESSOR_bufferedPages
APACHE_THRIFT_DEFINE_ACCESSOR(bufferedPages);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bufferedBytes
#define APACHE_THRIFT_ACCESSOR_bufferedBytes
APACHE_THRIFT_DEFINE_ACCESSOR(bufferedBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rowsAdded
#define APACHE_THRIFT_ACCESSOR_rowsAdded
APACHE_THRIFT_DEFINE_ACCESSOR(rowsAdded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pagesAdded
#define APACHE_THRIFT_ACCESSOR_pagesAdded
APACHE_THRIFT_DEFINE_ACCESSOR(pagesAdded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_maxError
#define APACHE_THRIFT_ACCESSOR_maxError
APACHE_THRIFT_DEFINE_ACCESSOR(maxError);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_count
#define APACHE_THRIFT_ACCESSOR_count
APACHE_THRIFT_DEFINE_ACCESSOR(count);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_total
#define APACHE_THRIFT_ACCESSOR_total
APACHE_THRIFT_DEFINE_ACCESSOR(total);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_p01
#define APACHE_THRIFT_ACCESSOR_p01
APACHE_THRIFT_DEFINE_ACCESSOR(p01);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_p05
#define APACHE_THRIFT_ACCESSOR_p05
APACHE_THRIFT_DEFINE_ACCESSOR(p05);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_p10
#define APACHE_THRIFT_ACCESSOR_p10
APACHE_THRIFT_DEFINE_ACCESSOR(p10);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_p25
#define APACHE_THRIFT_ACCESSOR_p25
APACHE_THRIFT_DEFINE_ACCESSOR(p25);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_p50
#define APACHE_THRIFT_ACCESSOR_p50
APACHE_THRIFT_DEFINE_ACCESSOR(p50);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_p75
#define APACHE_THRIFT_ACCESSOR_p75
APACHE_THRIFT_DEFINE_ACCESSOR(p75);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_p90
#define APACHE_THRIFT_ACCESSOR_p90
APACHE_THRIFT_DEFINE_ACCESSOR(p90);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_p95
#define APACHE_THRIFT_ACCESSOR_p95
APACHE_THRIFT_DEFINE_ACCESSOR(p95);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_p99
#define APACHE_THRIFT_ACCESSOR_p99
APACHE_THRIFT_DEFINE_ACCESSOR(p99);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_min
#define APACHE_THRIFT_ACCESSOR_min
APACHE_THRIFT_DEFINE_ACCESSOR(min);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_max
#define APACHE_THRIFT_ACCESSOR_max
APACHE_THRIFT_DEFINE_ACCESSOR(max);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_avg
#define APACHE_THRIFT_ACCESSOR_avg
APACHE_THRIFT_DEFINE_ACCESSOR(avg);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_metrics
#define APACHE_THRIFT_ACCESSOR_metrics
APACHE_THRIFT_DEFINE_ACCESSOR(metrics);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bufferedBytes
#define APACHE_THRIFT_ACCESSOR_bufferedBytes
APACHE_THRIFT_DEFINE_ACCESSOR(bufferedBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_maxBufferedBytes
#define APACHE_THRIFT_ACCESSOR_maxBufferedBytes
APACHE_THRIFT_DEFINE_ACCESSOR(maxBufferedBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_averageBytesPerRequest
#define APACHE_THRIFT_ACCESSOR_averageBytesPerRequest
APACHE_THRIFT_DEFINE_ACCESSOR(averageBytesPerRequest);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_successfulRequestsCount
#define APACHE_THRIFT_ACCESSOR_successfulRequestsCount
APACHE_THRIFT_DEFINE_ACCESSOR(successfulRequestsCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bufferedPages
#define APACHE_THRIFT_ACCESSOR_bufferedPages
APACHE_THRIFT_DEFINE_ACCESSOR(bufferedPages);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_noMoreLocations
#define APACHE_THRIFT_ACCESSOR_noMoreLocations
APACHE_THRIFT_DEFINE_ACCESSOR(noMoreLocations);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pageBufferClientStatuses
#define APACHE_THRIFT_ACCESSOR_pageBufferClientStatuses
APACHE_THRIFT_DEFINE_ACCESSOR(pageBufferClientStatuses);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_uri
#define APACHE_THRIFT_ACCESSOR_uri
APACHE_THRIFT_DEFINE_ACCESSOR(uri);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_state
#define APACHE_THRIFT_ACCESSOR_state
APACHE_THRIFT_DEFINE_ACCESSOR(state);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lastUpdate
#define APACHE_THRIFT_ACCESSOR_lastUpdate
APACHE_THRIFT_DEFINE_ACCESSOR(lastUpdate);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rowsReceived
#define APACHE_THRIFT_ACCESSOR_rowsReceived
APACHE_THRIFT_DEFINE_ACCESSOR(rowsReceived);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pagesReceived
#define APACHE_THRIFT_ACCESSOR_pagesReceived
APACHE_THRIFT_DEFINE_ACCESSOR(pagesReceived);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rowsRejected
#define APACHE_THRIFT_ACCESSOR_rowsRejected
APACHE_THRIFT_DEFINE_ACCESSOR(rowsRejected);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pagesRejected
#define APACHE_THRIFT_ACCESSOR_pagesRejected
APACHE_THRIFT_DEFINE_ACCESSOR(pagesRejected);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_requestsScheduled
#define APACHE_THRIFT_ACCESSOR_requestsScheduled
APACHE_THRIFT_DEFINE_ACCESSOR(requestsScheduled);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_requestsCompleted
#define APACHE_THRIFT_ACCESSOR_requestsCompleted
APACHE_THRIFT_DEFINE_ACCESSOR(requestsCompleted);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_requestsFailed
#define APACHE_THRIFT_ACCESSOR_requestsFailed
APACHE_THRIFT_DEFINE_ACCESSOR(requestsFailed);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_httpRequestState
#define APACHE_THRIFT_ACCESSOR_httpRequestState
APACHE_THRIFT_DEFINE_ACCESSOR(httpRequestState);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bufferedBytes
#define APACHE_THRIFT_ACCESSOR_bufferedBytes
APACHE_THRIFT_DEFINE_ACCESSOR(bufferedBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bufferedPages
#define APACHE_THRIFT_ACCESSOR_bufferedPages
APACHE_THRIFT_DEFINE_ACCESSOR(bufferedPages);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serializedConnectorOutputMetadata
#define APACHE_THRIFT_ACCESSOR_serializedConnectorOutputMetadata
APACHE_THRIFT_DEFINE_ACCESSOR(serializedConnectorOutputMetadata);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_jsonLengthLimitExceeded
#define APACHE_THRIFT_ACCESSOR_jsonLengthLimitExceeded
APACHE_THRIFT_DEFINE_ACCESSOR(jsonLengthLimitExceeded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_statisticsWallTime
#define APACHE_THRIFT_ACCESSOR_statisticsWallTime
APACHE_THRIFT_DEFINE_ACCESSOR(statisticsWallTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_statisticsCpuTime
#define APACHE_THRIFT_ACCESSOR_statisticsCpuTime
APACHE_THRIFT_DEFINE_ACCESSOR(statisticsCpuTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_splitInfoMap
#define APACHE_THRIFT_ACCESSOR_splitInfoMap
APACHE_THRIFT_DEFINE_ACCESSOR(splitInfoMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_weightedSumSquaredHashCollisions
#define APACHE_THRIFT_ACCESSOR_weightedSumSquaredHashCollisions
APACHE_THRIFT_DEFINE_ACCESSOR(weightedSumSquaredHashCollisions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_weightedHashCollisions
#define APACHE_THRIFT_ACCESSOR_weightedHashCollisions
APACHE_THRIFT_DEFINE_ACCESSOR(weightedHashCollisions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_weightedExpectedHashCollisions
#define APACHE_THRIFT_ACCESSOR_weightedExpectedHashCollisions
APACHE_THRIFT_DEFINE_ACCESSOR(weightedExpectedHashCollisions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rowsAdded
#define APACHE_THRIFT_ACCESSOR_rowsAdded
APACHE_THRIFT_DEFINE_ACCESSOR(rowsAdded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pagesAdded
#define APACHE_THRIFT_ACCESSOR_pagesAdded
APACHE_THRIFT_DEFINE_ACCESSOR(pagesAdded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputBufferPeakMemoryUsage
#define APACHE_THRIFT_ACCESSOR_outputBufferPeakMemoryUsage
APACHE_THRIFT_DEFINE_ACCESSOR(outputBufferPeakMemoryUsage);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_windowInfos
#define APACHE_THRIFT_ACCESSOR_windowInfos
APACHE_THRIFT_DEFINE_ACCESSOR(windowInfos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sumSquaredDifferencesPositionsOfIndex
#define APACHE_THRIFT_ACCESSOR_sumSquaredDifferencesPositionsOfIndex
APACHE_THRIFT_DEFINE_ACCESSOR(sumSquaredDifferencesPositionsOfIndex);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sumSquaredDifferencesSizeOfIndex
#define APACHE_THRIFT_ACCESSOR_sumSquaredDifferencesSizeOfIndex
APACHE_THRIFT_DEFINE_ACCESSOR(sumSquaredDifferencesSizeOfIndex);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sumSquaredDifferencesSizeInPartition
#define APACHE_THRIFT_ACCESSOR_sumSquaredDifferencesSizeInPartition
APACHE_THRIFT_DEFINE_ACCESSOR(sumSquaredDifferencesSizeInPartition);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalPartitionsCount
#define APACHE_THRIFT_ACCESSOR_totalPartitionsCount
APACHE_THRIFT_DEFINE_ACCESSOR(totalPartitionsCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalRowsCount
#define APACHE_THRIFT_ACCESSOR_totalRowsCount
APACHE_THRIFT_DEFINE_ACCESSOR(totalRowsCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numberOfIndexes
#define APACHE_THRIFT_ACCESSOR_numberOfIndexes
APACHE_THRIFT_DEFINE_ACCESSOR(numberOfIndexes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pageSinkPeakMemoryUsage
#define APACHE_THRIFT_ACCESSOR_pageSinkPeakMemoryUsage
APACHE_THRIFT_DEFINE_ACCESSOR(pageSinkPeakMemoryUsage);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_statisticsWallTime
#define APACHE_THRIFT_ACCESSOR_statisticsWallTime
APACHE_THRIFT_DEFINE_ACCESSOR(statisticsWallTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_statisticsCpuTime
#define APACHE_THRIFT_ACCESSOR_statisticsCpuTime
APACHE_THRIFT_DEFINE_ACCESSOR(statisticsCpuTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_validationCpuTime
#define APACHE_THRIFT_ACCESSOR_validationCpuTime
APACHE_THRIFT_DEFINE_ACCESSOR(validationCpuTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_statisticsWallTime
#define APACHE_THRIFT_ACCESSOR_statisticsWallTime
APACHE_THRIFT_DEFINE_ACCESSOR(statisticsWallTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_statisticsCpuTime
#define APACHE_THRIFT_ACCESSOR_statisticsCpuTime
APACHE_THRIFT_DEFINE_ACCESSOR(statisticsCpuTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_producerNodeIds
#define APACHE_THRIFT_ACCESSOR_producerNodeIds
APACHE_THRIFT_DEFINE_ACCESSOR(producerNodeIds);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lifespan
#define APACHE_THRIFT_ACCESSOR_lifespan
APACHE_THRIFT_DEFINE_ACCESSOR(lifespan);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_createTimeInMillis
#define APACHE_THRIFT_ACCESSOR_createTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(createTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_startTimeInMillis
#define APACHE_THRIFT_ACCESSOR_startTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(startTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_endTimeInMillis
#define APACHE_THRIFT_ACCESSOR_endTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(endTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedTime
#define APACHE_THRIFT_ACCESSOR_queuedTime
APACHE_THRIFT_DEFINE_ACCESSOR(queuedTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_elapsedTime
#define APACHE_THRIFT_ACCESSOR_elapsedTime
APACHE_THRIFT_DEFINE_ACCESSOR(elapsedTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_userMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_userMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(userMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_revocableMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_revocableMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(revocableMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(systemMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalScheduledTime
#define APACHE_THRIFT_ACCESSOR_totalScheduledTime
APACHE_THRIFT_DEFINE_ACCESSOR(totalScheduledTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalCpuTime
#define APACHE_THRIFT_ACCESSOR_totalCpuTime
APACHE_THRIFT_DEFINE_ACCESSOR(totalCpuTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalBlockedTime
#define APACHE_THRIFT_ACCESSOR_totalBlockedTime
APACHE_THRIFT_DEFINE_ACCESSOR(totalBlockedTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fullyBlocked
#define APACHE_THRIFT_ACCESSOR_fullyBlocked
APACHE_THRIFT_DEFINE_ACCESSOR(fullyBlocked);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_blockedReasons
#define APACHE_THRIFT_ACCESSOR_blockedReasons
APACHE_THRIFT_DEFINE_ACCESSOR(blockedReasons);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalAllocationInBytes
#define APACHE_THRIFT_ACCESSOR_totalAllocationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(totalAllocationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rawInputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_rawInputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(rawInputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rawInputReadTime
#define APACHE_THRIFT_ACCESSOR_rawInputReadTime
APACHE_THRIFT_DEFINE_ACCESSOR(rawInputReadTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rawInputPositions
#define APACHE_THRIFT_ACCESSOR_rawInputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(rawInputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_processedInputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_processedInputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(processedInputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_processedInputPositions
#define APACHE_THRIFT_ACCESSOR_processedInputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(processedInputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_outputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(outputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputPositions
#define APACHE_THRIFT_ACCESSOR_outputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(outputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(physicalWrittenDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_operatorStats
#define APACHE_THRIFT_ACCESSOR_operatorStats
APACHE_THRIFT_DEFINE_ACCESSOR(operatorStats);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_uuid
#define APACHE_THRIFT_ACCESSOR_uuid
APACHE_THRIFT_DEFINE_ACCESSOR(uuid);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_executionTime
#define APACHE_THRIFT_ACCESSOR_executionTime
APACHE_THRIFT_DEFINE_ACCESSOR(executionTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cpuTime
#define APACHE_THRIFT_ACCESSOR_cpuTime
APACHE_THRIFT_DEFINE_ACCESSOR(cpuTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_peakMemory
#define APACHE_THRIFT_ACCESSOR_peakMemory
APACHE_THRIFT_DEFINE_ACCESSOR(peakMemory);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_peakTaskMemory
#define APACHE_THRIFT_ACCESSOR_peakTaskMemory
APACHE_THRIFT_DEFINE_ACCESSOR(peakTaskMemory);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_catalogName
#define APACHE_THRIFT_ACCESSOR_catalogName
APACHE_THRIFT_DEFINE_ACCESSOR(catalogName);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_signature
#define APACHE_THRIFT_ACCESSOR_signature
APACHE_THRIFT_DEFINE_ACCESSOR(signature);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_signature
#define APACHE_THRIFT_ACCESSOR_signature
APACHE_THRIFT_DEFINE_ACCESSOR(signature);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ignore
#define APACHE_THRIFT_ACCESSOR_ignore
APACHE_THRIFT_DEFINE_ACCESSOR(ignore);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_language
#define APACHE_THRIFT_ACCESSOR_language
APACHE_THRIFT_DEFINE_ACCESSOR(language);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_catalogName
#define APACHE_THRIFT_ACCESSOR_catalogName
APACHE_THRIFT_DEFINE_ACCESSOR(catalogName);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_schemaName
#define APACHE_THRIFT_ACCESSOR_schemaName
APACHE_THRIFT_DEFINE_ACCESSOR(schemaName);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_objectName
#define APACHE_THRIFT_ACCESSOR_objectName
APACHE_THRIFT_DEFINE_ACCESSOR(objectName);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_comparableRequired
#define APACHE_THRIFT_ACCESSOR_comparableRequired
APACHE_THRIFT_DEFINE_ACCESSOR(comparableRequired);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_orderableRequired
#define APACHE_THRIFT_ACCESSOR_orderableRequired
APACHE_THRIFT_DEFINE_ACCESSOR(orderableRequired);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_variadicBound
#define APACHE_THRIFT_ACCESSOR_variadicBound
APACHE_THRIFT_DEFINE_ACCESSOR(variadicBound);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nonDecimalNumericRequired
#define APACHE_THRIFT_ACCESSOR_nonDecimalNumericRequired
APACHE_THRIFT_DEFINE_ACCESSOR(nonDecimalNumericRequired);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_expression
#define APACHE_THRIFT_ACCESSOR_expression
APACHE_THRIFT_DEFINE_ACCESSOR(expression);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_planNodeId
#define APACHE_THRIFT_ACCESSOR_planNodeId
APACHE_THRIFT_DEFINE_ACCESSOR(planNodeId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_splits
#define APACHE_THRIFT_ACCESSOR_splits
APACHE_THRIFT_DEFINE_ACCESSOR(splits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_noMoreSplitsForLifespan
#define APACHE_THRIFT_ACCESSOR_noMoreSplitsForLifespan
APACHE_THRIFT_DEFINE_ACCESSOR(noMoreSplitsForLifespan);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_noMoreSplits
#define APACHE_THRIFT_ACCESSOR_noMoreSplits
APACHE_THRIFT_DEFINE_ACCESSOR(noMoreSplits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sequenceId
#define APACHE_THRIFT_ACCESSOR_sequenceId
APACHE_THRIFT_DEFINE_ACCESSOR(sequenceId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_planNodeId
#define APACHE_THRIFT_ACCESSOR_planNodeId
APACHE_THRIFT_DEFINE_ACCESSOR(planNodeId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_split
#define APACHE_THRIFT_ACCESSOR_split
APACHE_THRIFT_DEFINE_ACCESSOR(split);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_taskInstanceIdLeastSignificantBits
#define APACHE_THRIFT_ACCESSOR_taskInstanceIdLeastSignificantBits
APACHE_THRIFT_DEFINE_ACCESSOR(taskInstanceIdLeastSignificantBits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_taskInstanceIdMostSignificantBits
#define APACHE_THRIFT_ACCESSOR_taskInstanceIdMostSignificantBits
APACHE_THRIFT_DEFINE_ACCESSOR(taskInstanceIdMostSignificantBits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_version
#define APACHE_THRIFT_ACCESSOR_version
APACHE_THRIFT_DEFINE_ACCESSOR(version);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_state
#define APACHE_THRIFT_ACCESSOR_state
APACHE_THRIFT_DEFINE_ACCESSOR(state);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_selfUri
#define APACHE_THRIFT_ACCESSOR_selfUri
APACHE_THRIFT_DEFINE_ACCESSOR(selfUri);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_completedDriverGroups
#define APACHE_THRIFT_ACCESSOR_completedDriverGroups
APACHE_THRIFT_DEFINE_ACCESSOR(completedDriverGroups);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_failures
#define APACHE_THRIFT_ACCESSOR_failures
APACHE_THRIFT_DEFINE_ACCESSOR(failures);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedPartitionedDrivers
#define APACHE_THRIFT_ACCESSOR_queuedPartitionedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(queuedPartitionedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runningPartitionedDrivers
#define APACHE_THRIFT_ACCESSOR_runningPartitionedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(runningPartitionedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputBufferUtilization
#define APACHE_THRIFT_ACCESSOR_outputBufferUtilization
APACHE_THRIFT_DEFINE_ACCESSOR(outputBufferUtilization);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputBufferOverutilized
#define APACHE_THRIFT_ACCESSOR_outputBufferOverutilized
APACHE_THRIFT_DEFINE_ACCESSOR(outputBufferOverutilized);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(physicalWrittenDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_memoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_memoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(memoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(systemMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fullGcCount
#define APACHE_THRIFT_ACCESSOR_fullGcCount
APACHE_THRIFT_DEFINE_ACCESSOR(fullGcCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fullGcTimeInMillis
#define APACHE_THRIFT_ACCESSOR_fullGcTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(fullGcTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_peakNodeTotalMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_peakNodeTotalMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(peakNodeTotalMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalCpuTimeInNanos
#define APACHE_THRIFT_ACCESSOR_totalCpuTimeInNanos
APACHE_THRIFT_DEFINE_ACCESSOR(totalCpuTimeInNanos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_taskAgeInMillis
#define APACHE_THRIFT_ACCESSOR_taskAgeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(taskAgeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedPartitionedSplitsWeight
#define APACHE_THRIFT_ACCESSOR_queuedPartitionedSplitsWeight
APACHE_THRIFT_DEFINE_ACCESSOR(queuedPartitionedSplitsWeight);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runningPartitionedSplitsWeight
#define APACHE_THRIFT_ACCESSOR_runningPartitionedSplitsWeight
APACHE_THRIFT_DEFINE_ACCESSOR(runningPartitionedSplitsWeight);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_code
#define APACHE_THRIFT_ACCESSOR_code
APACHE_THRIFT_DEFINE_ACCESSOR(code);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_type
#define APACHE_THRIFT_ACCESSOR_type
APACHE_THRIFT_DEFINE_ACCESSOR(type);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_retriable
#define APACHE_THRIFT_ACCESSOR_retriable
APACHE_THRIFT_DEFINE_ACCESSOR(retriable);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stageId
#define APACHE_THRIFT_ACCESSOR_stageId
APACHE_THRIFT_DEFINE_ACCESSOR(stageId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_type
#define APACHE_THRIFT_ACCESSOR_type
APACHE_THRIFT_DEFINE_ACCESSOR(type);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_state
#define APACHE_THRIFT_ACCESSOR_state
APACHE_THRIFT_DEFINE_ACCESSOR(state);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_buffers
#define APACHE_THRIFT_ACCESSOR_buffers
APACHE_THRIFT_DEFINE_ACCESSOR(buffers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_canAddBuffers
#define APACHE_THRIFT_ACCESSOR_canAddBuffers
APACHE_THRIFT_DEFINE_ACCESSOR(canAddBuffers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_canAddPages
#define APACHE_THRIFT_ACCESSOR_canAddPages
APACHE_THRIFT_DEFINE_ACCESSOR(canAddPages);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalBufferedBytes
#define APACHE_THRIFT_ACCESSOR_totalBufferedBytes
APACHE_THRIFT_DEFINE_ACCESSOR(totalBufferedBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalBufferedPages
#define APACHE_THRIFT_ACCESSOR_totalBufferedPages
APACHE_THRIFT_DEFINE_ACCESSOR(totalBufferedPages);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalRowsSent
#define APACHE_THRIFT_ACCESSOR_totalRowsSent
APACHE_THRIFT_DEFINE_ACCESSOR(totalRowsSent);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalPagesSent
#define APACHE_THRIFT_ACCESSOR_totalPagesSent
APACHE_THRIFT_DEFINE_ACCESSOR(totalPagesSent);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bufferId
#define APACHE_THRIFT_ACCESSOR_bufferId
APACHE_THRIFT_DEFINE_ACCESSOR(bufferId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_finished
#define APACHE_THRIFT_ACCESSOR_finished
APACHE_THRIFT_DEFINE_ACCESSOR(finished);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bufferedPages
#define APACHE_THRIFT_ACCESSOR_bufferedPages
APACHE_THRIFT_DEFINE_ACCESSOR(bufferedPages);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pagesSent
#define APACHE_THRIFT_ACCESSOR_pagesSent
APACHE_THRIFT_DEFINE_ACCESSOR(pagesSent);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pageBufferInfo
#define APACHE_THRIFT_ACCESSOR_pageBufferInfo
APACHE_THRIFT_DEFINE_ACCESSOR(pageBufferInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_createTimeInMillis
#define APACHE_THRIFT_ACCESSOR_createTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(createTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_firstStartTimeInMillis
#define APACHE_THRIFT_ACCESSOR_firstStartTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(firstStartTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lastStartTimeInMillis
#define APACHE_THRIFT_ACCESSOR_lastStartTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(lastStartTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lastEndTimeInMillis
#define APACHE_THRIFT_ACCESSOR_lastEndTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(lastEndTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_endTimeInMillis
#define APACHE_THRIFT_ACCESSOR_endTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(endTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_elapsedTimeInNanos
#define APACHE_THRIFT_ACCESSOR_elapsedTimeInNanos
APACHE_THRIFT_DEFINE_ACCESSOR(elapsedTimeInNanos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedTimeInNanos
#define APACHE_THRIFT_ACCESSOR_queuedTimeInNanos
APACHE_THRIFT_DEFINE_ACCESSOR(queuedTimeInNanos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalDrivers
#define APACHE_THRIFT_ACCESSOR_totalDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(totalDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedDrivers
#define APACHE_THRIFT_ACCESSOR_queuedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(queuedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runningDrivers
#define APACHE_THRIFT_ACCESSOR_runningDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(runningDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_blockedDrivers
#define APACHE_THRIFT_ACCESSOR_blockedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(blockedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_completedDrivers
#define APACHE_THRIFT_ACCESSOR_completedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(completedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cumulativeUserMemory
#define APACHE_THRIFT_ACCESSOR_cumulativeUserMemory
APACHE_THRIFT_DEFINE_ACCESSOR(cumulativeUserMemory);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cumulativeTotalMemory
#define APACHE_THRIFT_ACCESSOR_cumulativeTotalMemory
APACHE_THRIFT_DEFINE_ACCESSOR(cumulativeTotalMemory);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_userMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_userMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(userMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_revocableMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_revocableMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(revocableMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(systemMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_peakUserMemoryInBytes
#define APACHE_THRIFT_ACCESSOR_peakUserMemoryInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(peakUserMemoryInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_peakTotalMemoryInBytes
#define APACHE_THRIFT_ACCESSOR_peakTotalMemoryInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(peakTotalMemoryInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_peakNodeTotalMemoryInBytes
#define APACHE_THRIFT_ACCESSOR_peakNodeTotalMemoryInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(peakNodeTotalMemoryInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalScheduledTimeInNanos
#define APACHE_THRIFT_ACCESSOR_totalScheduledTimeInNanos
APACHE_THRIFT_DEFINE_ACCESSOR(totalScheduledTimeInNanos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalCpuTimeInNanos
#define APACHE_THRIFT_ACCESSOR_totalCpuTimeInNanos
APACHE_THRIFT_DEFINE_ACCESSOR(totalCpuTimeInNanos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalBlockedTimeInNanos
#define APACHE_THRIFT_ACCESSOR_totalBlockedTimeInNanos
APACHE_THRIFT_DEFINE_ACCESSOR(totalBlockedTimeInNanos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fullyBlocked
#define APACHE_THRIFT_ACCESSOR_fullyBlocked
APACHE_THRIFT_DEFINE_ACCESSOR(fullyBlocked);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_blockedReasons
#define APACHE_THRIFT_ACCESSOR_blockedReasons
APACHE_THRIFT_DEFINE_ACCESSOR(blockedReasons);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalAllocationInBytes
#define APACHE_THRIFT_ACCESSOR_totalAllocationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(totalAllocationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rawInputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_rawInputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(rawInputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rawInputPositions
#define APACHE_THRIFT_ACCESSOR_rawInputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(rawInputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_processedInputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_processedInputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(processedInputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_processedInputPositions
#define APACHE_THRIFT_ACCESSOR_processedInputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(processedInputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_outputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(outputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputPositions
#define APACHE_THRIFT_ACCESSOR_outputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(outputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(physicalWrittenDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pipelines
#define APACHE_THRIFT_ACCESSOR_pipelines
APACHE_THRIFT_DEFINE_ACCESSOR(pipelines);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedPartitionedDrivers
#define APACHE_THRIFT_ACCESSOR_queuedPartitionedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(queuedPartitionedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedPartitionedSplitsWeight
#define APACHE_THRIFT_ACCESSOR_queuedPartitionedSplitsWeight
APACHE_THRIFT_DEFINE_ACCESSOR(queuedPartitionedSplitsWeight);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runningPartitionedDrivers
#define APACHE_THRIFT_ACCESSOR_runningPartitionedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(runningPartitionedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runningPartitionedSplitsWeight
#define APACHE_THRIFT_ACCESSOR_runningPartitionedSplitsWeight
APACHE_THRIFT_DEFINE_ACCESSOR(runningPartitionedSplitsWeight);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fullGcCount
#define APACHE_THRIFT_ACCESSOR_fullGcCount
APACHE_THRIFT_DEFINE_ACCESSOR(fullGcCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fullGcTimeInMillis
#define APACHE_THRIFT_ACCESSOR_fullGcTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(fullGcTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runtimeStats
#define APACHE_THRIFT_ACCESSOR_runtimeStats
APACHE_THRIFT_DEFINE_ACCESSOR(runtimeStats);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pipelineId
#define APACHE_THRIFT_ACCESSOR_pipelineId
APACHE_THRIFT_DEFINE_ACCESSOR(pipelineId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_firstStartTimeInMillis
#define APACHE_THRIFT_ACCESSOR_firstStartTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(firstStartTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lastStartTimeInMillis
#define APACHE_THRIFT_ACCESSOR_lastStartTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(lastStartTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lastEndTimeInMillis
#define APACHE_THRIFT_ACCESSOR_lastEndTimeInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(lastEndTimeInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inputPipeline
#define APACHE_THRIFT_ACCESSOR_inputPipeline
APACHE_THRIFT_DEFINE_ACCESSOR(inputPipeline);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputPipeline
#define APACHE_THRIFT_ACCESSOR_outputPipeline
APACHE_THRIFT_DEFINE_ACCESSOR(outputPipeline);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalDrivers
#define APACHE_THRIFT_ACCESSOR_totalDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(totalDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedDrivers
#define APACHE_THRIFT_ACCESSOR_queuedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(queuedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedPartitionedDrivers
#define APACHE_THRIFT_ACCESSOR_queuedPartitionedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(queuedPartitionedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedPartitionedSplitsWeight
#define APACHE_THRIFT_ACCESSOR_queuedPartitionedSplitsWeight
APACHE_THRIFT_DEFINE_ACCESSOR(queuedPartitionedSplitsWeight);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runningDrivers
#define APACHE_THRIFT_ACCESSOR_runningDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(runningDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runningPartitionedDrivers
#define APACHE_THRIFT_ACCESSOR_runningPartitionedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(runningPartitionedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runningPartitionedSplitsWeight
#define APACHE_THRIFT_ACCESSOR_runningPartitionedSplitsWeight
APACHE_THRIFT_DEFINE_ACCESSOR(runningPartitionedSplitsWeight);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_blockedDrivers
#define APACHE_THRIFT_ACCESSOR_blockedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(blockedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_completedDrivers
#define APACHE_THRIFT_ACCESSOR_completedDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(completedDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_userMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_userMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(userMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_revocableMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_revocableMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(revocableMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(systemMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queuedTime
#define APACHE_THRIFT_ACCESSOR_queuedTime
APACHE_THRIFT_DEFINE_ACCESSOR(queuedTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_elapsedTime
#define APACHE_THRIFT_ACCESSOR_elapsedTime
APACHE_THRIFT_DEFINE_ACCESSOR(elapsedTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalScheduledTimeInNanos
#define APACHE_THRIFT_ACCESSOR_totalScheduledTimeInNanos
APACHE_THRIFT_DEFINE_ACCESSOR(totalScheduledTimeInNanos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalCpuTimeInNanos
#define APACHE_THRIFT_ACCESSOR_totalCpuTimeInNanos
APACHE_THRIFT_DEFINE_ACCESSOR(totalCpuTimeInNanos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalBlockedTimeInNanos
#define APACHE_THRIFT_ACCESSOR_totalBlockedTimeInNanos
APACHE_THRIFT_DEFINE_ACCESSOR(totalBlockedTimeInNanos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fullyBlocked
#define APACHE_THRIFT_ACCESSOR_fullyBlocked
APACHE_THRIFT_DEFINE_ACCESSOR(fullyBlocked);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_blockedReasons
#define APACHE_THRIFT_ACCESSOR_blockedReasons
APACHE_THRIFT_DEFINE_ACCESSOR(blockedReasons);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalAllocationInBytes
#define APACHE_THRIFT_ACCESSOR_totalAllocationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(totalAllocationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rawInputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_rawInputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(rawInputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rawInputPositions
#define APACHE_THRIFT_ACCESSOR_rawInputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(rawInputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_processedInputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_processedInputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(processedInputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_processedInputPositions
#define APACHE_THRIFT_ACCESSOR_processedInputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(processedInputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_outputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(outputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputPositions
#define APACHE_THRIFT_ACCESSOR_outputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(outputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(physicalWrittenDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_operatorSummaries
#define APACHE_THRIFT_ACCESSOR_operatorSummaries
APACHE_THRIFT_DEFINE_ACCESSOR(operatorSummaries);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_drivers
#define APACHE_THRIFT_ACCESSOR_drivers
APACHE_THRIFT_DEFINE_ACCESSOR(drivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sum
#define APACHE_THRIFT_ACCESSOR_sum
APACHE_THRIFT_DEFINE_ACCESSOR(sum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_count
#define APACHE_THRIFT_ACCESSOR_count
APACHE_THRIFT_DEFINE_ACCESSOR(count);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_max
#define APACHE_THRIFT_ACCESSOR_max
APACHE_THRIFT_DEFINE_ACCESSOR(max);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_min
#define APACHE_THRIFT_ACCESSOR_min
APACHE_THRIFT_DEFINE_ACCESSOR(min);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unit
#define APACHE_THRIFT_ACCESSOR_unit
APACHE_THRIFT_DEFINE_ACCESSOR(unit);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_joinType
#define APACHE_THRIFT_ACCESSOR_joinType
APACHE_THRIFT_DEFINE_ACCESSOR(joinType);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_logHistogramProbes
#define APACHE_THRIFT_ACCESSOR_logHistogramProbes
APACHE_THRIFT_DEFINE_ACCESSOR(logHistogramProbes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_logHistogramOutput
#define APACHE_THRIFT_ACCESSOR_logHistogramOutput
APACHE_THRIFT_DEFINE_ACCESSOR(logHistogramOutput);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lookupSourcePositions
#define APACHE_THRIFT_ACCESSOR_lookupSourcePositions
APACHE_THRIFT_DEFINE_ACCESSOR(lookupSourcePositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queryId
#define APACHE_THRIFT_ACCESSOR_queryId
APACHE_THRIFT_DEFINE_ACCESSOR(queryId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_transactionId
#define APACHE_THRIFT_ACCESSOR_transactionId
APACHE_THRIFT_DEFINE_ACCESSOR(transactionId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clientTransactionSupport
#define APACHE_THRIFT_ACCESSOR_clientTransactionSupport
APACHE_THRIFT_DEFINE_ACCESSOR(clientTransactionSupport);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_user
#define APACHE_THRIFT_ACCESSOR_user
APACHE_THRIFT_DEFINE_ACCESSOR(user);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_principal
#define APACHE_THRIFT_ACCESSOR_principal
APACHE_THRIFT_DEFINE_ACCESSOR(principal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_source
#define APACHE_THRIFT_ACCESSOR_source
APACHE_THRIFT_DEFINE_ACCESSOR(source);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_catalog
#define APACHE_THRIFT_ACCESSOR_catalog
APACHE_THRIFT_DEFINE_ACCESSOR(catalog);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_schema
#define APACHE_THRIFT_ACCESSOR_schema
APACHE_THRIFT_DEFINE_ACCESSOR(schema);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_traceToken
#define APACHE_THRIFT_ACCESSOR_traceToken
APACHE_THRIFT_DEFINE_ACCESSOR(traceToken);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_timeZoneKey
#define APACHE_THRIFT_ACCESSOR_timeZoneKey
APACHE_THRIFT_DEFINE_ACCESSOR(timeZoneKey);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_locale
#define APACHE_THRIFT_ACCESSOR_locale
APACHE_THRIFT_DEFINE_ACCESSOR(locale);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remoteUserAddress
#define APACHE_THRIFT_ACCESSOR_remoteUserAddress
APACHE_THRIFT_DEFINE_ACCESSOR(remoteUserAddress);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_userAgent
#define APACHE_THRIFT_ACCESSOR_userAgent
APACHE_THRIFT_DEFINE_ACCESSOR(userAgent);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clientInfo
#define APACHE_THRIFT_ACCESSOR_clientInfo
APACHE_THRIFT_DEFINE_ACCESSOR(clientInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clientTags
#define APACHE_THRIFT_ACCESSOR_clientTags
APACHE_THRIFT_DEFINE_ACCESSOR(clientTags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_resourceEstimates
#define APACHE_THRIFT_ACCESSOR_resourceEstimates
APACHE_THRIFT_DEFINE_ACCESSOR(resourceEstimates);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_startTime
#define APACHE_THRIFT_ACCESSOR_startTime
APACHE_THRIFT_DEFINE_ACCESSOR(startTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_systemProperties
#define APACHE_THRIFT_ACCESSOR_systemProperties
APACHE_THRIFT_DEFINE_ACCESSOR(systemProperties);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_catalogProperties
#define APACHE_THRIFT_ACCESSOR_catalogProperties
APACHE_THRIFT_DEFINE_ACCESSOR(catalogProperties);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unprocessedCatalogProperties
#define APACHE_THRIFT_ACCESSOR_unprocessedCatalogProperties
APACHE_THRIFT_DEFINE_ACCESSOR(unprocessedCatalogProperties);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_roles
#define APACHE_THRIFT_ACCESSOR_roles
APACHE_THRIFT_DEFINE_ACCESSOR(roles);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_preparedStatements
#define APACHE_THRIFT_ACCESSOR_preparedStatements
APACHE_THRIFT_DEFINE_ACCESSOR(preparedStatements);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sessionFunctions
#define APACHE_THRIFT_ACCESSOR_sessionFunctions
APACHE_THRIFT_DEFINE_ACCESSOR(sessionFunctions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_type
#define APACHE_THRIFT_ACCESSOR_type
APACHE_THRIFT_DEFINE_ACCESSOR(type);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_role
#define APACHE_THRIFT_ACCESSOR_role
APACHE_THRIFT_DEFINE_ACCESSOR(role);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_type
#define APACHE_THRIFT_ACCESSOR_type
APACHE_THRIFT_DEFINE_ACCESSOR(type);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_language
#define APACHE_THRIFT_ACCESSOR_language
APACHE_THRIFT_DEFINE_ACCESSOR(language);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_determinism
#define APACHE_THRIFT_ACCESSOR_determinism
APACHE_THRIFT_DEFINE_ACCESSOR(determinism);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nullCallClause
#define APACHE_THRIFT_ACCESSOR_nullCallClause
APACHE_THRIFT_DEFINE_ACCESSOR(nullCallClause);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_kind
#define APACHE_THRIFT_ACCESSOR_kind
APACHE_THRIFT_DEFINE_ACCESSOR(kind);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_returnType
#define APACHE_THRIFT_ACCESSOR_returnType
APACHE_THRIFT_DEFINE_ACCESSOR(returnType);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_argumentTypes
#define APACHE_THRIFT_ACCESSOR_argumentTypes
APACHE_THRIFT_DEFINE_ACCESSOR(argumentTypes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_variableArity
#define APACHE_THRIFT_ACCESSOR_variableArity
APACHE_THRIFT_DEFINE_ACCESSOR(variableArity);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_typeVariableConstraints
#define APACHE_THRIFT_ACCESSOR_typeVariableConstraints
APACHE_THRIFT_DEFINE_ACCESSOR(typeVariableConstraints);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_longVariableConstraints
#define APACHE_THRIFT_ACCESSOR_longVariableConstraints
APACHE_THRIFT_DEFINE_ACCESSOR(longVariableConstraints);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_type
#define APACHE_THRIFT_ACCESSOR_type
APACHE_THRIFT_DEFINE_ACCESSOR(type);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_version
#define APACHE_THRIFT_ACCESSOR_version
APACHE_THRIFT_DEFINE_ACCESSOR(version);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_noMoreBufferIds
#define APACHE_THRIFT_ACCESSOR_noMoreBufferIds
APACHE_THRIFT_DEFINE_ACCESSOR(noMoreBufferIds);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_buffers
#define APACHE_THRIFT_ACCESSOR_buffers
APACHE_THRIFT_DEFINE_ACCESSOR(buffers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_session
#define APACHE_THRIFT_ACCESSOR_session
APACHE_THRIFT_DEFINE_ACCESSOR(session);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_extraCredentials
#define APACHE_THRIFT_ACCESSOR_extraCredentials
APACHE_THRIFT_DEFINE_ACCESSOR(extraCredentials);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fragment
#define APACHE_THRIFT_ACCESSOR_fragment
APACHE_THRIFT_DEFINE_ACCESSOR(fragment);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sources
#define APACHE_THRIFT_ACCESSOR_sources
APACHE_THRIFT_DEFINE_ACCESSOR(sources);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputIds
#define APACHE_THRIFT_ACCESSOR_outputIds
APACHE_THRIFT_DEFINE_ACCESSOR(outputIds);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tableWriteInfo
#define APACHE_THRIFT_ACCESSOR_tableWriteInfo
APACHE_THRIFT_DEFINE_ACCESSOR(tableWriteInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_type
#define APACHE_THRIFT_ACCESSOR_type
APACHE_THRIFT_DEFINE_ACCESSOR(type);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cause
#define APACHE_THRIFT_ACCESSOR_cause
APACHE_THRIFT_DEFINE_ACCESSOR(cause);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_suppressed
#define APACHE_THRIFT_ACCESSOR_suppressed
APACHE_THRIFT_DEFINE_ACCESSOR(suppressed);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stack
#define APACHE_THRIFT_ACCESSOR_stack
APACHE_THRIFT_DEFINE_ACCESSOR(stack);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_errorLocation
#define APACHE_THRIFT_ACCESSOR_errorLocation
APACHE_THRIFT_DEFINE_ACCESSOR(errorLocation);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_errorCode
#define APACHE_THRIFT_ACCESSOR_errorCode
APACHE_THRIFT_DEFINE_ACCESSOR(errorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remoteHost
#define APACHE_THRIFT_ACCESSOR_remoteHost
APACHE_THRIFT_DEFINE_ACCESSOR(remoteHost);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_errorCause
#define APACHE_THRIFT_ACCESSOR_errorCause
APACHE_THRIFT_DEFINE_ACCESSOR(errorCause);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stageExecutionId
#define APACHE_THRIFT_ACCESSOR_stageExecutionId
APACHE_THRIFT_DEFINE_ACCESSOR(stageExecutionId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_attemptNumber
#define APACHE_THRIFT_ACCESSOR_attemptNumber
APACHE_THRIFT_DEFINE_ACCESSOR(attemptNumber);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exchangeClientStatus
#define APACHE_THRIFT_ACCESSOR_exchangeClientStatus
APACHE_THRIFT_DEFINE_ACCESSOR(exchangeClientStatus);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_localExchangeBufferInfo
#define APACHE_THRIFT_ACCESSOR_localExchangeBufferInfo
APACHE_THRIFT_DEFINE_ACCESSOR(localExchangeBufferInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tableFinishInfo
#define APACHE_THRIFT_ACCESSOR_tableFinishInfo
APACHE_THRIFT_DEFINE_ACCESSOR(tableFinishInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_splitOperatorInfo
#define APACHE_THRIFT_ACCESSOR_splitOperatorInfo
APACHE_THRIFT_DEFINE_ACCESSOR(splitOperatorInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_hashCollisionsInfo
#define APACHE_THRIFT_ACCESSOR_hashCollisionsInfo
APACHE_THRIFT_DEFINE_ACCESSOR(hashCollisionsInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_partitionedOutputInfo
#define APACHE_THRIFT_ACCESSOR_partitionedOutputInfo
APACHE_THRIFT_DEFINE_ACCESSOR(partitionedOutputInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_joinOperatorInfo
#define APACHE_THRIFT_ACCESSOR_joinOperatorInfo
APACHE_THRIFT_DEFINE_ACCESSOR(joinOperatorInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_windowInfo
#define APACHE_THRIFT_ACCESSOR_windowInfo
APACHE_THRIFT_DEFINE_ACCESSOR(windowInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tableWriterInfo
#define APACHE_THRIFT_ACCESSOR_tableWriterInfo
APACHE_THRIFT_DEFINE_ACCESSOR(tableWriterInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tableWriterMergeInfo
#define APACHE_THRIFT_ACCESSOR_tableWriterMergeInfo
APACHE_THRIFT_DEFINE_ACCESSOR(tableWriterMergeInfo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_parameters
#define APACHE_THRIFT_ACCESSOR_parameters
APACHE_THRIFT_DEFINE_ACCESSOR(parameters);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_description
#define APACHE_THRIFT_ACCESSOR_description
APACHE_THRIFT_DEFINE_ACCESSOR(description);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_routineCharacteristics
#define APACHE_THRIFT_ACCESSOR_routineCharacteristics
APACHE_THRIFT_DEFINE_ACCESSOR(routineCharacteristics);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_body
#define APACHE_THRIFT_ACCESSOR_body
APACHE_THRIFT_DEFINE_ACCESSOR(body);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_variableArity
#define APACHE_THRIFT_ACCESSOR_variableArity
APACHE_THRIFT_DEFINE_ACCESSOR(variableArity);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_signature
#define APACHE_THRIFT_ACCESSOR_signature
APACHE_THRIFT_DEFINE_ACCESSOR(signature);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_functionId
#define APACHE_THRIFT_ACCESSOR_functionId
APACHE_THRIFT_DEFINE_ACCESSOR(functionId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_taskId
#define APACHE_THRIFT_ACCESSOR_taskId
APACHE_THRIFT_DEFINE_ACCESSOR(taskId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_taskStatus
#define APACHE_THRIFT_ACCESSOR_taskStatus
APACHE_THRIFT_DEFINE_ACCESSOR(taskStatus);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lastHeartbeatInMillis
#define APACHE_THRIFT_ACCESSOR_lastHeartbeatInMillis
APACHE_THRIFT_DEFINE_ACCESSOR(lastHeartbeatInMillis);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputBuffers
#define APACHE_THRIFT_ACCESSOR_outputBuffers
APACHE_THRIFT_DEFINE_ACCESSOR(outputBuffers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_noMoreSplits
#define APACHE_THRIFT_ACCESSOR_noMoreSplits
APACHE_THRIFT_DEFINE_ACCESSOR(noMoreSplits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stats
#define APACHE_THRIFT_ACCESSOR_stats
APACHE_THRIFT_DEFINE_ACCESSOR(stats);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_needsPlan
#define APACHE_THRIFT_ACCESSOR_needsPlan
APACHE_THRIFT_DEFINE_ACCESSOR(needsPlan);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_metadataUpdates
#define APACHE_THRIFT_ACCESSOR_metadataUpdates
APACHE_THRIFT_DEFINE_ACCESSOR(metadataUpdates);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nodeId
#define APACHE_THRIFT_ACCESSOR_nodeId
APACHE_THRIFT_DEFINE_ACCESSOR(nodeId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stageId
#define APACHE_THRIFT_ACCESSOR_stageId
APACHE_THRIFT_DEFINE_ACCESSOR(stageId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stageExecutionId
#define APACHE_THRIFT_ACCESSOR_stageExecutionId
APACHE_THRIFT_DEFINE_ACCESSOR(stageExecutionId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pipelineId
#define APACHE_THRIFT_ACCESSOR_pipelineId
APACHE_THRIFT_DEFINE_ACCESSOR(pipelineId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_operatorId
#define APACHE_THRIFT_ACCESSOR_operatorId
APACHE_THRIFT_DEFINE_ACCESSOR(operatorId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_planNodeId
#define APACHE_THRIFT_ACCESSOR_planNodeId
APACHE_THRIFT_DEFINE_ACCESSOR(planNodeId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_operatorType
#define APACHE_THRIFT_ACCESSOR_operatorType
APACHE_THRIFT_DEFINE_ACCESSOR(operatorType);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalDrivers
#define APACHE_THRIFT_ACCESSOR_totalDrivers
APACHE_THRIFT_DEFINE_ACCESSOR(totalDrivers);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_addInputCalls
#define APACHE_THRIFT_ACCESSOR_addInputCalls
APACHE_THRIFT_DEFINE_ACCESSOR(addInputCalls);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_addInputWall
#define APACHE_THRIFT_ACCESSOR_addInputWall
APACHE_THRIFT_DEFINE_ACCESSOR(addInputWall);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_addInputCpu
#define APACHE_THRIFT_ACCESSOR_addInputCpu
APACHE_THRIFT_DEFINE_ACCESSOR(addInputCpu);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_addInputAllocationInBytes
#define APACHE_THRIFT_ACCESSOR_addInputAllocationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(addInputAllocationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rawInputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_rawInputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(rawInputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rawInputPositions
#define APACHE_THRIFT_ACCESSOR_rawInputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(rawInputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_inputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(inputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inputPositions
#define APACHE_THRIFT_ACCESSOR_inputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(inputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sumSquaredInputPositions
#define APACHE_THRIFT_ACCESSOR_sumSquaredInputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(sumSquaredInputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_getOutputCalls
#define APACHE_THRIFT_ACCESSOR_getOutputCalls
APACHE_THRIFT_DEFINE_ACCESSOR(getOutputCalls);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_getOutputWall
#define APACHE_THRIFT_ACCESSOR_getOutputWall
APACHE_THRIFT_DEFINE_ACCESSOR(getOutputWall);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_getOutputCpu
#define APACHE_THRIFT_ACCESSOR_getOutputCpu
APACHE_THRIFT_DEFINE_ACCESSOR(getOutputCpu);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_getOutputAllocationInBytes
#define APACHE_THRIFT_ACCESSOR_getOutputAllocationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(getOutputAllocationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_outputDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(outputDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_outputPositions
#define APACHE_THRIFT_ACCESSOR_outputPositions
APACHE_THRIFT_DEFINE_ACCESSOR(outputPositions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_physicalWrittenDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(physicalWrittenDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_additionalCpu
#define APACHE_THRIFT_ACCESSOR_additionalCpu
APACHE_THRIFT_DEFINE_ACCESSOR(additionalCpu);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_blockedWall
#define APACHE_THRIFT_ACCESSOR_blockedWall
APACHE_THRIFT_DEFINE_ACCESSOR(blockedWall);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_finishCalls
#define APACHE_THRIFT_ACCESSOR_finishCalls
APACHE_THRIFT_DEFINE_ACCESSOR(finishCalls);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_finishWall
#define APACHE_THRIFT_ACCESSOR_finishWall
APACHE_THRIFT_DEFINE_ACCESSOR(finishWall);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_finishCpu
#define APACHE_THRIFT_ACCESSOR_finishCpu
APACHE_THRIFT_DEFINE_ACCESSOR(finishCpu);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_finishAllocationInBytes
#define APACHE_THRIFT_ACCESSOR_finishAllocationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(finishAllocationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_userMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_userMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(userMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_revocableMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_revocableMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(revocableMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_systemMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(systemMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_peakUserMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_peakUserMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(peakUserMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_peakSystemMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_peakSystemMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(peakSystemMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_peakTotalMemoryReservationInBytes
#define APACHE_THRIFT_ACCESSOR_peakTotalMemoryReservationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(peakTotalMemoryReservationInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_spilledDataSizeInBytes
#define APACHE_THRIFT_ACCESSOR_spilledDataSizeInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(spilledDataSizeInBytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_runtimeStats
#define APACHE_THRIFT_ACCESSOR_runtimeStats
APACHE_THRIFT_DEFINE_ACCESSOR(runtimeStats);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_blockedReason
#define APACHE_THRIFT_ACCESSOR_blockedReason
APACHE_THRIFT_DEFINE_ACCESSOR(blockedReason);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_infoUnion
#define APACHE_THRIFT_ACCESSOR_infoUnion
APACHE_THRIFT_DEFINE_ACCESSOR(infoUnion);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nullJoinBuildKeyCount
#define APACHE_THRIFT_ACCESSOR_nullJoinBuildKeyCount
APACHE_THRIFT_DEFINE_ACCESSOR(nullJoinBuildKeyCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_joinBuildKeyCount
#define APACHE_THRIFT_ACCESSOR_joinBuildKeyCount
APACHE_THRIFT_DEFINE_ACCESSOR(joinBuildKeyCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nullJoinProbeKeyCount
#define APACHE_THRIFT_ACCESSOR_nullJoinProbeKeyCount
APACHE_THRIFT_DEFINE_ACCESSOR(nullJoinProbeKeyCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_joinProbeKeyCount
#define APACHE_THRIFT_ACCESSOR_joinProbeKeyCount
APACHE_THRIFT_DEFINE_ACCESSOR(joinProbeKeyCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_dynamicFilterStats
#define APACHE_THRIFT_ACCESSOR_dynamicFilterStats
APACHE_THRIFT_DEFINE_ACCESSOR(dynamicFilterStats);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_isBlockedCalls
#define APACHE_THRIFT_ACCESSOR_isBlockedCalls
APACHE_THRIFT_DEFINE_ACCESSOR(isBlockedCalls);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_isBlockedWall
#define APACHE_THRIFT_ACCESSOR_isBlockedWall
APACHE_THRIFT_DEFINE_ACCESSOR(isBlockedWall);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_isBlockedCpu
#define APACHE_THRIFT_ACCESSOR_isBlockedCpu
APACHE_THRIFT_DEFINE_ACCESSOR(isBlockedCpu);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_isBlockedAllocationInBytes
#define APACHE_THRIFT_ACCESSOR_isBlockedAllocationInBytes
APACHE_THRIFT_DEFINE_ACCESSOR(isBlockedAllocationInBytes);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace facebook::presto::protocol::cpp2 {

/** Glean {"file": "presto_protocol_api.thrift", "name": "TaskState", "kind": "enum" } */
enum class TaskState {
  PLANNED = 0,
  RUNNING = 1,
  FINISHED = 2,
  CANCELED = 3,
  ABORTED = 4,
  FAILED = 5,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "ErrorType", "kind": "enum" } */
enum class ErrorType {
  USER_ERROR = 0,
  INTERNAL_ERROR = 1,
  INSUFFICIENT_RESOURCES = 2,
  EXTERNAL = 3,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "ErrorCause", "kind": "enum" } */
enum class ErrorCause {
  UNKNOWN = 0,
  LOW_PARTITION_COUNT = 1,
  EXCEEDS_BROADCAST_MEMORY_LIMIT = 2,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "BufferState", "kind": "enum" } */
enum class BufferState {
  OPEN = 0,
  NO_MORE_BUFFERS = 1,
  NO_MORE_PAGES = 2,
  FLUSHING = 3,
  FINISHED = 4,
  FAILED = 5,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "BlockedReason", "kind": "enum" } */
enum class BlockedReason {
  WAITING_FOR_MEMORY = 0,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "RuntimeUnit", "kind": "enum" } */
enum class RuntimeUnit {
  NONE = 0,
  NANO = 1,
  BYTE = 2,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "JoinType", "kind": "enum" } */
enum class JoinType {
  INNER = 0,
  PROBE_OUTER = 1,
  LOOKUP_OUTER = 2,
  FULL_OUTER = 3,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "Type", "kind": "enum" } */
enum class Type {
  ROLE = 0,
  ALL = 1,
  NONE = 2,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "Determinism", "kind": "enum" } */
enum class Determinism {
  DETERMINISTIC = 0,
  NOT_DETERMINISTIC = 1,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "NullCallClause", "kind": "enum" } */
enum class NullCallClause {
  RETURNS_NULL_ON_NULL_INPUT = 0,
  CALLED_ON_NULL_INPUT = 1,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "FunctionKind", "kind": "enum" } */
enum class FunctionKind {
  SCALAR = 0,
  AGGREGATE = 1,
  WINDOW = 2,
};

/** Glean {"file": "presto_protocol_api.thrift", "name": "BufferType", "kind": "enum" } */
enum class BufferType {
  PARTITIONED = 0,
  BROADCAST = 1,
  ARBITRARY = 2,
  DISCARDING = 3,
  SPOOLING = 4,
};

} // namespace facebook::presto::protocol::cpp2

template<> struct std::hash<::facebook::presto::protocol::cpp2::TaskState> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::TaskState> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::ErrorType> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::ErrorType> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::ErrorCause> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::ErrorCause> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::BufferState> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::BufferState> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::BlockedReason> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::BlockedReason> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::RuntimeUnit> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::RuntimeUnit> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::JoinType> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::JoinType> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::Type> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::Type> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::Determinism> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::Determinism> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::NullCallClause> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::NullCallClause> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::FunctionKind> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::FunctionKind> {};
template<> struct std::hash<::facebook::presto::protocol::cpp2::BufferType> :
  ::apache::thrift::detail::enum_hash<::facebook::presto::protocol::cpp2::BufferType> {};

namespace apache::thrift {

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::TaskState> {
  using type = ::facebook::presto::protocol::cpp2::TaskState;

  static constexpr std::size_t const size = 6;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "TaskState";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::PLANNED; }
  static constexpr type max() { return type::FAILED; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::ErrorType> {
  using type = ::facebook::presto::protocol::cpp2::ErrorType;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "ErrorType";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::USER_ERROR; }
  static constexpr type max() { return type::EXTERNAL; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::ErrorCause> {
  using type = ::facebook::presto::protocol::cpp2::ErrorCause;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "ErrorCause";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::UNKNOWN; }
  static constexpr type max() { return type::EXCEEDS_BROADCAST_MEMORY_LIMIT; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::BufferState> {
  using type = ::facebook::presto::protocol::cpp2::BufferState;

  static constexpr std::size_t const size = 6;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "BufferState";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::OPEN; }
  static constexpr type max() { return type::FAILED; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::BlockedReason> {
  using type = ::facebook::presto::protocol::cpp2::BlockedReason;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "BlockedReason";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::WAITING_FOR_MEMORY; }
  static constexpr type max() { return type::WAITING_FOR_MEMORY; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::RuntimeUnit> {
  using type = ::facebook::presto::protocol::cpp2::RuntimeUnit;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "RuntimeUnit";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::NONE; }
  static constexpr type max() { return type::BYTE; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::JoinType> {
  using type = ::facebook::presto::protocol::cpp2::JoinType;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "JoinType";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::INNER; }
  static constexpr type max() { return type::FULL_OUTER; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::Type> {
  using type = ::facebook::presto::protocol::cpp2::Type;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "Type";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::ROLE; }
  static constexpr type max() { return type::NONE; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::Determinism> {
  using type = ::facebook::presto::protocol::cpp2::Determinism;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "Determinism";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::DETERMINISTIC; }
  static constexpr type max() { return type::NOT_DETERMINISTIC; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::NullCallClause> {
  using type = ::facebook::presto::protocol::cpp2::NullCallClause;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "NullCallClause";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::RETURNS_NULL_ON_NULL_INPUT; }
  static constexpr type max() { return type::CALLED_ON_NULL_INPUT; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::FunctionKind> {
  using type = ::facebook::presto::protocol::cpp2::FunctionKind;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "FunctionKind";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::SCALAR; }
  static constexpr type max() { return type::WINDOW; }
};

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::BufferType> {
  using type = ::facebook::presto::protocol::cpp2::BufferType;

  static constexpr std::size_t const size = 5;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "BufferType";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "presto_protocol_api";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::PARTITIONED; }
  static constexpr type max() { return type::SPOOLING; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace facebook::presto::protocol::cpp2 {
class SplitWrapper;
class TableWriteInfoWrapper;
class MetadataUpdatesWrapper;
class Lifespan;
class ErrorLocation;
class HostAddress;
class StageId;
class OutputBufferId;
class PageBufferInfo;
class PlanNodeId;
class DistributionSnapshot;
class RuntimeStats;
class ExchangeClientStatus;
class PageBufferClientStatus;
class LocalExchangeBufferInfo;
class TableFinishInfo;
class SplitOperatorInfo;
class HashCollisionsInfo;
class PartitionedOutputInfo;
class WindowInfo;
class DriverWindowInfo;
class TableWriterInfo;
class TableWriterMergeInfo;
class DynamicFilterStats;
class DriverStats;
class TransactionId;
class TimeZoneKey;
class ResourceEstimates;
class ConnectorId;
class SqlFunctionId;
class TypeSignature;
class Language;
class QualifiedObjectName;
class TypeVariableConstraint;
class LongVariableConstraint;
class TaskSource;
class ScheduledSplit;
class TaskStatus;
class ErrorCode;
class StageExecutionId;
class OutputBufferInfo;
class BufferInfo;
class TaskStats;
class PipelineStats;
class RuntimeMetric;
class JoinOperatorInfo;
class SessionRepresentation;
class SelectedRole;
class Parameter;
class RoutineCharacteristics;
class Signature;
class OutputBuffers;
class TaskUpdateRequest;
class ExecutionFailureInfo;
class TaskId;
class OperatorInfoUnion;
class SqlInvokedFunction;
class TaskInfo;
class OperatorStats;
} // namespace facebook::presto::protocol::cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::facebook::presto::protocol::cpp2::ExecutionFailureInfo,::apache::thrift::type::field_id<3>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::presto::protocol::cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "presto_protocol_api.thrift", "name": "SplitWrapper", "kind": "struct" } */
class SplitWrapper final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::split
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SplitWrapper;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SplitWrapper();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SplitWrapper(apache::thrift::FragileConstructor, ::std::string split__arg);

  SplitWrapper(SplitWrapper&&) noexcept;

  SplitWrapper(const SplitWrapper& src);


  SplitWrapper& operator=(SplitWrapper&&) noexcept;
  SplitWrapper& operator=(const SplitWrapper& src);

  ~SplitWrapper();

 private:
  ::std::string __fbthrift_field_split;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SplitWrapper&) const;
  bool operator<(const SplitWrapper&) const;

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> split_ref() const& {
    return {this->__fbthrift_field_split, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> split_ref() & {
    return {this->__fbthrift_field_split, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> split_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_split), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> split() const& {
    return {this->__fbthrift_field_split, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> split() & {
    return {this->__fbthrift_field_split, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> split() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_split), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "split" } */
  [[deprecated("Use `FOO.split().value()` instead of `FOO.get_split()`")]]
  const ::std::string& get_split() const& {
    return __fbthrift_field_split;
  }

  /** Glean { "field": "split" } */
  [[deprecated("Use `FOO.split().value()` instead of `FOO.get_split()`")]]
  ::std::string get_split() && {
    return static_cast<::std::string&&>(__fbthrift_field_split);
  }

  /** Glean { "field": "split" } */
  template <typename T_SplitWrapper_split_struct_setter = ::std::string>
  [[deprecated("Use `FOO.split() = BAR` instead of `FOO.set_split(BAR)`")]]
  ::std::string& set_split(T_SplitWrapper_split_struct_setter&& split_) {
    split_ref() = std::forward<T_SplitWrapper_split_struct_setter>(split_);
    return __fbthrift_field_split;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SplitWrapper>;
  friend void swap(SplitWrapper& a, SplitWrapper& b);
};

template <class Protocol_>
unsigned long SplitWrapper::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TableWriteInfoWrapper", "kind": "struct" } */
class TableWriteInfoWrapper final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::tableWriteInfo
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TableWriteInfoWrapper;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TableWriteInfoWrapper();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TableWriteInfoWrapper(apache::thrift::FragileConstructor, ::std::string tableWriteInfo__arg);

  TableWriteInfoWrapper(TableWriteInfoWrapper&&) noexcept;

  TableWriteInfoWrapper(const TableWriteInfoWrapper& src);


  TableWriteInfoWrapper& operator=(TableWriteInfoWrapper&&) noexcept;
  TableWriteInfoWrapper& operator=(const TableWriteInfoWrapper& src);

  ~TableWriteInfoWrapper();

 private:
  ::std::string __fbthrift_field_tableWriteInfo;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TableWriteInfoWrapper&) const;
  bool operator<(const TableWriteInfoWrapper&) const;

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> tableWriteInfo_ref() const& {
    return {this->__fbthrift_field_tableWriteInfo, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> tableWriteInfo_ref() & {
    return {this->__fbthrift_field_tableWriteInfo, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> tableWriteInfo_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_tableWriteInfo), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> tableWriteInfo() const& {
    return {this->__fbthrift_field_tableWriteInfo, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> tableWriteInfo() & {
    return {this->__fbthrift_field_tableWriteInfo, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> tableWriteInfo() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_tableWriteInfo), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  [[deprecated("Use `FOO.tableWriteInfo().value()` instead of `FOO.get_tableWriteInfo()`")]]
  const ::std::string& get_tableWriteInfo() const& {
    return __fbthrift_field_tableWriteInfo;
  }

  /** Glean { "field": "tableWriteInfo" } */
  [[deprecated("Use `FOO.tableWriteInfo().value()` instead of `FOO.get_tableWriteInfo()`")]]
  ::std::string get_tableWriteInfo() && {
    return static_cast<::std::string&&>(__fbthrift_field_tableWriteInfo);
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename T_TableWriteInfoWrapper_tableWriteInfo_struct_setter = ::std::string>
  [[deprecated("Use `FOO.tableWriteInfo() = BAR` instead of `FOO.set_tableWriteInfo(BAR)`")]]
  ::std::string& set_tableWriteInfo(T_TableWriteInfoWrapper_tableWriteInfo_struct_setter&& tableWriteInfo_) {
    tableWriteInfo_ref() = std::forward<T_TableWriteInfoWrapper_tableWriteInfo_struct_setter>(tableWriteInfo_);
    return __fbthrift_field_tableWriteInfo;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TableWriteInfoWrapper>;
  friend void swap(TableWriteInfoWrapper& a, TableWriteInfoWrapper& b);
};

template <class Protocol_>
unsigned long TableWriteInfoWrapper::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "MetadataUpdatesWrapper", "kind": "struct" } */
class MetadataUpdatesWrapper final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::metadataUpdates
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MetadataUpdatesWrapper;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MetadataUpdatesWrapper();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MetadataUpdatesWrapper(apache::thrift::FragileConstructor, ::std::string metadataUpdates__arg);

  MetadataUpdatesWrapper(MetadataUpdatesWrapper&&) noexcept;

  MetadataUpdatesWrapper(const MetadataUpdatesWrapper& src);


  MetadataUpdatesWrapper& operator=(MetadataUpdatesWrapper&&) noexcept;
  MetadataUpdatesWrapper& operator=(const MetadataUpdatesWrapper& src);

  ~MetadataUpdatesWrapper();

 private:
  ::std::string __fbthrift_field_metadataUpdates;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MetadataUpdatesWrapper&) const;
  bool operator<(const MetadataUpdatesWrapper&) const;

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> metadataUpdates_ref() const& {
    return {this->__fbthrift_field_metadataUpdates, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> metadataUpdates_ref() & {
    return {this->__fbthrift_field_metadataUpdates, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> metadataUpdates_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_metadataUpdates), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> metadataUpdates() const& {
    return {this->__fbthrift_field_metadataUpdates, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> metadataUpdates() & {
    return {this->__fbthrift_field_metadataUpdates, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> metadataUpdates() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_metadataUpdates), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metadataUpdates" } */
  [[deprecated("Use `FOO.metadataUpdates().value()` instead of `FOO.get_metadataUpdates()`")]]
  const ::std::string& get_metadataUpdates() const& {
    return __fbthrift_field_metadataUpdates;
  }

  /** Glean { "field": "metadataUpdates" } */
  [[deprecated("Use `FOO.metadataUpdates().value()` instead of `FOO.get_metadataUpdates()`")]]
  ::std::string get_metadataUpdates() && {
    return static_cast<::std::string&&>(__fbthrift_field_metadataUpdates);
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename T_MetadataUpdatesWrapper_metadataUpdates_struct_setter = ::std::string>
  [[deprecated("Use `FOO.metadataUpdates() = BAR` instead of `FOO.set_metadataUpdates(BAR)`")]]
  ::std::string& set_metadataUpdates(T_MetadataUpdatesWrapper_metadataUpdates_struct_setter&& metadataUpdates_) {
    metadataUpdates_ref() = std::forward<T_MetadataUpdatesWrapper_metadataUpdates_struct_setter>(metadataUpdates_);
    return __fbthrift_field_metadataUpdates;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MetadataUpdatesWrapper>;
  friend void swap(MetadataUpdatesWrapper& a, MetadataUpdatesWrapper& b);
};

template <class Protocol_>
unsigned long MetadataUpdatesWrapper::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "Lifespan", "kind": "struct" } */
class Lifespan final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::grouped,
    ::apache::thrift::ident::groupId
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Lifespan;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Lifespan() :
      __fbthrift_field_grouped(),
      __fbthrift_field_groupId() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Lifespan(apache::thrift::FragileConstructor, bool grouped__arg, ::std::int32_t groupId__arg);

  Lifespan(Lifespan&&) = default;

  Lifespan(const Lifespan&) = default;


  Lifespan& operator=(Lifespan&&) = default;

  Lifespan& operator=(const Lifespan&) = default;
 private:
  bool __fbthrift_field_grouped;
 private:
  ::std::int32_t __fbthrift_field_groupId;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Lifespan&) const;
  bool operator<(const Lifespan&) const;

  /** Glean { "field": "grouped" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> grouped_ref() const& {
    return {this->__fbthrift_field_grouped, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "grouped" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> grouped_ref() & {
    return {this->__fbthrift_field_grouped, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "grouped" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> grouped_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_grouped), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "grouped" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> grouped() const& {
    return {this->__fbthrift_field_grouped, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "grouped" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> grouped() & {
    return {this->__fbthrift_field_grouped, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "grouped" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> grouped() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_grouped), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "groupId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> groupId_ref() const& {
    return {this->__fbthrift_field_groupId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "groupId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> groupId_ref() & {
    return {this->__fbthrift_field_groupId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "groupId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> groupId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_groupId), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "groupId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> groupId() const& {
    return {this->__fbthrift_field_groupId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "groupId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> groupId() & {
    return {this->__fbthrift_field_groupId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "groupId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> groupId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_groupId), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "grouped" } */
  [[deprecated("Use `FOO.grouped().value()` instead of `FOO.get_grouped()`")]]
  bool get_grouped() const;

  /** Glean { "field": "grouped" } */
  [[deprecated("Use `FOO.grouped() = BAR` instead of `FOO.set_grouped(BAR)`")]]
  bool& set_grouped(bool grouped_);

  /** Glean { "field": "groupId" } */
  [[deprecated("Use `FOO.groupId().value()` instead of `FOO.get_groupId()`")]]
  ::std::int32_t get_groupId() const;

  /** Glean { "field": "groupId" } */
  [[deprecated("Use `FOO.groupId() = BAR` instead of `FOO.set_groupId(BAR)`")]]
  ::std::int32_t& set_groupId(::std::int32_t groupId_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Lifespan>;
  friend void swap(Lifespan& a, Lifespan& b);
};

template <class Protocol_>
unsigned long Lifespan::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "ErrorLocation", "kind": "struct" } */
class ErrorLocation final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::lineNumber,
    ::apache::thrift::ident::columnNumber
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ErrorLocation;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ErrorLocation() :
      __fbthrift_field_lineNumber(),
      __fbthrift_field_columnNumber() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ErrorLocation(apache::thrift::FragileConstructor, ::std::int32_t lineNumber__arg, ::std::int32_t columnNumber__arg);

  ErrorLocation(ErrorLocation&&) = default;

  ErrorLocation(const ErrorLocation&) = default;


  ErrorLocation& operator=(ErrorLocation&&) = default;

  ErrorLocation& operator=(const ErrorLocation&) = default;
 private:
  ::std::int32_t __fbthrift_field_lineNumber;
 private:
  ::std::int32_t __fbthrift_field_columnNumber;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ErrorLocation&) const;
  bool operator<(const ErrorLocation&) const;

  /** Glean { "field": "lineNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lineNumber_ref() const& {
    return {this->__fbthrift_field_lineNumber, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lineNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lineNumber_ref() & {
    return {this->__fbthrift_field_lineNumber, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lineNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lineNumber_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lineNumber), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lineNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lineNumber() const& {
    return {this->__fbthrift_field_lineNumber, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lineNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lineNumber() & {
    return {this->__fbthrift_field_lineNumber, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lineNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lineNumber() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lineNumber), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "columnNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> columnNumber_ref() const& {
    return {this->__fbthrift_field_columnNumber, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "columnNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> columnNumber_ref() & {
    return {this->__fbthrift_field_columnNumber, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "columnNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> columnNumber_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_columnNumber), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "columnNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> columnNumber() const& {
    return {this->__fbthrift_field_columnNumber, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "columnNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> columnNumber() & {
    return {this->__fbthrift_field_columnNumber, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "columnNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> columnNumber() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_columnNumber), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "lineNumber" } */
  [[deprecated("Use `FOO.lineNumber().value()` instead of `FOO.get_lineNumber()`")]]
  ::std::int32_t get_lineNumber() const;

  /** Glean { "field": "lineNumber" } */
  [[deprecated("Use `FOO.lineNumber() = BAR` instead of `FOO.set_lineNumber(BAR)`")]]
  ::std::int32_t& set_lineNumber(::std::int32_t lineNumber_);

  /** Glean { "field": "columnNumber" } */
  [[deprecated("Use `FOO.columnNumber().value()` instead of `FOO.get_columnNumber()`")]]
  ::std::int32_t get_columnNumber() const;

  /** Glean { "field": "columnNumber" } */
  [[deprecated("Use `FOO.columnNumber() = BAR` instead of `FOO.set_columnNumber(BAR)`")]]
  ::std::int32_t& set_columnNumber(::std::int32_t columnNumber_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ErrorLocation>;
  friend void swap(ErrorLocation& a, ErrorLocation& b);
};

template <class Protocol_>
unsigned long ErrorLocation::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "HostAddress", "kind": "struct" } */
class HostAddress final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::host,
    ::apache::thrift::ident::port
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = HostAddress;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  HostAddress();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  HostAddress(apache::thrift::FragileConstructor, ::std::string host__arg, ::std::int32_t port__arg);

  HostAddress(HostAddress&&) noexcept;

  HostAddress(const HostAddress& src);


  HostAddress& operator=(HostAddress&&) noexcept;
  HostAddress& operator=(const HostAddress& src);

  ~HostAddress();

 private:
  ::std::string __fbthrift_field_host;
 private:
  ::std::int32_t __fbthrift_field_port;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const HostAddress&) const;
  bool operator<(const HostAddress&) const;

  /** Glean { "field": "host" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> host_ref() const& {
    return {this->__fbthrift_field_host, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "host" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> host_ref() & {
    return {this->__fbthrift_field_host, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "host" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> host_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_host), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "host" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> host() const& {
    return {this->__fbthrift_field_host, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "host" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> host() & {
    return {this->__fbthrift_field_host, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "host" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> host() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_host), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "port" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> port_ref() const& {
    return {this->__fbthrift_field_port, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "port" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> port_ref() & {
    return {this->__fbthrift_field_port, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "port" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> port_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_port), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "port" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> port() const& {
    return {this->__fbthrift_field_port, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "port" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> port() & {
    return {this->__fbthrift_field_port, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "port" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> port() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_port), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "host" } */
  [[deprecated("Use `FOO.host().value()` instead of `FOO.get_host()`")]]
  const ::std::string& get_host() const& {
    return __fbthrift_field_host;
  }

  /** Glean { "field": "host" } */
  [[deprecated("Use `FOO.host().value()` instead of `FOO.get_host()`")]]
  ::std::string get_host() && {
    return static_cast<::std::string&&>(__fbthrift_field_host);
  }

  /** Glean { "field": "host" } */
  template <typename T_HostAddress_host_struct_setter = ::std::string>
  [[deprecated("Use `FOO.host() = BAR` instead of `FOO.set_host(BAR)`")]]
  ::std::string& set_host(T_HostAddress_host_struct_setter&& host_) {
    host_ref() = std::forward<T_HostAddress_host_struct_setter>(host_);
    return __fbthrift_field_host;
  }

  /** Glean { "field": "port" } */
  [[deprecated("Use `FOO.port().value()` instead of `FOO.get_port()`")]]
  ::std::int32_t get_port() const;

  /** Glean { "field": "port" } */
  [[deprecated("Use `FOO.port() = BAR` instead of `FOO.set_port(BAR)`")]]
  ::std::int32_t& set_port(::std::int32_t port_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<HostAddress>;
  friend void swap(HostAddress& a, HostAddress& b);
};

template <class Protocol_>
unsigned long HostAddress::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "StageId", "kind": "struct" } */
class StageId final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::queryId,
    ::apache::thrift::ident::id
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StageId;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StageId();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StageId(apache::thrift::FragileConstructor, ::std::string queryId__arg, ::std::int32_t id__arg);

  StageId(StageId&&) noexcept;

  StageId(const StageId& src);


  StageId& operator=(StageId&&) noexcept;
  StageId& operator=(const StageId& src);

  ~StageId();

 private:
  ::std::string __fbthrift_field_queryId;
 private:
  ::std::int32_t __fbthrift_field_id;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StageId&) const;
  bool operator<(const StageId&) const;

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queryId_ref() const& {
    return {this->__fbthrift_field_queryId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queryId_ref() & {
    return {this->__fbthrift_field_queryId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queryId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queryId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queryId() const& {
    return {this->__fbthrift_field_queryId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queryId() & {
    return {this->__fbthrift_field_queryId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queryId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queryId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id_ref() const& {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id_ref() & {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id() const& {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id() & {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "queryId" } */
  [[deprecated("Use `FOO.queryId().value()` instead of `FOO.get_queryId()`")]]
  const ::std::string& get_queryId() const& {
    return __fbthrift_field_queryId;
  }

  /** Glean { "field": "queryId" } */
  [[deprecated("Use `FOO.queryId().value()` instead of `FOO.get_queryId()`")]]
  ::std::string get_queryId() && {
    return static_cast<::std::string&&>(__fbthrift_field_queryId);
  }

  /** Glean { "field": "queryId" } */
  template <typename T_StageId_queryId_struct_setter = ::std::string>
  [[deprecated("Use `FOO.queryId() = BAR` instead of `FOO.set_queryId(BAR)`")]]
  ::std::string& set_queryId(T_StageId_queryId_struct_setter&& queryId_) {
    queryId_ref() = std::forward<T_StageId_queryId_struct_setter>(queryId_);
    return __fbthrift_field_queryId;
  }

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id().value()` instead of `FOO.get_id()`")]]
  ::std::int32_t get_id() const;

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id() = BAR` instead of `FOO.set_id(BAR)`")]]
  ::std::int32_t& set_id(::std::int32_t id_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StageId>;
  friend void swap(StageId& a, StageId& b);
};

template <class Protocol_>
unsigned long StageId::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "OutputBufferId", "kind": "struct" } */
class OutputBufferId final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::id
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OutputBufferId;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  OutputBufferId() :
      __fbthrift_field_id() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OutputBufferId(apache::thrift::FragileConstructor, ::std::int32_t id__arg);

  OutputBufferId(OutputBufferId&&) = default;

  OutputBufferId(const OutputBufferId&) = default;


  OutputBufferId& operator=(OutputBufferId&&) = default;

  OutputBufferId& operator=(const OutputBufferId&) = default;
 private:
  ::std::int32_t __fbthrift_field_id;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OutputBufferId&) const;
  bool operator<(const OutputBufferId&) const;

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id_ref() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id_ref() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id().value()` instead of `FOO.get_id()`")]]
  ::std::int32_t get_id() const;

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id() = BAR` instead of `FOO.set_id(BAR)`")]]
  ::std::int32_t& set_id(::std::int32_t id_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OutputBufferId>;
  friend void swap(OutputBufferId& a, OutputBufferId& b);
};

template <class Protocol_>
unsigned long OutputBufferId::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "PageBufferInfo", "kind": "struct" } */
class PageBufferInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::partition,
    ::apache::thrift::ident::bufferedPages,
    ::apache::thrift::ident::bufferedBytes,
    ::apache::thrift::ident::rowsAdded,
    ::apache::thrift::ident::pagesAdded
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = PageBufferInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  PageBufferInfo() :
      __fbthrift_field_partition(),
      __fbthrift_field_bufferedPages(),
      __fbthrift_field_bufferedBytes(),
      __fbthrift_field_rowsAdded(),
      __fbthrift_field_pagesAdded() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  PageBufferInfo(apache::thrift::FragileConstructor, ::std::int32_t partition__arg, ::std::int64_t bufferedPages__arg, ::std::int64_t bufferedBytes__arg, ::std::int64_t rowsAdded__arg, ::std::int64_t pagesAdded__arg);

  PageBufferInfo(PageBufferInfo&&) = default;

  PageBufferInfo(const PageBufferInfo&) = default;


  PageBufferInfo& operator=(PageBufferInfo&&) = default;

  PageBufferInfo& operator=(const PageBufferInfo&) = default;
 private:
  ::std::int32_t __fbthrift_field_partition;
 private:
  ::std::int64_t __fbthrift_field_bufferedPages;
 private:
  ::std::int64_t __fbthrift_field_bufferedBytes;
 private:
  ::std::int64_t __fbthrift_field_rowsAdded;
 private:
  ::std::int64_t __fbthrift_field_pagesAdded;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const PageBufferInfo&) const;
  bool operator<(const PageBufferInfo&) const;

  /** Glean { "field": "partition" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> partition_ref() const& {
    return {this->__fbthrift_field_partition, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "partition" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> partition_ref() & {
    return {this->__fbthrift_field_partition, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "partition" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> partition_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_partition), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "partition" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> partition() const& {
    return {this->__fbthrift_field_partition, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "partition" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> partition() & {
    return {this->__fbthrift_field_partition, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "partition" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> partition() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_partition), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedPages_ref() const& {
    return {this->__fbthrift_field_bufferedPages, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedPages_ref() & {
    return {this->__fbthrift_field_bufferedPages, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedPages_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedPages), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedPages() const& {
    return {this->__fbthrift_field_bufferedPages, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedPages() & {
    return {this->__fbthrift_field_bufferedPages, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedPages() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedPages), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedBytes_ref() const& {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedBytes_ref() & {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedBytes), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedBytes() const& {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedBytes() & {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedBytes), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rowsAdded_ref() const& {
    return {this->__fbthrift_field_rowsAdded, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rowsAdded_ref() & {
    return {this->__fbthrift_field_rowsAdded, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rowsAdded_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rowsAdded), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rowsAdded() const& {
    return {this->__fbthrift_field_rowsAdded, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rowsAdded() & {
    return {this->__fbthrift_field_rowsAdded, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rowsAdded() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rowsAdded), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesAdded_ref() const& {
    return {this->__fbthrift_field_pagesAdded, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesAdded_ref() & {
    return {this->__fbthrift_field_pagesAdded, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesAdded_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesAdded), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesAdded() const& {
    return {this->__fbthrift_field_pagesAdded, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesAdded() & {
    return {this->__fbthrift_field_pagesAdded, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesAdded() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesAdded), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "partition" } */
  [[deprecated("Use `FOO.partition().value()` instead of `FOO.get_partition()`")]]
  ::std::int32_t get_partition() const;

  /** Glean { "field": "partition" } */
  [[deprecated("Use `FOO.partition() = BAR` instead of `FOO.set_partition(BAR)`")]]
  ::std::int32_t& set_partition(::std::int32_t partition_);

  /** Glean { "field": "bufferedPages" } */
  [[deprecated("Use `FOO.bufferedPages().value()` instead of `FOO.get_bufferedPages()`")]]
  ::std::int64_t get_bufferedPages() const;

  /** Glean { "field": "bufferedPages" } */
  [[deprecated("Use `FOO.bufferedPages() = BAR` instead of `FOO.set_bufferedPages(BAR)`")]]
  ::std::int64_t& set_bufferedPages(::std::int64_t bufferedPages_);

  /** Glean { "field": "bufferedBytes" } */
  [[deprecated("Use `FOO.bufferedBytes().value()` instead of `FOO.get_bufferedBytes()`")]]
  ::std::int64_t get_bufferedBytes() const;

  /** Glean { "field": "bufferedBytes" } */
  [[deprecated("Use `FOO.bufferedBytes() = BAR` instead of `FOO.set_bufferedBytes(BAR)`")]]
  ::std::int64_t& set_bufferedBytes(::std::int64_t bufferedBytes_);

  /** Glean { "field": "rowsAdded" } */
  [[deprecated("Use `FOO.rowsAdded().value()` instead of `FOO.get_rowsAdded()`")]]
  ::std::int64_t get_rowsAdded() const;

  /** Glean { "field": "rowsAdded" } */
  [[deprecated("Use `FOO.rowsAdded() = BAR` instead of `FOO.set_rowsAdded(BAR)`")]]
  ::std::int64_t& set_rowsAdded(::std::int64_t rowsAdded_);

  /** Glean { "field": "pagesAdded" } */
  [[deprecated("Use `FOO.pagesAdded().value()` instead of `FOO.get_pagesAdded()`")]]
  ::std::int64_t get_pagesAdded() const;

  /** Glean { "field": "pagesAdded" } */
  [[deprecated("Use `FOO.pagesAdded() = BAR` instead of `FOO.set_pagesAdded(BAR)`")]]
  ::std::int64_t& set_pagesAdded(::std::int64_t pagesAdded_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<PageBufferInfo>;
  friend void swap(PageBufferInfo& a, PageBufferInfo& b);
};

template <class Protocol_>
unsigned long PageBufferInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "PlanNodeId", "kind": "struct" } */
class PlanNodeId final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::id
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = PlanNodeId;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  PlanNodeId();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  PlanNodeId(apache::thrift::FragileConstructor, ::std::string id__arg);

  PlanNodeId(PlanNodeId&&) noexcept;

  PlanNodeId(const PlanNodeId& src);


  PlanNodeId& operator=(PlanNodeId&&) noexcept;
  PlanNodeId& operator=(const PlanNodeId& src);

  ~PlanNodeId();

 private:
  ::std::string __fbthrift_field_id;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const PlanNodeId&) const;
  bool operator<(const PlanNodeId&) const;

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id_ref() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id_ref() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id().value()` instead of `FOO.get_id()`")]]
  const ::std::string& get_id() const& {
    return __fbthrift_field_id;
  }

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id().value()` instead of `FOO.get_id()`")]]
  ::std::string get_id() && {
    return static_cast<::std::string&&>(__fbthrift_field_id);
  }

  /** Glean { "field": "id" } */
  template <typename T_PlanNodeId_id_struct_setter = ::std::string>
  [[deprecated("Use `FOO.id() = BAR` instead of `FOO.set_id(BAR)`")]]
  ::std::string& set_id(T_PlanNodeId_id_struct_setter&& id_) {
    id_ref() = std::forward<T_PlanNodeId_id_struct_setter>(id_);
    return __fbthrift_field_id;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<PlanNodeId>;
  friend void swap(PlanNodeId& a, PlanNodeId& b);
};

template <class Protocol_>
unsigned long PlanNodeId::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "DistributionSnapshot", "kind": "struct" } */
class DistributionSnapshot final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 15;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::maxError,
    ::apache::thrift::ident::count,
    ::apache::thrift::ident::total,
    ::apache::thrift::ident::p01,
    ::apache::thrift::ident::p05,
    ::apache::thrift::ident::p10,
    ::apache::thrift::ident::p25,
    ::apache::thrift::ident::p50,
    ::apache::thrift::ident::p75,
    ::apache::thrift::ident::p90,
    ::apache::thrift::ident::p95,
    ::apache::thrift::ident::p99,
    ::apache::thrift::ident::min,
    ::apache::thrift::ident::max,
    ::apache::thrift::ident::avg
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DistributionSnapshot;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DistributionSnapshot() :
      __fbthrift_field_maxError(),
      __fbthrift_field_count(),
      __fbthrift_field_total(),
      __fbthrift_field_p01(),
      __fbthrift_field_p05(),
      __fbthrift_field_p10(),
      __fbthrift_field_p25(),
      __fbthrift_field_p50(),
      __fbthrift_field_p75(),
      __fbthrift_field_p90(),
      __fbthrift_field_p95(),
      __fbthrift_field_p99(),
      __fbthrift_field_min(),
      __fbthrift_field_max(),
      __fbthrift_field_avg() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DistributionSnapshot(apache::thrift::FragileConstructor, double maxError__arg, double count__arg, double total__arg, ::std::int64_t p01__arg, ::std::int64_t p05__arg, ::std::int64_t p10__arg, ::std::int64_t p25__arg, ::std::int64_t p50__arg, ::std::int64_t p75__arg, ::std::int64_t p90__arg, ::std::int64_t p95__arg, ::std::int64_t p99__arg, ::std::int64_t min__arg, ::std::int64_t max__arg, double avg__arg);

  DistributionSnapshot(DistributionSnapshot&&) = default;

  DistributionSnapshot(const DistributionSnapshot&) = default;


  DistributionSnapshot& operator=(DistributionSnapshot&&) = default;

  DistributionSnapshot& operator=(const DistributionSnapshot&) = default;
 private:
  double __fbthrift_field_maxError;
 private:
  double __fbthrift_field_count;
 private:
  double __fbthrift_field_total;
 private:
  ::std::int64_t __fbthrift_field_p01;
 private:
  ::std::int64_t __fbthrift_field_p05;
 private:
  ::std::int64_t __fbthrift_field_p10;
 private:
  ::std::int64_t __fbthrift_field_p25;
 private:
  ::std::int64_t __fbthrift_field_p50;
 private:
  ::std::int64_t __fbthrift_field_p75;
 private:
  ::std::int64_t __fbthrift_field_p90;
 private:
  ::std::int64_t __fbthrift_field_p95;
 private:
  ::std::int64_t __fbthrift_field_p99;
 private:
  ::std::int64_t __fbthrift_field_min;
 private:
  ::std::int64_t __fbthrift_field_max;
 private:
  double __fbthrift_field_avg;
 private:
  apache::thrift::detail::isset_bitset<15, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DistributionSnapshot&) const;
  bool operator<(const DistributionSnapshot&) const;

  /** Glean { "field": "maxError" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> maxError_ref() const& {
    return {this->__fbthrift_field_maxError, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "maxError" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> maxError_ref() & {
    return {this->__fbthrift_field_maxError, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "maxError" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> maxError_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_maxError), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "maxError" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> maxError() const& {
    return {this->__fbthrift_field_maxError, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "maxError" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> maxError() & {
    return {this->__fbthrift_field_maxError, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "maxError" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> maxError() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_maxError), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> count_ref() const& {
    return {this->__fbthrift_field_count, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> count_ref() & {
    return {this->__fbthrift_field_count, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> count_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_count), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> count() const& {
    return {this->__fbthrift_field_count, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> count() & {
    return {this->__fbthrift_field_count, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> count() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_count), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "total" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> total_ref() const& {
    return {this->__fbthrift_field_total, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "total" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> total_ref() & {
    return {this->__fbthrift_field_total, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "total" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> total_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_total), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "total" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> total() const& {
    return {this->__fbthrift_field_total, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "total" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> total() & {
    return {this->__fbthrift_field_total, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "total" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> total() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_total), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "p01" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p01_ref() const& {
    return {this->__fbthrift_field_p01, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "p01" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p01_ref() & {
    return {this->__fbthrift_field_p01, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "p01" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p01_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p01), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "p01" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p01() const& {
    return {this->__fbthrift_field_p01, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "p01" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p01() & {
    return {this->__fbthrift_field_p01, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "p01" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p01() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p01), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "p05" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p05_ref() const& {
    return {this->__fbthrift_field_p05, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "p05" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p05_ref() & {
    return {this->__fbthrift_field_p05, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "p05" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p05_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p05), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "p05" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p05() const& {
    return {this->__fbthrift_field_p05, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "p05" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p05() & {
    return {this->__fbthrift_field_p05, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "p05" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p05() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p05), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "p10" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p10_ref() const& {
    return {this->__fbthrift_field_p10, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "p10" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p10_ref() & {
    return {this->__fbthrift_field_p10, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "p10" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p10_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p10), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "p10" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p10() const& {
    return {this->__fbthrift_field_p10, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "p10" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p10() & {
    return {this->__fbthrift_field_p10, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "p10" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p10() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p10), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "p25" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p25_ref() const& {
    return {this->__fbthrift_field_p25, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "p25" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p25_ref() & {
    return {this->__fbthrift_field_p25, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "p25" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p25_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p25), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "p25" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p25() const& {
    return {this->__fbthrift_field_p25, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "p25" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p25() & {
    return {this->__fbthrift_field_p25, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "p25" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p25() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p25), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "p50" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p50_ref() const& {
    return {this->__fbthrift_field_p50, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "p50" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p50_ref() & {
    return {this->__fbthrift_field_p50, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "p50" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p50_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p50), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "p50" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p50() const& {
    return {this->__fbthrift_field_p50, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "p50" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p50() & {
    return {this->__fbthrift_field_p50, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "p50" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p50() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p50), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "p75" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p75_ref() const& {
    return {this->__fbthrift_field_p75, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "p75" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p75_ref() & {
    return {this->__fbthrift_field_p75, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "p75" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p75_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p75), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "p75" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p75() const& {
    return {this->__fbthrift_field_p75, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "p75" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p75() & {
    return {this->__fbthrift_field_p75, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "p75" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p75() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p75), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "p90" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p90_ref() const& {
    return {this->__fbthrift_field_p90, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "p90" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p90_ref() & {
    return {this->__fbthrift_field_p90, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "p90" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p90_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p90), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "p90" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p90() const& {
    return {this->__fbthrift_field_p90, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "p90" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p90() & {
    return {this->__fbthrift_field_p90, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "p90" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p90() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p90), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "p95" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p95_ref() const& {
    return {this->__fbthrift_field_p95, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "p95" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p95_ref() & {
    return {this->__fbthrift_field_p95, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "p95" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p95_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p95), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "p95" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p95() const& {
    return {this->__fbthrift_field_p95, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "p95" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p95() & {
    return {this->__fbthrift_field_p95, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "p95" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p95() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p95), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "p99" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p99_ref() const& {
    return {this->__fbthrift_field_p99, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "p99" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p99_ref() & {
    return {this->__fbthrift_field_p99, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "p99" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p99_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p99), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "p99" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> p99() const& {
    return {this->__fbthrift_field_p99, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "p99" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> p99() & {
    return {this->__fbthrift_field_p99, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "p99" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> p99() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_p99), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> min_ref() const& {
    return {this->__fbthrift_field_min, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> min_ref() & {
    return {this->__fbthrift_field_min, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> min_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_min), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> min() const& {
    return {this->__fbthrift_field_min, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> min() & {
    return {this->__fbthrift_field_min, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> min() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_min), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> max_ref() const& {
    return {this->__fbthrift_field_max, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> max_ref() & {
    return {this->__fbthrift_field_max, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> max_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_max), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> max() const& {
    return {this->__fbthrift_field_max, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> max() & {
    return {this->__fbthrift_field_max, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> max() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_max), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "avg" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> avg_ref() const& {
    return {this->__fbthrift_field_avg, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "avg" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> avg_ref() & {
    return {this->__fbthrift_field_avg, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "avg" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> avg_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_avg), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "avg" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> avg() const& {
    return {this->__fbthrift_field_avg, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "avg" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> avg() & {
    return {this->__fbthrift_field_avg, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "avg" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> avg() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_avg), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "maxError" } */
  [[deprecated("Use `FOO.maxError().value()` instead of `FOO.get_maxError()`")]]
  double get_maxError() const;

  /** Glean { "field": "maxError" } */
  [[deprecated("Use `FOO.maxError() = BAR` instead of `FOO.set_maxError(BAR)`")]]
  double& set_maxError(double maxError_);

  /** Glean { "field": "count" } */
  [[deprecated("Use `FOO.count().value()` instead of `FOO.get_count()`")]]
  double get_count() const;

  /** Glean { "field": "count" } */
  [[deprecated("Use `FOO.count() = BAR` instead of `FOO.set_count(BAR)`")]]
  double& set_count(double count_);

  /** Glean { "field": "total" } */
  [[deprecated("Use `FOO.total().value()` instead of `FOO.get_total()`")]]
  double get_total() const;

  /** Glean { "field": "total" } */
  [[deprecated("Use `FOO.total() = BAR` instead of `FOO.set_total(BAR)`")]]
  double& set_total(double total_);

  /** Glean { "field": "p01" } */
  [[deprecated("Use `FOO.p01().value()` instead of `FOO.get_p01()`")]]
  ::std::int64_t get_p01() const;

  /** Glean { "field": "p01" } */
  [[deprecated("Use `FOO.p01() = BAR` instead of `FOO.set_p01(BAR)`")]]
  ::std::int64_t& set_p01(::std::int64_t p01_);

  /** Glean { "field": "p05" } */
  [[deprecated("Use `FOO.p05().value()` instead of `FOO.get_p05()`")]]
  ::std::int64_t get_p05() const;

  /** Glean { "field": "p05" } */
  [[deprecated("Use `FOO.p05() = BAR` instead of `FOO.set_p05(BAR)`")]]
  ::std::int64_t& set_p05(::std::int64_t p05_);

  /** Glean { "field": "p10" } */
  [[deprecated("Use `FOO.p10().value()` instead of `FOO.get_p10()`")]]
  ::std::int64_t get_p10() const;

  /** Glean { "field": "p10" } */
  [[deprecated("Use `FOO.p10() = BAR` instead of `FOO.set_p10(BAR)`")]]
  ::std::int64_t& set_p10(::std::int64_t p10_);

  /** Glean { "field": "p25" } */
  [[deprecated("Use `FOO.p25().value()` instead of `FOO.get_p25()`")]]
  ::std::int64_t get_p25() const;

  /** Glean { "field": "p25" } */
  [[deprecated("Use `FOO.p25() = BAR` instead of `FOO.set_p25(BAR)`")]]
  ::std::int64_t& set_p25(::std::int64_t p25_);

  /** Glean { "field": "p50" } */
  [[deprecated("Use `FOO.p50().value()` instead of `FOO.get_p50()`")]]
  ::std::int64_t get_p50() const;

  /** Glean { "field": "p50" } */
  [[deprecated("Use `FOO.p50() = BAR` instead of `FOO.set_p50(BAR)`")]]
  ::std::int64_t& set_p50(::std::int64_t p50_);

  /** Glean { "field": "p75" } */
  [[deprecated("Use `FOO.p75().value()` instead of `FOO.get_p75()`")]]
  ::std::int64_t get_p75() const;

  /** Glean { "field": "p75" } */
  [[deprecated("Use `FOO.p75() = BAR` instead of `FOO.set_p75(BAR)`")]]
  ::std::int64_t& set_p75(::std::int64_t p75_);

  /** Glean { "field": "p90" } */
  [[deprecated("Use `FOO.p90().value()` instead of `FOO.get_p90()`")]]
  ::std::int64_t get_p90() const;

  /** Glean { "field": "p90" } */
  [[deprecated("Use `FOO.p90() = BAR` instead of `FOO.set_p90(BAR)`")]]
  ::std::int64_t& set_p90(::std::int64_t p90_);

  /** Glean { "field": "p95" } */
  [[deprecated("Use `FOO.p95().value()` instead of `FOO.get_p95()`")]]
  ::std::int64_t get_p95() const;

  /** Glean { "field": "p95" } */
  [[deprecated("Use `FOO.p95() = BAR` instead of `FOO.set_p95(BAR)`")]]
  ::std::int64_t& set_p95(::std::int64_t p95_);

  /** Glean { "field": "p99" } */
  [[deprecated("Use `FOO.p99().value()` instead of `FOO.get_p99()`")]]
  ::std::int64_t get_p99() const;

  /** Glean { "field": "p99" } */
  [[deprecated("Use `FOO.p99() = BAR` instead of `FOO.set_p99(BAR)`")]]
  ::std::int64_t& set_p99(::std::int64_t p99_);

  /** Glean { "field": "min" } */
  [[deprecated("Use `FOO.min().value()` instead of `FOO.get_min()`")]]
  ::std::int64_t get_min() const;

  /** Glean { "field": "min" } */
  [[deprecated("Use `FOO.min() = BAR` instead of `FOO.set_min(BAR)`")]]
  ::std::int64_t& set_min(::std::int64_t min_);

  /** Glean { "field": "max" } */
  [[deprecated("Use `FOO.max().value()` instead of `FOO.get_max()`")]]
  ::std::int64_t get_max() const;

  /** Glean { "field": "max" } */
  [[deprecated("Use `FOO.max() = BAR` instead of `FOO.set_max(BAR)`")]]
  ::std::int64_t& set_max(::std::int64_t max_);

  /** Glean { "field": "avg" } */
  [[deprecated("Use `FOO.avg().value()` instead of `FOO.get_avg()`")]]
  double get_avg() const;

  /** Glean { "field": "avg" } */
  [[deprecated("Use `FOO.avg() = BAR` instead of `FOO.set_avg(BAR)`")]]
  double& set_avg(double avg_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DistributionSnapshot>;
  friend void swap(DistributionSnapshot& a, DistributionSnapshot& b);
};

template <class Protocol_>
unsigned long DistributionSnapshot::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "RuntimeStats", "kind": "struct" } */
class RuntimeStats final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::metrics
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::RuntimeMetric>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RuntimeStats;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  RuntimeStats();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RuntimeStats(apache::thrift::FragileConstructor, ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric> metrics__arg);

  RuntimeStats(RuntimeStats&&) noexcept;

  RuntimeStats(const RuntimeStats& src);


  RuntimeStats& operator=(RuntimeStats&&) noexcept;
  RuntimeStats& operator=(const RuntimeStats& src);

  ~RuntimeStats();

 private:
  ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric> __fbthrift_field_metrics;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const RuntimeStats&) const;
  bool operator<(const RuntimeStats&) const;

  /** Glean { "field": "metrics" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> metrics_ref() const& {
    return {this->__fbthrift_field_metrics, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metrics" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> metrics_ref() & {
    return {this->__fbthrift_field_metrics, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metrics" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> metrics_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_metrics), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metrics" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> metrics() const& {
    return {this->__fbthrift_field_metrics, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metrics" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> metrics() & {
    return {this->__fbthrift_field_metrics, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metrics" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> metrics() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_metrics), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "metrics" } */
  [[deprecated("Use `FOO.metrics().value()` instead of `FOO.get_metrics()`")]]
  const ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>& get_metrics() const&;

  /** Glean { "field": "metrics" } */
  [[deprecated("Use `FOO.metrics().value()` instead of `FOO.get_metrics()`")]]
  ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric> get_metrics() &&;

  /** Glean { "field": "metrics" } */
  template <typename T_RuntimeStats_metrics_struct_setter = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>>
  [[deprecated("Use `FOO.metrics() = BAR` instead of `FOO.set_metrics(BAR)`")]]
  ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>& set_metrics(T_RuntimeStats_metrics_struct_setter&& metrics_) {
    metrics_ref() = std::forward<T_RuntimeStats_metrics_struct_setter>(metrics_);
    return __fbthrift_field_metrics;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RuntimeStats>;
  friend void swap(RuntimeStats& a, RuntimeStats& b);
};

template <class Protocol_>
unsigned long RuntimeStats::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "ExchangeClientStatus", "kind": "struct" } */
class ExchangeClientStatus final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 7;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bufferedBytes,
    ::apache::thrift::ident::maxBufferedBytes,
    ::apache::thrift::ident::averageBytesPerRequest,
    ::apache::thrift::ident::successfulRequestsCount,
    ::apache::thrift::ident::bufferedPages,
    ::apache::thrift::ident::noMoreLocations,
    ::apache::thrift::ident::pageBufferClientStatuses
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ExchangeClientStatus;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ExchangeClientStatus();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ExchangeClientStatus(apache::thrift::FragileConstructor, ::std::int64_t bufferedBytes__arg, ::std::int64_t maxBufferedBytes__arg, ::std::int64_t averageBytesPerRequest__arg, ::std::int64_t successfulRequestsCount__arg, ::std::int32_t bufferedPages__arg, bool noMoreLocations__arg, ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus> pageBufferClientStatuses__arg);

  ExchangeClientStatus(ExchangeClientStatus&&) noexcept;

  ExchangeClientStatus(const ExchangeClientStatus& src);


  ExchangeClientStatus& operator=(ExchangeClientStatus&&) noexcept;
  ExchangeClientStatus& operator=(const ExchangeClientStatus& src);

  ~ExchangeClientStatus();

 private:
  ::std::int64_t __fbthrift_field_bufferedBytes;
 private:
  ::std::int64_t __fbthrift_field_maxBufferedBytes;
 private:
  ::std::int64_t __fbthrift_field_averageBytesPerRequest;
 private:
  ::std::int64_t __fbthrift_field_successfulRequestsCount;
 private:
  ::std::int32_t __fbthrift_field_bufferedPages;
 private:
  bool __fbthrift_field_noMoreLocations;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus> __fbthrift_field_pageBufferClientStatuses;
 private:
  apache::thrift::detail::isset_bitset<7, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ExchangeClientStatus&) const;
  bool operator<(const ExchangeClientStatus&) const;

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedBytes_ref() const& {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedBytes_ref() & {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedBytes), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedBytes() const& {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedBytes() & {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedBytes), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "maxBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> maxBufferedBytes_ref() const& {
    return {this->__fbthrift_field_maxBufferedBytes, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "maxBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> maxBufferedBytes_ref() & {
    return {this->__fbthrift_field_maxBufferedBytes, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "maxBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> maxBufferedBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_maxBufferedBytes), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "maxBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> maxBufferedBytes() const& {
    return {this->__fbthrift_field_maxBufferedBytes, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "maxBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> maxBufferedBytes() & {
    return {this->__fbthrift_field_maxBufferedBytes, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "maxBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> maxBufferedBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_maxBufferedBytes), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "averageBytesPerRequest" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> averageBytesPerRequest_ref() const& {
    return {this->__fbthrift_field_averageBytesPerRequest, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "averageBytesPerRequest" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> averageBytesPerRequest_ref() & {
    return {this->__fbthrift_field_averageBytesPerRequest, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "averageBytesPerRequest" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> averageBytesPerRequest_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_averageBytesPerRequest), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "averageBytesPerRequest" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> averageBytesPerRequest() const& {
    return {this->__fbthrift_field_averageBytesPerRequest, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "averageBytesPerRequest" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> averageBytesPerRequest() & {
    return {this->__fbthrift_field_averageBytesPerRequest, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "averageBytesPerRequest" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> averageBytesPerRequest() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_averageBytesPerRequest), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "successfulRequestsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> successfulRequestsCount_ref() const& {
    return {this->__fbthrift_field_successfulRequestsCount, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "successfulRequestsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> successfulRequestsCount_ref() & {
    return {this->__fbthrift_field_successfulRequestsCount, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "successfulRequestsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> successfulRequestsCount_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_successfulRequestsCount), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "successfulRequestsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> successfulRequestsCount() const& {
    return {this->__fbthrift_field_successfulRequestsCount, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "successfulRequestsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> successfulRequestsCount() & {
    return {this->__fbthrift_field_successfulRequestsCount, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "successfulRequestsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> successfulRequestsCount() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_successfulRequestsCount), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedPages_ref() const& {
    return {this->__fbthrift_field_bufferedPages, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedPages_ref() & {
    return {this->__fbthrift_field_bufferedPages, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedPages_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedPages), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedPages() const& {
    return {this->__fbthrift_field_bufferedPages, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedPages() & {
    return {this->__fbthrift_field_bufferedPages, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedPages() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedPages), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "noMoreLocations" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreLocations_ref() const& {
    return {this->__fbthrift_field_noMoreLocations, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "noMoreLocations" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreLocations_ref() & {
    return {this->__fbthrift_field_noMoreLocations, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "noMoreLocations" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreLocations_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreLocations), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "noMoreLocations" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreLocations() const& {
    return {this->__fbthrift_field_noMoreLocations, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "noMoreLocations" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreLocations() & {
    return {this->__fbthrift_field_noMoreLocations, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "noMoreLocations" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreLocations() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreLocations), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "pageBufferClientStatuses" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pageBufferClientStatuses_ref() const& {
    return {this->__fbthrift_field_pageBufferClientStatuses, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pageBufferClientStatuses" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pageBufferClientStatuses_ref() & {
    return {this->__fbthrift_field_pageBufferClientStatuses, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pageBufferClientStatuses" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pageBufferClientStatuses_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pageBufferClientStatuses), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pageBufferClientStatuses" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pageBufferClientStatuses() const& {
    return {this->__fbthrift_field_pageBufferClientStatuses, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pageBufferClientStatuses" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pageBufferClientStatuses() & {
    return {this->__fbthrift_field_pageBufferClientStatuses, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pageBufferClientStatuses" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pageBufferClientStatuses() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pageBufferClientStatuses), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "bufferedBytes" } */
  [[deprecated("Use `FOO.bufferedBytes().value()` instead of `FOO.get_bufferedBytes()`")]]
  ::std::int64_t get_bufferedBytes() const;

  /** Glean { "field": "bufferedBytes" } */
  [[deprecated("Use `FOO.bufferedBytes() = BAR` instead of `FOO.set_bufferedBytes(BAR)`")]]
  ::std::int64_t& set_bufferedBytes(::std::int64_t bufferedBytes_);

  /** Glean { "field": "maxBufferedBytes" } */
  [[deprecated("Use `FOO.maxBufferedBytes().value()` instead of `FOO.get_maxBufferedBytes()`")]]
  ::std::int64_t get_maxBufferedBytes() const;

  /** Glean { "field": "maxBufferedBytes" } */
  [[deprecated("Use `FOO.maxBufferedBytes() = BAR` instead of `FOO.set_maxBufferedBytes(BAR)`")]]
  ::std::int64_t& set_maxBufferedBytes(::std::int64_t maxBufferedBytes_);

  /** Glean { "field": "averageBytesPerRequest" } */
  [[deprecated("Use `FOO.averageBytesPerRequest().value()` instead of `FOO.get_averageBytesPerRequest()`")]]
  ::std::int64_t get_averageBytesPerRequest() const;

  /** Glean { "field": "averageBytesPerRequest" } */
  [[deprecated("Use `FOO.averageBytesPerRequest() = BAR` instead of `FOO.set_averageBytesPerRequest(BAR)`")]]
  ::std::int64_t& set_averageBytesPerRequest(::std::int64_t averageBytesPerRequest_);

  /** Glean { "field": "successfulRequestsCount" } */
  [[deprecated("Use `FOO.successfulRequestsCount().value()` instead of `FOO.get_successfulRequestsCount()`")]]
  ::std::int64_t get_successfulRequestsCount() const;

  /** Glean { "field": "successfulRequestsCount" } */
  [[deprecated("Use `FOO.successfulRequestsCount() = BAR` instead of `FOO.set_successfulRequestsCount(BAR)`")]]
  ::std::int64_t& set_successfulRequestsCount(::std::int64_t successfulRequestsCount_);

  /** Glean { "field": "bufferedPages" } */
  [[deprecated("Use `FOO.bufferedPages().value()` instead of `FOO.get_bufferedPages()`")]]
  ::std::int32_t get_bufferedPages() const;

  /** Glean { "field": "bufferedPages" } */
  [[deprecated("Use `FOO.bufferedPages() = BAR` instead of `FOO.set_bufferedPages(BAR)`")]]
  ::std::int32_t& set_bufferedPages(::std::int32_t bufferedPages_);

  /** Glean { "field": "noMoreLocations" } */
  [[deprecated("Use `FOO.noMoreLocations().value()` instead of `FOO.get_noMoreLocations()`")]]
  bool get_noMoreLocations() const;

  /** Glean { "field": "noMoreLocations" } */
  [[deprecated("Use `FOO.noMoreLocations() = BAR` instead of `FOO.set_noMoreLocations(BAR)`")]]
  bool& set_noMoreLocations(bool noMoreLocations_);

  /** Glean { "field": "pageBufferClientStatuses" } */
  [[deprecated("Use `FOO.pageBufferClientStatuses().value()` instead of `FOO.get_pageBufferClientStatuses()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>& get_pageBufferClientStatuses() const&;

  /** Glean { "field": "pageBufferClientStatuses" } */
  [[deprecated("Use `FOO.pageBufferClientStatuses().value()` instead of `FOO.get_pageBufferClientStatuses()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus> get_pageBufferClientStatuses() &&;

  /** Glean { "field": "pageBufferClientStatuses" } */
  template <typename T_ExchangeClientStatus_pageBufferClientStatuses_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>
  [[deprecated("Use `FOO.pageBufferClientStatuses() = BAR` instead of `FOO.set_pageBufferClientStatuses(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>& set_pageBufferClientStatuses(T_ExchangeClientStatus_pageBufferClientStatuses_struct_setter&& pageBufferClientStatuses_) {
    pageBufferClientStatuses_ref() = std::forward<T_ExchangeClientStatus_pageBufferClientStatuses_struct_setter>(pageBufferClientStatuses_);
    return __fbthrift_field_pageBufferClientStatuses;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ExchangeClientStatus>;
  friend void swap(ExchangeClientStatus& a, ExchangeClientStatus& b);
};

template <class Protocol_>
unsigned long ExchangeClientStatus::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "PageBufferClientStatus", "kind": "struct" } */
class PageBufferClientStatus final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 11;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::uri,
    ::apache::thrift::ident::state,
    ::apache::thrift::ident::lastUpdate,
    ::apache::thrift::ident::rowsReceived,
    ::apache::thrift::ident::pagesReceived,
    ::apache::thrift::ident::rowsRejected,
    ::apache::thrift::ident::pagesRejected,
    ::apache::thrift::ident::requestsScheduled,
    ::apache::thrift::ident::requestsCompleted,
    ::apache::thrift::ident::requestsFailed,
    ::apache::thrift::ident::httpRequestState
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = PageBufferClientStatus;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  PageBufferClientStatus();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  PageBufferClientStatus(apache::thrift::FragileConstructor, ::std::string uri__arg, ::std::string state__arg, ::std::int64_t lastUpdate__arg, ::std::int64_t rowsReceived__arg, ::std::int32_t pagesReceived__arg, ::std::int64_t rowsRejected__arg, ::std::int32_t pagesRejected__arg, ::std::int32_t requestsScheduled__arg, ::std::int32_t requestsCompleted__arg, ::std::int32_t requestsFailed__arg, ::std::string httpRequestState__arg);

  PageBufferClientStatus(PageBufferClientStatus&&) noexcept;

  PageBufferClientStatus(const PageBufferClientStatus& src);


  PageBufferClientStatus& operator=(PageBufferClientStatus&&) noexcept;
  PageBufferClientStatus& operator=(const PageBufferClientStatus& src);

  ~PageBufferClientStatus();

 private:
  ::std::string __fbthrift_field_uri;
 private:
  ::std::string __fbthrift_field_state;
 private:
  ::std::int64_t __fbthrift_field_lastUpdate;
 private:
  ::std::int64_t __fbthrift_field_rowsReceived;
 private:
  ::std::int32_t __fbthrift_field_pagesReceived;
 private:
  ::std::int64_t __fbthrift_field_rowsRejected;
 private:
  ::std::int32_t __fbthrift_field_pagesRejected;
 private:
  ::std::int32_t __fbthrift_field_requestsScheduled;
 private:
  ::std::int32_t __fbthrift_field_requestsCompleted;
 private:
  ::std::int32_t __fbthrift_field_requestsFailed;
 private:
  ::std::string __fbthrift_field_httpRequestState;
 private:
  apache::thrift::detail::isset_bitset<11, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const PageBufferClientStatus&) const;
  bool operator<(const PageBufferClientStatus&) const;

  /** Glean { "field": "uri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> uri_ref() const& {
    return {this->__fbthrift_field_uri, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> uri_ref() & {
    return {this->__fbthrift_field_uri, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> uri_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_uri), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> uri() const& {
    return {this->__fbthrift_field_uri, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> uri() & {
    return {this->__fbthrift_field_uri, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> uri() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_uri), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> state_ref() const& {
    return {this->__fbthrift_field_state, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> state_ref() & {
    return {this->__fbthrift_field_state, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> state_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_state), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> state() const& {
    return {this->__fbthrift_field_state, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> state() & {
    return {this->__fbthrift_field_state, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> state() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_state), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "lastUpdate" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastUpdate_ref() const& {
    return {this->__fbthrift_field_lastUpdate, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastUpdate" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastUpdate_ref() & {
    return {this->__fbthrift_field_lastUpdate, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastUpdate" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastUpdate_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastUpdate), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastUpdate" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastUpdate() const& {
    return {this->__fbthrift_field_lastUpdate, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastUpdate" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastUpdate() & {
    return {this->__fbthrift_field_lastUpdate, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastUpdate" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastUpdate() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastUpdate), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "rowsReceived" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rowsReceived_ref() const& {
    return {this->__fbthrift_field_rowsReceived, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsReceived" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rowsReceived_ref() & {
    return {this->__fbthrift_field_rowsReceived, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsReceived" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rowsReceived_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rowsReceived), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsReceived" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rowsReceived() const& {
    return {this->__fbthrift_field_rowsReceived, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsReceived" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rowsReceived() & {
    return {this->__fbthrift_field_rowsReceived, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "rowsReceived" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rowsReceived() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rowsReceived), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "pagesReceived" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesReceived_ref() const& {
    return {this->__fbthrift_field_pagesReceived, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesReceived" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesReceived_ref() & {
    return {this->__fbthrift_field_pagesReceived, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesReceived" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesReceived_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesReceived), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesReceived" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesReceived() const& {
    return {this->__fbthrift_field_pagesReceived, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesReceived" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesReceived() & {
    return {this->__fbthrift_field_pagesReceived, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pagesReceived" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesReceived() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesReceived), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "rowsRejected" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rowsRejected_ref() const& {
    return {this->__fbthrift_field_rowsRejected, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "rowsRejected" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rowsRejected_ref() & {
    return {this->__fbthrift_field_rowsRejected, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "rowsRejected" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rowsRejected_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rowsRejected), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "rowsRejected" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rowsRejected() const& {
    return {this->__fbthrift_field_rowsRejected, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "rowsRejected" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rowsRejected() & {
    return {this->__fbthrift_field_rowsRejected, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "rowsRejected" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rowsRejected() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rowsRejected), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "pagesRejected" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesRejected_ref() const& {
    return {this->__fbthrift_field_pagesRejected, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pagesRejected" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesRejected_ref() & {
    return {this->__fbthrift_field_pagesRejected, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pagesRejected" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesRejected_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesRejected), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pagesRejected" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesRejected() const& {
    return {this->__fbthrift_field_pagesRejected, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pagesRejected" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesRejected() & {
    return {this->__fbthrift_field_pagesRejected, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pagesRejected" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesRejected() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesRejected), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "requestsScheduled" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> requestsScheduled_ref() const& {
    return {this->__fbthrift_field_requestsScheduled, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "requestsScheduled" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> requestsScheduled_ref() & {
    return {this->__fbthrift_field_requestsScheduled, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "requestsScheduled" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> requestsScheduled_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_requestsScheduled), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "requestsScheduled" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> requestsScheduled() const& {
    return {this->__fbthrift_field_requestsScheduled, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "requestsScheduled" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> requestsScheduled() & {
    return {this->__fbthrift_field_requestsScheduled, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "requestsScheduled" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> requestsScheduled() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_requestsScheduled), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "requestsCompleted" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> requestsCompleted_ref() const& {
    return {this->__fbthrift_field_requestsCompleted, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "requestsCompleted" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> requestsCompleted_ref() & {
    return {this->__fbthrift_field_requestsCompleted, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "requestsCompleted" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> requestsCompleted_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_requestsCompleted), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "requestsCompleted" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> requestsCompleted() const& {
    return {this->__fbthrift_field_requestsCompleted, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "requestsCompleted" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> requestsCompleted() & {
    return {this->__fbthrift_field_requestsCompleted, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "requestsCompleted" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> requestsCompleted() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_requestsCompleted), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "requestsFailed" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> requestsFailed_ref() const& {
    return {this->__fbthrift_field_requestsFailed, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "requestsFailed" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> requestsFailed_ref() & {
    return {this->__fbthrift_field_requestsFailed, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "requestsFailed" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> requestsFailed_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_requestsFailed), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "requestsFailed" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> requestsFailed() const& {
    return {this->__fbthrift_field_requestsFailed, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "requestsFailed" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> requestsFailed() & {
    return {this->__fbthrift_field_requestsFailed, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "requestsFailed" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> requestsFailed() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_requestsFailed), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "httpRequestState" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> httpRequestState_ref() const& {
    return {this->__fbthrift_field_httpRequestState, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "httpRequestState" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> httpRequestState_ref() & {
    return {this->__fbthrift_field_httpRequestState, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "httpRequestState" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> httpRequestState_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_httpRequestState), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "httpRequestState" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> httpRequestState() const& {
    return {this->__fbthrift_field_httpRequestState, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "httpRequestState" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> httpRequestState() & {
    return {this->__fbthrift_field_httpRequestState, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "httpRequestState" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> httpRequestState() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_httpRequestState), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "uri" } */
  [[deprecated("Use `FOO.uri().value()` instead of `FOO.get_uri()`")]]
  const ::std::string& get_uri() const& {
    return __fbthrift_field_uri;
  }

  /** Glean { "field": "uri" } */
  [[deprecated("Use `FOO.uri().value()` instead of `FOO.get_uri()`")]]
  ::std::string get_uri() && {
    return static_cast<::std::string&&>(__fbthrift_field_uri);
  }

  /** Glean { "field": "uri" } */
  template <typename T_PageBufferClientStatus_uri_struct_setter = ::std::string>
  [[deprecated("Use `FOO.uri() = BAR` instead of `FOO.set_uri(BAR)`")]]
  ::std::string& set_uri(T_PageBufferClientStatus_uri_struct_setter&& uri_) {
    uri_ref() = std::forward<T_PageBufferClientStatus_uri_struct_setter>(uri_);
    return __fbthrift_field_uri;
  }

  /** Glean { "field": "state" } */
  [[deprecated("Use `FOO.state().value()` instead of `FOO.get_state()`")]]
  const ::std::string& get_state() const& {
    return __fbthrift_field_state;
  }

  /** Glean { "field": "state" } */
  [[deprecated("Use `FOO.state().value()` instead of `FOO.get_state()`")]]
  ::std::string get_state() && {
    return static_cast<::std::string&&>(__fbthrift_field_state);
  }

  /** Glean { "field": "state" } */
  template <typename T_PageBufferClientStatus_state_struct_setter = ::std::string>
  [[deprecated("Use `FOO.state() = BAR` instead of `FOO.set_state(BAR)`")]]
  ::std::string& set_state(T_PageBufferClientStatus_state_struct_setter&& state_) {
    state_ref() = std::forward<T_PageBufferClientStatus_state_struct_setter>(state_);
    return __fbthrift_field_state;
  }

  /** Glean { "field": "lastUpdate" } */
  [[deprecated("Use `FOO.lastUpdate().value()` instead of `FOO.get_lastUpdate()`")]]
  ::std::int64_t get_lastUpdate() const;

  /** Glean { "field": "lastUpdate" } */
  [[deprecated("Use `FOO.lastUpdate() = BAR` instead of `FOO.set_lastUpdate(BAR)`")]]
  ::std::int64_t& set_lastUpdate(::std::int64_t lastUpdate_);

  /** Glean { "field": "rowsReceived" } */
  [[deprecated("Use `FOO.rowsReceived().value()` instead of `FOO.get_rowsReceived()`")]]
  ::std::int64_t get_rowsReceived() const;

  /** Glean { "field": "rowsReceived" } */
  [[deprecated("Use `FOO.rowsReceived() = BAR` instead of `FOO.set_rowsReceived(BAR)`")]]
  ::std::int64_t& set_rowsReceived(::std::int64_t rowsReceived_);

  /** Glean { "field": "pagesReceived" } */
  [[deprecated("Use `FOO.pagesReceived().value()` instead of `FOO.get_pagesReceived()`")]]
  ::std::int32_t get_pagesReceived() const;

  /** Glean { "field": "pagesReceived" } */
  [[deprecated("Use `FOO.pagesReceived() = BAR` instead of `FOO.set_pagesReceived(BAR)`")]]
  ::std::int32_t& set_pagesReceived(::std::int32_t pagesReceived_);

  /** Glean { "field": "rowsRejected" } */
  [[deprecated("Use `FOO.rowsRejected().value()` instead of `FOO.get_rowsRejected()`")]]
  ::std::int64_t get_rowsRejected() const;

  /** Glean { "field": "rowsRejected" } */
  [[deprecated("Use `FOO.rowsRejected() = BAR` instead of `FOO.set_rowsRejected(BAR)`")]]
  ::std::int64_t& set_rowsRejected(::std::int64_t rowsRejected_);

  /** Glean { "field": "pagesRejected" } */
  [[deprecated("Use `FOO.pagesRejected().value()` instead of `FOO.get_pagesRejected()`")]]
  ::std::int32_t get_pagesRejected() const;

  /** Glean { "field": "pagesRejected" } */
  [[deprecated("Use `FOO.pagesRejected() = BAR` instead of `FOO.set_pagesRejected(BAR)`")]]
  ::std::int32_t& set_pagesRejected(::std::int32_t pagesRejected_);

  /** Glean { "field": "requestsScheduled" } */
  [[deprecated("Use `FOO.requestsScheduled().value()` instead of `FOO.get_requestsScheduled()`")]]
  ::std::int32_t get_requestsScheduled() const;

  /** Glean { "field": "requestsScheduled" } */
  [[deprecated("Use `FOO.requestsScheduled() = BAR` instead of `FOO.set_requestsScheduled(BAR)`")]]
  ::std::int32_t& set_requestsScheduled(::std::int32_t requestsScheduled_);

  /** Glean { "field": "requestsCompleted" } */
  [[deprecated("Use `FOO.requestsCompleted().value()` instead of `FOO.get_requestsCompleted()`")]]
  ::std::int32_t get_requestsCompleted() const;

  /** Glean { "field": "requestsCompleted" } */
  [[deprecated("Use `FOO.requestsCompleted() = BAR` instead of `FOO.set_requestsCompleted(BAR)`")]]
  ::std::int32_t& set_requestsCompleted(::std::int32_t requestsCompleted_);

  /** Glean { "field": "requestsFailed" } */
  [[deprecated("Use `FOO.requestsFailed().value()` instead of `FOO.get_requestsFailed()`")]]
  ::std::int32_t get_requestsFailed() const;

  /** Glean { "field": "requestsFailed" } */
  [[deprecated("Use `FOO.requestsFailed() = BAR` instead of `FOO.set_requestsFailed(BAR)`")]]
  ::std::int32_t& set_requestsFailed(::std::int32_t requestsFailed_);

  /** Glean { "field": "httpRequestState" } */
  [[deprecated("Use `FOO.httpRequestState().value()` instead of `FOO.get_httpRequestState()`")]]
  const ::std::string& get_httpRequestState() const& {
    return __fbthrift_field_httpRequestState;
  }

  /** Glean { "field": "httpRequestState" } */
  [[deprecated("Use `FOO.httpRequestState().value()` instead of `FOO.get_httpRequestState()`")]]
  ::std::string get_httpRequestState() && {
    return static_cast<::std::string&&>(__fbthrift_field_httpRequestState);
  }

  /** Glean { "field": "httpRequestState" } */
  template <typename T_PageBufferClientStatus_httpRequestState_struct_setter = ::std::string>
  [[deprecated("Use `FOO.httpRequestState() = BAR` instead of `FOO.set_httpRequestState(BAR)`")]]
  ::std::string& set_httpRequestState(T_PageBufferClientStatus_httpRequestState_struct_setter&& httpRequestState_) {
    httpRequestState_ref() = std::forward<T_PageBufferClientStatus_httpRequestState_struct_setter>(httpRequestState_);
    return __fbthrift_field_httpRequestState;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<PageBufferClientStatus>;
  friend void swap(PageBufferClientStatus& a, PageBufferClientStatus& b);
};

template <class Protocol_>
unsigned long PageBufferClientStatus::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "LocalExchangeBufferInfo", "kind": "struct" } */
class LocalExchangeBufferInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bufferedBytes,
    ::apache::thrift::ident::bufferedPages
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LocalExchangeBufferInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  LocalExchangeBufferInfo() :
      __fbthrift_field_bufferedBytes(),
      __fbthrift_field_bufferedPages() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LocalExchangeBufferInfo(apache::thrift::FragileConstructor, ::std::int64_t bufferedBytes__arg, ::std::int32_t bufferedPages__arg);

  LocalExchangeBufferInfo(LocalExchangeBufferInfo&&) = default;

  LocalExchangeBufferInfo(const LocalExchangeBufferInfo&) = default;


  LocalExchangeBufferInfo& operator=(LocalExchangeBufferInfo&&) = default;

  LocalExchangeBufferInfo& operator=(const LocalExchangeBufferInfo&) = default;
 private:
  ::std::int64_t __fbthrift_field_bufferedBytes;
 private:
  ::std::int32_t __fbthrift_field_bufferedPages;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const LocalExchangeBufferInfo&) const;
  bool operator<(const LocalExchangeBufferInfo&) const;

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedBytes_ref() const& {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedBytes_ref() & {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedBytes), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedBytes() const& {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedBytes() & {
    return {this->__fbthrift_field_bufferedBytes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedBytes), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedPages_ref() const& {
    return {this->__fbthrift_field_bufferedPages, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedPages_ref() & {
    return {this->__fbthrift_field_bufferedPages, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedPages_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedPages), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedPages() const& {
    return {this->__fbthrift_field_bufferedPages, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedPages() & {
    return {this->__fbthrift_field_bufferedPages, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedPages() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedPages), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedBytes" } */
  [[deprecated("Use `FOO.bufferedBytes().value()` instead of `FOO.get_bufferedBytes()`")]]
  ::std::int64_t get_bufferedBytes() const;

  /** Glean { "field": "bufferedBytes" } */
  [[deprecated("Use `FOO.bufferedBytes() = BAR` instead of `FOO.set_bufferedBytes(BAR)`")]]
  ::std::int64_t& set_bufferedBytes(::std::int64_t bufferedBytes_);

  /** Glean { "field": "bufferedPages" } */
  [[deprecated("Use `FOO.bufferedPages().value()` instead of `FOO.get_bufferedPages()`")]]
  ::std::int32_t get_bufferedPages() const;

  /** Glean { "field": "bufferedPages" } */
  [[deprecated("Use `FOO.bufferedPages() = BAR` instead of `FOO.set_bufferedPages(BAR)`")]]
  ::std::int32_t& set_bufferedPages(::std::int32_t bufferedPages_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LocalExchangeBufferInfo>;
  friend void swap(LocalExchangeBufferInfo& a, LocalExchangeBufferInfo& b);
};

template <class Protocol_>
unsigned long LocalExchangeBufferInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TableFinishInfo", "kind": "struct" } */
class TableFinishInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::serializedConnectorOutputMetadata,
    ::apache::thrift::ident::jsonLengthLimitExceeded,
    ::apache::thrift::ident::statisticsWallTime,
    ::apache::thrift::ident::statisticsCpuTime
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TableFinishInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TableFinishInfo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TableFinishInfo(apache::thrift::FragileConstructor, ::std::string serializedConnectorOutputMetadata__arg, bool jsonLengthLimitExceeded__arg, double statisticsWallTime__arg, double statisticsCpuTime__arg);

  TableFinishInfo(TableFinishInfo&&) noexcept;

  TableFinishInfo(const TableFinishInfo& src);


  TableFinishInfo& operator=(TableFinishInfo&&) noexcept;
  TableFinishInfo& operator=(const TableFinishInfo& src);

  ~TableFinishInfo();

 private:
  ::std::string __fbthrift_field_serializedConnectorOutputMetadata;
 private:
  bool __fbthrift_field_jsonLengthLimitExceeded;
 private:
  double __fbthrift_field_statisticsWallTime;
 private:
  double __fbthrift_field_statisticsCpuTime;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TableFinishInfo&) const;
  bool operator<(const TableFinishInfo&) const;

  /** Glean { "field": "serializedConnectorOutputMetadata" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serializedConnectorOutputMetadata_ref() const& {
    return {this->__fbthrift_field_serializedConnectorOutputMetadata, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serializedConnectorOutputMetadata" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serializedConnectorOutputMetadata_ref() & {
    return {this->__fbthrift_field_serializedConnectorOutputMetadata, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serializedConnectorOutputMetadata" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serializedConnectorOutputMetadata_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serializedConnectorOutputMetadata), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serializedConnectorOutputMetadata" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serializedConnectorOutputMetadata() const& {
    return {this->__fbthrift_field_serializedConnectorOutputMetadata, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serializedConnectorOutputMetadata" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serializedConnectorOutputMetadata() & {
    return {this->__fbthrift_field_serializedConnectorOutputMetadata, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serializedConnectorOutputMetadata" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serializedConnectorOutputMetadata() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serializedConnectorOutputMetadata), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "jsonLengthLimitExceeded" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> jsonLengthLimitExceeded_ref() const& {
    return {this->__fbthrift_field_jsonLengthLimitExceeded, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "jsonLengthLimitExceeded" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> jsonLengthLimitExceeded_ref() & {
    return {this->__fbthrift_field_jsonLengthLimitExceeded, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "jsonLengthLimitExceeded" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> jsonLengthLimitExceeded_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_jsonLengthLimitExceeded), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "jsonLengthLimitExceeded" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> jsonLengthLimitExceeded() const& {
    return {this->__fbthrift_field_jsonLengthLimitExceeded, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "jsonLengthLimitExceeded" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> jsonLengthLimitExceeded() & {
    return {this->__fbthrift_field_jsonLengthLimitExceeded, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "jsonLengthLimitExceeded" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> jsonLengthLimitExceeded() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_jsonLengthLimitExceeded), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsWallTime_ref() const& {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsWallTime_ref() & {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsWallTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsWallTime), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsWallTime() const& {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsWallTime() & {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsWallTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsWallTime), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsCpuTime_ref() const& {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsCpuTime_ref() & {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsCpuTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsCpuTime), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsCpuTime() const& {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsCpuTime() & {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsCpuTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsCpuTime), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "serializedConnectorOutputMetadata" } */
  [[deprecated("Use `FOO.serializedConnectorOutputMetadata().value()` instead of `FOO.get_serializedConnectorOutputMetadata()`")]]
  const ::std::string& get_serializedConnectorOutputMetadata() const& {
    return __fbthrift_field_serializedConnectorOutputMetadata;
  }

  /** Glean { "field": "serializedConnectorOutputMetadata" } */
  [[deprecated("Use `FOO.serializedConnectorOutputMetadata().value()` instead of `FOO.get_serializedConnectorOutputMetadata()`")]]
  ::std::string get_serializedConnectorOutputMetadata() && {
    return static_cast<::std::string&&>(__fbthrift_field_serializedConnectorOutputMetadata);
  }

  /** Glean { "field": "serializedConnectorOutputMetadata" } */
  template <typename T_TableFinishInfo_serializedConnectorOutputMetadata_struct_setter = ::std::string>
  [[deprecated("Use `FOO.serializedConnectorOutputMetadata() = BAR` instead of `FOO.set_serializedConnectorOutputMetadata(BAR)`")]]
  ::std::string& set_serializedConnectorOutputMetadata(T_TableFinishInfo_serializedConnectorOutputMetadata_struct_setter&& serializedConnectorOutputMetadata_) {
    serializedConnectorOutputMetadata_ref() = std::forward<T_TableFinishInfo_serializedConnectorOutputMetadata_struct_setter>(serializedConnectorOutputMetadata_);
    return __fbthrift_field_serializedConnectorOutputMetadata;
  }

  /** Glean { "field": "jsonLengthLimitExceeded" } */
  [[deprecated("Use `FOO.jsonLengthLimitExceeded().value()` instead of `FOO.get_jsonLengthLimitExceeded()`")]]
  bool get_jsonLengthLimitExceeded() const;

  /** Glean { "field": "jsonLengthLimitExceeded" } */
  [[deprecated("Use `FOO.jsonLengthLimitExceeded() = BAR` instead of `FOO.set_jsonLengthLimitExceeded(BAR)`")]]
  bool& set_jsonLengthLimitExceeded(bool jsonLengthLimitExceeded_);

  /** Glean { "field": "statisticsWallTime" } */
  [[deprecated("Use `FOO.statisticsWallTime().value()` instead of `FOO.get_statisticsWallTime()`")]]
  double get_statisticsWallTime() const;

  /** Glean { "field": "statisticsWallTime" } */
  [[deprecated("Use `FOO.statisticsWallTime() = BAR` instead of `FOO.set_statisticsWallTime(BAR)`")]]
  double& set_statisticsWallTime(double statisticsWallTime_);

  /** Glean { "field": "statisticsCpuTime" } */
  [[deprecated("Use `FOO.statisticsCpuTime().value()` instead of `FOO.get_statisticsCpuTime()`")]]
  double get_statisticsCpuTime() const;

  /** Glean { "field": "statisticsCpuTime" } */
  [[deprecated("Use `FOO.statisticsCpuTime() = BAR` instead of `FOO.set_statisticsCpuTime(BAR)`")]]
  double& set_statisticsCpuTime(double statisticsCpuTime_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TableFinishInfo>;
  friend void swap(TableFinishInfo& a, TableFinishInfo& b);
};

template <class Protocol_>
unsigned long TableFinishInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "SplitOperatorInfo", "kind": "struct" } */
class SplitOperatorInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::splitInfoMap
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SplitOperatorInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SplitOperatorInfo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SplitOperatorInfo(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> splitInfoMap__arg);

  SplitOperatorInfo(SplitOperatorInfo&&) noexcept;

  SplitOperatorInfo(const SplitOperatorInfo& src);


  SplitOperatorInfo& operator=(SplitOperatorInfo&&) noexcept;
  SplitOperatorInfo& operator=(const SplitOperatorInfo& src);

  ~SplitOperatorInfo();

 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_splitInfoMap;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SplitOperatorInfo&) const;
  bool operator<(const SplitOperatorInfo&) const;

  /** Glean { "field": "splitInfoMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> splitInfoMap_ref() const& {
    return {this->__fbthrift_field_splitInfoMap, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "splitInfoMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> splitInfoMap_ref() & {
    return {this->__fbthrift_field_splitInfoMap, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "splitInfoMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> splitInfoMap_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_splitInfoMap), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "splitInfoMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> splitInfoMap() const& {
    return {this->__fbthrift_field_splitInfoMap, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "splitInfoMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> splitInfoMap() & {
    return {this->__fbthrift_field_splitInfoMap, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "splitInfoMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> splitInfoMap() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_splitInfoMap), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "splitInfoMap" } */
  [[deprecated("Use `FOO.splitInfoMap().value()` instead of `FOO.get_splitInfoMap()`")]]
  const ::std::map<::std::string, ::std::string>& get_splitInfoMap() const&;

  /** Glean { "field": "splitInfoMap" } */
  [[deprecated("Use `FOO.splitInfoMap().value()` instead of `FOO.get_splitInfoMap()`")]]
  ::std::map<::std::string, ::std::string> get_splitInfoMap() &&;

  /** Glean { "field": "splitInfoMap" } */
  template <typename T_SplitOperatorInfo_splitInfoMap_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.splitInfoMap() = BAR` instead of `FOO.set_splitInfoMap(BAR)`")]]
  ::std::map<::std::string, ::std::string>& set_splitInfoMap(T_SplitOperatorInfo_splitInfoMap_struct_setter&& splitInfoMap_) {
    splitInfoMap_ref() = std::forward<T_SplitOperatorInfo_splitInfoMap_struct_setter>(splitInfoMap_);
    return __fbthrift_field_splitInfoMap;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SplitOperatorInfo>;
  friend void swap(SplitOperatorInfo& a, SplitOperatorInfo& b);
};

template <class Protocol_>
unsigned long SplitOperatorInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "HashCollisionsInfo", "kind": "struct" } */
class HashCollisionsInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::weightedSumSquaredHashCollisions,
    ::apache::thrift::ident::weightedHashCollisions,
    ::apache::thrift::ident::weightedExpectedHashCollisions
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = HashCollisionsInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  HashCollisionsInfo() :
      __fbthrift_field_weightedSumSquaredHashCollisions(),
      __fbthrift_field_weightedHashCollisions(),
      __fbthrift_field_weightedExpectedHashCollisions() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  HashCollisionsInfo(apache::thrift::FragileConstructor, double weightedSumSquaredHashCollisions__arg, double weightedHashCollisions__arg, double weightedExpectedHashCollisions__arg);

  HashCollisionsInfo(HashCollisionsInfo&&) = default;

  HashCollisionsInfo(const HashCollisionsInfo&) = default;


  HashCollisionsInfo& operator=(HashCollisionsInfo&&) = default;

  HashCollisionsInfo& operator=(const HashCollisionsInfo&) = default;
 private:
  double __fbthrift_field_weightedSumSquaredHashCollisions;
 private:
  double __fbthrift_field_weightedHashCollisions;
 private:
  double __fbthrift_field_weightedExpectedHashCollisions;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const HashCollisionsInfo&) const;
  bool operator<(const HashCollisionsInfo&) const;

  /** Glean { "field": "weightedSumSquaredHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> weightedSumSquaredHashCollisions_ref() const& {
    return {this->__fbthrift_field_weightedSumSquaredHashCollisions, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "weightedSumSquaredHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> weightedSumSquaredHashCollisions_ref() & {
    return {this->__fbthrift_field_weightedSumSquaredHashCollisions, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "weightedSumSquaredHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> weightedSumSquaredHashCollisions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_weightedSumSquaredHashCollisions), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "weightedSumSquaredHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> weightedSumSquaredHashCollisions() const& {
    return {this->__fbthrift_field_weightedSumSquaredHashCollisions, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "weightedSumSquaredHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> weightedSumSquaredHashCollisions() & {
    return {this->__fbthrift_field_weightedSumSquaredHashCollisions, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "weightedSumSquaredHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> weightedSumSquaredHashCollisions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_weightedSumSquaredHashCollisions), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "weightedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> weightedHashCollisions_ref() const& {
    return {this->__fbthrift_field_weightedHashCollisions, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "weightedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> weightedHashCollisions_ref() & {
    return {this->__fbthrift_field_weightedHashCollisions, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "weightedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> weightedHashCollisions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_weightedHashCollisions), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "weightedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> weightedHashCollisions() const& {
    return {this->__fbthrift_field_weightedHashCollisions, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "weightedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> weightedHashCollisions() & {
    return {this->__fbthrift_field_weightedHashCollisions, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "weightedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> weightedHashCollisions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_weightedHashCollisions), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "weightedExpectedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> weightedExpectedHashCollisions_ref() const& {
    return {this->__fbthrift_field_weightedExpectedHashCollisions, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "weightedExpectedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> weightedExpectedHashCollisions_ref() & {
    return {this->__fbthrift_field_weightedExpectedHashCollisions, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "weightedExpectedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> weightedExpectedHashCollisions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_weightedExpectedHashCollisions), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "weightedExpectedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> weightedExpectedHashCollisions() const& {
    return {this->__fbthrift_field_weightedExpectedHashCollisions, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "weightedExpectedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> weightedExpectedHashCollisions() & {
    return {this->__fbthrift_field_weightedExpectedHashCollisions, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "weightedExpectedHashCollisions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> weightedExpectedHashCollisions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_weightedExpectedHashCollisions), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "weightedSumSquaredHashCollisions" } */
  [[deprecated("Use `FOO.weightedSumSquaredHashCollisions().value()` instead of `FOO.get_weightedSumSquaredHashCollisions()`")]]
  double get_weightedSumSquaredHashCollisions() const;

  /** Glean { "field": "weightedSumSquaredHashCollisions" } */
  [[deprecated("Use `FOO.weightedSumSquaredHashCollisions() = BAR` instead of `FOO.set_weightedSumSquaredHashCollisions(BAR)`")]]
  double& set_weightedSumSquaredHashCollisions(double weightedSumSquaredHashCollisions_);

  /** Glean { "field": "weightedHashCollisions" } */
  [[deprecated("Use `FOO.weightedHashCollisions().value()` instead of `FOO.get_weightedHashCollisions()`")]]
  double get_weightedHashCollisions() const;

  /** Glean { "field": "weightedHashCollisions" } */
  [[deprecated("Use `FOO.weightedHashCollisions() = BAR` instead of `FOO.set_weightedHashCollisions(BAR)`")]]
  double& set_weightedHashCollisions(double weightedHashCollisions_);

  /** Glean { "field": "weightedExpectedHashCollisions" } */
  [[deprecated("Use `FOO.weightedExpectedHashCollisions().value()` instead of `FOO.get_weightedExpectedHashCollisions()`")]]
  double get_weightedExpectedHashCollisions() const;

  /** Glean { "field": "weightedExpectedHashCollisions" } */
  [[deprecated("Use `FOO.weightedExpectedHashCollisions() = BAR` instead of `FOO.set_weightedExpectedHashCollisions(BAR)`")]]
  double& set_weightedExpectedHashCollisions(double weightedExpectedHashCollisions_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<HashCollisionsInfo>;
  friend void swap(HashCollisionsInfo& a, HashCollisionsInfo& b);
};

template <class Protocol_>
unsigned long HashCollisionsInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "PartitionedOutputInfo", "kind": "struct" } */
class PartitionedOutputInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::rowsAdded,
    ::apache::thrift::ident::pagesAdded,
    ::apache::thrift::ident::outputBufferPeakMemoryUsage
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = PartitionedOutputInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  PartitionedOutputInfo() :
      __fbthrift_field_rowsAdded(),
      __fbthrift_field_pagesAdded(),
      __fbthrift_field_outputBufferPeakMemoryUsage() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  PartitionedOutputInfo(apache::thrift::FragileConstructor, ::std::int64_t rowsAdded__arg, ::std::int64_t pagesAdded__arg, ::std::int64_t outputBufferPeakMemoryUsage__arg);

  PartitionedOutputInfo(PartitionedOutputInfo&&) = default;

  PartitionedOutputInfo(const PartitionedOutputInfo&) = default;


  PartitionedOutputInfo& operator=(PartitionedOutputInfo&&) = default;

  PartitionedOutputInfo& operator=(const PartitionedOutputInfo&) = default;
 private:
  ::std::int64_t __fbthrift_field_rowsAdded;
 private:
  ::std::int64_t __fbthrift_field_pagesAdded;
 private:
  ::std::int64_t __fbthrift_field_outputBufferPeakMemoryUsage;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const PartitionedOutputInfo&) const;
  bool operator<(const PartitionedOutputInfo&) const;

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rowsAdded_ref() const& {
    return {this->__fbthrift_field_rowsAdded, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rowsAdded_ref() & {
    return {this->__fbthrift_field_rowsAdded, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rowsAdded_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rowsAdded), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rowsAdded() const& {
    return {this->__fbthrift_field_rowsAdded, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rowsAdded() & {
    return {this->__fbthrift_field_rowsAdded, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "rowsAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rowsAdded() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rowsAdded), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesAdded_ref() const& {
    return {this->__fbthrift_field_pagesAdded, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesAdded_ref() & {
    return {this->__fbthrift_field_pagesAdded, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesAdded_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesAdded), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesAdded() const& {
    return {this->__fbthrift_field_pagesAdded, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesAdded() & {
    return {this->__fbthrift_field_pagesAdded, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "pagesAdded" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesAdded() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesAdded), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "outputBufferPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputBufferPeakMemoryUsage_ref() const& {
    return {this->__fbthrift_field_outputBufferPeakMemoryUsage, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "outputBufferPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputBufferPeakMemoryUsage_ref() & {
    return {this->__fbthrift_field_outputBufferPeakMemoryUsage, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "outputBufferPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputBufferPeakMemoryUsage_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputBufferPeakMemoryUsage), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "outputBufferPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputBufferPeakMemoryUsage() const& {
    return {this->__fbthrift_field_outputBufferPeakMemoryUsage, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "outputBufferPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputBufferPeakMemoryUsage() & {
    return {this->__fbthrift_field_outputBufferPeakMemoryUsage, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "outputBufferPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputBufferPeakMemoryUsage() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputBufferPeakMemoryUsage), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "rowsAdded" } */
  [[deprecated("Use `FOO.rowsAdded().value()` instead of `FOO.get_rowsAdded()`")]]
  ::std::int64_t get_rowsAdded() const;

  /** Glean { "field": "rowsAdded" } */
  [[deprecated("Use `FOO.rowsAdded() = BAR` instead of `FOO.set_rowsAdded(BAR)`")]]
  ::std::int64_t& set_rowsAdded(::std::int64_t rowsAdded_);

  /** Glean { "field": "pagesAdded" } */
  [[deprecated("Use `FOO.pagesAdded().value()` instead of `FOO.get_pagesAdded()`")]]
  ::std::int64_t get_pagesAdded() const;

  /** Glean { "field": "pagesAdded" } */
  [[deprecated("Use `FOO.pagesAdded() = BAR` instead of `FOO.set_pagesAdded(BAR)`")]]
  ::std::int64_t& set_pagesAdded(::std::int64_t pagesAdded_);

  /** Glean { "field": "outputBufferPeakMemoryUsage" } */
  [[deprecated("Use `FOO.outputBufferPeakMemoryUsage().value()` instead of `FOO.get_outputBufferPeakMemoryUsage()`")]]
  ::std::int64_t get_outputBufferPeakMemoryUsage() const;

  /** Glean { "field": "outputBufferPeakMemoryUsage" } */
  [[deprecated("Use `FOO.outputBufferPeakMemoryUsage() = BAR` instead of `FOO.set_outputBufferPeakMemoryUsage(BAR)`")]]
  ::std::int64_t& set_outputBufferPeakMemoryUsage(::std::int64_t outputBufferPeakMemoryUsage_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<PartitionedOutputInfo>;
  friend void swap(PartitionedOutputInfo& a, PartitionedOutputInfo& b);
};

template <class Protocol_>
unsigned long PartitionedOutputInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "WindowInfo", "kind": "struct" } */
class WindowInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::windowInfos
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::DriverWindowInfo>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = WindowInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  WindowInfo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  WindowInfo(apache::thrift::FragileConstructor, ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo> windowInfos__arg);

  WindowInfo(WindowInfo&&) noexcept;

  WindowInfo(const WindowInfo& src);


  WindowInfo& operator=(WindowInfo&&) noexcept;
  WindowInfo& operator=(const WindowInfo& src);

  ~WindowInfo();

 private:
  ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo> __fbthrift_field_windowInfos;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const WindowInfo&) const;
  bool operator<(const WindowInfo&) const;

  /** Glean { "field": "windowInfos" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> windowInfos_ref() const& {
    return {this->__fbthrift_field_windowInfos, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "windowInfos" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> windowInfos_ref() & {
    return {this->__fbthrift_field_windowInfos, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "windowInfos" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> windowInfos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_windowInfos), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "windowInfos" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> windowInfos() const& {
    return {this->__fbthrift_field_windowInfos, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "windowInfos" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> windowInfos() & {
    return {this->__fbthrift_field_windowInfos, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "windowInfos" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> windowInfos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_windowInfos), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "windowInfos" } */
  [[deprecated("Use `FOO.windowInfos().value()` instead of `FOO.get_windowInfos()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>& get_windowInfos() const&;

  /** Glean { "field": "windowInfos" } */
  [[deprecated("Use `FOO.windowInfos().value()` instead of `FOO.get_windowInfos()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo> get_windowInfos() &&;

  /** Glean { "field": "windowInfos" } */
  template <typename T_WindowInfo_windowInfos_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>>
  [[deprecated("Use `FOO.windowInfos() = BAR` instead of `FOO.set_windowInfos(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>& set_windowInfos(T_WindowInfo_windowInfos_struct_setter&& windowInfos_) {
    windowInfos_ref() = std::forward<T_WindowInfo_windowInfos_struct_setter>(windowInfos_);
    return __fbthrift_field_windowInfos;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<WindowInfo>;
  friend void swap(WindowInfo& a, WindowInfo& b);
};

template <class Protocol_>
unsigned long WindowInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "DriverWindowInfo", "kind": "struct" } */
class DriverWindowInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::sumSquaredDifferencesPositionsOfIndex,
    ::apache::thrift::ident::sumSquaredDifferencesSizeOfIndex,
    ::apache::thrift::ident::sumSquaredDifferencesSizeInPartition,
    ::apache::thrift::ident::totalPartitionsCount,
    ::apache::thrift::ident::totalRowsCount,
    ::apache::thrift::ident::numberOfIndexes
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DriverWindowInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DriverWindowInfo() :
      __fbthrift_field_sumSquaredDifferencesPositionsOfIndex(),
      __fbthrift_field_sumSquaredDifferencesSizeOfIndex(),
      __fbthrift_field_sumSquaredDifferencesSizeInPartition(),
      __fbthrift_field_totalPartitionsCount(),
      __fbthrift_field_totalRowsCount(),
      __fbthrift_field_numberOfIndexes() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DriverWindowInfo(apache::thrift::FragileConstructor, double sumSquaredDifferencesPositionsOfIndex__arg, double sumSquaredDifferencesSizeOfIndex__arg, double sumSquaredDifferencesSizeInPartition__arg, ::std::int64_t totalPartitionsCount__arg, ::std::int64_t totalRowsCount__arg, ::std::int64_t numberOfIndexes__arg);

  DriverWindowInfo(DriverWindowInfo&&) = default;

  DriverWindowInfo(const DriverWindowInfo&) = default;


  DriverWindowInfo& operator=(DriverWindowInfo&&) = default;

  DriverWindowInfo& operator=(const DriverWindowInfo&) = default;
 private:
  double __fbthrift_field_sumSquaredDifferencesPositionsOfIndex;
 private:
  double __fbthrift_field_sumSquaredDifferencesSizeOfIndex;
 private:
  double __fbthrift_field_sumSquaredDifferencesSizeInPartition;
 private:
  ::std::int64_t __fbthrift_field_totalPartitionsCount;
 private:
  ::std::int64_t __fbthrift_field_totalRowsCount;
 private:
  ::std::int64_t __fbthrift_field_numberOfIndexes;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DriverWindowInfo&) const;
  bool operator<(const DriverWindowInfo&) const;

  /** Glean { "field": "sumSquaredDifferencesPositionsOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sumSquaredDifferencesPositionsOfIndex_ref() const& {
    return {this->__fbthrift_field_sumSquaredDifferencesPositionsOfIndex, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sumSquaredDifferencesPositionsOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sumSquaredDifferencesPositionsOfIndex_ref() & {
    return {this->__fbthrift_field_sumSquaredDifferencesPositionsOfIndex, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sumSquaredDifferencesPositionsOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sumSquaredDifferencesPositionsOfIndex_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sumSquaredDifferencesPositionsOfIndex), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sumSquaredDifferencesPositionsOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sumSquaredDifferencesPositionsOfIndex() const& {
    return {this->__fbthrift_field_sumSquaredDifferencesPositionsOfIndex, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sumSquaredDifferencesPositionsOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sumSquaredDifferencesPositionsOfIndex() & {
    return {this->__fbthrift_field_sumSquaredDifferencesPositionsOfIndex, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sumSquaredDifferencesPositionsOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sumSquaredDifferencesPositionsOfIndex() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sumSquaredDifferencesPositionsOfIndex), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sumSquaredDifferencesSizeOfIndex_ref() const& {
    return {this->__fbthrift_field_sumSquaredDifferencesSizeOfIndex, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sumSquaredDifferencesSizeOfIndex_ref() & {
    return {this->__fbthrift_field_sumSquaredDifferencesSizeOfIndex, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sumSquaredDifferencesSizeOfIndex_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sumSquaredDifferencesSizeOfIndex), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sumSquaredDifferencesSizeOfIndex() const& {
    return {this->__fbthrift_field_sumSquaredDifferencesSizeOfIndex, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sumSquaredDifferencesSizeOfIndex() & {
    return {this->__fbthrift_field_sumSquaredDifferencesSizeOfIndex, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeOfIndex" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sumSquaredDifferencesSizeOfIndex() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sumSquaredDifferencesSizeOfIndex), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeInPartition" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sumSquaredDifferencesSizeInPartition_ref() const& {
    return {this->__fbthrift_field_sumSquaredDifferencesSizeInPartition, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeInPartition" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sumSquaredDifferencesSizeInPartition_ref() & {
    return {this->__fbthrift_field_sumSquaredDifferencesSizeInPartition, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeInPartition" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sumSquaredDifferencesSizeInPartition_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sumSquaredDifferencesSizeInPartition), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeInPartition" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sumSquaredDifferencesSizeInPartition() const& {
    return {this->__fbthrift_field_sumSquaredDifferencesSizeInPartition, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeInPartition" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sumSquaredDifferencesSizeInPartition() & {
    return {this->__fbthrift_field_sumSquaredDifferencesSizeInPartition, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "sumSquaredDifferencesSizeInPartition" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sumSquaredDifferencesSizeInPartition() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sumSquaredDifferencesSizeInPartition), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "totalPartitionsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalPartitionsCount_ref() const& {
    return {this->__fbthrift_field_totalPartitionsCount, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "totalPartitionsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalPartitionsCount_ref() & {
    return {this->__fbthrift_field_totalPartitionsCount, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "totalPartitionsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalPartitionsCount_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalPartitionsCount), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "totalPartitionsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalPartitionsCount() const& {
    return {this->__fbthrift_field_totalPartitionsCount, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "totalPartitionsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalPartitionsCount() & {
    return {this->__fbthrift_field_totalPartitionsCount, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "totalPartitionsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalPartitionsCount() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalPartitionsCount), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "totalRowsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalRowsCount_ref() const& {
    return {this->__fbthrift_field_totalRowsCount, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "totalRowsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalRowsCount_ref() & {
    return {this->__fbthrift_field_totalRowsCount, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "totalRowsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalRowsCount_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalRowsCount), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "totalRowsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalRowsCount() const& {
    return {this->__fbthrift_field_totalRowsCount, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "totalRowsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalRowsCount() & {
    return {this->__fbthrift_field_totalRowsCount, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "totalRowsCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalRowsCount() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalRowsCount), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "numberOfIndexes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> numberOfIndexes_ref() const& {
    return {this->__fbthrift_field_numberOfIndexes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "numberOfIndexes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> numberOfIndexes_ref() & {
    return {this->__fbthrift_field_numberOfIndexes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "numberOfIndexes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> numberOfIndexes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_numberOfIndexes), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "numberOfIndexes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> numberOfIndexes() const& {
    return {this->__fbthrift_field_numberOfIndexes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "numberOfIndexes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> numberOfIndexes() & {
    return {this->__fbthrift_field_numberOfIndexes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "numberOfIndexes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> numberOfIndexes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_numberOfIndexes), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "sumSquaredDifferencesPositionsOfIndex" } */
  [[deprecated("Use `FOO.sumSquaredDifferencesPositionsOfIndex().value()` instead of `FOO.get_sumSquaredDifferencesPositionsOfIndex()`")]]
  double get_sumSquaredDifferencesPositionsOfIndex() const;

  /** Glean { "field": "sumSquaredDifferencesPositionsOfIndex" } */
  [[deprecated("Use `FOO.sumSquaredDifferencesPositionsOfIndex() = BAR` instead of `FOO.set_sumSquaredDifferencesPositionsOfIndex(BAR)`")]]
  double& set_sumSquaredDifferencesPositionsOfIndex(double sumSquaredDifferencesPositionsOfIndex_);

  /** Glean { "field": "sumSquaredDifferencesSizeOfIndex" } */
  [[deprecated("Use `FOO.sumSquaredDifferencesSizeOfIndex().value()` instead of `FOO.get_sumSquaredDifferencesSizeOfIndex()`")]]
  double get_sumSquaredDifferencesSizeOfIndex() const;

  /** Glean { "field": "sumSquaredDifferencesSizeOfIndex" } */
  [[deprecated("Use `FOO.sumSquaredDifferencesSizeOfIndex() = BAR` instead of `FOO.set_sumSquaredDifferencesSizeOfIndex(BAR)`")]]
  double& set_sumSquaredDifferencesSizeOfIndex(double sumSquaredDifferencesSizeOfIndex_);

  /** Glean { "field": "sumSquaredDifferencesSizeInPartition" } */
  [[deprecated("Use `FOO.sumSquaredDifferencesSizeInPartition().value()` instead of `FOO.get_sumSquaredDifferencesSizeInPartition()`")]]
  double get_sumSquaredDifferencesSizeInPartition() const;

  /** Glean { "field": "sumSquaredDifferencesSizeInPartition" } */
  [[deprecated("Use `FOO.sumSquaredDifferencesSizeInPartition() = BAR` instead of `FOO.set_sumSquaredDifferencesSizeInPartition(BAR)`")]]
  double& set_sumSquaredDifferencesSizeInPartition(double sumSquaredDifferencesSizeInPartition_);

  /** Glean { "field": "totalPartitionsCount" } */
  [[deprecated("Use `FOO.totalPartitionsCount().value()` instead of `FOO.get_totalPartitionsCount()`")]]
  ::std::int64_t get_totalPartitionsCount() const;

  /** Glean { "field": "totalPartitionsCount" } */
  [[deprecated("Use `FOO.totalPartitionsCount() = BAR` instead of `FOO.set_totalPartitionsCount(BAR)`")]]
  ::std::int64_t& set_totalPartitionsCount(::std::int64_t totalPartitionsCount_);

  /** Glean { "field": "totalRowsCount" } */
  [[deprecated("Use `FOO.totalRowsCount().value()` instead of `FOO.get_totalRowsCount()`")]]
  ::std::int64_t get_totalRowsCount() const;

  /** Glean { "field": "totalRowsCount" } */
  [[deprecated("Use `FOO.totalRowsCount() = BAR` instead of `FOO.set_totalRowsCount(BAR)`")]]
  ::std::int64_t& set_totalRowsCount(::std::int64_t totalRowsCount_);

  /** Glean { "field": "numberOfIndexes" } */
  [[deprecated("Use `FOO.numberOfIndexes().value()` instead of `FOO.get_numberOfIndexes()`")]]
  ::std::int64_t get_numberOfIndexes() const;

  /** Glean { "field": "numberOfIndexes" } */
  [[deprecated("Use `FOO.numberOfIndexes() = BAR` instead of `FOO.set_numberOfIndexes(BAR)`")]]
  ::std::int64_t& set_numberOfIndexes(::std::int64_t numberOfIndexes_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DriverWindowInfo>;
  friend void swap(DriverWindowInfo& a, DriverWindowInfo& b);
};

template <class Protocol_>
unsigned long DriverWindowInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TableWriterInfo", "kind": "struct" } */
class TableWriterInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::pageSinkPeakMemoryUsage,
    ::apache::thrift::ident::statisticsWallTime,
    ::apache::thrift::ident::statisticsCpuTime,
    ::apache::thrift::ident::validationCpuTime
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TableWriterInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TableWriterInfo() :
      __fbthrift_field_pageSinkPeakMemoryUsage(),
      __fbthrift_field_statisticsWallTime(),
      __fbthrift_field_statisticsCpuTime(),
      __fbthrift_field_validationCpuTime() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TableWriterInfo(apache::thrift::FragileConstructor, ::std::int64_t pageSinkPeakMemoryUsage__arg, double statisticsWallTime__arg, double statisticsCpuTime__arg, double validationCpuTime__arg);

  TableWriterInfo(TableWriterInfo&&) = default;

  TableWriterInfo(const TableWriterInfo&) = default;


  TableWriterInfo& operator=(TableWriterInfo&&) = default;

  TableWriterInfo& operator=(const TableWriterInfo&) = default;
 private:
  ::std::int64_t __fbthrift_field_pageSinkPeakMemoryUsage;
 private:
  double __fbthrift_field_statisticsWallTime;
 private:
  double __fbthrift_field_statisticsCpuTime;
 private:
  double __fbthrift_field_validationCpuTime;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TableWriterInfo&) const;
  bool operator<(const TableWriterInfo&) const;

  /** Glean { "field": "pageSinkPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pageSinkPeakMemoryUsage_ref() const& {
    return {this->__fbthrift_field_pageSinkPeakMemoryUsage, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pageSinkPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pageSinkPeakMemoryUsage_ref() & {
    return {this->__fbthrift_field_pageSinkPeakMemoryUsage, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pageSinkPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pageSinkPeakMemoryUsage_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pageSinkPeakMemoryUsage), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pageSinkPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pageSinkPeakMemoryUsage() const& {
    return {this->__fbthrift_field_pageSinkPeakMemoryUsage, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pageSinkPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pageSinkPeakMemoryUsage() & {
    return {this->__fbthrift_field_pageSinkPeakMemoryUsage, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pageSinkPeakMemoryUsage" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pageSinkPeakMemoryUsage() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pageSinkPeakMemoryUsage), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsWallTime_ref() const& {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsWallTime_ref() & {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsWallTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsWallTime), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsWallTime() const& {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsWallTime() & {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsWallTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsWallTime), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsCpuTime_ref() const& {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsCpuTime_ref() & {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsCpuTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsCpuTime), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsCpuTime() const& {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsCpuTime() & {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsCpuTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsCpuTime), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "validationCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> validationCpuTime_ref() const& {
    return {this->__fbthrift_field_validationCpuTime, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "validationCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> validationCpuTime_ref() & {
    return {this->__fbthrift_field_validationCpuTime, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "validationCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> validationCpuTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_validationCpuTime), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "validationCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> validationCpuTime() const& {
    return {this->__fbthrift_field_validationCpuTime, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "validationCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> validationCpuTime() & {
    return {this->__fbthrift_field_validationCpuTime, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "validationCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> validationCpuTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_validationCpuTime), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "pageSinkPeakMemoryUsage" } */
  [[deprecated("Use `FOO.pageSinkPeakMemoryUsage().value()` instead of `FOO.get_pageSinkPeakMemoryUsage()`")]]
  ::std::int64_t get_pageSinkPeakMemoryUsage() const;

  /** Glean { "field": "pageSinkPeakMemoryUsage" } */
  [[deprecated("Use `FOO.pageSinkPeakMemoryUsage() = BAR` instead of `FOO.set_pageSinkPeakMemoryUsage(BAR)`")]]
  ::std::int64_t& set_pageSinkPeakMemoryUsage(::std::int64_t pageSinkPeakMemoryUsage_);

  /** Glean { "field": "statisticsWallTime" } */
  [[deprecated("Use `FOO.statisticsWallTime().value()` instead of `FOO.get_statisticsWallTime()`")]]
  double get_statisticsWallTime() const;

  /** Glean { "field": "statisticsWallTime" } */
  [[deprecated("Use `FOO.statisticsWallTime() = BAR` instead of `FOO.set_statisticsWallTime(BAR)`")]]
  double& set_statisticsWallTime(double statisticsWallTime_);

  /** Glean { "field": "statisticsCpuTime" } */
  [[deprecated("Use `FOO.statisticsCpuTime().value()` instead of `FOO.get_statisticsCpuTime()`")]]
  double get_statisticsCpuTime() const;

  /** Glean { "field": "statisticsCpuTime" } */
  [[deprecated("Use `FOO.statisticsCpuTime() = BAR` instead of `FOO.set_statisticsCpuTime(BAR)`")]]
  double& set_statisticsCpuTime(double statisticsCpuTime_);

  /** Glean { "field": "validationCpuTime" } */
  [[deprecated("Use `FOO.validationCpuTime().value()` instead of `FOO.get_validationCpuTime()`")]]
  double get_validationCpuTime() const;

  /** Glean { "field": "validationCpuTime" } */
  [[deprecated("Use `FOO.validationCpuTime() = BAR` instead of `FOO.set_validationCpuTime(BAR)`")]]
  double& set_validationCpuTime(double validationCpuTime_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TableWriterInfo>;
  friend void swap(TableWriterInfo& a, TableWriterInfo& b);
};

template <class Protocol_>
unsigned long TableWriterInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TableWriterMergeInfo", "kind": "struct" } */
class TableWriterMergeInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::statisticsWallTime,
    ::apache::thrift::ident::statisticsCpuTime
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TableWriterMergeInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TableWriterMergeInfo() :
      __fbthrift_field_statisticsWallTime(),
      __fbthrift_field_statisticsCpuTime() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TableWriterMergeInfo(apache::thrift::FragileConstructor, double statisticsWallTime__arg, double statisticsCpuTime__arg);

  TableWriterMergeInfo(TableWriterMergeInfo&&) = default;

  TableWriterMergeInfo(const TableWriterMergeInfo&) = default;


  TableWriterMergeInfo& operator=(TableWriterMergeInfo&&) = default;

  TableWriterMergeInfo& operator=(const TableWriterMergeInfo&) = default;
 private:
  double __fbthrift_field_statisticsWallTime;
 private:
  double __fbthrift_field_statisticsCpuTime;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TableWriterMergeInfo&) const;
  bool operator<(const TableWriterMergeInfo&) const;

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsWallTime_ref() const& {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsWallTime_ref() & {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsWallTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsWallTime), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsWallTime() const& {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsWallTime() & {
    return {this->__fbthrift_field_statisticsWallTime, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsWallTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsWallTime), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsCpuTime_ref() const& {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsCpuTime_ref() & {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsCpuTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsCpuTime), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> statisticsCpuTime() const& {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> statisticsCpuTime() & {
    return {this->__fbthrift_field_statisticsCpuTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> statisticsCpuTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_statisticsCpuTime), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "statisticsWallTime" } */
  [[deprecated("Use `FOO.statisticsWallTime().value()` instead of `FOO.get_statisticsWallTime()`")]]
  double get_statisticsWallTime() const;

  /** Glean { "field": "statisticsWallTime" } */
  [[deprecated("Use `FOO.statisticsWallTime() = BAR` instead of `FOO.set_statisticsWallTime(BAR)`")]]
  double& set_statisticsWallTime(double statisticsWallTime_);

  /** Glean { "field": "statisticsCpuTime" } */
  [[deprecated("Use `FOO.statisticsCpuTime().value()` instead of `FOO.get_statisticsCpuTime()`")]]
  double get_statisticsCpuTime() const;

  /** Glean { "field": "statisticsCpuTime" } */
  [[deprecated("Use `FOO.statisticsCpuTime() = BAR` instead of `FOO.set_statisticsCpuTime(BAR)`")]]
  double& set_statisticsCpuTime(double statisticsCpuTime_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TableWriterMergeInfo>;
  friend void swap(TableWriterMergeInfo& a, TableWriterMergeInfo& b);
};

template <class Protocol_>
unsigned long TableWriterMergeInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "DynamicFilterStats", "kind": "struct" } */
class DynamicFilterStats final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::producerNodeIds
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::set<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::PlanNodeId>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DynamicFilterStats;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DynamicFilterStats();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DynamicFilterStats(apache::thrift::FragileConstructor, ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> producerNodeIds__arg);

  DynamicFilterStats(DynamicFilterStats&&) noexcept;

  DynamicFilterStats(const DynamicFilterStats& src);


  DynamicFilterStats& operator=(DynamicFilterStats&&) noexcept;
  DynamicFilterStats& operator=(const DynamicFilterStats& src);

  ~DynamicFilterStats();

 private:
  ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> __fbthrift_field_producerNodeIds;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DynamicFilterStats&) const;
  bool operator<(const DynamicFilterStats&) const;

  /** Glean { "field": "producerNodeIds" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> producerNodeIds_ref() const& {
    return {this->__fbthrift_field_producerNodeIds, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "producerNodeIds" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> producerNodeIds_ref() & {
    return {this->__fbthrift_field_producerNodeIds, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "producerNodeIds" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> producerNodeIds_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_producerNodeIds), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "producerNodeIds" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> producerNodeIds() const& {
    return {this->__fbthrift_field_producerNodeIds, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "producerNodeIds" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> producerNodeIds() & {
    return {this->__fbthrift_field_producerNodeIds, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "producerNodeIds" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> producerNodeIds() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_producerNodeIds), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "producerNodeIds" } */
  [[deprecated("Use `FOO.producerNodeIds().value()` instead of `FOO.get_producerNodeIds()`")]]
  const ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>& get_producerNodeIds() const&;

  /** Glean { "field": "producerNodeIds" } */
  [[deprecated("Use `FOO.producerNodeIds().value()` instead of `FOO.get_producerNodeIds()`")]]
  ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> get_producerNodeIds() &&;

  /** Glean { "field": "producerNodeIds" } */
  template <typename T_DynamicFilterStats_producerNodeIds_struct_setter = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  [[deprecated("Use `FOO.producerNodeIds() = BAR` instead of `FOO.set_producerNodeIds(BAR)`")]]
  ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>& set_producerNodeIds(T_DynamicFilterStats_producerNodeIds_struct_setter&& producerNodeIds_) {
    producerNodeIds_ref() = std::forward<T_DynamicFilterStats_producerNodeIds_struct_setter>(producerNodeIds_);
    return __fbthrift_field_producerNodeIds;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DynamicFilterStats>;
  friend void swap(DynamicFilterStats& a, DynamicFilterStats& b);
};

template <class Protocol_>
unsigned long DynamicFilterStats::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "DriverStats", "kind": "struct" } */
class DriverStats final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 24;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::lifespan,
    ::apache::thrift::ident::createTimeInMillis,
    ::apache::thrift::ident::startTimeInMillis,
    ::apache::thrift::ident::endTimeInMillis,
    ::apache::thrift::ident::queuedTime,
    ::apache::thrift::ident::elapsedTime,
    ::apache::thrift::ident::userMemoryReservationInBytes,
    ::apache::thrift::ident::revocableMemoryReservationInBytes,
    ::apache::thrift::ident::systemMemoryReservationInBytes,
    ::apache::thrift::ident::totalScheduledTime,
    ::apache::thrift::ident::totalCpuTime,
    ::apache::thrift::ident::totalBlockedTime,
    ::apache::thrift::ident::fullyBlocked,
    ::apache::thrift::ident::blockedReasons,
    ::apache::thrift::ident::totalAllocationInBytes,
    ::apache::thrift::ident::rawInputDataSizeInBytes,
    ::apache::thrift::ident::rawInputReadTime,
    ::apache::thrift::ident::rawInputPositions,
    ::apache::thrift::ident::processedInputDataSizeInBytes,
    ::apache::thrift::ident::processedInputPositions,
    ::apache::thrift::ident::outputDataSizeInBytes,
    ::apache::thrift::ident::outputPositions,
    ::apache::thrift::ident::physicalWrittenDataSizeInBytes,
    ::apache::thrift::ident::operatorStats
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::Lifespan>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::BlockedReason>>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::OperatorStats>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DriverStats;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DriverStats();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DriverStats(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::Lifespan lifespan__arg, ::std::int64_t createTimeInMillis__arg, ::std::int64_t startTimeInMillis__arg, ::std::int64_t endTimeInMillis__arg, double queuedTime__arg, double elapsedTime__arg, ::std::int64_t userMemoryReservationInBytes__arg, ::std::int64_t revocableMemoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, double totalScheduledTime__arg, double totalCpuTime__arg, double totalBlockedTime__arg, bool fullyBlocked__arg, ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> blockedReasons__arg, ::std::int64_t totalAllocationInBytes__arg, ::std::int64_t rawInputDataSizeInBytes__arg, double rawInputReadTime__arg, ::std::int64_t rawInputPositions__arg, ::std::int64_t processedInputDataSizeInBytes__arg, ::std::int64_t processedInputPositions__arg, ::std::int64_t outputDataSizeInBytes__arg, ::std::int64_t outputPositions__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> operatorStats__arg);

  DriverStats(DriverStats&&) noexcept;

  DriverStats(const DriverStats& src);


  DriverStats& operator=(DriverStats&&) noexcept;
  DriverStats& operator=(const DriverStats& src);

  ~DriverStats();

 private:
  ::facebook::presto::protocol::cpp2::Lifespan __fbthrift_field_lifespan;
 private:
  ::std::int64_t __fbthrift_field_createTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_startTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_endTimeInMillis;
 private:
  double __fbthrift_field_queuedTime;
 private:
  double __fbthrift_field_elapsedTime;
 private:
  ::std::int64_t __fbthrift_field_userMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_revocableMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_systemMemoryReservationInBytes;
 private:
  double __fbthrift_field_totalScheduledTime;
 private:
  double __fbthrift_field_totalCpuTime;
 private:
  double __fbthrift_field_totalBlockedTime;
 private:
  bool __fbthrift_field_fullyBlocked;
 private:
  ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> __fbthrift_field_blockedReasons;
 private:
  ::std::int64_t __fbthrift_field_totalAllocationInBytes;
 private:
  ::std::int64_t __fbthrift_field_rawInputDataSizeInBytes;
 private:
  double __fbthrift_field_rawInputReadTime;
 private:
  ::std::int64_t __fbthrift_field_rawInputPositions;
 private:
  ::std::int64_t __fbthrift_field_processedInputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_processedInputPositions;
 private:
  ::std::int64_t __fbthrift_field_outputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_outputPositions;
 private:
  ::std::int64_t __fbthrift_field_physicalWrittenDataSizeInBytes;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> __fbthrift_field_operatorStats;
 private:
  apache::thrift::detail::isset_bitset<24, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DriverStats&) const;
  bool operator<(const DriverStats&) const;

  /** Glean { "field": "lifespan" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Lifespan>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lifespan_ref() const& {
    return {this->__fbthrift_field_lifespan, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lifespan" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Lifespan>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lifespan_ref() & {
    return {this->__fbthrift_field_lifespan, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lifespan" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Lifespan>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lifespan_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lifespan), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lifespan" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Lifespan>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lifespan() const& {
    return {this->__fbthrift_field_lifespan, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lifespan" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Lifespan>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lifespan() & {
    return {this->__fbthrift_field_lifespan, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lifespan" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Lifespan>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lifespan() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lifespan), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> createTimeInMillis_ref() const& {
    return {this->__fbthrift_field_createTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> createTimeInMillis_ref() & {
    return {this->__fbthrift_field_createTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> createTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_createTimeInMillis), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> createTimeInMillis() const& {
    return {this->__fbthrift_field_createTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> createTimeInMillis() & {
    return {this->__fbthrift_field_createTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> createTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_createTimeInMillis), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "startTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> startTimeInMillis_ref() const& {
    return {this->__fbthrift_field_startTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "startTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> startTimeInMillis_ref() & {
    return {this->__fbthrift_field_startTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "startTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> startTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_startTimeInMillis), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "startTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> startTimeInMillis() const& {
    return {this->__fbthrift_field_startTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "startTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> startTimeInMillis() & {
    return {this->__fbthrift_field_startTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "startTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> startTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_startTimeInMillis), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> endTimeInMillis_ref() const& {
    return {this->__fbthrift_field_endTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> endTimeInMillis_ref() & {
    return {this->__fbthrift_field_endTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> endTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_endTimeInMillis), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> endTimeInMillis() const& {
    return {this->__fbthrift_field_endTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> endTimeInMillis() & {
    return {this->__fbthrift_field_endTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> endTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_endTimeInMillis), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedTime_ref() const& {
    return {this->__fbthrift_field_queuedTime, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedTime_ref() & {
    return {this->__fbthrift_field_queuedTime, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedTime), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedTime() const& {
    return {this->__fbthrift_field_queuedTime, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedTime() & {
    return {this->__fbthrift_field_queuedTime, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedTime), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> elapsedTime_ref() const& {
    return {this->__fbthrift_field_elapsedTime, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> elapsedTime_ref() & {
    return {this->__fbthrift_field_elapsedTime, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> elapsedTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_elapsedTime), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> elapsedTime() const& {
    return {this->__fbthrift_field_elapsedTime, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> elapsedTime() & {
    return {this->__fbthrift_field_elapsedTime, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> elapsedTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_elapsedTime), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> userMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> userMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> userMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userMemoryReservationInBytes), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> userMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> userMemoryReservationInBytes() & {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> userMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userMemoryReservationInBytes), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> revocableMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> revocableMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> revocableMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_revocableMemoryReservationInBytes), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> revocableMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> revocableMemoryReservationInBytes() & {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> revocableMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_revocableMemoryReservationInBytes), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "totalScheduledTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalScheduledTime_ref() const& {
    return {this->__fbthrift_field_totalScheduledTime, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "totalScheduledTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalScheduledTime_ref() & {
    return {this->__fbthrift_field_totalScheduledTime, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "totalScheduledTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalScheduledTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalScheduledTime), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "totalScheduledTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalScheduledTime() const& {
    return {this->__fbthrift_field_totalScheduledTime, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "totalScheduledTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalScheduledTime() & {
    return {this->__fbthrift_field_totalScheduledTime, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "totalScheduledTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalScheduledTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalScheduledTime), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "totalCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalCpuTime_ref() const& {
    return {this->__fbthrift_field_totalCpuTime, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "totalCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalCpuTime_ref() & {
    return {this->__fbthrift_field_totalCpuTime, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "totalCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalCpuTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalCpuTime), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "totalCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalCpuTime() const& {
    return {this->__fbthrift_field_totalCpuTime, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "totalCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalCpuTime() & {
    return {this->__fbthrift_field_totalCpuTime, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "totalCpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalCpuTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalCpuTime), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "totalBlockedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBlockedTime_ref() const& {
    return {this->__fbthrift_field_totalBlockedTime, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "totalBlockedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBlockedTime_ref() & {
    return {this->__fbthrift_field_totalBlockedTime, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "totalBlockedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBlockedTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBlockedTime), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "totalBlockedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBlockedTime() const& {
    return {this->__fbthrift_field_totalBlockedTime, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "totalBlockedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBlockedTime() & {
    return {this->__fbthrift_field_totalBlockedTime, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "totalBlockedTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBlockedTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBlockedTime), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullyBlocked_ref() const& {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullyBlocked_ref() & {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullyBlocked_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullyBlocked), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullyBlocked() const& {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullyBlocked() & {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullyBlocked() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullyBlocked), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedReasons_ref() const& {
    return {this->__fbthrift_field_blockedReasons, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedReasons_ref() & {
    return {this->__fbthrift_field_blockedReasons, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedReasons_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedReasons), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedReasons() const& {
    return {this->__fbthrift_field_blockedReasons, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedReasons() & {
    return {this->__fbthrift_field_blockedReasons, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedReasons() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedReasons), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalAllocationInBytes_ref() const& {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalAllocationInBytes_ref() & {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalAllocationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalAllocationInBytes), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalAllocationInBytes() const& {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalAllocationInBytes() & {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalAllocationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalAllocationInBytes), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputDataSizeInBytes), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputDataSizeInBytes() const& {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputDataSizeInBytes() & {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputDataSizeInBytes), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "rawInputReadTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputReadTime_ref() const& {
    return {this->__fbthrift_field_rawInputReadTime, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "rawInputReadTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputReadTime_ref() & {
    return {this->__fbthrift_field_rawInputReadTime, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "rawInputReadTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputReadTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputReadTime), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "rawInputReadTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputReadTime() const& {
    return {this->__fbthrift_field_rawInputReadTime, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "rawInputReadTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputReadTime() & {
    return {this->__fbthrift_field_rawInputReadTime, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "rawInputReadTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputReadTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputReadTime), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputPositions_ref() const& {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputPositions_ref() & {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputPositions), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputPositions() const& {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputPositions() & {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputPositions), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputDataSizeInBytes), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputDataSizeInBytes() const& {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputDataSizeInBytes() & {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputDataSizeInBytes), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputPositions_ref() const& {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputPositions_ref() & {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputPositions), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputPositions() const& {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputPositions() & {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputPositions), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputDataSizeInBytes), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputDataSizeInBytes() const& {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputDataSizeInBytes() & {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputDataSizeInBytes), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPositions_ref() const& {
    return {this->__fbthrift_field_outputPositions, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPositions_ref() & {
    return {this->__fbthrift_field_outputPositions, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPositions), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPositions() const& {
    return {this->__fbthrift_field_outputPositions, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPositions() & {
    return {this->__fbthrift_field_outputPositions, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPositions), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "operatorStats" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> operatorStats_ref() const& {
    return {this->__fbthrift_field_operatorStats, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "operatorStats" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> operatorStats_ref() & {
    return {this->__fbthrift_field_operatorStats, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "operatorStats" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> operatorStats_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_operatorStats), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "operatorStats" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> operatorStats() const& {
    return {this->__fbthrift_field_operatorStats, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "operatorStats" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> operatorStats() & {
    return {this->__fbthrift_field_operatorStats, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "operatorStats" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> operatorStats() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_operatorStats), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "lifespan" } */
  [[deprecated("Use `FOO.lifespan().value()` instead of `FOO.get_lifespan()`")]]
  const ::facebook::presto::protocol::cpp2::Lifespan& get_lifespan() const&;

  /** Glean { "field": "lifespan" } */
  [[deprecated("Use `FOO.lifespan().value()` instead of `FOO.get_lifespan()`")]]
  ::facebook::presto::protocol::cpp2::Lifespan get_lifespan() &&;

  /** Glean { "field": "lifespan" } */
  template <typename T_DriverStats_lifespan_struct_setter = ::facebook::presto::protocol::cpp2::Lifespan>
  [[deprecated("Use `FOO.lifespan() = BAR` instead of `FOO.set_lifespan(BAR)`")]]
  ::facebook::presto::protocol::cpp2::Lifespan& set_lifespan(T_DriverStats_lifespan_struct_setter&& lifespan_) {
    lifespan_ref() = std::forward<T_DriverStats_lifespan_struct_setter>(lifespan_);
    return __fbthrift_field_lifespan;
  }

  /** Glean { "field": "createTimeInMillis" } */
  [[deprecated("Use `FOO.createTimeInMillis().value()` instead of `FOO.get_createTimeInMillis()`")]]
  ::std::int64_t get_createTimeInMillis() const;

  /** Glean { "field": "createTimeInMillis" } */
  [[deprecated("Use `FOO.createTimeInMillis() = BAR` instead of `FOO.set_createTimeInMillis(BAR)`")]]
  ::std::int64_t& set_createTimeInMillis(::std::int64_t createTimeInMillis_);

  /** Glean { "field": "startTimeInMillis" } */
  [[deprecated("Use `FOO.startTimeInMillis().value()` instead of `FOO.get_startTimeInMillis()`")]]
  ::std::int64_t get_startTimeInMillis() const;

  /** Glean { "field": "startTimeInMillis" } */
  [[deprecated("Use `FOO.startTimeInMillis() = BAR` instead of `FOO.set_startTimeInMillis(BAR)`")]]
  ::std::int64_t& set_startTimeInMillis(::std::int64_t startTimeInMillis_);

  /** Glean { "field": "endTimeInMillis" } */
  [[deprecated("Use `FOO.endTimeInMillis().value()` instead of `FOO.get_endTimeInMillis()`")]]
  ::std::int64_t get_endTimeInMillis() const;

  /** Glean { "field": "endTimeInMillis" } */
  [[deprecated("Use `FOO.endTimeInMillis() = BAR` instead of `FOO.set_endTimeInMillis(BAR)`")]]
  ::std::int64_t& set_endTimeInMillis(::std::int64_t endTimeInMillis_);

  /** Glean { "field": "queuedTime" } */
  [[deprecated("Use `FOO.queuedTime().value()` instead of `FOO.get_queuedTime()`")]]
  double get_queuedTime() const;

  /** Glean { "field": "queuedTime" } */
  [[deprecated("Use `FOO.queuedTime() = BAR` instead of `FOO.set_queuedTime(BAR)`")]]
  double& set_queuedTime(double queuedTime_);

  /** Glean { "field": "elapsedTime" } */
  [[deprecated("Use `FOO.elapsedTime().value()` instead of `FOO.get_elapsedTime()`")]]
  double get_elapsedTime() const;

  /** Glean { "field": "elapsedTime" } */
  [[deprecated("Use `FOO.elapsedTime() = BAR` instead of `FOO.set_elapsedTime(BAR)`")]]
  double& set_elapsedTime(double elapsedTime_);

  /** Glean { "field": "userMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.userMemoryReservationInBytes().value()` instead of `FOO.get_userMemoryReservationInBytes()`")]]
  ::std::int64_t get_userMemoryReservationInBytes() const;

  /** Glean { "field": "userMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.userMemoryReservationInBytes() = BAR` instead of `FOO.set_userMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_userMemoryReservationInBytes(::std::int64_t userMemoryReservationInBytes_);

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.revocableMemoryReservationInBytes().value()` instead of `FOO.get_revocableMemoryReservationInBytes()`")]]
  ::std::int64_t get_revocableMemoryReservationInBytes() const;

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.revocableMemoryReservationInBytes() = BAR` instead of `FOO.set_revocableMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_revocableMemoryReservationInBytes(::std::int64_t revocableMemoryReservationInBytes_);

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes().value()` instead of `FOO.get_systemMemoryReservationInBytes()`")]]
  ::std::int64_t get_systemMemoryReservationInBytes() const;

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes() = BAR` instead of `FOO.set_systemMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_);

  /** Glean { "field": "totalScheduledTime" } */
  [[deprecated("Use `FOO.totalScheduledTime().value()` instead of `FOO.get_totalScheduledTime()`")]]
  double get_totalScheduledTime() const;

  /** Glean { "field": "totalScheduledTime" } */
  [[deprecated("Use `FOO.totalScheduledTime() = BAR` instead of `FOO.set_totalScheduledTime(BAR)`")]]
  double& set_totalScheduledTime(double totalScheduledTime_);

  /** Glean { "field": "totalCpuTime" } */
  [[deprecated("Use `FOO.totalCpuTime().value()` instead of `FOO.get_totalCpuTime()`")]]
  double get_totalCpuTime() const;

  /** Glean { "field": "totalCpuTime" } */
  [[deprecated("Use `FOO.totalCpuTime() = BAR` instead of `FOO.set_totalCpuTime(BAR)`")]]
  double& set_totalCpuTime(double totalCpuTime_);

  /** Glean { "field": "totalBlockedTime" } */
  [[deprecated("Use `FOO.totalBlockedTime().value()` instead of `FOO.get_totalBlockedTime()`")]]
  double get_totalBlockedTime() const;

  /** Glean { "field": "totalBlockedTime" } */
  [[deprecated("Use `FOO.totalBlockedTime() = BAR` instead of `FOO.set_totalBlockedTime(BAR)`")]]
  double& set_totalBlockedTime(double totalBlockedTime_);

  /** Glean { "field": "fullyBlocked" } */
  [[deprecated("Use `FOO.fullyBlocked().value()` instead of `FOO.get_fullyBlocked()`")]]
  bool get_fullyBlocked() const;

  /** Glean { "field": "fullyBlocked" } */
  [[deprecated("Use `FOO.fullyBlocked() = BAR` instead of `FOO.set_fullyBlocked(BAR)`")]]
  bool& set_fullyBlocked(bool fullyBlocked_);

  /** Glean { "field": "blockedReasons" } */
  [[deprecated("Use `FOO.blockedReasons().value()` instead of `FOO.get_blockedReasons()`")]]
  const ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>& get_blockedReasons() const&;

  /** Glean { "field": "blockedReasons" } */
  [[deprecated("Use `FOO.blockedReasons().value()` instead of `FOO.get_blockedReasons()`")]]
  ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> get_blockedReasons() &&;

  /** Glean { "field": "blockedReasons" } */
  template <typename T_DriverStats_blockedReasons_struct_setter = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  [[deprecated("Use `FOO.blockedReasons() = BAR` instead of `FOO.set_blockedReasons(BAR)`")]]
  ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>& set_blockedReasons(T_DriverStats_blockedReasons_struct_setter&& blockedReasons_) {
    blockedReasons_ref() = std::forward<T_DriverStats_blockedReasons_struct_setter>(blockedReasons_);
    return __fbthrift_field_blockedReasons;
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  [[deprecated("Use `FOO.totalAllocationInBytes().value()` instead of `FOO.get_totalAllocationInBytes()`")]]
  ::std::int64_t get_totalAllocationInBytes() const;

  /** Glean { "field": "totalAllocationInBytes" } */
  [[deprecated("Use `FOO.totalAllocationInBytes() = BAR` instead of `FOO.set_totalAllocationInBytes(BAR)`")]]
  ::std::int64_t& set_totalAllocationInBytes(::std::int64_t totalAllocationInBytes_);

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.rawInputDataSizeInBytes().value()` instead of `FOO.get_rawInputDataSizeInBytes()`")]]
  ::std::int64_t get_rawInputDataSizeInBytes() const;

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.rawInputDataSizeInBytes() = BAR` instead of `FOO.set_rawInputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_rawInputDataSizeInBytes(::std::int64_t rawInputDataSizeInBytes_);

  /** Glean { "field": "rawInputReadTime" } */
  [[deprecated("Use `FOO.rawInputReadTime().value()` instead of `FOO.get_rawInputReadTime()`")]]
  double get_rawInputReadTime() const;

  /** Glean { "field": "rawInputReadTime" } */
  [[deprecated("Use `FOO.rawInputReadTime() = BAR` instead of `FOO.set_rawInputReadTime(BAR)`")]]
  double& set_rawInputReadTime(double rawInputReadTime_);

  /** Glean { "field": "rawInputPositions" } */
  [[deprecated("Use `FOO.rawInputPositions().value()` instead of `FOO.get_rawInputPositions()`")]]
  ::std::int64_t get_rawInputPositions() const;

  /** Glean { "field": "rawInputPositions" } */
  [[deprecated("Use `FOO.rawInputPositions() = BAR` instead of `FOO.set_rawInputPositions(BAR)`")]]
  ::std::int64_t& set_rawInputPositions(::std::int64_t rawInputPositions_);

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.processedInputDataSizeInBytes().value()` instead of `FOO.get_processedInputDataSizeInBytes()`")]]
  ::std::int64_t get_processedInputDataSizeInBytes() const;

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.processedInputDataSizeInBytes() = BAR` instead of `FOO.set_processedInputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_processedInputDataSizeInBytes(::std::int64_t processedInputDataSizeInBytes_);

  /** Glean { "field": "processedInputPositions" } */
  [[deprecated("Use `FOO.processedInputPositions().value()` instead of `FOO.get_processedInputPositions()`")]]
  ::std::int64_t get_processedInputPositions() const;

  /** Glean { "field": "processedInputPositions" } */
  [[deprecated("Use `FOO.processedInputPositions() = BAR` instead of `FOO.set_processedInputPositions(BAR)`")]]
  ::std::int64_t& set_processedInputPositions(::std::int64_t processedInputPositions_);

  /** Glean { "field": "outputDataSizeInBytes" } */
  [[deprecated("Use `FOO.outputDataSizeInBytes().value()` instead of `FOO.get_outputDataSizeInBytes()`")]]
  ::std::int64_t get_outputDataSizeInBytes() const;

  /** Glean { "field": "outputDataSizeInBytes" } */
  [[deprecated("Use `FOO.outputDataSizeInBytes() = BAR` instead of `FOO.set_outputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_outputDataSizeInBytes(::std::int64_t outputDataSizeInBytes_);

  /** Glean { "field": "outputPositions" } */
  [[deprecated("Use `FOO.outputPositions().value()` instead of `FOO.get_outputPositions()`")]]
  ::std::int64_t get_outputPositions() const;

  /** Glean { "field": "outputPositions" } */
  [[deprecated("Use `FOO.outputPositions() = BAR` instead of `FOO.set_outputPositions(BAR)`")]]
  ::std::int64_t& set_outputPositions(::std::int64_t outputPositions_);

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes().value()` instead of `FOO.get_physicalWrittenDataSizeInBytes()`")]]
  ::std::int64_t get_physicalWrittenDataSizeInBytes() const;

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes() = BAR` instead of `FOO.set_physicalWrittenDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_);

  /** Glean { "field": "operatorStats" } */
  [[deprecated("Use `FOO.operatorStats().value()` instead of `FOO.get_operatorStats()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>& get_operatorStats() const&;

  /** Glean { "field": "operatorStats" } */
  [[deprecated("Use `FOO.operatorStats().value()` instead of `FOO.get_operatorStats()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> get_operatorStats() &&;

  /** Glean { "field": "operatorStats" } */
  template <typename T_DriverStats_operatorStats_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  [[deprecated("Use `FOO.operatorStats() = BAR` instead of `FOO.set_operatorStats(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>& set_operatorStats(T_DriverStats_operatorStats_struct_setter&& operatorStats_) {
    operatorStats_ref() = std::forward<T_DriverStats_operatorStats_struct_setter>(operatorStats_);
    return __fbthrift_field_operatorStats;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DriverStats>;
  friend void swap(DriverStats& a, DriverStats& b);
};

template <class Protocol_>
unsigned long DriverStats::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TransactionId", "kind": "struct" } */
class TransactionId final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::uuid
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TransactionId;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TransactionId();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TransactionId(apache::thrift::FragileConstructor, ::std::string uuid__arg);

  TransactionId(TransactionId&&) noexcept;

  TransactionId(const TransactionId& src);


  TransactionId& operator=(TransactionId&&) noexcept;
  TransactionId& operator=(const TransactionId& src);

  ~TransactionId();

 private:
  ::std::string __fbthrift_field_uuid;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TransactionId&) const;
  bool operator<(const TransactionId&) const;

  /** Glean { "field": "uuid" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> uuid_ref() const& {
    return {this->__fbthrift_field_uuid, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uuid" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> uuid_ref() & {
    return {this->__fbthrift_field_uuid, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uuid" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> uuid_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_uuid), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uuid" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> uuid() const& {
    return {this->__fbthrift_field_uuid, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uuid" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> uuid() & {
    return {this->__fbthrift_field_uuid, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uuid" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> uuid() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_uuid), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "uuid" } */
  [[deprecated("Use `FOO.uuid().value()` instead of `FOO.get_uuid()`")]]
  const ::std::string& get_uuid() const& {
    return __fbthrift_field_uuid;
  }

  /** Glean { "field": "uuid" } */
  [[deprecated("Use `FOO.uuid().value()` instead of `FOO.get_uuid()`")]]
  ::std::string get_uuid() && {
    return static_cast<::std::string&&>(__fbthrift_field_uuid);
  }

  /** Glean { "field": "uuid" } */
  template <typename T_TransactionId_uuid_struct_setter = ::std::string>
  [[deprecated("Use `FOO.uuid() = BAR` instead of `FOO.set_uuid(BAR)`")]]
  ::std::string& set_uuid(T_TransactionId_uuid_struct_setter&& uuid_) {
    uuid_ref() = std::forward<T_TransactionId_uuid_struct_setter>(uuid_);
    return __fbthrift_field_uuid;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TransactionId>;
  friend void swap(TransactionId& a, TransactionId& b);
};

template <class Protocol_>
unsigned long TransactionId::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TimeZoneKey", "kind": "struct" } */
class TimeZoneKey final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::id,
    ::apache::thrift::ident::key
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i16_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TimeZoneKey;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TimeZoneKey();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TimeZoneKey(apache::thrift::FragileConstructor, ::std::string id__arg, ::std::int16_t key__arg);

  TimeZoneKey(TimeZoneKey&&) noexcept;

  TimeZoneKey(const TimeZoneKey& src);


  TimeZoneKey& operator=(TimeZoneKey&&) noexcept;
  TimeZoneKey& operator=(const TimeZoneKey& src);

  ~TimeZoneKey();

 private:
  ::std::string __fbthrift_field_id;
 private:
  ::std::int16_t __fbthrift_field_key;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TimeZoneKey&) const;
  bool operator<(const TimeZoneKey&) const;

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id_ref() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id_ref() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> key_ref() const& {
    return {this->__fbthrift_field_key, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> key_ref() & {
    return {this->__fbthrift_field_key, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> key_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_key), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> key() const& {
    return {this->__fbthrift_field_key, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> key() & {
    return {this->__fbthrift_field_key, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> key() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_key), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id().value()` instead of `FOO.get_id()`")]]
  const ::std::string& get_id() const& {
    return __fbthrift_field_id;
  }

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id().value()` instead of `FOO.get_id()`")]]
  ::std::string get_id() && {
    return static_cast<::std::string&&>(__fbthrift_field_id);
  }

  /** Glean { "field": "id" } */
  template <typename T_TimeZoneKey_id_struct_setter = ::std::string>
  [[deprecated("Use `FOO.id() = BAR` instead of `FOO.set_id(BAR)`")]]
  ::std::string& set_id(T_TimeZoneKey_id_struct_setter&& id_) {
    id_ref() = std::forward<T_TimeZoneKey_id_struct_setter>(id_);
    return __fbthrift_field_id;
  }

  /** Glean { "field": "key" } */
  [[deprecated("Use `FOO.key().value()` instead of `FOO.get_key()`")]]
  ::std::int16_t get_key() const;

  /** Glean { "field": "key" } */
  [[deprecated("Use `FOO.key() = BAR` instead of `FOO.set_key(BAR)`")]]
  ::std::int16_t& set_key(::std::int16_t key_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TimeZoneKey>;
  friend void swap(TimeZoneKey& a, TimeZoneKey& b);
};

template <class Protocol_>
unsigned long TimeZoneKey::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "ResourceEstimates", "kind": "struct" } */
class ResourceEstimates final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::executionTime,
    ::apache::thrift::ident::cpuTime,
    ::apache::thrift::ident::peakMemory,
    ::apache::thrift::ident::peakTaskMemory
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ResourceEstimates;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ResourceEstimates() :
      __fbthrift_field_executionTime(),
      __fbthrift_field_cpuTime(),
      __fbthrift_field_peakMemory(),
      __fbthrift_field_peakTaskMemory() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ResourceEstimates(apache::thrift::FragileConstructor, double executionTime__arg, double cpuTime__arg, double peakMemory__arg, double peakTaskMemory__arg);

  ResourceEstimates(ResourceEstimates&&) = default;

  ResourceEstimates(const ResourceEstimates&) = default;


  ResourceEstimates& operator=(ResourceEstimates&&) = default;

  ResourceEstimates& operator=(const ResourceEstimates&) = default;
 private:
  double __fbthrift_field_executionTime;
 private:
  double __fbthrift_field_cpuTime;
 private:
  double __fbthrift_field_peakMemory;
 private:
  double __fbthrift_field_peakTaskMemory;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ResourceEstimates&) const;
  bool operator<(const ResourceEstimates&) const;

  /** Glean { "field": "executionTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> executionTime_ref() const& {
    return {this->__fbthrift_field_executionTime, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "executionTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> executionTime_ref() & {
    return {this->__fbthrift_field_executionTime, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "executionTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> executionTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_executionTime), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "executionTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> executionTime() const& {
    return {this->__fbthrift_field_executionTime, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "executionTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> executionTime() & {
    return {this->__fbthrift_field_executionTime, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "executionTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> executionTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_executionTime), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "cpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> cpuTime_ref() const& {
    return {this->__fbthrift_field_cpuTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "cpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> cpuTime_ref() & {
    return {this->__fbthrift_field_cpuTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "cpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> cpuTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cpuTime), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "cpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> cpuTime() const& {
    return {this->__fbthrift_field_cpuTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "cpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> cpuTime() & {
    return {this->__fbthrift_field_cpuTime, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "cpuTime" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> cpuTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cpuTime), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "peakMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> peakMemory_ref() const& {
    return {this->__fbthrift_field_peakMemory, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "peakMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> peakMemory_ref() & {
    return {this->__fbthrift_field_peakMemory, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "peakMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> peakMemory_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakMemory), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "peakMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> peakMemory() const& {
    return {this->__fbthrift_field_peakMemory, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "peakMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> peakMemory() & {
    return {this->__fbthrift_field_peakMemory, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "peakMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> peakMemory() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakMemory), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "peakTaskMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> peakTaskMemory_ref() const& {
    return {this->__fbthrift_field_peakTaskMemory, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "peakTaskMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> peakTaskMemory_ref() & {
    return {this->__fbthrift_field_peakTaskMemory, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "peakTaskMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> peakTaskMemory_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakTaskMemory), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "peakTaskMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> peakTaskMemory() const& {
    return {this->__fbthrift_field_peakTaskMemory, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "peakTaskMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> peakTaskMemory() & {
    return {this->__fbthrift_field_peakTaskMemory, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "peakTaskMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> peakTaskMemory() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakTaskMemory), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "executionTime" } */
  [[deprecated("Use `FOO.executionTime().value()` instead of `FOO.get_executionTime()`")]]
  const double* get_executionTime() const&;

  /** Glean { "field": "executionTime" } */
  [[deprecated("Use `FOO.executionTime().value()` instead of `FOO.get_executionTime()`")]]
  double* get_executionTime() &;

  double* get_executionTime() && = delete;

  /** Glean { "field": "executionTime" } */
  [[deprecated("Use `FOO.executionTime() = BAR` instead of `FOO.set_executionTime(BAR)`")]]
  double& set_executionTime(double executionTime_);

  /** Glean { "field": "cpuTime" } */
  [[deprecated("Use `FOO.cpuTime().value()` instead of `FOO.get_cpuTime()`")]]
  const double* get_cpuTime() const&;

  /** Glean { "field": "cpuTime" } */
  [[deprecated("Use `FOO.cpuTime().value()` instead of `FOO.get_cpuTime()`")]]
  double* get_cpuTime() &;

  double* get_cpuTime() && = delete;

  /** Glean { "field": "cpuTime" } */
  [[deprecated("Use `FOO.cpuTime() = BAR` instead of `FOO.set_cpuTime(BAR)`")]]
  double& set_cpuTime(double cpuTime_);

  /** Glean { "field": "peakMemory" } */
  [[deprecated("Use `FOO.peakMemory().value()` instead of `FOO.get_peakMemory()`")]]
  const double* get_peakMemory() const&;

  /** Glean { "field": "peakMemory" } */
  [[deprecated("Use `FOO.peakMemory().value()` instead of `FOO.get_peakMemory()`")]]
  double* get_peakMemory() &;

  double* get_peakMemory() && = delete;

  /** Glean { "field": "peakMemory" } */
  [[deprecated("Use `FOO.peakMemory() = BAR` instead of `FOO.set_peakMemory(BAR)`")]]
  double& set_peakMemory(double peakMemory_);

  /** Glean { "field": "peakTaskMemory" } */
  [[deprecated("Use `FOO.peakTaskMemory().value()` instead of `FOO.get_peakTaskMemory()`")]]
  const double* get_peakTaskMemory() const&;

  /** Glean { "field": "peakTaskMemory" } */
  [[deprecated("Use `FOO.peakTaskMemory().value()` instead of `FOO.get_peakTaskMemory()`")]]
  double* get_peakTaskMemory() &;

  double* get_peakTaskMemory() && = delete;

  /** Glean { "field": "peakTaskMemory" } */
  [[deprecated("Use `FOO.peakTaskMemory() = BAR` instead of `FOO.set_peakTaskMemory(BAR)`")]]
  double& set_peakTaskMemory(double peakTaskMemory_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ResourceEstimates>;
  friend void swap(ResourceEstimates& a, ResourceEstimates& b);
};

template <class Protocol_>
unsigned long ResourceEstimates::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "ConnectorId", "kind": "struct" } */
class ConnectorId final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::catalogName
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ConnectorId;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ConnectorId();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ConnectorId(apache::thrift::FragileConstructor, ::std::string catalogName__arg);

  ConnectorId(ConnectorId&&) noexcept;

  ConnectorId(const ConnectorId& src);


  ConnectorId& operator=(ConnectorId&&) noexcept;
  ConnectorId& operator=(const ConnectorId& src);

  ~ConnectorId();

 private:
  ::std::string __fbthrift_field_catalogName;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ConnectorId&) const;
  bool operator<(const ConnectorId&) const;

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> catalogName_ref() const& {
    return {this->__fbthrift_field_catalogName, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> catalogName_ref() & {
    return {this->__fbthrift_field_catalogName, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> catalogName_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_catalogName), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> catalogName() const& {
    return {this->__fbthrift_field_catalogName, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> catalogName() & {
    return {this->__fbthrift_field_catalogName, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> catalogName() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_catalogName), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  [[deprecated("Use `FOO.catalogName().value()` instead of `FOO.get_catalogName()`")]]
  const ::std::string& get_catalogName() const& {
    return __fbthrift_field_catalogName;
  }

  /** Glean { "field": "catalogName" } */
  [[deprecated("Use `FOO.catalogName().value()` instead of `FOO.get_catalogName()`")]]
  ::std::string get_catalogName() && {
    return static_cast<::std::string&&>(__fbthrift_field_catalogName);
  }

  /** Glean { "field": "catalogName" } */
  template <typename T_ConnectorId_catalogName_struct_setter = ::std::string>
  [[deprecated("Use `FOO.catalogName() = BAR` instead of `FOO.set_catalogName(BAR)`")]]
  ::std::string& set_catalogName(T_ConnectorId_catalogName_struct_setter&& catalogName_) {
    catalogName_ref() = std::forward<T_ConnectorId_catalogName_struct_setter>(catalogName_);
    return __fbthrift_field_catalogName;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ConnectorId>;
  friend void swap(ConnectorId& a, ConnectorId& b);
};

template <class Protocol_>
unsigned long ConnectorId::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "SqlFunctionId", "kind": "struct" } */
class SqlFunctionId final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::signature
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SqlFunctionId;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SqlFunctionId();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SqlFunctionId(apache::thrift::FragileConstructor, ::std::string signature__arg);

  SqlFunctionId(SqlFunctionId&&) noexcept;

  SqlFunctionId(const SqlFunctionId& src);


  SqlFunctionId& operator=(SqlFunctionId&&) noexcept;
  SqlFunctionId& operator=(const SqlFunctionId& src);

  ~SqlFunctionId();

 private:
  ::std::string __fbthrift_field_signature;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SqlFunctionId&) const;
  bool operator<(const SqlFunctionId&) const;

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> signature_ref() const& {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> signature_ref() & {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> signature_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> signature() const& {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> signature() & {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> signature() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  [[deprecated("Use `FOO.signature().value()` instead of `FOO.get_signature()`")]]
  const ::std::string& get_signature() const& {
    return __fbthrift_field_signature;
  }

  /** Glean { "field": "signature" } */
  [[deprecated("Use `FOO.signature().value()` instead of `FOO.get_signature()`")]]
  ::std::string get_signature() && {
    return static_cast<::std::string&&>(__fbthrift_field_signature);
  }

  /** Glean { "field": "signature" } */
  template <typename T_SqlFunctionId_signature_struct_setter = ::std::string>
  [[deprecated("Use `FOO.signature() = BAR` instead of `FOO.set_signature(BAR)`")]]
  ::std::string& set_signature(T_SqlFunctionId_signature_struct_setter&& signature_) {
    signature_ref() = std::forward<T_SqlFunctionId_signature_struct_setter>(signature_);
    return __fbthrift_field_signature;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SqlFunctionId>;
  friend void swap(SqlFunctionId& a, SqlFunctionId& b);
};

template <class Protocol_>
unsigned long SqlFunctionId::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TypeSignature", "kind": "struct" } */
class TypeSignature final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::signature,
    ::apache::thrift::ident::ignore
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::bool_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TypeSignature;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TypeSignature();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TypeSignature(apache::thrift::FragileConstructor, ::std::string signature__arg, bool ignore__arg);

  TypeSignature(TypeSignature&&) noexcept;

  TypeSignature(const TypeSignature& src);


  TypeSignature& operator=(TypeSignature&&) noexcept;
  TypeSignature& operator=(const TypeSignature& src);

  ~TypeSignature();

 private:
  ::std::string __fbthrift_field_signature;
 private:
  bool __fbthrift_field_ignore;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TypeSignature&) const;
  bool operator<(const TypeSignature&) const;

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> signature_ref() const& {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> signature_ref() & {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> signature_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> signature() const& {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> signature() & {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> signature() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ignore" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ignore_ref() const& {
    return {this->__fbthrift_field_ignore, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ignore" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ignore_ref() & {
    return {this->__fbthrift_field_ignore, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ignore" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ignore_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ignore), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ignore" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ignore() const& {
    return {this->__fbthrift_field_ignore, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ignore" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ignore() & {
    return {this->__fbthrift_field_ignore, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ignore" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ignore() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ignore), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "signature" } */
  [[deprecated("Use `FOO.signature().value()` instead of `FOO.get_signature()`")]]
  const ::std::string& get_signature() const& {
    return __fbthrift_field_signature;
  }

  /** Glean { "field": "signature" } */
  [[deprecated("Use `FOO.signature().value()` instead of `FOO.get_signature()`")]]
  ::std::string get_signature() && {
    return static_cast<::std::string&&>(__fbthrift_field_signature);
  }

  /** Glean { "field": "signature" } */
  template <typename T_TypeSignature_signature_struct_setter = ::std::string>
  [[deprecated("Use `FOO.signature() = BAR` instead of `FOO.set_signature(BAR)`")]]
  ::std::string& set_signature(T_TypeSignature_signature_struct_setter&& signature_) {
    signature_ref() = std::forward<T_TypeSignature_signature_struct_setter>(signature_);
    return __fbthrift_field_signature;
  }

  /** Glean { "field": "ignore" } */
  [[deprecated("Use `FOO.ignore().value()` instead of `FOO.get_ignore()`")]]
  bool get_ignore() const;

  /** Glean { "field": "ignore" } */
  [[deprecated("Use `FOO.ignore() = BAR` instead of `FOO.set_ignore(BAR)`")]]
  bool& set_ignore(bool ignore_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TypeSignature>;
  friend void swap(TypeSignature& a, TypeSignature& b);
};

template <class Protocol_>
unsigned long TypeSignature::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "Language", "kind": "struct" } */
class Language final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::language
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Language;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Language();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Language(apache::thrift::FragileConstructor, ::std::string language__arg);

  Language(Language&&) noexcept;

  Language(const Language& src);


  Language& operator=(Language&&) noexcept;
  Language& operator=(const Language& src);

  ~Language();

 private:
  ::std::string __fbthrift_field_language;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Language&) const;
  bool operator<(const Language&) const;

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> language_ref() const& {
    return {this->__fbthrift_field_language, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> language_ref() & {
    return {this->__fbthrift_field_language, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> language_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_language), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> language() const& {
    return {this->__fbthrift_field_language, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> language() & {
    return {this->__fbthrift_field_language, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> language() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_language), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  [[deprecated("Use `FOO.language().value()` instead of `FOO.get_language()`")]]
  const ::std::string& get_language() const& {
    return __fbthrift_field_language;
  }

  /** Glean { "field": "language" } */
  [[deprecated("Use `FOO.language().value()` instead of `FOO.get_language()`")]]
  ::std::string get_language() && {
    return static_cast<::std::string&&>(__fbthrift_field_language);
  }

  /** Glean { "field": "language" } */
  template <typename T_Language_language_struct_setter = ::std::string>
  [[deprecated("Use `FOO.language() = BAR` instead of `FOO.set_language(BAR)`")]]
  ::std::string& set_language(T_Language_language_struct_setter&& language_) {
    language_ref() = std::forward<T_Language_language_struct_setter>(language_);
    return __fbthrift_field_language;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Language>;
  friend void swap(Language& a, Language& b);
};

template <class Protocol_>
unsigned long Language::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "QualifiedObjectName", "kind": "struct" } */
class QualifiedObjectName final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::catalogName,
    ::apache::thrift::ident::schemaName,
    ::apache::thrift::ident::objectName
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = QualifiedObjectName;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  QualifiedObjectName();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  QualifiedObjectName(apache::thrift::FragileConstructor, ::std::string catalogName__arg, ::std::string schemaName__arg, ::std::string objectName__arg);

  QualifiedObjectName(QualifiedObjectName&&) noexcept;

  QualifiedObjectName(const QualifiedObjectName& src);


  QualifiedObjectName& operator=(QualifiedObjectName&&) noexcept;
  QualifiedObjectName& operator=(const QualifiedObjectName& src);

  ~QualifiedObjectName();

 private:
  ::std::string __fbthrift_field_catalogName;
 private:
  ::std::string __fbthrift_field_schemaName;
 private:
  ::std::string __fbthrift_field_objectName;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const QualifiedObjectName&) const;
  bool operator<(const QualifiedObjectName&) const;

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> catalogName_ref() const& {
    return {this->__fbthrift_field_catalogName, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> catalogName_ref() & {
    return {this->__fbthrift_field_catalogName, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> catalogName_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_catalogName), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> catalogName() const& {
    return {this->__fbthrift_field_catalogName, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> catalogName() & {
    return {this->__fbthrift_field_catalogName, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "catalogName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> catalogName() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_catalogName), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "schemaName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> schemaName_ref() const& {
    return {this->__fbthrift_field_schemaName, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "schemaName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> schemaName_ref() & {
    return {this->__fbthrift_field_schemaName, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "schemaName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> schemaName_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_schemaName), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "schemaName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> schemaName() const& {
    return {this->__fbthrift_field_schemaName, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "schemaName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> schemaName() & {
    return {this->__fbthrift_field_schemaName, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "schemaName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> schemaName() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_schemaName), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "objectName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> objectName_ref() const& {
    return {this->__fbthrift_field_objectName, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "objectName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> objectName_ref() & {
    return {this->__fbthrift_field_objectName, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "objectName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> objectName_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_objectName), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "objectName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> objectName() const& {
    return {this->__fbthrift_field_objectName, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "objectName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> objectName() & {
    return {this->__fbthrift_field_objectName, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "objectName" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> objectName() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_objectName), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "catalogName" } */
  [[deprecated("Use `FOO.catalogName().value()` instead of `FOO.get_catalogName()`")]]
  const ::std::string& get_catalogName() const& {
    return __fbthrift_field_catalogName;
  }

  /** Glean { "field": "catalogName" } */
  [[deprecated("Use `FOO.catalogName().value()` instead of `FOO.get_catalogName()`")]]
  ::std::string get_catalogName() && {
    return static_cast<::std::string&&>(__fbthrift_field_catalogName);
  }

  /** Glean { "field": "catalogName" } */
  template <typename T_QualifiedObjectName_catalogName_struct_setter = ::std::string>
  [[deprecated("Use `FOO.catalogName() = BAR` instead of `FOO.set_catalogName(BAR)`")]]
  ::std::string& set_catalogName(T_QualifiedObjectName_catalogName_struct_setter&& catalogName_) {
    catalogName_ref() = std::forward<T_QualifiedObjectName_catalogName_struct_setter>(catalogName_);
    return __fbthrift_field_catalogName;
  }

  /** Glean { "field": "schemaName" } */
  [[deprecated("Use `FOO.schemaName().value()` instead of `FOO.get_schemaName()`")]]
  const ::std::string& get_schemaName() const& {
    return __fbthrift_field_schemaName;
  }

  /** Glean { "field": "schemaName" } */
  [[deprecated("Use `FOO.schemaName().value()` instead of `FOO.get_schemaName()`")]]
  ::std::string get_schemaName() && {
    return static_cast<::std::string&&>(__fbthrift_field_schemaName);
  }

  /** Glean { "field": "schemaName" } */
  template <typename T_QualifiedObjectName_schemaName_struct_setter = ::std::string>
  [[deprecated("Use `FOO.schemaName() = BAR` instead of `FOO.set_schemaName(BAR)`")]]
  ::std::string& set_schemaName(T_QualifiedObjectName_schemaName_struct_setter&& schemaName_) {
    schemaName_ref() = std::forward<T_QualifiedObjectName_schemaName_struct_setter>(schemaName_);
    return __fbthrift_field_schemaName;
  }

  /** Glean { "field": "objectName" } */
  [[deprecated("Use `FOO.objectName().value()` instead of `FOO.get_objectName()`")]]
  const ::std::string& get_objectName() const& {
    return __fbthrift_field_objectName;
  }

  /** Glean { "field": "objectName" } */
  [[deprecated("Use `FOO.objectName().value()` instead of `FOO.get_objectName()`")]]
  ::std::string get_objectName() && {
    return static_cast<::std::string&&>(__fbthrift_field_objectName);
  }

  /** Glean { "field": "objectName" } */
  template <typename T_QualifiedObjectName_objectName_struct_setter = ::std::string>
  [[deprecated("Use `FOO.objectName() = BAR` instead of `FOO.set_objectName(BAR)`")]]
  ::std::string& set_objectName(T_QualifiedObjectName_objectName_struct_setter&& objectName_) {
    objectName_ref() = std::forward<T_QualifiedObjectName_objectName_struct_setter>(objectName_);
    return __fbthrift_field_objectName;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<QualifiedObjectName>;
  friend void swap(QualifiedObjectName& a, QualifiedObjectName& b);
};

template <class Protocol_>
unsigned long QualifiedObjectName::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TypeVariableConstraint", "kind": "struct" } */
class TypeVariableConstraint final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::comparableRequired,
    ::apache::thrift::ident::orderableRequired,
    ::apache::thrift::ident::variadicBound,
    ::apache::thrift::ident::nonDecimalNumericRequired
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::bool_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TypeVariableConstraint;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TypeVariableConstraint();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TypeVariableConstraint(apache::thrift::FragileConstructor, ::std::string name__arg, bool comparableRequired__arg, bool orderableRequired__arg, ::std::string variadicBound__arg, bool nonDecimalNumericRequired__arg);

  TypeVariableConstraint(TypeVariableConstraint&&) noexcept;

  TypeVariableConstraint(const TypeVariableConstraint& src);


  TypeVariableConstraint& operator=(TypeVariableConstraint&&) noexcept;
  TypeVariableConstraint& operator=(const TypeVariableConstraint& src);

  ~TypeVariableConstraint();

 private:
  ::std::string __fbthrift_field_name;
 private:
  bool __fbthrift_field_comparableRequired;
 private:
  bool __fbthrift_field_orderableRequired;
 private:
  ::std::string __fbthrift_field_variadicBound;
 private:
  bool __fbthrift_field_nonDecimalNumericRequired;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TypeVariableConstraint&) const;
  bool operator<(const TypeVariableConstraint&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "comparableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> comparableRequired_ref() const& {
    return {this->__fbthrift_field_comparableRequired, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "comparableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> comparableRequired_ref() & {
    return {this->__fbthrift_field_comparableRequired, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "comparableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> comparableRequired_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_comparableRequired), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "comparableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> comparableRequired() const& {
    return {this->__fbthrift_field_comparableRequired, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "comparableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> comparableRequired() & {
    return {this->__fbthrift_field_comparableRequired, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "comparableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> comparableRequired() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_comparableRequired), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "orderableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> orderableRequired_ref() const& {
    return {this->__fbthrift_field_orderableRequired, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "orderableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> orderableRequired_ref() & {
    return {this->__fbthrift_field_orderableRequired, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "orderableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> orderableRequired_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_orderableRequired), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "orderableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> orderableRequired() const& {
    return {this->__fbthrift_field_orderableRequired, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "orderableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> orderableRequired() & {
    return {this->__fbthrift_field_orderableRequired, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "orderableRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> orderableRequired() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_orderableRequired), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "variadicBound" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> variadicBound_ref() const& {
    return {this->__fbthrift_field_variadicBound, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "variadicBound" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> variadicBound_ref() & {
    return {this->__fbthrift_field_variadicBound, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "variadicBound" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> variadicBound_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_variadicBound), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "variadicBound" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> variadicBound() const& {
    return {this->__fbthrift_field_variadicBound, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "variadicBound" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> variadicBound() & {
    return {this->__fbthrift_field_variadicBound, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "variadicBound" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> variadicBound() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_variadicBound), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nonDecimalNumericRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nonDecimalNumericRequired_ref() const& {
    return {this->__fbthrift_field_nonDecimalNumericRequired, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "nonDecimalNumericRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nonDecimalNumericRequired_ref() & {
    return {this->__fbthrift_field_nonDecimalNumericRequired, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "nonDecimalNumericRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nonDecimalNumericRequired_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nonDecimalNumericRequired), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "nonDecimalNumericRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nonDecimalNumericRequired() const& {
    return {this->__fbthrift_field_nonDecimalNumericRequired, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "nonDecimalNumericRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nonDecimalNumericRequired() & {
    return {this->__fbthrift_field_nonDecimalNumericRequired, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "nonDecimalNumericRequired" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nonDecimalNumericRequired() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nonDecimalNumericRequired), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_TypeVariableConstraint_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_TypeVariableConstraint_name_struct_setter&& name_) {
    name_ref() = std::forward<T_TypeVariableConstraint_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "comparableRequired" } */
  [[deprecated("Use `FOO.comparableRequired().value()` instead of `FOO.get_comparableRequired()`")]]
  bool get_comparableRequired() const;

  /** Glean { "field": "comparableRequired" } */
  [[deprecated("Use `FOO.comparableRequired() = BAR` instead of `FOO.set_comparableRequired(BAR)`")]]
  bool& set_comparableRequired(bool comparableRequired_);

  /** Glean { "field": "orderableRequired" } */
  [[deprecated("Use `FOO.orderableRequired().value()` instead of `FOO.get_orderableRequired()`")]]
  bool get_orderableRequired() const;

  /** Glean { "field": "orderableRequired" } */
  [[deprecated("Use `FOO.orderableRequired() = BAR` instead of `FOO.set_orderableRequired(BAR)`")]]
  bool& set_orderableRequired(bool orderableRequired_);

  /** Glean { "field": "variadicBound" } */
  [[deprecated("Use `FOO.variadicBound().value()` instead of `FOO.get_variadicBound()`")]]
  const ::std::string& get_variadicBound() const& {
    return __fbthrift_field_variadicBound;
  }

  /** Glean { "field": "variadicBound" } */
  [[deprecated("Use `FOO.variadicBound().value()` instead of `FOO.get_variadicBound()`")]]
  ::std::string get_variadicBound() && {
    return static_cast<::std::string&&>(__fbthrift_field_variadicBound);
  }

  /** Glean { "field": "variadicBound" } */
  template <typename T_TypeVariableConstraint_variadicBound_struct_setter = ::std::string>
  [[deprecated("Use `FOO.variadicBound() = BAR` instead of `FOO.set_variadicBound(BAR)`")]]
  ::std::string& set_variadicBound(T_TypeVariableConstraint_variadicBound_struct_setter&& variadicBound_) {
    variadicBound_ref() = std::forward<T_TypeVariableConstraint_variadicBound_struct_setter>(variadicBound_);
    return __fbthrift_field_variadicBound;
  }

  /** Glean { "field": "nonDecimalNumericRequired" } */
  [[deprecated("Use `FOO.nonDecimalNumericRequired().value()` instead of `FOO.get_nonDecimalNumericRequired()`")]]
  bool get_nonDecimalNumericRequired() const;

  /** Glean { "field": "nonDecimalNumericRequired" } */
  [[deprecated("Use `FOO.nonDecimalNumericRequired() = BAR` instead of `FOO.set_nonDecimalNumericRequired(BAR)`")]]
  bool& set_nonDecimalNumericRequired(bool nonDecimalNumericRequired_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TypeVariableConstraint>;
  friend void swap(TypeVariableConstraint& a, TypeVariableConstraint& b);
};

template <class Protocol_>
unsigned long TypeVariableConstraint::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "LongVariableConstraint", "kind": "struct" } */
class LongVariableConstraint final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::expression
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LongVariableConstraint;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  LongVariableConstraint();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LongVariableConstraint(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::string expression__arg);

  LongVariableConstraint(LongVariableConstraint&&) noexcept;

  LongVariableConstraint(const LongVariableConstraint& src);


  LongVariableConstraint& operator=(LongVariableConstraint&&) noexcept;
  LongVariableConstraint& operator=(const LongVariableConstraint& src);

  ~LongVariableConstraint();

 private:
  ::std::string __fbthrift_field_name;
 private:
  ::std::string __fbthrift_field_expression;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const LongVariableConstraint&) const;
  bool operator<(const LongVariableConstraint&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "expression" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> expression_ref() const& {
    return {this->__fbthrift_field_expression, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "expression" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> expression_ref() & {
    return {this->__fbthrift_field_expression, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "expression" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> expression_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_expression), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "expression" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> expression() const& {
    return {this->__fbthrift_field_expression, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "expression" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> expression() & {
    return {this->__fbthrift_field_expression, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "expression" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> expression() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_expression), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_LongVariableConstraint_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_LongVariableConstraint_name_struct_setter&& name_) {
    name_ref() = std::forward<T_LongVariableConstraint_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "expression" } */
  [[deprecated("Use `FOO.expression().value()` instead of `FOO.get_expression()`")]]
  const ::std::string& get_expression() const& {
    return __fbthrift_field_expression;
  }

  /** Glean { "field": "expression" } */
  [[deprecated("Use `FOO.expression().value()` instead of `FOO.get_expression()`")]]
  ::std::string get_expression() && {
    return static_cast<::std::string&&>(__fbthrift_field_expression);
  }

  /** Glean { "field": "expression" } */
  template <typename T_LongVariableConstraint_expression_struct_setter = ::std::string>
  [[deprecated("Use `FOO.expression() = BAR` instead of `FOO.set_expression(BAR)`")]]
  ::std::string& set_expression(T_LongVariableConstraint_expression_struct_setter&& expression_) {
    expression_ref() = std::forward<T_LongVariableConstraint_expression_struct_setter>(expression_);
    return __fbthrift_field_expression;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LongVariableConstraint>;
  friend void swap(LongVariableConstraint& a, LongVariableConstraint& b);
};

template <class Protocol_>
unsigned long LongVariableConstraint::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TaskSource", "kind": "struct" } */
class TaskSource final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::planNodeId,
    ::apache::thrift::ident::splits,
    ::apache::thrift::ident::noMoreSplitsForLifespan,
    ::apache::thrift::ident::noMoreSplits
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::PlanNodeId>,
    ::apache::thrift::type::set<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::ScheduledSplit>>,
    ::apache::thrift::type::set<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::Lifespan>>,
    ::apache::thrift::type::bool_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TaskSource;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TaskSource();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TaskSource(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::PlanNodeId planNodeId__arg, ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit> splits__arg, ::std::set<::facebook::presto::protocol::cpp2::Lifespan> noMoreSplitsForLifespan__arg, bool noMoreSplits__arg);

  TaskSource(TaskSource&&) noexcept;

  TaskSource(const TaskSource& src);


  TaskSource& operator=(TaskSource&&) noexcept;
  TaskSource& operator=(const TaskSource& src);

  ~TaskSource();

 private:
  ::facebook::presto::protocol::cpp2::PlanNodeId __fbthrift_field_planNodeId;
 private:
  ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit> __fbthrift_field_splits;
 private:
  ::std::set<::facebook::presto::protocol::cpp2::Lifespan> __fbthrift_field_noMoreSplitsForLifespan;
 private:
  bool __fbthrift_field_noMoreSplits;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TaskSource&) const;
  bool operator<(const TaskSource&) const;

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> planNodeId_ref() const& {
    return {this->__fbthrift_field_planNodeId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> planNodeId_ref() & {
    return {this->__fbthrift_field_planNodeId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> planNodeId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_planNodeId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> planNodeId() const& {
    return {this->__fbthrift_field_planNodeId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> planNodeId() & {
    return {this->__fbthrift_field_planNodeId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> planNodeId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_planNodeId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "splits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> splits_ref() const& {
    return {this->__fbthrift_field_splits, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "splits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> splits_ref() & {
    return {this->__fbthrift_field_splits, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "splits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> splits_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_splits), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "splits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> splits() const& {
    return {this->__fbthrift_field_splits, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "splits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> splits() & {
    return {this->__fbthrift_field_splits, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "splits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> splits() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_splits), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "noMoreSplitsForLifespan" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreSplitsForLifespan_ref() const& {
    return {this->__fbthrift_field_noMoreSplitsForLifespan, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreSplitsForLifespan" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreSplitsForLifespan_ref() & {
    return {this->__fbthrift_field_noMoreSplitsForLifespan, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreSplitsForLifespan" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreSplitsForLifespan_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreSplitsForLifespan), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreSplitsForLifespan" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreSplitsForLifespan() const& {
    return {this->__fbthrift_field_noMoreSplitsForLifespan, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreSplitsForLifespan" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreSplitsForLifespan() & {
    return {this->__fbthrift_field_noMoreSplitsForLifespan, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreSplitsForLifespan" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreSplitsForLifespan() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreSplitsForLifespan), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreSplits_ref() const& {
    return {this->__fbthrift_field_noMoreSplits, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreSplits_ref() & {
    return {this->__fbthrift_field_noMoreSplits, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreSplits_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreSplits), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreSplits() const& {
    return {this->__fbthrift_field_noMoreSplits, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreSplits() & {
    return {this->__fbthrift_field_noMoreSplits, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreSplits() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreSplits), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "planNodeId" } */
  [[deprecated("Use `FOO.planNodeId().value()` instead of `FOO.get_planNodeId()`")]]
  const ::facebook::presto::protocol::cpp2::PlanNodeId& get_planNodeId() const&;

  /** Glean { "field": "planNodeId" } */
  [[deprecated("Use `FOO.planNodeId().value()` instead of `FOO.get_planNodeId()`")]]
  ::facebook::presto::protocol::cpp2::PlanNodeId get_planNodeId() &&;

  /** Glean { "field": "planNodeId" } */
  template <typename T_TaskSource_planNodeId_struct_setter = ::facebook::presto::protocol::cpp2::PlanNodeId>
  [[deprecated("Use `FOO.planNodeId() = BAR` instead of `FOO.set_planNodeId(BAR)`")]]
  ::facebook::presto::protocol::cpp2::PlanNodeId& set_planNodeId(T_TaskSource_planNodeId_struct_setter&& planNodeId_) {
    planNodeId_ref() = std::forward<T_TaskSource_planNodeId_struct_setter>(planNodeId_);
    return __fbthrift_field_planNodeId;
  }

  /** Glean { "field": "splits" } */
  [[deprecated("Use `FOO.splits().value()` instead of `FOO.get_splits()`")]]
  const ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>& get_splits() const&;

  /** Glean { "field": "splits" } */
  [[deprecated("Use `FOO.splits().value()` instead of `FOO.get_splits()`")]]
  ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit> get_splits() &&;

  /** Glean { "field": "splits" } */
  template <typename T_TaskSource_splits_struct_setter = ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>>
  [[deprecated("Use `FOO.splits() = BAR` instead of `FOO.set_splits(BAR)`")]]
  ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>& set_splits(T_TaskSource_splits_struct_setter&& splits_) {
    splits_ref() = std::forward<T_TaskSource_splits_struct_setter>(splits_);
    return __fbthrift_field_splits;
  }

  /** Glean { "field": "noMoreSplitsForLifespan" } */
  [[deprecated("Use `FOO.noMoreSplitsForLifespan().value()` instead of `FOO.get_noMoreSplitsForLifespan()`")]]
  const ::std::set<::facebook::presto::protocol::cpp2::Lifespan>& get_noMoreSplitsForLifespan() const&;

  /** Glean { "field": "noMoreSplitsForLifespan" } */
  [[deprecated("Use `FOO.noMoreSplitsForLifespan().value()` instead of `FOO.get_noMoreSplitsForLifespan()`")]]
  ::std::set<::facebook::presto::protocol::cpp2::Lifespan> get_noMoreSplitsForLifespan() &&;

  /** Glean { "field": "noMoreSplitsForLifespan" } */
  template <typename T_TaskSource_noMoreSplitsForLifespan_struct_setter = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  [[deprecated("Use `FOO.noMoreSplitsForLifespan() = BAR` instead of `FOO.set_noMoreSplitsForLifespan(BAR)`")]]
  ::std::set<::facebook::presto::protocol::cpp2::Lifespan>& set_noMoreSplitsForLifespan(T_TaskSource_noMoreSplitsForLifespan_struct_setter&& noMoreSplitsForLifespan_) {
    noMoreSplitsForLifespan_ref() = std::forward<T_TaskSource_noMoreSplitsForLifespan_struct_setter>(noMoreSplitsForLifespan_);
    return __fbthrift_field_noMoreSplitsForLifespan;
  }

  /** Glean { "field": "noMoreSplits" } */
  [[deprecated("Use `FOO.noMoreSplits().value()` instead of `FOO.get_noMoreSplits()`")]]
  bool get_noMoreSplits() const;

  /** Glean { "field": "noMoreSplits" } */
  [[deprecated("Use `FOO.noMoreSplits() = BAR` instead of `FOO.set_noMoreSplits(BAR)`")]]
  bool& set_noMoreSplits(bool noMoreSplits_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TaskSource>;
  friend void swap(TaskSource& a, TaskSource& b);
};

template <class Protocol_>
unsigned long TaskSource::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "ScheduledSplit", "kind": "struct" } */
class ScheduledSplit final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::sequenceId,
    ::apache::thrift::ident::planNodeId,
    ::apache::thrift::ident::split
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::PlanNodeId>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::SplitWrapper>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ScheduledSplit;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ScheduledSplit() :
      __fbthrift_field_sequenceId() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ScheduledSplit(apache::thrift::FragileConstructor, ::std::int64_t sequenceId__arg, ::facebook::presto::protocol::cpp2::PlanNodeId planNodeId__arg, ::facebook::presto::protocol::cpp2::SplitWrapper split__arg);

  ScheduledSplit(ScheduledSplit&&) noexcept;

  ScheduledSplit(const ScheduledSplit& src);


  ScheduledSplit& operator=(ScheduledSplit&&) noexcept;
  ScheduledSplit& operator=(const ScheduledSplit& src);
 private:
  ::std::int64_t __fbthrift_field_sequenceId;
 private:
  ::facebook::presto::protocol::cpp2::PlanNodeId __fbthrift_field_planNodeId;
 private:
  ::facebook::presto::protocol::cpp2::SplitWrapper __fbthrift_field_split;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ScheduledSplit&) const;
  bool operator<(const ScheduledSplit&) const;

  /** Glean { "field": "sequenceId" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sequenceId_ref() const& {
    return {this->__fbthrift_field_sequenceId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sequenceId" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sequenceId_ref() & {
    return {this->__fbthrift_field_sequenceId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sequenceId" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sequenceId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sequenceId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sequenceId" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sequenceId() const& {
    return {this->__fbthrift_field_sequenceId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sequenceId" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sequenceId() & {
    return {this->__fbthrift_field_sequenceId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sequenceId" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sequenceId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sequenceId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> planNodeId_ref() const& {
    return {this->__fbthrift_field_planNodeId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> planNodeId_ref() & {
    return {this->__fbthrift_field_planNodeId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> planNodeId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_planNodeId), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> planNodeId() const& {
    return {this->__fbthrift_field_planNodeId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> planNodeId() & {
    return {this->__fbthrift_field_planNodeId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> planNodeId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_planNodeId), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SplitWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> split_ref() const& {
    return {this->__fbthrift_field_split, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SplitWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> split_ref() & {
    return {this->__fbthrift_field_split, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SplitWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> split_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_split), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SplitWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> split() const& {
    return {this->__fbthrift_field_split, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SplitWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> split() & {
    return {this->__fbthrift_field_split, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "split" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SplitWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> split() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_split), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "sequenceId" } */
  [[deprecated("Use `FOO.sequenceId().value()` instead of `FOO.get_sequenceId()`")]]
  ::std::int64_t get_sequenceId() const;

  /** Glean { "field": "sequenceId" } */
  [[deprecated("Use `FOO.sequenceId() = BAR` instead of `FOO.set_sequenceId(BAR)`")]]
  ::std::int64_t& set_sequenceId(::std::int64_t sequenceId_);

  /** Glean { "field": "planNodeId" } */
  [[deprecated("Use `FOO.planNodeId().value()` instead of `FOO.get_planNodeId()`")]]
  const ::facebook::presto::protocol::cpp2::PlanNodeId& get_planNodeId() const&;

  /** Glean { "field": "planNodeId" } */
  [[deprecated("Use `FOO.planNodeId().value()` instead of `FOO.get_planNodeId()`")]]
  ::facebook::presto::protocol::cpp2::PlanNodeId get_planNodeId() &&;

  /** Glean { "field": "planNodeId" } */
  template <typename T_ScheduledSplit_planNodeId_struct_setter = ::facebook::presto::protocol::cpp2::PlanNodeId>
  [[deprecated("Use `FOO.planNodeId() = BAR` instead of `FOO.set_planNodeId(BAR)`")]]
  ::facebook::presto::protocol::cpp2::PlanNodeId& set_planNodeId(T_ScheduledSplit_planNodeId_struct_setter&& planNodeId_) {
    planNodeId_ref() = std::forward<T_ScheduledSplit_planNodeId_struct_setter>(planNodeId_);
    return __fbthrift_field_planNodeId;
  }

  /** Glean { "field": "split" } */
  [[deprecated("Use `FOO.split().value()` instead of `FOO.get_split()`")]]
  const ::facebook::presto::protocol::cpp2::SplitWrapper& get_split() const&;

  /** Glean { "field": "split" } */
  [[deprecated("Use `FOO.split().value()` instead of `FOO.get_split()`")]]
  ::facebook::presto::protocol::cpp2::SplitWrapper get_split() &&;

  /** Glean { "field": "split" } */
  template <typename T_ScheduledSplit_split_struct_setter = ::facebook::presto::protocol::cpp2::SplitWrapper>
  [[deprecated("Use `FOO.split() = BAR` instead of `FOO.set_split(BAR)`")]]
  ::facebook::presto::protocol::cpp2::SplitWrapper& set_split(T_ScheduledSplit_split_struct_setter&& split_) {
    split_ref() = std::forward<T_ScheduledSplit_split_struct_setter>(split_);
    return __fbthrift_field_split;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ScheduledSplit>;
  friend void swap(ScheduledSplit& a, ScheduledSplit& b);
};

template <class Protocol_>
unsigned long ScheduledSplit::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TaskStatus", "kind": "struct" } */
class TaskStatus final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 21;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::taskInstanceIdLeastSignificantBits,
    ::apache::thrift::ident::taskInstanceIdMostSignificantBits,
    ::apache::thrift::ident::version,
    ::apache::thrift::ident::state,
    ::apache::thrift::ident::selfUri,
    ::apache::thrift::ident::completedDriverGroups,
    ::apache::thrift::ident::failures,
    ::apache::thrift::ident::queuedPartitionedDrivers,
    ::apache::thrift::ident::runningPartitionedDrivers,
    ::apache::thrift::ident::outputBufferUtilization,
    ::apache::thrift::ident::outputBufferOverutilized,
    ::apache::thrift::ident::physicalWrittenDataSizeInBytes,
    ::apache::thrift::ident::memoryReservationInBytes,
    ::apache::thrift::ident::systemMemoryReservationInBytes,
    ::apache::thrift::ident::fullGcCount,
    ::apache::thrift::ident::fullGcTimeInMillis,
    ::apache::thrift::ident::peakNodeTotalMemoryReservationInBytes,
    ::apache::thrift::ident::totalCpuTimeInNanos,
    ::apache::thrift::ident::taskAgeInMillis,
    ::apache::thrift::ident::queuedPartitionedSplitsWeight,
    ::apache::thrift::ident::runningPartitionedSplitsWeight
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::TaskState>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::set<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::Lifespan>>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TaskStatus;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TaskStatus();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TaskStatus(apache::thrift::FragileConstructor, ::std::int64_t taskInstanceIdLeastSignificantBits__arg, ::std::int64_t taskInstanceIdMostSignificantBits__arg, ::std::int64_t version__arg, ::facebook::presto::protocol::cpp2::TaskState state__arg, ::std::string selfUri__arg, ::std::set<::facebook::presto::protocol::cpp2::Lifespan> completedDriverGroups__arg, ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> failures__arg, ::std::int32_t queuedPartitionedDrivers__arg, ::std::int32_t runningPartitionedDrivers__arg, double outputBufferUtilization__arg, bool outputBufferOverutilized__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, ::std::int64_t memoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, ::std::int64_t fullGcCount__arg, ::std::int64_t fullGcTimeInMillis__arg, ::std::int64_t peakNodeTotalMemoryReservationInBytes__arg, ::std::int64_t totalCpuTimeInNanos__arg, ::std::int64_t taskAgeInMillis__arg, ::std::int64_t queuedPartitionedSplitsWeight__arg, ::std::int64_t runningPartitionedSplitsWeight__arg);

  TaskStatus(TaskStatus&&) noexcept;

  TaskStatus(const TaskStatus& src);


  TaskStatus& operator=(TaskStatus&&) noexcept;
  TaskStatus& operator=(const TaskStatus& src);

  ~TaskStatus();

 private:
  ::std::int64_t __fbthrift_field_taskInstanceIdLeastSignificantBits;
 private:
  ::std::int64_t __fbthrift_field_taskInstanceIdMostSignificantBits;
 private:
  ::std::int64_t __fbthrift_field_version;
 private:
  ::facebook::presto::protocol::cpp2::TaskState __fbthrift_field_state;
 private:
  ::std::string __fbthrift_field_selfUri;
 private:
  ::std::set<::facebook::presto::protocol::cpp2::Lifespan> __fbthrift_field_completedDriverGroups;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> __fbthrift_field_failures;
 private:
  ::std::int32_t __fbthrift_field_queuedPartitionedDrivers;
 private:
  ::std::int32_t __fbthrift_field_runningPartitionedDrivers;
 private:
  double __fbthrift_field_outputBufferUtilization;
 private:
  bool __fbthrift_field_outputBufferOverutilized;
 private:
  ::std::int64_t __fbthrift_field_physicalWrittenDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_memoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_systemMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_fullGcCount;
 private:
  ::std::int64_t __fbthrift_field_fullGcTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_peakNodeTotalMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_totalCpuTimeInNanos;
 private:
  ::std::int64_t __fbthrift_field_taskAgeInMillis;
 private:
  ::std::int64_t __fbthrift_field_queuedPartitionedSplitsWeight;
 private:
  ::std::int64_t __fbthrift_field_runningPartitionedSplitsWeight;
 private:
  apache::thrift::detail::isset_bitset<21, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TaskStatus&) const;
  bool operator<(const TaskStatus&) const;

  /** Glean { "field": "taskInstanceIdLeastSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskInstanceIdLeastSignificantBits_ref() const& {
    return {this->__fbthrift_field_taskInstanceIdLeastSignificantBits, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskInstanceIdLeastSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskInstanceIdLeastSignificantBits_ref() & {
    return {this->__fbthrift_field_taskInstanceIdLeastSignificantBits, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskInstanceIdLeastSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskInstanceIdLeastSignificantBits_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskInstanceIdLeastSignificantBits), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskInstanceIdLeastSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskInstanceIdLeastSignificantBits() const& {
    return {this->__fbthrift_field_taskInstanceIdLeastSignificantBits, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskInstanceIdLeastSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskInstanceIdLeastSignificantBits() & {
    return {this->__fbthrift_field_taskInstanceIdLeastSignificantBits, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskInstanceIdLeastSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskInstanceIdLeastSignificantBits() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskInstanceIdLeastSignificantBits), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskInstanceIdMostSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskInstanceIdMostSignificantBits_ref() const& {
    return {this->__fbthrift_field_taskInstanceIdMostSignificantBits, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskInstanceIdMostSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskInstanceIdMostSignificantBits_ref() & {
    return {this->__fbthrift_field_taskInstanceIdMostSignificantBits, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskInstanceIdMostSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskInstanceIdMostSignificantBits_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskInstanceIdMostSignificantBits), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskInstanceIdMostSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskInstanceIdMostSignificantBits() const& {
    return {this->__fbthrift_field_taskInstanceIdMostSignificantBits, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskInstanceIdMostSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskInstanceIdMostSignificantBits() & {
    return {this->__fbthrift_field_taskInstanceIdMostSignificantBits, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskInstanceIdMostSignificantBits" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskInstanceIdMostSignificantBits() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskInstanceIdMostSignificantBits), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> version_ref() const& {
    return {this->__fbthrift_field_version, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> version_ref() & {
    return {this->__fbthrift_field_version, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> version_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_version), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> version() const& {
    return {this->__fbthrift_field_version, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> version() & {
    return {this->__fbthrift_field_version, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> version() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_version), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskState>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> state_ref() const& {
    return {this->__fbthrift_field_state, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskState>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> state_ref() & {
    return {this->__fbthrift_field_state, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskState>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> state_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_state), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskState>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> state() const& {
    return {this->__fbthrift_field_state, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskState>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> state() & {
    return {this->__fbthrift_field_state, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskState>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> state() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_state), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "selfUri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> selfUri_ref() const& {
    return {this->__fbthrift_field_selfUri, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "selfUri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> selfUri_ref() & {
    return {this->__fbthrift_field_selfUri, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "selfUri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> selfUri_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_selfUri), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "selfUri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> selfUri() const& {
    return {this->__fbthrift_field_selfUri, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "selfUri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> selfUri() & {
    return {this->__fbthrift_field_selfUri, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "selfUri" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> selfUri() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_selfUri), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "completedDriverGroups" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> completedDriverGroups_ref() const& {
    return {this->__fbthrift_field_completedDriverGroups, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "completedDriverGroups" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> completedDriverGroups_ref() & {
    return {this->__fbthrift_field_completedDriverGroups, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "completedDriverGroups" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> completedDriverGroups_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_completedDriverGroups), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "completedDriverGroups" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> completedDriverGroups() const& {
    return {this->__fbthrift_field_completedDriverGroups, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "completedDriverGroups" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> completedDriverGroups() & {
    return {this->__fbthrift_field_completedDriverGroups, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "completedDriverGroups" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> completedDriverGroups() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_completedDriverGroups), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "failures" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> failures_ref() const& {
    return {this->__fbthrift_field_failures, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "failures" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> failures_ref() & {
    return {this->__fbthrift_field_failures, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "failures" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> failures_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_failures), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "failures" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> failures() const& {
    return {this->__fbthrift_field_failures, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "failures" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> failures() & {
    return {this->__fbthrift_field_failures, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "failures" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> failures() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_failures), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedDrivers_ref() const& {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedDrivers_ref() & {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedDrivers), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedDrivers() const& {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedDrivers() & {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedDrivers), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedDrivers_ref() const& {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedDrivers_ref() & {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedDrivers), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedDrivers() const& {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedDrivers() & {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedDrivers), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "outputBufferUtilization" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputBufferUtilization_ref() const& {
    return {this->__fbthrift_field_outputBufferUtilization, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "outputBufferUtilization" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputBufferUtilization_ref() & {
    return {this->__fbthrift_field_outputBufferUtilization, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "outputBufferUtilization" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputBufferUtilization_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputBufferUtilization), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "outputBufferUtilization" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputBufferUtilization() const& {
    return {this->__fbthrift_field_outputBufferUtilization, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "outputBufferUtilization" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputBufferUtilization() & {
    return {this->__fbthrift_field_outputBufferUtilization, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "outputBufferUtilization" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputBufferUtilization() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputBufferUtilization), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "outputBufferOverutilized" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputBufferOverutilized_ref() const& {
    return {this->__fbthrift_field_outputBufferOverutilized, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "outputBufferOverutilized" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputBufferOverutilized_ref() & {
    return {this->__fbthrift_field_outputBufferOverutilized, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "outputBufferOverutilized" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputBufferOverutilized_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputBufferOverutilized), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "outputBufferOverutilized" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputBufferOverutilized() const& {
    return {this->__fbthrift_field_outputBufferOverutilized, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "outputBufferOverutilized" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputBufferOverutilized() & {
    return {this->__fbthrift_field_outputBufferOverutilized, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "outputBufferOverutilized" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputBufferOverutilized() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputBufferOverutilized), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "memoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> memoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_memoryReservationInBytes, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "memoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> memoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_memoryReservationInBytes, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "memoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> memoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_memoryReservationInBytes), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "memoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> memoryReservationInBytes() const& {
    return {this->__fbthrift_field_memoryReservationInBytes, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "memoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> memoryReservationInBytes() & {
    return {this->__fbthrift_field_memoryReservationInBytes, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "memoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> memoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_memoryReservationInBytes), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullGcCount_ref() const& {
    return {this->__fbthrift_field_fullGcCount, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullGcCount_ref() & {
    return {this->__fbthrift_field_fullGcCount, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullGcCount_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullGcCount), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullGcCount() const& {
    return {this->__fbthrift_field_fullGcCount, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullGcCount() & {
    return {this->__fbthrift_field_fullGcCount, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullGcCount() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullGcCount), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullGcTimeInMillis_ref() const& {
    return {this->__fbthrift_field_fullGcTimeInMillis, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullGcTimeInMillis_ref() & {
    return {this->__fbthrift_field_fullGcTimeInMillis, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullGcTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullGcTimeInMillis), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullGcTimeInMillis() const& {
    return {this->__fbthrift_field_fullGcTimeInMillis, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullGcTimeInMillis() & {
    return {this->__fbthrift_field_fullGcTimeInMillis, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullGcTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullGcTimeInMillis), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "peakNodeTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakNodeTotalMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_peakNodeTotalMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "peakNodeTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakNodeTotalMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_peakNodeTotalMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "peakNodeTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakNodeTotalMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakNodeTotalMemoryReservationInBytes), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "peakNodeTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakNodeTotalMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_peakNodeTotalMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "peakNodeTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakNodeTotalMemoryReservationInBytes() & {
    return {this->__fbthrift_field_peakNodeTotalMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "peakNodeTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakNodeTotalMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakNodeTotalMemoryReservationInBytes), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalCpuTimeInNanos_ref() const& {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalCpuTimeInNanos_ref() & {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalCpuTimeInNanos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalCpuTimeInNanos), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalCpuTimeInNanos() const& {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalCpuTimeInNanos() & {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalCpuTimeInNanos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalCpuTimeInNanos), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "taskAgeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskAgeInMillis_ref() const& {
    return {this->__fbthrift_field_taskAgeInMillis, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "taskAgeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskAgeInMillis_ref() & {
    return {this->__fbthrift_field_taskAgeInMillis, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "taskAgeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskAgeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskAgeInMillis), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "taskAgeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskAgeInMillis() const& {
    return {this->__fbthrift_field_taskAgeInMillis, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "taskAgeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskAgeInMillis() & {
    return {this->__fbthrift_field_taskAgeInMillis, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "taskAgeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskAgeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskAgeInMillis), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedSplitsWeight_ref() const& {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedSplitsWeight_ref() & {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedSplitsWeight_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedSplitsWeight), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedSplitsWeight() const& {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedSplitsWeight() & {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedSplitsWeight() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedSplitsWeight), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedSplitsWeight_ref() const& {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedSplitsWeight_ref() & {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedSplitsWeight_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedSplitsWeight), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedSplitsWeight() const& {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedSplitsWeight() & {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedSplitsWeight() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedSplitsWeight), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "taskInstanceIdLeastSignificantBits" } */
  [[deprecated("Use `FOO.taskInstanceIdLeastSignificantBits().value()` instead of `FOO.get_taskInstanceIdLeastSignificantBits()`")]]
  ::std::int64_t get_taskInstanceIdLeastSignificantBits() const;

  /** Glean { "field": "taskInstanceIdLeastSignificantBits" } */
  [[deprecated("Use `FOO.taskInstanceIdLeastSignificantBits() = BAR` instead of `FOO.set_taskInstanceIdLeastSignificantBits(BAR)`")]]
  ::std::int64_t& set_taskInstanceIdLeastSignificantBits(::std::int64_t taskInstanceIdLeastSignificantBits_);

  /** Glean { "field": "taskInstanceIdMostSignificantBits" } */
  [[deprecated("Use `FOO.taskInstanceIdMostSignificantBits().value()` instead of `FOO.get_taskInstanceIdMostSignificantBits()`")]]
  ::std::int64_t get_taskInstanceIdMostSignificantBits() const;

  /** Glean { "field": "taskInstanceIdMostSignificantBits" } */
  [[deprecated("Use `FOO.taskInstanceIdMostSignificantBits() = BAR` instead of `FOO.set_taskInstanceIdMostSignificantBits(BAR)`")]]
  ::std::int64_t& set_taskInstanceIdMostSignificantBits(::std::int64_t taskInstanceIdMostSignificantBits_);

  /** Glean { "field": "version" } */
  [[deprecated("Use `FOO.version().value()` instead of `FOO.get_version()`")]]
  ::std::int64_t get_version() const;

  /** Glean { "field": "version" } */
  [[deprecated("Use `FOO.version() = BAR` instead of `FOO.set_version(BAR)`")]]
  ::std::int64_t& set_version(::std::int64_t version_);

  /** Glean { "field": "state" } */
  [[deprecated("Use `FOO.state().value()` instead of `FOO.get_state()`")]]
  ::facebook::presto::protocol::cpp2::TaskState get_state() const;

  /** Glean { "field": "state" } */
  [[deprecated("Use `FOO.state() = BAR` instead of `FOO.set_state(BAR)`")]]
  ::facebook::presto::protocol::cpp2::TaskState& set_state(::facebook::presto::protocol::cpp2::TaskState state_);

  /** Glean { "field": "selfUri" } */
  [[deprecated("Use `FOO.selfUri().value()` instead of `FOO.get_selfUri()`")]]
  const ::std::string& get_selfUri() const& {
    return __fbthrift_field_selfUri;
  }

  /** Glean { "field": "selfUri" } */
  [[deprecated("Use `FOO.selfUri().value()` instead of `FOO.get_selfUri()`")]]
  ::std::string get_selfUri() && {
    return static_cast<::std::string&&>(__fbthrift_field_selfUri);
  }

  /** Glean { "field": "selfUri" } */
  template <typename T_TaskStatus_selfUri_struct_setter = ::std::string>
  [[deprecated("Use `FOO.selfUri() = BAR` instead of `FOO.set_selfUri(BAR)`")]]
  ::std::string& set_selfUri(T_TaskStatus_selfUri_struct_setter&& selfUri_) {
    selfUri_ref() = std::forward<T_TaskStatus_selfUri_struct_setter>(selfUri_);
    return __fbthrift_field_selfUri;
  }

  /** Glean { "field": "completedDriverGroups" } */
  [[deprecated("Use `FOO.completedDriverGroups().value()` instead of `FOO.get_completedDriverGroups()`")]]
  const ::std::set<::facebook::presto::protocol::cpp2::Lifespan>& get_completedDriverGroups() const&;

  /** Glean { "field": "completedDriverGroups" } */
  [[deprecated("Use `FOO.completedDriverGroups().value()` instead of `FOO.get_completedDriverGroups()`")]]
  ::std::set<::facebook::presto::protocol::cpp2::Lifespan> get_completedDriverGroups() &&;

  /** Glean { "field": "completedDriverGroups" } */
  template <typename T_TaskStatus_completedDriverGroups_struct_setter = ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>
  [[deprecated("Use `FOO.completedDriverGroups() = BAR` instead of `FOO.set_completedDriverGroups(BAR)`")]]
  ::std::set<::facebook::presto::protocol::cpp2::Lifespan>& set_completedDriverGroups(T_TaskStatus_completedDriverGroups_struct_setter&& completedDriverGroups_) {
    completedDriverGroups_ref() = std::forward<T_TaskStatus_completedDriverGroups_struct_setter>(completedDriverGroups_);
    return __fbthrift_field_completedDriverGroups;
  }

  /** Glean { "field": "failures" } */
  [[deprecated("Use `FOO.failures().value()` instead of `FOO.get_failures()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>& get_failures() const&;

  /** Glean { "field": "failures" } */
  [[deprecated("Use `FOO.failures().value()` instead of `FOO.get_failures()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> get_failures() &&;

  /** Glean { "field": "failures" } */
  template <typename T_TaskStatus_failures_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  [[deprecated("Use `FOO.failures() = BAR` instead of `FOO.set_failures(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>& set_failures(T_TaskStatus_failures_struct_setter&& failures_) {
    failures_ref() = std::forward<T_TaskStatus_failures_struct_setter>(failures_);
    return __fbthrift_field_failures;
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  [[deprecated("Use `FOO.queuedPartitionedDrivers().value()` instead of `FOO.get_queuedPartitionedDrivers()`")]]
  ::std::int32_t get_queuedPartitionedDrivers() const;

  /** Glean { "field": "queuedPartitionedDrivers" } */
  [[deprecated("Use `FOO.queuedPartitionedDrivers() = BAR` instead of `FOO.set_queuedPartitionedDrivers(BAR)`")]]
  ::std::int32_t& set_queuedPartitionedDrivers(::std::int32_t queuedPartitionedDrivers_);

  /** Glean { "field": "runningPartitionedDrivers" } */
  [[deprecated("Use `FOO.runningPartitionedDrivers().value()` instead of `FOO.get_runningPartitionedDrivers()`")]]
  ::std::int32_t get_runningPartitionedDrivers() const;

  /** Glean { "field": "runningPartitionedDrivers" } */
  [[deprecated("Use `FOO.runningPartitionedDrivers() = BAR` instead of `FOO.set_runningPartitionedDrivers(BAR)`")]]
  ::std::int32_t& set_runningPartitionedDrivers(::std::int32_t runningPartitionedDrivers_);

  /** Glean { "field": "outputBufferUtilization" } */
  [[deprecated("Use `FOO.outputBufferUtilization().value()` instead of `FOO.get_outputBufferUtilization()`")]]
  double get_outputBufferUtilization() const;

  /** Glean { "field": "outputBufferUtilization" } */
  [[deprecated("Use `FOO.outputBufferUtilization() = BAR` instead of `FOO.set_outputBufferUtilization(BAR)`")]]
  double& set_outputBufferUtilization(double outputBufferUtilization_);

  /** Glean { "field": "outputBufferOverutilized" } */
  [[deprecated("Use `FOO.outputBufferOverutilized().value()` instead of `FOO.get_outputBufferOverutilized()`")]]
  bool get_outputBufferOverutilized() const;

  /** Glean { "field": "outputBufferOverutilized" } */
  [[deprecated("Use `FOO.outputBufferOverutilized() = BAR` instead of `FOO.set_outputBufferOverutilized(BAR)`")]]
  bool& set_outputBufferOverutilized(bool outputBufferOverutilized_);

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes().value()` instead of `FOO.get_physicalWrittenDataSizeInBytes()`")]]
  ::std::int64_t get_physicalWrittenDataSizeInBytes() const;

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes() = BAR` instead of `FOO.set_physicalWrittenDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_);

  /** Glean { "field": "memoryReservationInBytes" } */
  [[deprecated("Use `FOO.memoryReservationInBytes().value()` instead of `FOO.get_memoryReservationInBytes()`")]]
  ::std::int64_t get_memoryReservationInBytes() const;

  /** Glean { "field": "memoryReservationInBytes" } */
  [[deprecated("Use `FOO.memoryReservationInBytes() = BAR` instead of `FOO.set_memoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_memoryReservationInBytes(::std::int64_t memoryReservationInBytes_);

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes().value()` instead of `FOO.get_systemMemoryReservationInBytes()`")]]
  ::std::int64_t get_systemMemoryReservationInBytes() const;

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes() = BAR` instead of `FOO.set_systemMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_);

  /** Glean { "field": "fullGcCount" } */
  [[deprecated("Use `FOO.fullGcCount().value()` instead of `FOO.get_fullGcCount()`")]]
  ::std::int64_t get_fullGcCount() const;

  /** Glean { "field": "fullGcCount" } */
  [[deprecated("Use `FOO.fullGcCount() = BAR` instead of `FOO.set_fullGcCount(BAR)`")]]
  ::std::int64_t& set_fullGcCount(::std::int64_t fullGcCount_);

  /** Glean { "field": "fullGcTimeInMillis" } */
  [[deprecated("Use `FOO.fullGcTimeInMillis().value()` instead of `FOO.get_fullGcTimeInMillis()`")]]
  ::std::int64_t get_fullGcTimeInMillis() const;

  /** Glean { "field": "fullGcTimeInMillis" } */
  [[deprecated("Use `FOO.fullGcTimeInMillis() = BAR` instead of `FOO.set_fullGcTimeInMillis(BAR)`")]]
  ::std::int64_t& set_fullGcTimeInMillis(::std::int64_t fullGcTimeInMillis_);

  /** Glean { "field": "peakNodeTotalMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.peakNodeTotalMemoryReservationInBytes().value()` instead of `FOO.get_peakNodeTotalMemoryReservationInBytes()`")]]
  ::std::int64_t get_peakNodeTotalMemoryReservationInBytes() const;

  /** Glean { "field": "peakNodeTotalMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.peakNodeTotalMemoryReservationInBytes() = BAR` instead of `FOO.set_peakNodeTotalMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_peakNodeTotalMemoryReservationInBytes(::std::int64_t peakNodeTotalMemoryReservationInBytes_);

  /** Glean { "field": "totalCpuTimeInNanos" } */
  [[deprecated("Use `FOO.totalCpuTimeInNanos().value()` instead of `FOO.get_totalCpuTimeInNanos()`")]]
  ::std::int64_t get_totalCpuTimeInNanos() const;

  /** Glean { "field": "totalCpuTimeInNanos" } */
  [[deprecated("Use `FOO.totalCpuTimeInNanos() = BAR` instead of `FOO.set_totalCpuTimeInNanos(BAR)`")]]
  ::std::int64_t& set_totalCpuTimeInNanos(::std::int64_t totalCpuTimeInNanos_);

  /** Glean { "field": "taskAgeInMillis" } */
  [[deprecated("Use `FOO.taskAgeInMillis().value()` instead of `FOO.get_taskAgeInMillis()`")]]
  ::std::int64_t get_taskAgeInMillis() const;

  /** Glean { "field": "taskAgeInMillis" } */
  [[deprecated("Use `FOO.taskAgeInMillis() = BAR` instead of `FOO.set_taskAgeInMillis(BAR)`")]]
  ::std::int64_t& set_taskAgeInMillis(::std::int64_t taskAgeInMillis_);

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.queuedPartitionedSplitsWeight().value()` instead of `FOO.get_queuedPartitionedSplitsWeight()`")]]
  ::std::int64_t get_queuedPartitionedSplitsWeight() const;

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.queuedPartitionedSplitsWeight() = BAR` instead of `FOO.set_queuedPartitionedSplitsWeight(BAR)`")]]
  ::std::int64_t& set_queuedPartitionedSplitsWeight(::std::int64_t queuedPartitionedSplitsWeight_);

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.runningPartitionedSplitsWeight().value()` instead of `FOO.get_runningPartitionedSplitsWeight()`")]]
  ::std::int64_t get_runningPartitionedSplitsWeight() const;

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.runningPartitionedSplitsWeight() = BAR` instead of `FOO.set_runningPartitionedSplitsWeight(BAR)`")]]
  ::std::int64_t& set_runningPartitionedSplitsWeight(::std::int64_t runningPartitionedSplitsWeight_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TaskStatus>;
  friend void swap(TaskStatus& a, TaskStatus& b);
};

template <class Protocol_>
unsigned long TaskStatus::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "ErrorCode", "kind": "struct" } */
class ErrorCode final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::code,
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::type,
    ::apache::thrift::ident::retriable
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::ErrorType>,
    ::apache::thrift::type::bool_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ErrorCode;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ErrorCode();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ErrorCode(apache::thrift::FragileConstructor, ::std::int32_t code__arg, ::std::string name__arg, ::facebook::presto::protocol::cpp2::ErrorType type__arg, bool retriable__arg);

  ErrorCode(ErrorCode&&) noexcept;

  ErrorCode(const ErrorCode& src);


  ErrorCode& operator=(ErrorCode&&) noexcept;
  ErrorCode& operator=(const ErrorCode& src);

  ~ErrorCode();

 private:
  ::std::int32_t __fbthrift_field_code;
 private:
  ::std::string __fbthrift_field_name;
 private:
  ::facebook::presto::protocol::cpp2::ErrorType __fbthrift_field_type;
 private:
  bool __fbthrift_field_retriable;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ErrorCode&) const;
  bool operator<(const ErrorCode&) const;

  /** Glean { "field": "code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> code_ref() const& {
    return {this->__fbthrift_field_code, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> code_ref() & {
    return {this->__fbthrift_field_code, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> code_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_code), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> code() const& {
    return {this->__fbthrift_field_code, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> code() & {
    return {this->__fbthrift_field_code, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> code() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_code), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type_ref() const& {
    return {this->__fbthrift_field_type, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type_ref() & {
    return {this->__fbthrift_field_type, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type() const& {
    return {this->__fbthrift_field_type, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type() & {
    return {this->__fbthrift_field_type, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "retriable" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> retriable_ref() const& {
    return {this->__fbthrift_field_retriable, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "retriable" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> retriable_ref() & {
    return {this->__fbthrift_field_retriable, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "retriable" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> retriable_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_retriable), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "retriable" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> retriable() const& {
    return {this->__fbthrift_field_retriable, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "retriable" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> retriable() & {
    return {this->__fbthrift_field_retriable, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "retriable" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> retriable() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_retriable), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "code" } */
  [[deprecated("Use `FOO.code().value()` instead of `FOO.get_code()`")]]
  ::std::int32_t get_code() const;

  /** Glean { "field": "code" } */
  [[deprecated("Use `FOO.code() = BAR` instead of `FOO.set_code(BAR)`")]]
  ::std::int32_t& set_code(::std::int32_t code_);

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_ErrorCode_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_ErrorCode_name_struct_setter&& name_) {
    name_ref() = std::forward<T_ErrorCode_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type().value()` instead of `FOO.get_type()`")]]
  ::facebook::presto::protocol::cpp2::ErrorType get_type() const;

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type() = BAR` instead of `FOO.set_type(BAR)`")]]
  ::facebook::presto::protocol::cpp2::ErrorType& set_type(::facebook::presto::protocol::cpp2::ErrorType type_);

  /** Glean { "field": "retriable" } */
  [[deprecated("Use `FOO.retriable().value()` instead of `FOO.get_retriable()`")]]
  bool get_retriable() const;

  /** Glean { "field": "retriable" } */
  [[deprecated("Use `FOO.retriable() = BAR` instead of `FOO.set_retriable(BAR)`")]]
  bool& set_retriable(bool retriable_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ErrorCode>;
  friend void swap(ErrorCode& a, ErrorCode& b);
};

template <class Protocol_>
unsigned long ErrorCode::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "StageExecutionId", "kind": "struct" } */
class StageExecutionId final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::stageId,
    ::apache::thrift::ident::id
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::StageId>,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StageExecutionId;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StageExecutionId() :
      __fbthrift_field_id() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StageExecutionId(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::StageId stageId__arg, ::std::int32_t id__arg);

  StageExecutionId(StageExecutionId&&) noexcept;

  StageExecutionId(const StageExecutionId& src);


  StageExecutionId& operator=(StageExecutionId&&) noexcept;
  StageExecutionId& operator=(const StageExecutionId& src);
 private:
  ::facebook::presto::protocol::cpp2::StageId __fbthrift_field_stageId;
 private:
  ::std::int32_t __fbthrift_field_id;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StageExecutionId&) const;
  bool operator<(const StageExecutionId&) const;

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stageId_ref() const& {
    return {this->__fbthrift_field_stageId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stageId_ref() & {
    return {this->__fbthrift_field_stageId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stageId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stageId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stageId() const& {
    return {this->__fbthrift_field_stageId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stageId() & {
    return {this->__fbthrift_field_stageId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stageId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stageId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id_ref() const& {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id_ref() & {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id() const& {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id() & {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stageId" } */
  [[deprecated("Use `FOO.stageId().value()` instead of `FOO.get_stageId()`")]]
  const ::facebook::presto::protocol::cpp2::StageId& get_stageId() const&;

  /** Glean { "field": "stageId" } */
  [[deprecated("Use `FOO.stageId().value()` instead of `FOO.get_stageId()`")]]
  ::facebook::presto::protocol::cpp2::StageId get_stageId() &&;

  /** Glean { "field": "stageId" } */
  template <typename T_StageExecutionId_stageId_struct_setter = ::facebook::presto::protocol::cpp2::StageId>
  [[deprecated("Use `FOO.stageId() = BAR` instead of `FOO.set_stageId(BAR)`")]]
  ::facebook::presto::protocol::cpp2::StageId& set_stageId(T_StageExecutionId_stageId_struct_setter&& stageId_) {
    stageId_ref() = std::forward<T_StageExecutionId_stageId_struct_setter>(stageId_);
    return __fbthrift_field_stageId;
  }

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id().value()` instead of `FOO.get_id()`")]]
  ::std::int32_t get_id() const;

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id() = BAR` instead of `FOO.set_id(BAR)`")]]
  ::std::int32_t& set_id(::std::int32_t id_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StageExecutionId>;
  friend void swap(StageExecutionId& a, StageExecutionId& b);
};

template <class Protocol_>
unsigned long StageExecutionId::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "OutputBufferInfo", "kind": "struct" } */
class OutputBufferInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::type,
    ::apache::thrift::ident::state,
    ::apache::thrift::ident::buffers,
    ::apache::thrift::ident::canAddBuffers,
    ::apache::thrift::ident::canAddPages,
    ::apache::thrift::ident::totalBufferedBytes,
    ::apache::thrift::ident::totalBufferedPages,
    ::apache::thrift::ident::totalRowsSent,
    ::apache::thrift::ident::totalPagesSent
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::BufferState>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::BufferInfo>>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OutputBufferInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  OutputBufferInfo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OutputBufferInfo(apache::thrift::FragileConstructor, ::std::string type__arg, ::facebook::presto::protocol::cpp2::BufferState state__arg, ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo> buffers__arg, bool canAddBuffers__arg, bool canAddPages__arg, ::std::int64_t totalBufferedBytes__arg, ::std::int64_t totalBufferedPages__arg, ::std::int64_t totalRowsSent__arg, ::std::int64_t totalPagesSent__arg);

  OutputBufferInfo(OutputBufferInfo&&) noexcept;

  OutputBufferInfo(const OutputBufferInfo& src);


  OutputBufferInfo& operator=(OutputBufferInfo&&) noexcept;
  OutputBufferInfo& operator=(const OutputBufferInfo& src);

  ~OutputBufferInfo();

 private:
  ::std::string __fbthrift_field_type;
 private:
  ::facebook::presto::protocol::cpp2::BufferState __fbthrift_field_state;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo> __fbthrift_field_buffers;
 private:
  bool __fbthrift_field_canAddBuffers;
 private:
  bool __fbthrift_field_canAddPages;
 private:
  ::std::int64_t __fbthrift_field_totalBufferedBytes;
 private:
  ::std::int64_t __fbthrift_field_totalBufferedPages;
 private:
  ::std::int64_t __fbthrift_field_totalRowsSent;
 private:
  ::std::int64_t __fbthrift_field_totalPagesSent;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OutputBufferInfo&) const;
  bool operator<(const OutputBufferInfo&) const;

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type_ref() const& {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type_ref() & {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type() const& {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type() & {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferState>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> state_ref() const& {
    return {this->__fbthrift_field_state, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferState>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> state_ref() & {
    return {this->__fbthrift_field_state, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferState>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> state_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_state), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferState>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> state() const& {
    return {this->__fbthrift_field_state, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferState>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> state() & {
    return {this->__fbthrift_field_state, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "state" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferState>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> state() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_state), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buffers_ref() const& {
    return {this->__fbthrift_field_buffers, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buffers_ref() & {
    return {this->__fbthrift_field_buffers, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buffers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buffers), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buffers() const& {
    return {this->__fbthrift_field_buffers, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buffers() & {
    return {this->__fbthrift_field_buffers, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buffers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buffers), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "canAddBuffers" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> canAddBuffers_ref() const& {
    return {this->__fbthrift_field_canAddBuffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "canAddBuffers" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> canAddBuffers_ref() & {
    return {this->__fbthrift_field_canAddBuffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "canAddBuffers" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> canAddBuffers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_canAddBuffers), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "canAddBuffers" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> canAddBuffers() const& {
    return {this->__fbthrift_field_canAddBuffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "canAddBuffers" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> canAddBuffers() & {
    return {this->__fbthrift_field_canAddBuffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "canAddBuffers" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> canAddBuffers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_canAddBuffers), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "canAddPages" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> canAddPages_ref() const& {
    return {this->__fbthrift_field_canAddPages, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "canAddPages" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> canAddPages_ref() & {
    return {this->__fbthrift_field_canAddPages, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "canAddPages" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> canAddPages_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_canAddPages), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "canAddPages" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> canAddPages() const& {
    return {this->__fbthrift_field_canAddPages, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "canAddPages" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> canAddPages() & {
    return {this->__fbthrift_field_canAddPages, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "canAddPages" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> canAddPages() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_canAddPages), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "totalBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBufferedBytes_ref() const& {
    return {this->__fbthrift_field_totalBufferedBytes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "totalBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBufferedBytes_ref() & {
    return {this->__fbthrift_field_totalBufferedBytes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "totalBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBufferedBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBufferedBytes), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "totalBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBufferedBytes() const& {
    return {this->__fbthrift_field_totalBufferedBytes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "totalBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBufferedBytes() & {
    return {this->__fbthrift_field_totalBufferedBytes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "totalBufferedBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBufferedBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBufferedBytes), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "totalBufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBufferedPages_ref() const& {
    return {this->__fbthrift_field_totalBufferedPages, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalBufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBufferedPages_ref() & {
    return {this->__fbthrift_field_totalBufferedPages, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalBufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBufferedPages_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBufferedPages), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalBufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBufferedPages() const& {
    return {this->__fbthrift_field_totalBufferedPages, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalBufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBufferedPages() & {
    return {this->__fbthrift_field_totalBufferedPages, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalBufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBufferedPages() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBufferedPages), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalRowsSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalRowsSent_ref() const& {
    return {this->__fbthrift_field_totalRowsSent, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalRowsSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalRowsSent_ref() & {
    return {this->__fbthrift_field_totalRowsSent, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalRowsSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalRowsSent_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalRowsSent), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalRowsSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalRowsSent() const& {
    return {this->__fbthrift_field_totalRowsSent, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalRowsSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalRowsSent() & {
    return {this->__fbthrift_field_totalRowsSent, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalRowsSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalRowsSent() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalRowsSent), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalPagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalPagesSent_ref() const& {
    return {this->__fbthrift_field_totalPagesSent, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "totalPagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalPagesSent_ref() & {
    return {this->__fbthrift_field_totalPagesSent, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "totalPagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalPagesSent_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalPagesSent), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "totalPagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalPagesSent() const& {
    return {this->__fbthrift_field_totalPagesSent, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "totalPagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalPagesSent() & {
    return {this->__fbthrift_field_totalPagesSent, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "totalPagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalPagesSent() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalPagesSent), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type().value()` instead of `FOO.get_type()`")]]
  const ::std::string& get_type() const& {
    return __fbthrift_field_type;
  }

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type().value()` instead of `FOO.get_type()`")]]
  ::std::string get_type() && {
    return static_cast<::std::string&&>(__fbthrift_field_type);
  }

  /** Glean { "field": "type" } */
  template <typename T_OutputBufferInfo_type_struct_setter = ::std::string>
  [[deprecated("Use `FOO.type() = BAR` instead of `FOO.set_type(BAR)`")]]
  ::std::string& set_type(T_OutputBufferInfo_type_struct_setter&& type_) {
    type_ref() = std::forward<T_OutputBufferInfo_type_struct_setter>(type_);
    return __fbthrift_field_type;
  }

  /** Glean { "field": "state" } */
  [[deprecated("Use `FOO.state().value()` instead of `FOO.get_state()`")]]
  ::facebook::presto::protocol::cpp2::BufferState get_state() const;

  /** Glean { "field": "state" } */
  [[deprecated("Use `FOO.state() = BAR` instead of `FOO.set_state(BAR)`")]]
  ::facebook::presto::protocol::cpp2::BufferState& set_state(::facebook::presto::protocol::cpp2::BufferState state_);

  /** Glean { "field": "buffers" } */
  [[deprecated("Use `FOO.buffers().value()` instead of `FOO.get_buffers()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>& get_buffers() const&;

  /** Glean { "field": "buffers" } */
  [[deprecated("Use `FOO.buffers().value()` instead of `FOO.get_buffers()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo> get_buffers() &&;

  /** Glean { "field": "buffers" } */
  template <typename T_OutputBufferInfo_buffers_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>>
  [[deprecated("Use `FOO.buffers() = BAR` instead of `FOO.set_buffers(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>& set_buffers(T_OutputBufferInfo_buffers_struct_setter&& buffers_) {
    buffers_ref() = std::forward<T_OutputBufferInfo_buffers_struct_setter>(buffers_);
    return __fbthrift_field_buffers;
  }

  /** Glean { "field": "canAddBuffers" } */
  [[deprecated("Use `FOO.canAddBuffers().value()` instead of `FOO.get_canAddBuffers()`")]]
  bool get_canAddBuffers() const;

  /** Glean { "field": "canAddBuffers" } */
  [[deprecated("Use `FOO.canAddBuffers() = BAR` instead of `FOO.set_canAddBuffers(BAR)`")]]
  bool& set_canAddBuffers(bool canAddBuffers_);

  /** Glean { "field": "canAddPages" } */
  [[deprecated("Use `FOO.canAddPages().value()` instead of `FOO.get_canAddPages()`")]]
  bool get_canAddPages() const;

  /** Glean { "field": "canAddPages" } */
  [[deprecated("Use `FOO.canAddPages() = BAR` instead of `FOO.set_canAddPages(BAR)`")]]
  bool& set_canAddPages(bool canAddPages_);

  /** Glean { "field": "totalBufferedBytes" } */
  [[deprecated("Use `FOO.totalBufferedBytes().value()` instead of `FOO.get_totalBufferedBytes()`")]]
  ::std::int64_t get_totalBufferedBytes() const;

  /** Glean { "field": "totalBufferedBytes" } */
  [[deprecated("Use `FOO.totalBufferedBytes() = BAR` instead of `FOO.set_totalBufferedBytes(BAR)`")]]
  ::std::int64_t& set_totalBufferedBytes(::std::int64_t totalBufferedBytes_);

  /** Glean { "field": "totalBufferedPages" } */
  [[deprecated("Use `FOO.totalBufferedPages().value()` instead of `FOO.get_totalBufferedPages()`")]]
  ::std::int64_t get_totalBufferedPages() const;

  /** Glean { "field": "totalBufferedPages" } */
  [[deprecated("Use `FOO.totalBufferedPages() = BAR` instead of `FOO.set_totalBufferedPages(BAR)`")]]
  ::std::int64_t& set_totalBufferedPages(::std::int64_t totalBufferedPages_);

  /** Glean { "field": "totalRowsSent" } */
  [[deprecated("Use `FOO.totalRowsSent().value()` instead of `FOO.get_totalRowsSent()`")]]
  ::std::int64_t get_totalRowsSent() const;

  /** Glean { "field": "totalRowsSent" } */
  [[deprecated("Use `FOO.totalRowsSent() = BAR` instead of `FOO.set_totalRowsSent(BAR)`")]]
  ::std::int64_t& set_totalRowsSent(::std::int64_t totalRowsSent_);

  /** Glean { "field": "totalPagesSent" } */
  [[deprecated("Use `FOO.totalPagesSent().value()` instead of `FOO.get_totalPagesSent()`")]]
  ::std::int64_t get_totalPagesSent() const;

  /** Glean { "field": "totalPagesSent" } */
  [[deprecated("Use `FOO.totalPagesSent() = BAR` instead of `FOO.set_totalPagesSent(BAR)`")]]
  ::std::int64_t& set_totalPagesSent(::std::int64_t totalPagesSent_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OutputBufferInfo>;
  friend void swap(OutputBufferInfo& a, OutputBufferInfo& b);
};

template <class Protocol_>
unsigned long OutputBufferInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "BufferInfo", "kind": "struct" } */
class BufferInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bufferId,
    ::apache::thrift::ident::finished,
    ::apache::thrift::ident::bufferedPages,
    ::apache::thrift::ident::pagesSent,
    ::apache::thrift::ident::pageBufferInfo
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::OutputBufferId>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::PageBufferInfo>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = BufferInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  BufferInfo() :
      __fbthrift_field_finished(),
      __fbthrift_field_bufferedPages(),
      __fbthrift_field_pagesSent() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BufferInfo(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::OutputBufferId bufferId__arg, bool finished__arg, ::std::int32_t bufferedPages__arg, ::std::int64_t pagesSent__arg, ::facebook::presto::protocol::cpp2::PageBufferInfo pageBufferInfo__arg);

  BufferInfo(BufferInfo&&) = default;

  BufferInfo(const BufferInfo&) = default;


  BufferInfo& operator=(BufferInfo&&) = default;

  BufferInfo& operator=(const BufferInfo&) = default;
 private:
  ::facebook::presto::protocol::cpp2::OutputBufferId __fbthrift_field_bufferId;
 private:
  bool __fbthrift_field_finished;
 private:
  ::std::int32_t __fbthrift_field_bufferedPages;
 private:
  ::std::int64_t __fbthrift_field_pagesSent;
 private:
  ::facebook::presto::protocol::cpp2::PageBufferInfo __fbthrift_field_pageBufferInfo;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const BufferInfo&) const;
  bool operator<(const BufferInfo&) const;

  /** Glean { "field": "bufferId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferId_ref() const& {
    return {this->__fbthrift_field_bufferId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferId_ref() & {
    return {this->__fbthrift_field_bufferId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferId() const& {
    return {this->__fbthrift_field_bufferId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferId() & {
    return {this->__fbthrift_field_bufferId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bufferId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "finished" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finished_ref() const& {
    return {this->__fbthrift_field_finished, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "finished" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finished_ref() & {
    return {this->__fbthrift_field_finished, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "finished" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finished_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finished), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "finished" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finished() const& {
    return {this->__fbthrift_field_finished, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "finished" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finished() & {
    return {this->__fbthrift_field_finished, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "finished" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finished() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finished), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedPages_ref() const& {
    return {this->__fbthrift_field_bufferedPages, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedPages_ref() & {
    return {this->__fbthrift_field_bufferedPages, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedPages_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedPages), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bufferedPages() const& {
    return {this->__fbthrift_field_bufferedPages, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bufferedPages() & {
    return {this->__fbthrift_field_bufferedPages, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "bufferedPages" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bufferedPages() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bufferedPages), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "pagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesSent_ref() const& {
    return {this->__fbthrift_field_pagesSent, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "pagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesSent_ref() & {
    return {this->__fbthrift_field_pagesSent, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "pagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesSent_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesSent), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "pagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pagesSent() const& {
    return {this->__fbthrift_field_pagesSent, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "pagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pagesSent() & {
    return {this->__fbthrift_field_pagesSent, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "pagesSent" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pagesSent() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pagesSent), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "pageBufferInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PageBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pageBufferInfo_ref() const& {
    return {this->__fbthrift_field_pageBufferInfo, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pageBufferInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PageBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pageBufferInfo_ref() & {
    return {this->__fbthrift_field_pageBufferInfo, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pageBufferInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PageBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pageBufferInfo_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pageBufferInfo), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pageBufferInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PageBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pageBufferInfo() const& {
    return {this->__fbthrift_field_pageBufferInfo, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pageBufferInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PageBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pageBufferInfo() & {
    return {this->__fbthrift_field_pageBufferInfo, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "pageBufferInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PageBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pageBufferInfo() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pageBufferInfo), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "bufferId" } */
  [[deprecated("Use `FOO.bufferId().value()` instead of `FOO.get_bufferId()`")]]
  const ::facebook::presto::protocol::cpp2::OutputBufferId& get_bufferId() const&;

  /** Glean { "field": "bufferId" } */
  [[deprecated("Use `FOO.bufferId().value()` instead of `FOO.get_bufferId()`")]]
  ::facebook::presto::protocol::cpp2::OutputBufferId get_bufferId() &&;

  /** Glean { "field": "bufferId" } */
  template <typename T_BufferInfo_bufferId_struct_setter = ::facebook::presto::protocol::cpp2::OutputBufferId>
  [[deprecated("Use `FOO.bufferId() = BAR` instead of `FOO.set_bufferId(BAR)`")]]
  ::facebook::presto::protocol::cpp2::OutputBufferId& set_bufferId(T_BufferInfo_bufferId_struct_setter&& bufferId_) {
    bufferId_ref() = std::forward<T_BufferInfo_bufferId_struct_setter>(bufferId_);
    return __fbthrift_field_bufferId;
  }

  /** Glean { "field": "finished" } */
  [[deprecated("Use `FOO.finished().value()` instead of `FOO.get_finished()`")]]
  bool get_finished() const;

  /** Glean { "field": "finished" } */
  [[deprecated("Use `FOO.finished() = BAR` instead of `FOO.set_finished(BAR)`")]]
  bool& set_finished(bool finished_);

  /** Glean { "field": "bufferedPages" } */
  [[deprecated("Use `FOO.bufferedPages().value()` instead of `FOO.get_bufferedPages()`")]]
  ::std::int32_t get_bufferedPages() const;

  /** Glean { "field": "bufferedPages" } */
  [[deprecated("Use `FOO.bufferedPages() = BAR` instead of `FOO.set_bufferedPages(BAR)`")]]
  ::std::int32_t& set_bufferedPages(::std::int32_t bufferedPages_);

  /** Glean { "field": "pagesSent" } */
  [[deprecated("Use `FOO.pagesSent().value()` instead of `FOO.get_pagesSent()`")]]
  ::std::int64_t get_pagesSent() const;

  /** Glean { "field": "pagesSent" } */
  [[deprecated("Use `FOO.pagesSent() = BAR` instead of `FOO.set_pagesSent(BAR)`")]]
  ::std::int64_t& set_pagesSent(::std::int64_t pagesSent_);

  /** Glean { "field": "pageBufferInfo" } */
  [[deprecated("Use `FOO.pageBufferInfo().value()` instead of `FOO.get_pageBufferInfo()`")]]
  const ::facebook::presto::protocol::cpp2::PageBufferInfo& get_pageBufferInfo() const&;

  /** Glean { "field": "pageBufferInfo" } */
  [[deprecated("Use `FOO.pageBufferInfo().value()` instead of `FOO.get_pageBufferInfo()`")]]
  ::facebook::presto::protocol::cpp2::PageBufferInfo get_pageBufferInfo() &&;

  /** Glean { "field": "pageBufferInfo" } */
  template <typename T_BufferInfo_pageBufferInfo_struct_setter = ::facebook::presto::protocol::cpp2::PageBufferInfo>
  [[deprecated("Use `FOO.pageBufferInfo() = BAR` instead of `FOO.set_pageBufferInfo(BAR)`")]]
  ::facebook::presto::protocol::cpp2::PageBufferInfo& set_pageBufferInfo(T_BufferInfo_pageBufferInfo_struct_setter&& pageBufferInfo_) {
    pageBufferInfo_ref() = std::forward<T_BufferInfo_pageBufferInfo_struct_setter>(pageBufferInfo_);
    return __fbthrift_field_pageBufferInfo;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BufferInfo>;
  friend void swap(BufferInfo& a, BufferInfo& b);
};

template <class Protocol_>
unsigned long BufferInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TaskStats", "kind": "struct" } */
class TaskStats final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 41;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::createTimeInMillis,
    ::apache::thrift::ident::firstStartTimeInMillis,
    ::apache::thrift::ident::lastStartTimeInMillis,
    ::apache::thrift::ident::lastEndTimeInMillis,
    ::apache::thrift::ident::endTimeInMillis,
    ::apache::thrift::ident::elapsedTimeInNanos,
    ::apache::thrift::ident::queuedTimeInNanos,
    ::apache::thrift::ident::totalDrivers,
    ::apache::thrift::ident::queuedDrivers,
    ::apache::thrift::ident::runningDrivers,
    ::apache::thrift::ident::blockedDrivers,
    ::apache::thrift::ident::completedDrivers,
    ::apache::thrift::ident::cumulativeUserMemory,
    ::apache::thrift::ident::cumulativeTotalMemory,
    ::apache::thrift::ident::userMemoryReservationInBytes,
    ::apache::thrift::ident::revocableMemoryReservationInBytes,
    ::apache::thrift::ident::systemMemoryReservationInBytes,
    ::apache::thrift::ident::peakUserMemoryInBytes,
    ::apache::thrift::ident::peakTotalMemoryInBytes,
    ::apache::thrift::ident::peakNodeTotalMemoryInBytes,
    ::apache::thrift::ident::totalScheduledTimeInNanos,
    ::apache::thrift::ident::totalCpuTimeInNanos,
    ::apache::thrift::ident::totalBlockedTimeInNanos,
    ::apache::thrift::ident::fullyBlocked,
    ::apache::thrift::ident::blockedReasons,
    ::apache::thrift::ident::totalAllocationInBytes,
    ::apache::thrift::ident::rawInputDataSizeInBytes,
    ::apache::thrift::ident::rawInputPositions,
    ::apache::thrift::ident::processedInputDataSizeInBytes,
    ::apache::thrift::ident::processedInputPositions,
    ::apache::thrift::ident::outputDataSizeInBytes,
    ::apache::thrift::ident::outputPositions,
    ::apache::thrift::ident::physicalWrittenDataSizeInBytes,
    ::apache::thrift::ident::pipelines,
    ::apache::thrift::ident::queuedPartitionedDrivers,
    ::apache::thrift::ident::queuedPartitionedSplitsWeight,
    ::apache::thrift::ident::runningPartitionedDrivers,
    ::apache::thrift::ident::runningPartitionedSplitsWeight,
    ::apache::thrift::ident::fullGcCount,
    ::apache::thrift::ident::fullGcTimeInMillis,
    ::apache::thrift::ident::runtimeStats
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::BlockedReason>>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::PipelineStats>>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::RuntimeStats>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TaskStats;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TaskStats();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TaskStats(apache::thrift::FragileConstructor, ::std::int64_t createTimeInMillis__arg, ::std::int64_t firstStartTimeInMillis__arg, ::std::int64_t lastStartTimeInMillis__arg, ::std::int64_t lastEndTimeInMillis__arg, ::std::int64_t endTimeInMillis__arg, ::std::int64_t elapsedTimeInNanos__arg, ::std::int64_t queuedTimeInNanos__arg, ::std::int32_t totalDrivers__arg, ::std::int32_t queuedDrivers__arg, ::std::int32_t runningDrivers__arg, ::std::int32_t blockedDrivers__arg, ::std::int32_t completedDrivers__arg, double cumulativeUserMemory__arg, double cumulativeTotalMemory__arg, ::std::int64_t userMemoryReservationInBytes__arg, ::std::int64_t revocableMemoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, ::std::int64_t peakUserMemoryInBytes__arg, ::std::int64_t peakTotalMemoryInBytes__arg, ::std::int64_t peakNodeTotalMemoryInBytes__arg, ::std::int64_t totalScheduledTimeInNanos__arg, ::std::int64_t totalCpuTimeInNanos__arg, ::std::int64_t totalBlockedTimeInNanos__arg, bool fullyBlocked__arg, ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> blockedReasons__arg, ::std::int64_t totalAllocationInBytes__arg, ::std::int64_t rawInputDataSizeInBytes__arg, ::std::int64_t rawInputPositions__arg, ::std::int64_t processedInputDataSizeInBytes__arg, ::std::int64_t processedInputPositions__arg, ::std::int64_t outputDataSizeInBytes__arg, ::std::int64_t outputPositions__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats> pipelines__arg, ::std::int32_t queuedPartitionedDrivers__arg, ::std::int64_t queuedPartitionedSplitsWeight__arg, ::std::int32_t runningPartitionedDrivers__arg, ::std::int64_t runningPartitionedSplitsWeight__arg, ::std::int32_t fullGcCount__arg, ::std::int64_t fullGcTimeInMillis__arg, ::facebook::presto::protocol::cpp2::RuntimeStats runtimeStats__arg);

  TaskStats(TaskStats&&) noexcept;

  TaskStats(const TaskStats& src);


  TaskStats& operator=(TaskStats&&) noexcept;
  TaskStats& operator=(const TaskStats& src);

  ~TaskStats();

 private:
  ::std::int64_t __fbthrift_field_createTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_firstStartTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_lastStartTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_lastEndTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_endTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_elapsedTimeInNanos;
 private:
  ::std::int64_t __fbthrift_field_queuedTimeInNanos;
 private:
  ::std::int32_t __fbthrift_field_totalDrivers;
 private:
  ::std::int32_t __fbthrift_field_queuedDrivers;
 private:
  ::std::int32_t __fbthrift_field_runningDrivers;
 private:
  ::std::int32_t __fbthrift_field_blockedDrivers;
 private:
  ::std::int32_t __fbthrift_field_completedDrivers;
 private:
  double __fbthrift_field_cumulativeUserMemory;
 private:
  double __fbthrift_field_cumulativeTotalMemory;
 private:
  ::std::int64_t __fbthrift_field_userMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_revocableMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_systemMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_peakUserMemoryInBytes;
 private:
  ::std::int64_t __fbthrift_field_peakTotalMemoryInBytes;
 private:
  ::std::int64_t __fbthrift_field_peakNodeTotalMemoryInBytes;
 private:
  ::std::int64_t __fbthrift_field_totalScheduledTimeInNanos;
 private:
  ::std::int64_t __fbthrift_field_totalCpuTimeInNanos;
 private:
  ::std::int64_t __fbthrift_field_totalBlockedTimeInNanos;
 private:
  bool __fbthrift_field_fullyBlocked;
 private:
  ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> __fbthrift_field_blockedReasons;
 private:
  ::std::int64_t __fbthrift_field_totalAllocationInBytes;
 private:
  ::std::int64_t __fbthrift_field_rawInputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_rawInputPositions;
 private:
  ::std::int64_t __fbthrift_field_processedInputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_processedInputPositions;
 private:
  ::std::int64_t __fbthrift_field_outputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_outputPositions;
 private:
  ::std::int64_t __fbthrift_field_physicalWrittenDataSizeInBytes;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats> __fbthrift_field_pipelines;
 private:
  ::std::int32_t __fbthrift_field_queuedPartitionedDrivers;
 private:
  ::std::int64_t __fbthrift_field_queuedPartitionedSplitsWeight;
 private:
  ::std::int32_t __fbthrift_field_runningPartitionedDrivers;
 private:
  ::std::int64_t __fbthrift_field_runningPartitionedSplitsWeight;
 private:
  ::std::int32_t __fbthrift_field_fullGcCount;
 private:
  ::std::int64_t __fbthrift_field_fullGcTimeInMillis;
 private:
  ::facebook::presto::protocol::cpp2::RuntimeStats __fbthrift_field_runtimeStats;
 private:
  apache::thrift::detail::isset_bitset<41, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TaskStats&) const;
  bool operator<(const TaskStats&) const;

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> createTimeInMillis_ref() const& {
    return {this->__fbthrift_field_createTimeInMillis, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> createTimeInMillis_ref() & {
    return {this->__fbthrift_field_createTimeInMillis, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> createTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_createTimeInMillis), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> createTimeInMillis() const& {
    return {this->__fbthrift_field_createTimeInMillis, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> createTimeInMillis() & {
    return {this->__fbthrift_field_createTimeInMillis, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> createTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_createTimeInMillis), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> firstStartTimeInMillis_ref() const& {
    return {this->__fbthrift_field_firstStartTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> firstStartTimeInMillis_ref() & {
    return {this->__fbthrift_field_firstStartTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> firstStartTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_firstStartTimeInMillis), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> firstStartTimeInMillis() const& {
    return {this->__fbthrift_field_firstStartTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> firstStartTimeInMillis() & {
    return {this->__fbthrift_field_firstStartTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> firstStartTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_firstStartTimeInMillis), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastStartTimeInMillis_ref() const& {
    return {this->__fbthrift_field_lastStartTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastStartTimeInMillis_ref() & {
    return {this->__fbthrift_field_lastStartTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastStartTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastStartTimeInMillis), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastStartTimeInMillis() const& {
    return {this->__fbthrift_field_lastStartTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastStartTimeInMillis() & {
    return {this->__fbthrift_field_lastStartTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastStartTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastStartTimeInMillis), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastEndTimeInMillis_ref() const& {
    return {this->__fbthrift_field_lastEndTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastEndTimeInMillis_ref() & {
    return {this->__fbthrift_field_lastEndTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastEndTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastEndTimeInMillis), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastEndTimeInMillis() const& {
    return {this->__fbthrift_field_lastEndTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastEndTimeInMillis() & {
    return {this->__fbthrift_field_lastEndTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastEndTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastEndTimeInMillis), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> endTimeInMillis_ref() const& {
    return {this->__fbthrift_field_endTimeInMillis, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> endTimeInMillis_ref() & {
    return {this->__fbthrift_field_endTimeInMillis, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> endTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_endTimeInMillis), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> endTimeInMillis() const& {
    return {this->__fbthrift_field_endTimeInMillis, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> endTimeInMillis() & {
    return {this->__fbthrift_field_endTimeInMillis, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "endTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> endTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_endTimeInMillis), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "elapsedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> elapsedTimeInNanos_ref() const& {
    return {this->__fbthrift_field_elapsedTimeInNanos, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> elapsedTimeInNanos_ref() & {
    return {this->__fbthrift_field_elapsedTimeInNanos, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> elapsedTimeInNanos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_elapsedTimeInNanos), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> elapsedTimeInNanos() const& {
    return {this->__fbthrift_field_elapsedTimeInNanos, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> elapsedTimeInNanos() & {
    return {this->__fbthrift_field_elapsedTimeInNanos, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "elapsedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> elapsedTimeInNanos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_elapsedTimeInNanos), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "queuedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedTimeInNanos_ref() const& {
    return {this->__fbthrift_field_queuedTimeInNanos, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "queuedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedTimeInNanos_ref() & {
    return {this->__fbthrift_field_queuedTimeInNanos, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "queuedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedTimeInNanos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedTimeInNanos), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "queuedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedTimeInNanos() const& {
    return {this->__fbthrift_field_queuedTimeInNanos, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "queuedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedTimeInNanos() & {
    return {this->__fbthrift_field_queuedTimeInNanos, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "queuedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedTimeInNanos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedTimeInNanos), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalDrivers_ref() const& {
    return {this->__fbthrift_field_totalDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalDrivers_ref() & {
    return {this->__fbthrift_field_totalDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalDrivers), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalDrivers() const& {
    return {this->__fbthrift_field_totalDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalDrivers() & {
    return {this->__fbthrift_field_totalDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalDrivers), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedDrivers_ref() const& {
    return {this->__fbthrift_field_queuedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedDrivers_ref() & {
    return {this->__fbthrift_field_queuedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedDrivers), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedDrivers() const& {
    return {this->__fbthrift_field_queuedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedDrivers() & {
    return {this->__fbthrift_field_queuedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedDrivers), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningDrivers_ref() const& {
    return {this->__fbthrift_field_runningDrivers, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningDrivers_ref() & {
    return {this->__fbthrift_field_runningDrivers, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningDrivers), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningDrivers() const& {
    return {this->__fbthrift_field_runningDrivers, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningDrivers() & {
    return {this->__fbthrift_field_runningDrivers, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningDrivers), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedDrivers_ref() const& {
    return {this->__fbthrift_field_blockedDrivers, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedDrivers_ref() & {
    return {this->__fbthrift_field_blockedDrivers, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedDrivers), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedDrivers() const& {
    return {this->__fbthrift_field_blockedDrivers, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedDrivers() & {
    return {this->__fbthrift_field_blockedDrivers, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedDrivers), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> completedDrivers_ref() const& {
    return {this->__fbthrift_field_completedDrivers, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> completedDrivers_ref() & {
    return {this->__fbthrift_field_completedDrivers, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> completedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_completedDrivers), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> completedDrivers() const& {
    return {this->__fbthrift_field_completedDrivers, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> completedDrivers() & {
    return {this->__fbthrift_field_completedDrivers, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> completedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_completedDrivers), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "cumulativeUserMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> cumulativeUserMemory_ref() const& {
    return {this->__fbthrift_field_cumulativeUserMemory, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "cumulativeUserMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> cumulativeUserMemory_ref() & {
    return {this->__fbthrift_field_cumulativeUserMemory, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "cumulativeUserMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> cumulativeUserMemory_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cumulativeUserMemory), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "cumulativeUserMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> cumulativeUserMemory() const& {
    return {this->__fbthrift_field_cumulativeUserMemory, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "cumulativeUserMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> cumulativeUserMemory() & {
    return {this->__fbthrift_field_cumulativeUserMemory, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "cumulativeUserMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> cumulativeUserMemory() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cumulativeUserMemory), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "cumulativeTotalMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> cumulativeTotalMemory_ref() const& {
    return {this->__fbthrift_field_cumulativeTotalMemory, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "cumulativeTotalMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> cumulativeTotalMemory_ref() & {
    return {this->__fbthrift_field_cumulativeTotalMemory, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "cumulativeTotalMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> cumulativeTotalMemory_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cumulativeTotalMemory), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "cumulativeTotalMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> cumulativeTotalMemory() const& {
    return {this->__fbthrift_field_cumulativeTotalMemory, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "cumulativeTotalMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> cumulativeTotalMemory() & {
    return {this->__fbthrift_field_cumulativeTotalMemory, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "cumulativeTotalMemory" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> cumulativeTotalMemory() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cumulativeTotalMemory), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> userMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> userMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> userMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userMemoryReservationInBytes), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> userMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> userMemoryReservationInBytes() & {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> userMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userMemoryReservationInBytes), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> revocableMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> revocableMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> revocableMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_revocableMemoryReservationInBytes), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> revocableMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> revocableMemoryReservationInBytes() & {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> revocableMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_revocableMemoryReservationInBytes), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "peakUserMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakUserMemoryInBytes_ref() const& {
    return {this->__fbthrift_field_peakUserMemoryInBytes, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "peakUserMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakUserMemoryInBytes_ref() & {
    return {this->__fbthrift_field_peakUserMemoryInBytes, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "peakUserMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakUserMemoryInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakUserMemoryInBytes), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "peakUserMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakUserMemoryInBytes() const& {
    return {this->__fbthrift_field_peakUserMemoryInBytes, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "peakUserMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakUserMemoryInBytes() & {
    return {this->__fbthrift_field_peakUserMemoryInBytes, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "peakUserMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakUserMemoryInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakUserMemoryInBytes), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "peakTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakTotalMemoryInBytes_ref() const& {
    return {this->__fbthrift_field_peakTotalMemoryInBytes, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "peakTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakTotalMemoryInBytes_ref() & {
    return {this->__fbthrift_field_peakTotalMemoryInBytes, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "peakTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakTotalMemoryInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakTotalMemoryInBytes), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "peakTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakTotalMemoryInBytes() const& {
    return {this->__fbthrift_field_peakTotalMemoryInBytes, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "peakTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakTotalMemoryInBytes() & {
    return {this->__fbthrift_field_peakTotalMemoryInBytes, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "peakTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakTotalMemoryInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakTotalMemoryInBytes), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "peakNodeTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakNodeTotalMemoryInBytes_ref() const& {
    return {this->__fbthrift_field_peakNodeTotalMemoryInBytes, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "peakNodeTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakNodeTotalMemoryInBytes_ref() & {
    return {this->__fbthrift_field_peakNodeTotalMemoryInBytes, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "peakNodeTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakNodeTotalMemoryInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakNodeTotalMemoryInBytes), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "peakNodeTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakNodeTotalMemoryInBytes() const& {
    return {this->__fbthrift_field_peakNodeTotalMemoryInBytes, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "peakNodeTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakNodeTotalMemoryInBytes() & {
    return {this->__fbthrift_field_peakNodeTotalMemoryInBytes, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "peakNodeTotalMemoryInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakNodeTotalMemoryInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakNodeTotalMemoryInBytes), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalScheduledTimeInNanos_ref() const& {
    return {this->__fbthrift_field_totalScheduledTimeInNanos, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalScheduledTimeInNanos_ref() & {
    return {this->__fbthrift_field_totalScheduledTimeInNanos, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalScheduledTimeInNanos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalScheduledTimeInNanos), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalScheduledTimeInNanos() const& {
    return {this->__fbthrift_field_totalScheduledTimeInNanos, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalScheduledTimeInNanos() & {
    return {this->__fbthrift_field_totalScheduledTimeInNanos, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalScheduledTimeInNanos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalScheduledTimeInNanos), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalCpuTimeInNanos_ref() const& {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalCpuTimeInNanos_ref() & {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalCpuTimeInNanos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalCpuTimeInNanos), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalCpuTimeInNanos() const& {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalCpuTimeInNanos() & {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalCpuTimeInNanos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalCpuTimeInNanos), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBlockedTimeInNanos_ref() const& {
    return {this->__fbthrift_field_totalBlockedTimeInNanos, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBlockedTimeInNanos_ref() & {
    return {this->__fbthrift_field_totalBlockedTimeInNanos, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBlockedTimeInNanos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBlockedTimeInNanos), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBlockedTimeInNanos() const& {
    return {this->__fbthrift_field_totalBlockedTimeInNanos, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBlockedTimeInNanos() & {
    return {this->__fbthrift_field_totalBlockedTimeInNanos, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBlockedTimeInNanos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBlockedTimeInNanos), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullyBlocked_ref() const& {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullyBlocked_ref() & {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullyBlocked_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullyBlocked), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullyBlocked() const& {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullyBlocked() & {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullyBlocked() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullyBlocked), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedReasons_ref() const& {
    return {this->__fbthrift_field_blockedReasons, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedReasons_ref() & {
    return {this->__fbthrift_field_blockedReasons, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedReasons_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedReasons), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedReasons() const& {
    return {this->__fbthrift_field_blockedReasons, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedReasons() & {
    return {this->__fbthrift_field_blockedReasons, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedReasons() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedReasons), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalAllocationInBytes_ref() const& {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalAllocationInBytes_ref() & {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalAllocationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalAllocationInBytes), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalAllocationInBytes() const& {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalAllocationInBytes() & {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalAllocationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalAllocationInBytes), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputDataSizeInBytes), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputDataSizeInBytes() const& {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputDataSizeInBytes() & {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputDataSizeInBytes), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputPositions_ref() const& {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputPositions_ref() & {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputPositions), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputPositions() const& {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputPositions() & {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputPositions), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputDataSizeInBytes), __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputDataSizeInBytes() const& {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputDataSizeInBytes() & {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputDataSizeInBytes), __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputPositions_ref() const& {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputPositions_ref() & {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputPositions), __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputPositions() const& {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputPositions() & {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputPositions), __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputDataSizeInBytes), __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputDataSizeInBytes() const& {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputDataSizeInBytes() & {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputDataSizeInBytes), __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPositions_ref() const& {
    return {this->__fbthrift_field_outputPositions, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPositions_ref() & {
    return {this->__fbthrift_field_outputPositions, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPositions), __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPositions() const& {
    return {this->__fbthrift_field_outputPositions, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPositions() & {
    return {this->__fbthrift_field_outputPositions, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPositions), __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "pipelines" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pipelines_ref() const& {
    return {this->__fbthrift_field_pipelines, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "pipelines" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pipelines_ref() & {
    return {this->__fbthrift_field_pipelines, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "pipelines" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pipelines_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pipelines), __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "pipelines" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pipelines() const& {
    return {this->__fbthrift_field_pipelines, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "pipelines" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pipelines() & {
    return {this->__fbthrift_field_pipelines, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "pipelines" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pipelines() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pipelines), __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedDrivers_ref() const& {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedDrivers_ref() & {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedDrivers), __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedDrivers() const& {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedDrivers() & {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedDrivers), __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedSplitsWeight_ref() const& {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedSplitsWeight_ref() & {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedSplitsWeight_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedSplitsWeight), __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedSplitsWeight() const& {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedSplitsWeight() & {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedSplitsWeight() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedSplitsWeight), __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedDrivers_ref() const& {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedDrivers_ref() & {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedDrivers), __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedDrivers() const& {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedDrivers() & {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedDrivers), __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedSplitsWeight_ref() const& {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedSplitsWeight_ref() & {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedSplitsWeight_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedSplitsWeight), __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedSplitsWeight() const& {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedSplitsWeight() & {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedSplitsWeight() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedSplitsWeight), __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullGcCount_ref() const& {
    return {this->__fbthrift_field_fullGcCount, __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullGcCount_ref() & {
    return {this->__fbthrift_field_fullGcCount, __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullGcCount_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullGcCount), __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullGcCount() const& {
    return {this->__fbthrift_field_fullGcCount, __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullGcCount() & {
    return {this->__fbthrift_field_fullGcCount, __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "fullGcCount" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullGcCount() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullGcCount), __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullGcTimeInMillis_ref() const& {
    return {this->__fbthrift_field_fullGcTimeInMillis, __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullGcTimeInMillis_ref() & {
    return {this->__fbthrift_field_fullGcTimeInMillis, __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullGcTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullGcTimeInMillis), __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullGcTimeInMillis() const& {
    return {this->__fbthrift_field_fullGcTimeInMillis, __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullGcTimeInMillis() & {
    return {this->__fbthrift_field_fullGcTimeInMillis, __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "fullGcTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullGcTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullGcTimeInMillis), __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runtimeStats_ref() const& {
    return {this->__fbthrift_field_runtimeStats, __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runtimeStats_ref() & {
    return {this->__fbthrift_field_runtimeStats, __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runtimeStats_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runtimeStats), __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runtimeStats() const& {
    return {this->__fbthrift_field_runtimeStats, __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runtimeStats() & {
    return {this->__fbthrift_field_runtimeStats, __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runtimeStats() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runtimeStats), __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "createTimeInMillis" } */
  [[deprecated("Use `FOO.createTimeInMillis().value()` instead of `FOO.get_createTimeInMillis()`")]]
  ::std::int64_t get_createTimeInMillis() const;

  /** Glean { "field": "createTimeInMillis" } */
  [[deprecated("Use `FOO.createTimeInMillis() = BAR` instead of `FOO.set_createTimeInMillis(BAR)`")]]
  ::std::int64_t& set_createTimeInMillis(::std::int64_t createTimeInMillis_);

  /** Glean { "field": "firstStartTimeInMillis" } */
  [[deprecated("Use `FOO.firstStartTimeInMillis().value()` instead of `FOO.get_firstStartTimeInMillis()`")]]
  ::std::int64_t get_firstStartTimeInMillis() const;

  /** Glean { "field": "firstStartTimeInMillis" } */
  [[deprecated("Use `FOO.firstStartTimeInMillis() = BAR` instead of `FOO.set_firstStartTimeInMillis(BAR)`")]]
  ::std::int64_t& set_firstStartTimeInMillis(::std::int64_t firstStartTimeInMillis_);

  /** Glean { "field": "lastStartTimeInMillis" } */
  [[deprecated("Use `FOO.lastStartTimeInMillis().value()` instead of `FOO.get_lastStartTimeInMillis()`")]]
  ::std::int64_t get_lastStartTimeInMillis() const;

  /** Glean { "field": "lastStartTimeInMillis" } */
  [[deprecated("Use `FOO.lastStartTimeInMillis() = BAR` instead of `FOO.set_lastStartTimeInMillis(BAR)`")]]
  ::std::int64_t& set_lastStartTimeInMillis(::std::int64_t lastStartTimeInMillis_);

  /** Glean { "field": "lastEndTimeInMillis" } */
  [[deprecated("Use `FOO.lastEndTimeInMillis().value()` instead of `FOO.get_lastEndTimeInMillis()`")]]
  ::std::int64_t get_lastEndTimeInMillis() const;

  /** Glean { "field": "lastEndTimeInMillis" } */
  [[deprecated("Use `FOO.lastEndTimeInMillis() = BAR` instead of `FOO.set_lastEndTimeInMillis(BAR)`")]]
  ::std::int64_t& set_lastEndTimeInMillis(::std::int64_t lastEndTimeInMillis_);

  /** Glean { "field": "endTimeInMillis" } */
  [[deprecated("Use `FOO.endTimeInMillis().value()` instead of `FOO.get_endTimeInMillis()`")]]
  ::std::int64_t get_endTimeInMillis() const;

  /** Glean { "field": "endTimeInMillis" } */
  [[deprecated("Use `FOO.endTimeInMillis() = BAR` instead of `FOO.set_endTimeInMillis(BAR)`")]]
  ::std::int64_t& set_endTimeInMillis(::std::int64_t endTimeInMillis_);

  /** Glean { "field": "elapsedTimeInNanos" } */
  [[deprecated("Use `FOO.elapsedTimeInNanos().value()` instead of `FOO.get_elapsedTimeInNanos()`")]]
  ::std::int64_t get_elapsedTimeInNanos() const;

  /** Glean { "field": "elapsedTimeInNanos" } */
  [[deprecated("Use `FOO.elapsedTimeInNanos() = BAR` instead of `FOO.set_elapsedTimeInNanos(BAR)`")]]
  ::std::int64_t& set_elapsedTimeInNanos(::std::int64_t elapsedTimeInNanos_);

  /** Glean { "field": "queuedTimeInNanos" } */
  [[deprecated("Use `FOO.queuedTimeInNanos().value()` instead of `FOO.get_queuedTimeInNanos()`")]]
  ::std::int64_t get_queuedTimeInNanos() const;

  /** Glean { "field": "queuedTimeInNanos" } */
  [[deprecated("Use `FOO.queuedTimeInNanos() = BAR` instead of `FOO.set_queuedTimeInNanos(BAR)`")]]
  ::std::int64_t& set_queuedTimeInNanos(::std::int64_t queuedTimeInNanos_);

  /** Glean { "field": "totalDrivers" } */
  [[deprecated("Use `FOO.totalDrivers().value()` instead of `FOO.get_totalDrivers()`")]]
  ::std::int32_t get_totalDrivers() const;

  /** Glean { "field": "totalDrivers" } */
  [[deprecated("Use `FOO.totalDrivers() = BAR` instead of `FOO.set_totalDrivers(BAR)`")]]
  ::std::int32_t& set_totalDrivers(::std::int32_t totalDrivers_);

  /** Glean { "field": "queuedDrivers" } */
  [[deprecated("Use `FOO.queuedDrivers().value()` instead of `FOO.get_queuedDrivers()`")]]
  ::std::int32_t get_queuedDrivers() const;

  /** Glean { "field": "queuedDrivers" } */
  [[deprecated("Use `FOO.queuedDrivers() = BAR` instead of `FOO.set_queuedDrivers(BAR)`")]]
  ::std::int32_t& set_queuedDrivers(::std::int32_t queuedDrivers_);

  /** Glean { "field": "runningDrivers" } */
  [[deprecated("Use `FOO.runningDrivers().value()` instead of `FOO.get_runningDrivers()`")]]
  ::std::int32_t get_runningDrivers() const;

  /** Glean { "field": "runningDrivers" } */
  [[deprecated("Use `FOO.runningDrivers() = BAR` instead of `FOO.set_runningDrivers(BAR)`")]]
  ::std::int32_t& set_runningDrivers(::std::int32_t runningDrivers_);

  /** Glean { "field": "blockedDrivers" } */
  [[deprecated("Use `FOO.blockedDrivers().value()` instead of `FOO.get_blockedDrivers()`")]]
  ::std::int32_t get_blockedDrivers() const;

  /** Glean { "field": "blockedDrivers" } */
  [[deprecated("Use `FOO.blockedDrivers() = BAR` instead of `FOO.set_blockedDrivers(BAR)`")]]
  ::std::int32_t& set_blockedDrivers(::std::int32_t blockedDrivers_);

  /** Glean { "field": "completedDrivers" } */
  [[deprecated("Use `FOO.completedDrivers().value()` instead of `FOO.get_completedDrivers()`")]]
  ::std::int32_t get_completedDrivers() const;

  /** Glean { "field": "completedDrivers" } */
  [[deprecated("Use `FOO.completedDrivers() = BAR` instead of `FOO.set_completedDrivers(BAR)`")]]
  ::std::int32_t& set_completedDrivers(::std::int32_t completedDrivers_);

  /** Glean { "field": "cumulativeUserMemory" } */
  [[deprecated("Use `FOO.cumulativeUserMemory().value()` instead of `FOO.get_cumulativeUserMemory()`")]]
  double get_cumulativeUserMemory() const;

  /** Glean { "field": "cumulativeUserMemory" } */
  [[deprecated("Use `FOO.cumulativeUserMemory() = BAR` instead of `FOO.set_cumulativeUserMemory(BAR)`")]]
  double& set_cumulativeUserMemory(double cumulativeUserMemory_);

  /** Glean { "field": "cumulativeTotalMemory" } */
  [[deprecated("Use `FOO.cumulativeTotalMemory().value()` instead of `FOO.get_cumulativeTotalMemory()`")]]
  double get_cumulativeTotalMemory() const;

  /** Glean { "field": "cumulativeTotalMemory" } */
  [[deprecated("Use `FOO.cumulativeTotalMemory() = BAR` instead of `FOO.set_cumulativeTotalMemory(BAR)`")]]
  double& set_cumulativeTotalMemory(double cumulativeTotalMemory_);

  /** Glean { "field": "userMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.userMemoryReservationInBytes().value()` instead of `FOO.get_userMemoryReservationInBytes()`")]]
  ::std::int64_t get_userMemoryReservationInBytes() const;

  /** Glean { "field": "userMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.userMemoryReservationInBytes() = BAR` instead of `FOO.set_userMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_userMemoryReservationInBytes(::std::int64_t userMemoryReservationInBytes_);

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.revocableMemoryReservationInBytes().value()` instead of `FOO.get_revocableMemoryReservationInBytes()`")]]
  ::std::int64_t get_revocableMemoryReservationInBytes() const;

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.revocableMemoryReservationInBytes() = BAR` instead of `FOO.set_revocableMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_revocableMemoryReservationInBytes(::std::int64_t revocableMemoryReservationInBytes_);

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes().value()` instead of `FOO.get_systemMemoryReservationInBytes()`")]]
  ::std::int64_t get_systemMemoryReservationInBytes() const;

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes() = BAR` instead of `FOO.set_systemMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_);

  /** Glean { "field": "peakUserMemoryInBytes" } */
  [[deprecated("Use `FOO.peakUserMemoryInBytes().value()` instead of `FOO.get_peakUserMemoryInBytes()`")]]
  ::std::int64_t get_peakUserMemoryInBytes() const;

  /** Glean { "field": "peakUserMemoryInBytes" } */
  [[deprecated("Use `FOO.peakUserMemoryInBytes() = BAR` instead of `FOO.set_peakUserMemoryInBytes(BAR)`")]]
  ::std::int64_t& set_peakUserMemoryInBytes(::std::int64_t peakUserMemoryInBytes_);

  /** Glean { "field": "peakTotalMemoryInBytes" } */
  [[deprecated("Use `FOO.peakTotalMemoryInBytes().value()` instead of `FOO.get_peakTotalMemoryInBytes()`")]]
  ::std::int64_t get_peakTotalMemoryInBytes() const;

  /** Glean { "field": "peakTotalMemoryInBytes" } */
  [[deprecated("Use `FOO.peakTotalMemoryInBytes() = BAR` instead of `FOO.set_peakTotalMemoryInBytes(BAR)`")]]
  ::std::int64_t& set_peakTotalMemoryInBytes(::std::int64_t peakTotalMemoryInBytes_);

  /** Glean { "field": "peakNodeTotalMemoryInBytes" } */
  [[deprecated("Use `FOO.peakNodeTotalMemoryInBytes().value()` instead of `FOO.get_peakNodeTotalMemoryInBytes()`")]]
  ::std::int64_t get_peakNodeTotalMemoryInBytes() const;

  /** Glean { "field": "peakNodeTotalMemoryInBytes" } */
  [[deprecated("Use `FOO.peakNodeTotalMemoryInBytes() = BAR` instead of `FOO.set_peakNodeTotalMemoryInBytes(BAR)`")]]
  ::std::int64_t& set_peakNodeTotalMemoryInBytes(::std::int64_t peakNodeTotalMemoryInBytes_);

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  [[deprecated("Use `FOO.totalScheduledTimeInNanos().value()` instead of `FOO.get_totalScheduledTimeInNanos()`")]]
  ::std::int64_t get_totalScheduledTimeInNanos() const;

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  [[deprecated("Use `FOO.totalScheduledTimeInNanos() = BAR` instead of `FOO.set_totalScheduledTimeInNanos(BAR)`")]]
  ::std::int64_t& set_totalScheduledTimeInNanos(::std::int64_t totalScheduledTimeInNanos_);

  /** Glean { "field": "totalCpuTimeInNanos" } */
  [[deprecated("Use `FOO.totalCpuTimeInNanos().value()` instead of `FOO.get_totalCpuTimeInNanos()`")]]
  ::std::int64_t get_totalCpuTimeInNanos() const;

  /** Glean { "field": "totalCpuTimeInNanos" } */
  [[deprecated("Use `FOO.totalCpuTimeInNanos() = BAR` instead of `FOO.set_totalCpuTimeInNanos(BAR)`")]]
  ::std::int64_t& set_totalCpuTimeInNanos(::std::int64_t totalCpuTimeInNanos_);

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  [[deprecated("Use `FOO.totalBlockedTimeInNanos().value()` instead of `FOO.get_totalBlockedTimeInNanos()`")]]
  ::std::int64_t get_totalBlockedTimeInNanos() const;

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  [[deprecated("Use `FOO.totalBlockedTimeInNanos() = BAR` instead of `FOO.set_totalBlockedTimeInNanos(BAR)`")]]
  ::std::int64_t& set_totalBlockedTimeInNanos(::std::int64_t totalBlockedTimeInNanos_);

  /** Glean { "field": "fullyBlocked" } */
  [[deprecated("Use `FOO.fullyBlocked().value()` instead of `FOO.get_fullyBlocked()`")]]
  bool get_fullyBlocked() const;

  /** Glean { "field": "fullyBlocked" } */
  [[deprecated("Use `FOO.fullyBlocked() = BAR` instead of `FOO.set_fullyBlocked(BAR)`")]]
  bool& set_fullyBlocked(bool fullyBlocked_);

  /** Glean { "field": "blockedReasons" } */
  [[deprecated("Use `FOO.blockedReasons().value()` instead of `FOO.get_blockedReasons()`")]]
  const ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>& get_blockedReasons() const&;

  /** Glean { "field": "blockedReasons" } */
  [[deprecated("Use `FOO.blockedReasons().value()` instead of `FOO.get_blockedReasons()`")]]
  ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> get_blockedReasons() &&;

  /** Glean { "field": "blockedReasons" } */
  template <typename T_TaskStats_blockedReasons_struct_setter = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  [[deprecated("Use `FOO.blockedReasons() = BAR` instead of `FOO.set_blockedReasons(BAR)`")]]
  ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>& set_blockedReasons(T_TaskStats_blockedReasons_struct_setter&& blockedReasons_) {
    blockedReasons_ref() = std::forward<T_TaskStats_blockedReasons_struct_setter>(blockedReasons_);
    return __fbthrift_field_blockedReasons;
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  [[deprecated("Use `FOO.totalAllocationInBytes().value()` instead of `FOO.get_totalAllocationInBytes()`")]]
  ::std::int64_t get_totalAllocationInBytes() const;

  /** Glean { "field": "totalAllocationInBytes" } */
  [[deprecated("Use `FOO.totalAllocationInBytes() = BAR` instead of `FOO.set_totalAllocationInBytes(BAR)`")]]
  ::std::int64_t& set_totalAllocationInBytes(::std::int64_t totalAllocationInBytes_);

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.rawInputDataSizeInBytes().value()` instead of `FOO.get_rawInputDataSizeInBytes()`")]]
  ::std::int64_t get_rawInputDataSizeInBytes() const;

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.rawInputDataSizeInBytes() = BAR` instead of `FOO.set_rawInputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_rawInputDataSizeInBytes(::std::int64_t rawInputDataSizeInBytes_);

  /** Glean { "field": "rawInputPositions" } */
  [[deprecated("Use `FOO.rawInputPositions().value()` instead of `FOO.get_rawInputPositions()`")]]
  ::std::int64_t get_rawInputPositions() const;

  /** Glean { "field": "rawInputPositions" } */
  [[deprecated("Use `FOO.rawInputPositions() = BAR` instead of `FOO.set_rawInputPositions(BAR)`")]]
  ::std::int64_t& set_rawInputPositions(::std::int64_t rawInputPositions_);

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.processedInputDataSizeInBytes().value()` instead of `FOO.get_processedInputDataSizeInBytes()`")]]
  ::std::int64_t get_processedInputDataSizeInBytes() const;

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.processedInputDataSizeInBytes() = BAR` instead of `FOO.set_processedInputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_processedInputDataSizeInBytes(::std::int64_t processedInputDataSizeInBytes_);

  /** Glean { "field": "processedInputPositions" } */
  [[deprecated("Use `FOO.processedInputPositions().value()` instead of `FOO.get_processedInputPositions()`")]]
  ::std::int64_t get_processedInputPositions() const;

  /** Glean { "field": "processedInputPositions" } */
  [[deprecated("Use `FOO.processedInputPositions() = BAR` instead of `FOO.set_processedInputPositions(BAR)`")]]
  ::std::int64_t& set_processedInputPositions(::std::int64_t processedInputPositions_);

  /** Glean { "field": "outputDataSizeInBytes" } */
  [[deprecated("Use `FOO.outputDataSizeInBytes().value()` instead of `FOO.get_outputDataSizeInBytes()`")]]
  ::std::int64_t get_outputDataSizeInBytes() const;

  /** Glean { "field": "outputDataSizeInBytes" } */
  [[deprecated("Use `FOO.outputDataSizeInBytes() = BAR` instead of `FOO.set_outputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_outputDataSizeInBytes(::std::int64_t outputDataSizeInBytes_);

  /** Glean { "field": "outputPositions" } */
  [[deprecated("Use `FOO.outputPositions().value()` instead of `FOO.get_outputPositions()`")]]
  ::std::int64_t get_outputPositions() const;

  /** Glean { "field": "outputPositions" } */
  [[deprecated("Use `FOO.outputPositions() = BAR` instead of `FOO.set_outputPositions(BAR)`")]]
  ::std::int64_t& set_outputPositions(::std::int64_t outputPositions_);

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes().value()` instead of `FOO.get_physicalWrittenDataSizeInBytes()`")]]
  ::std::int64_t get_physicalWrittenDataSizeInBytes() const;

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes() = BAR` instead of `FOO.set_physicalWrittenDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_);

  /** Glean { "field": "pipelines" } */
  [[deprecated("Use `FOO.pipelines().value()` instead of `FOO.get_pipelines()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>& get_pipelines() const&;

  /** Glean { "field": "pipelines" } */
  [[deprecated("Use `FOO.pipelines().value()` instead of `FOO.get_pipelines()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats> get_pipelines() &&;

  /** Glean { "field": "pipelines" } */
  template <typename T_TaskStats_pipelines_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>>
  [[deprecated("Use `FOO.pipelines() = BAR` instead of `FOO.set_pipelines(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>& set_pipelines(T_TaskStats_pipelines_struct_setter&& pipelines_) {
    pipelines_ref() = std::forward<T_TaskStats_pipelines_struct_setter>(pipelines_);
    return __fbthrift_field_pipelines;
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  [[deprecated("Use `FOO.queuedPartitionedDrivers().value()` instead of `FOO.get_queuedPartitionedDrivers()`")]]
  ::std::int32_t get_queuedPartitionedDrivers() const;

  /** Glean { "field": "queuedPartitionedDrivers" } */
  [[deprecated("Use `FOO.queuedPartitionedDrivers() = BAR` instead of `FOO.set_queuedPartitionedDrivers(BAR)`")]]
  ::std::int32_t& set_queuedPartitionedDrivers(::std::int32_t queuedPartitionedDrivers_);

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.queuedPartitionedSplitsWeight().value()` instead of `FOO.get_queuedPartitionedSplitsWeight()`")]]
  ::std::int64_t get_queuedPartitionedSplitsWeight() const;

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.queuedPartitionedSplitsWeight() = BAR` instead of `FOO.set_queuedPartitionedSplitsWeight(BAR)`")]]
  ::std::int64_t& set_queuedPartitionedSplitsWeight(::std::int64_t queuedPartitionedSplitsWeight_);

  /** Glean { "field": "runningPartitionedDrivers" } */
  [[deprecated("Use `FOO.runningPartitionedDrivers().value()` instead of `FOO.get_runningPartitionedDrivers()`")]]
  ::std::int32_t get_runningPartitionedDrivers() const;

  /** Glean { "field": "runningPartitionedDrivers" } */
  [[deprecated("Use `FOO.runningPartitionedDrivers() = BAR` instead of `FOO.set_runningPartitionedDrivers(BAR)`")]]
  ::std::int32_t& set_runningPartitionedDrivers(::std::int32_t runningPartitionedDrivers_);

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.runningPartitionedSplitsWeight().value()` instead of `FOO.get_runningPartitionedSplitsWeight()`")]]
  ::std::int64_t get_runningPartitionedSplitsWeight() const;

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.runningPartitionedSplitsWeight() = BAR` instead of `FOO.set_runningPartitionedSplitsWeight(BAR)`")]]
  ::std::int64_t& set_runningPartitionedSplitsWeight(::std::int64_t runningPartitionedSplitsWeight_);

  /** Glean { "field": "fullGcCount" } */
  [[deprecated("Use `FOO.fullGcCount().value()` instead of `FOO.get_fullGcCount()`")]]
  ::std::int32_t get_fullGcCount() const;

  /** Glean { "field": "fullGcCount" } */
  [[deprecated("Use `FOO.fullGcCount() = BAR` instead of `FOO.set_fullGcCount(BAR)`")]]
  ::std::int32_t& set_fullGcCount(::std::int32_t fullGcCount_);

  /** Glean { "field": "fullGcTimeInMillis" } */
  [[deprecated("Use `FOO.fullGcTimeInMillis().value()` instead of `FOO.get_fullGcTimeInMillis()`")]]
  ::std::int64_t get_fullGcTimeInMillis() const;

  /** Glean { "field": "fullGcTimeInMillis" } */
  [[deprecated("Use `FOO.fullGcTimeInMillis() = BAR` instead of `FOO.set_fullGcTimeInMillis(BAR)`")]]
  ::std::int64_t& set_fullGcTimeInMillis(::std::int64_t fullGcTimeInMillis_);

  /** Glean { "field": "runtimeStats" } */
  [[deprecated("Use `FOO.runtimeStats().value()` instead of `FOO.get_runtimeStats()`")]]
  const ::facebook::presto::protocol::cpp2::RuntimeStats& get_runtimeStats() const&;

  /** Glean { "field": "runtimeStats" } */
  [[deprecated("Use `FOO.runtimeStats().value()` instead of `FOO.get_runtimeStats()`")]]
  ::facebook::presto::protocol::cpp2::RuntimeStats get_runtimeStats() &&;

  /** Glean { "field": "runtimeStats" } */
  template <typename T_TaskStats_runtimeStats_struct_setter = ::facebook::presto::protocol::cpp2::RuntimeStats>
  [[deprecated("Use `FOO.runtimeStats() = BAR` instead of `FOO.set_runtimeStats(BAR)`")]]
  ::facebook::presto::protocol::cpp2::RuntimeStats& set_runtimeStats(T_TaskStats_runtimeStats_struct_setter&& runtimeStats_) {
    runtimeStats_ref() = std::forward<T_TaskStats_runtimeStats_struct_setter>(runtimeStats_);
    return __fbthrift_field_runtimeStats;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TaskStats>;
  friend void swap(TaskStats& a, TaskStats& b);
};

template <class Protocol_>
unsigned long TaskStats::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "PipelineStats", "kind": "struct" } */
class PipelineStats final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 35;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::pipelineId,
    ::apache::thrift::ident::firstStartTimeInMillis,
    ::apache::thrift::ident::lastStartTimeInMillis,
    ::apache::thrift::ident::lastEndTimeInMillis,
    ::apache::thrift::ident::inputPipeline,
    ::apache::thrift::ident::outputPipeline,
    ::apache::thrift::ident::totalDrivers,
    ::apache::thrift::ident::queuedDrivers,
    ::apache::thrift::ident::queuedPartitionedDrivers,
    ::apache::thrift::ident::queuedPartitionedSplitsWeight,
    ::apache::thrift::ident::runningDrivers,
    ::apache::thrift::ident::runningPartitionedDrivers,
    ::apache::thrift::ident::runningPartitionedSplitsWeight,
    ::apache::thrift::ident::blockedDrivers,
    ::apache::thrift::ident::completedDrivers,
    ::apache::thrift::ident::userMemoryReservationInBytes,
    ::apache::thrift::ident::revocableMemoryReservationInBytes,
    ::apache::thrift::ident::systemMemoryReservationInBytes,
    ::apache::thrift::ident::queuedTime,
    ::apache::thrift::ident::elapsedTime,
    ::apache::thrift::ident::totalScheduledTimeInNanos,
    ::apache::thrift::ident::totalCpuTimeInNanos,
    ::apache::thrift::ident::totalBlockedTimeInNanos,
    ::apache::thrift::ident::fullyBlocked,
    ::apache::thrift::ident::blockedReasons,
    ::apache::thrift::ident::totalAllocationInBytes,
    ::apache::thrift::ident::rawInputDataSizeInBytes,
    ::apache::thrift::ident::rawInputPositions,
    ::apache::thrift::ident::processedInputDataSizeInBytes,
    ::apache::thrift::ident::processedInputPositions,
    ::apache::thrift::ident::outputDataSizeInBytes,
    ::apache::thrift::ident::outputPositions,
    ::apache::thrift::ident::physicalWrittenDataSizeInBytes,
    ::apache::thrift::ident::operatorSummaries,
    ::apache::thrift::ident::drivers
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::DistributionSnapshot>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::DistributionSnapshot>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::set<::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::BlockedReason>>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::OperatorStats>>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::DriverStats>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = PipelineStats;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  PipelineStats();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  PipelineStats(apache::thrift::FragileConstructor, ::std::int32_t pipelineId__arg, ::std::int64_t firstStartTimeInMillis__arg, ::std::int64_t lastStartTimeInMillis__arg, ::std::int64_t lastEndTimeInMillis__arg, bool inputPipeline__arg, bool outputPipeline__arg, ::std::int32_t totalDrivers__arg, ::std::int32_t queuedDrivers__arg, ::std::int32_t queuedPartitionedDrivers__arg, ::std::int64_t queuedPartitionedSplitsWeight__arg, ::std::int32_t runningDrivers__arg, ::std::int32_t runningPartitionedDrivers__arg, ::std::int64_t runningPartitionedSplitsWeight__arg, ::std::int32_t blockedDrivers__arg, ::std::int32_t completedDrivers__arg, ::std::int64_t userMemoryReservationInBytes__arg, ::std::int64_t revocableMemoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, ::facebook::presto::protocol::cpp2::DistributionSnapshot queuedTime__arg, ::facebook::presto::protocol::cpp2::DistributionSnapshot elapsedTime__arg, ::std::int64_t totalScheduledTimeInNanos__arg, ::std::int64_t totalCpuTimeInNanos__arg, ::std::int64_t totalBlockedTimeInNanos__arg, bool fullyBlocked__arg, ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> blockedReasons__arg, ::std::int64_t totalAllocationInBytes__arg, ::std::int64_t rawInputDataSizeInBytes__arg, ::std::int64_t rawInputPositions__arg, ::std::int64_t processedInputDataSizeInBytes__arg, ::std::int64_t processedInputPositions__arg, ::std::int64_t outputDataSizeInBytes__arg, ::std::int64_t outputPositions__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> operatorSummaries__arg, ::std::vector<::facebook::presto::protocol::cpp2::DriverStats> drivers__arg);

  PipelineStats(PipelineStats&&) noexcept;

  PipelineStats(const PipelineStats& src);


  PipelineStats& operator=(PipelineStats&&) noexcept;
  PipelineStats& operator=(const PipelineStats& src);

  ~PipelineStats();

 private:
  ::std::int32_t __fbthrift_field_pipelineId;
 private:
  ::std::int64_t __fbthrift_field_firstStartTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_lastStartTimeInMillis;
 private:
  ::std::int64_t __fbthrift_field_lastEndTimeInMillis;
 private:
  bool __fbthrift_field_inputPipeline;
 private:
  bool __fbthrift_field_outputPipeline;
 private:
  ::std::int32_t __fbthrift_field_totalDrivers;
 private:
  ::std::int32_t __fbthrift_field_queuedDrivers;
 private:
  ::std::int32_t __fbthrift_field_queuedPartitionedDrivers;
 private:
  ::std::int64_t __fbthrift_field_queuedPartitionedSplitsWeight;
 private:
  ::std::int32_t __fbthrift_field_runningDrivers;
 private:
  ::std::int32_t __fbthrift_field_runningPartitionedDrivers;
 private:
  ::std::int64_t __fbthrift_field_runningPartitionedSplitsWeight;
 private:
  ::std::int32_t __fbthrift_field_blockedDrivers;
 private:
  ::std::int32_t __fbthrift_field_completedDrivers;
 private:
  ::std::int64_t __fbthrift_field_userMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_revocableMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_systemMemoryReservationInBytes;
 private:
  ::facebook::presto::protocol::cpp2::DistributionSnapshot __fbthrift_field_queuedTime;
 private:
  ::facebook::presto::protocol::cpp2::DistributionSnapshot __fbthrift_field_elapsedTime;
 private:
  ::std::int64_t __fbthrift_field_totalScheduledTimeInNanos;
 private:
  ::std::int64_t __fbthrift_field_totalCpuTimeInNanos;
 private:
  ::std::int64_t __fbthrift_field_totalBlockedTimeInNanos;
 private:
  bool __fbthrift_field_fullyBlocked;
 private:
  ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> __fbthrift_field_blockedReasons;
 private:
  ::std::int64_t __fbthrift_field_totalAllocationInBytes;
 private:
  ::std::int64_t __fbthrift_field_rawInputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_rawInputPositions;
 private:
  ::std::int64_t __fbthrift_field_processedInputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_processedInputPositions;
 private:
  ::std::int64_t __fbthrift_field_outputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_outputPositions;
 private:
  ::std::int64_t __fbthrift_field_physicalWrittenDataSizeInBytes;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> __fbthrift_field_operatorSummaries;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::DriverStats> __fbthrift_field_drivers;
 private:
  apache::thrift::detail::isset_bitset<35, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const PipelineStats&) const;
  bool operator<(const PipelineStats&) const;

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pipelineId_ref() const& {
    return {this->__fbthrift_field_pipelineId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pipelineId_ref() & {
    return {this->__fbthrift_field_pipelineId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pipelineId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pipelineId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pipelineId() const& {
    return {this->__fbthrift_field_pipelineId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pipelineId() & {
    return {this->__fbthrift_field_pipelineId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pipelineId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pipelineId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> firstStartTimeInMillis_ref() const& {
    return {this->__fbthrift_field_firstStartTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> firstStartTimeInMillis_ref() & {
    return {this->__fbthrift_field_firstStartTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> firstStartTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_firstStartTimeInMillis), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> firstStartTimeInMillis() const& {
    return {this->__fbthrift_field_firstStartTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> firstStartTimeInMillis() & {
    return {this->__fbthrift_field_firstStartTimeInMillis, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "firstStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> firstStartTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_firstStartTimeInMillis), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastStartTimeInMillis_ref() const& {
    return {this->__fbthrift_field_lastStartTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastStartTimeInMillis_ref() & {
    return {this->__fbthrift_field_lastStartTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastStartTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastStartTimeInMillis), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastStartTimeInMillis() const& {
    return {this->__fbthrift_field_lastStartTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastStartTimeInMillis() & {
    return {this->__fbthrift_field_lastStartTimeInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastStartTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastStartTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastStartTimeInMillis), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastEndTimeInMillis_ref() const& {
    return {this->__fbthrift_field_lastEndTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastEndTimeInMillis_ref() & {
    return {this->__fbthrift_field_lastEndTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastEndTimeInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastEndTimeInMillis), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastEndTimeInMillis() const& {
    return {this->__fbthrift_field_lastEndTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastEndTimeInMillis() & {
    return {this->__fbthrift_field_lastEndTimeInMillis, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lastEndTimeInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastEndTimeInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastEndTimeInMillis), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inputPipeline_ref() const& {
    return {this->__fbthrift_field_inputPipeline, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inputPipeline_ref() & {
    return {this->__fbthrift_field_inputPipeline, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inputPipeline_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inputPipeline), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inputPipeline() const& {
    return {this->__fbthrift_field_inputPipeline, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inputPipeline() & {
    return {this->__fbthrift_field_inputPipeline, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inputPipeline() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inputPipeline), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "outputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPipeline_ref() const& {
    return {this->__fbthrift_field_outputPipeline, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "outputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPipeline_ref() & {
    return {this->__fbthrift_field_outputPipeline, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "outputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPipeline_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPipeline), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "outputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPipeline() const& {
    return {this->__fbthrift_field_outputPipeline, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "outputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPipeline() & {
    return {this->__fbthrift_field_outputPipeline, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "outputPipeline" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPipeline() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPipeline), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalDrivers_ref() const& {
    return {this->__fbthrift_field_totalDrivers, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalDrivers_ref() & {
    return {this->__fbthrift_field_totalDrivers, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalDrivers), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalDrivers() const& {
    return {this->__fbthrift_field_totalDrivers, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalDrivers() & {
    return {this->__fbthrift_field_totalDrivers, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalDrivers), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedDrivers_ref() const& {
    return {this->__fbthrift_field_queuedDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedDrivers_ref() & {
    return {this->__fbthrift_field_queuedDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedDrivers), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedDrivers() const& {
    return {this->__fbthrift_field_queuedDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedDrivers() & {
    return {this->__fbthrift_field_queuedDrivers, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedDrivers), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedDrivers_ref() const& {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedDrivers_ref() & {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedDrivers), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedDrivers() const& {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedDrivers() & {
    return {this->__fbthrift_field_queuedPartitionedDrivers, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedDrivers), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedSplitsWeight_ref() const& {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedSplitsWeight_ref() & {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedSplitsWeight_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedSplitsWeight), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedPartitionedSplitsWeight() const& {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedPartitionedSplitsWeight() & {
    return {this->__fbthrift_field_queuedPartitionedSplitsWeight, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedPartitionedSplitsWeight() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedPartitionedSplitsWeight), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningDrivers_ref() const& {
    return {this->__fbthrift_field_runningDrivers, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningDrivers_ref() & {
    return {this->__fbthrift_field_runningDrivers, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningDrivers), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningDrivers() const& {
    return {this->__fbthrift_field_runningDrivers, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningDrivers() & {
    return {this->__fbthrift_field_runningDrivers, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "runningDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningDrivers), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedDrivers_ref() const& {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedDrivers_ref() & {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedDrivers), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedDrivers() const& {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedDrivers() & {
    return {this->__fbthrift_field_runningPartitionedDrivers, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "runningPartitionedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedDrivers), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedSplitsWeight_ref() const& {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedSplitsWeight_ref() & {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedSplitsWeight_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedSplitsWeight), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runningPartitionedSplitsWeight() const& {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runningPartitionedSplitsWeight() & {
    return {this->__fbthrift_field_runningPartitionedSplitsWeight, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runningPartitionedSplitsWeight() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runningPartitionedSplitsWeight), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedDrivers_ref() const& {
    return {this->__fbthrift_field_blockedDrivers, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedDrivers_ref() & {
    return {this->__fbthrift_field_blockedDrivers, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedDrivers), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedDrivers() const& {
    return {this->__fbthrift_field_blockedDrivers, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedDrivers() & {
    return {this->__fbthrift_field_blockedDrivers, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "blockedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedDrivers), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> completedDrivers_ref() const& {
    return {this->__fbthrift_field_completedDrivers, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> completedDrivers_ref() & {
    return {this->__fbthrift_field_completedDrivers, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> completedDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_completedDrivers), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> completedDrivers() const& {
    return {this->__fbthrift_field_completedDrivers, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> completedDrivers() & {
    return {this->__fbthrift_field_completedDrivers, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "completedDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> completedDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_completedDrivers), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> userMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> userMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> userMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userMemoryReservationInBytes), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> userMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> userMemoryReservationInBytes() & {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> userMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userMemoryReservationInBytes), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> revocableMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> revocableMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> revocableMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_revocableMemoryReservationInBytes), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> revocableMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> revocableMemoryReservationInBytes() & {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> revocableMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_revocableMemoryReservationInBytes), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedTime_ref() const& {
    return {this->__fbthrift_field_queuedTime, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedTime_ref() & {
    return {this->__fbthrift_field_queuedTime, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedTime), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queuedTime() const& {
    return {this->__fbthrift_field_queuedTime, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queuedTime() & {
    return {this->__fbthrift_field_queuedTime, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "queuedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queuedTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queuedTime), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> elapsedTime_ref() const& {
    return {this->__fbthrift_field_elapsedTime, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> elapsedTime_ref() & {
    return {this->__fbthrift_field_elapsedTime, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> elapsedTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_elapsedTime), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> elapsedTime() const& {
    return {this->__fbthrift_field_elapsedTime, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> elapsedTime() & {
    return {this->__fbthrift_field_elapsedTime, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "elapsedTime" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> elapsedTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_elapsedTime), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalScheduledTimeInNanos_ref() const& {
    return {this->__fbthrift_field_totalScheduledTimeInNanos, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalScheduledTimeInNanos_ref() & {
    return {this->__fbthrift_field_totalScheduledTimeInNanos, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalScheduledTimeInNanos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalScheduledTimeInNanos), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalScheduledTimeInNanos() const& {
    return {this->__fbthrift_field_totalScheduledTimeInNanos, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalScheduledTimeInNanos() & {
    return {this->__fbthrift_field_totalScheduledTimeInNanos, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalScheduledTimeInNanos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalScheduledTimeInNanos), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalCpuTimeInNanos_ref() const& {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalCpuTimeInNanos_ref() & {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalCpuTimeInNanos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalCpuTimeInNanos), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalCpuTimeInNanos() const& {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalCpuTimeInNanos() & {
    return {this->__fbthrift_field_totalCpuTimeInNanos, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalCpuTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalCpuTimeInNanos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalCpuTimeInNanos), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBlockedTimeInNanos_ref() const& {
    return {this->__fbthrift_field_totalBlockedTimeInNanos, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBlockedTimeInNanos_ref() & {
    return {this->__fbthrift_field_totalBlockedTimeInNanos, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBlockedTimeInNanos_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBlockedTimeInNanos), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalBlockedTimeInNanos() const& {
    return {this->__fbthrift_field_totalBlockedTimeInNanos, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalBlockedTimeInNanos() & {
    return {this->__fbthrift_field_totalBlockedTimeInNanos, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalBlockedTimeInNanos() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalBlockedTimeInNanos), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullyBlocked_ref() const& {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullyBlocked_ref() & {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullyBlocked_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullyBlocked), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fullyBlocked() const& {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fullyBlocked() & {
    return {this->__fbthrift_field_fullyBlocked, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "fullyBlocked" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fullyBlocked() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fullyBlocked), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedReasons_ref() const& {
    return {this->__fbthrift_field_blockedReasons, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedReasons_ref() & {
    return {this->__fbthrift_field_blockedReasons, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedReasons_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedReasons), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedReasons() const& {
    return {this->__fbthrift_field_blockedReasons, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedReasons() & {
    return {this->__fbthrift_field_blockedReasons, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedReasons" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedReasons() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedReasons), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalAllocationInBytes_ref() const& {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalAllocationInBytes_ref() & {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalAllocationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalAllocationInBytes), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalAllocationInBytes() const& {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalAllocationInBytes() & {
    return {this->__fbthrift_field_totalAllocationInBytes, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalAllocationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalAllocationInBytes), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputDataSizeInBytes), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputDataSizeInBytes() const& {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputDataSizeInBytes() & {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputDataSizeInBytes), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputPositions_ref() const& {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputPositions_ref() & {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputPositions), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputPositions() const& {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputPositions() & {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputPositions), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputDataSizeInBytes), __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputDataSizeInBytes() const& {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputDataSizeInBytes() & {
    return {this->__fbthrift_field_processedInputDataSizeInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputDataSizeInBytes), __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputPositions_ref() const& {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputPositions_ref() & {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputPositions), __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> processedInputPositions() const& {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> processedInputPositions() & {
    return {this->__fbthrift_field_processedInputPositions, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "processedInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> processedInputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_processedInputPositions), __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputDataSizeInBytes), __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputDataSizeInBytes() const& {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputDataSizeInBytes() & {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputDataSizeInBytes), __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPositions_ref() const& {
    return {this->__fbthrift_field_outputPositions, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPositions_ref() & {
    return {this->__fbthrift_field_outputPositions, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPositions), __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPositions() const& {
    return {this->__fbthrift_field_outputPositions, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPositions() & {
    return {this->__fbthrift_field_outputPositions, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPositions), __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "operatorSummaries" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> operatorSummaries_ref() const& {
    return {this->__fbthrift_field_operatorSummaries, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "operatorSummaries" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> operatorSummaries_ref() & {
    return {this->__fbthrift_field_operatorSummaries, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "operatorSummaries" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> operatorSummaries_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_operatorSummaries), __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "operatorSummaries" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> operatorSummaries() const& {
    return {this->__fbthrift_field_operatorSummaries, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "operatorSummaries" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> operatorSummaries() & {
    return {this->__fbthrift_field_operatorSummaries, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "operatorSummaries" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> operatorSummaries() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_operatorSummaries), __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "drivers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> drivers_ref() const& {
    return {this->__fbthrift_field_drivers, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "drivers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> drivers_ref() & {
    return {this->__fbthrift_field_drivers, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "drivers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> drivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_drivers), __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "drivers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> drivers() const& {
    return {this->__fbthrift_field_drivers, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "drivers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> drivers() & {
    return {this->__fbthrift_field_drivers, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "drivers" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> drivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_drivers), __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "pipelineId" } */
  [[deprecated("Use `FOO.pipelineId().value()` instead of `FOO.get_pipelineId()`")]]
  ::std::int32_t get_pipelineId() const;

  /** Glean { "field": "pipelineId" } */
  [[deprecated("Use `FOO.pipelineId() = BAR` instead of `FOO.set_pipelineId(BAR)`")]]
  ::std::int32_t& set_pipelineId(::std::int32_t pipelineId_);

  /** Glean { "field": "firstStartTimeInMillis" } */
  [[deprecated("Use `FOO.firstStartTimeInMillis().value()` instead of `FOO.get_firstStartTimeInMillis()`")]]
  ::std::int64_t get_firstStartTimeInMillis() const;

  /** Glean { "field": "firstStartTimeInMillis" } */
  [[deprecated("Use `FOO.firstStartTimeInMillis() = BAR` instead of `FOO.set_firstStartTimeInMillis(BAR)`")]]
  ::std::int64_t& set_firstStartTimeInMillis(::std::int64_t firstStartTimeInMillis_);

  /** Glean { "field": "lastStartTimeInMillis" } */
  [[deprecated("Use `FOO.lastStartTimeInMillis().value()` instead of `FOO.get_lastStartTimeInMillis()`")]]
  ::std::int64_t get_lastStartTimeInMillis() const;

  /** Glean { "field": "lastStartTimeInMillis" } */
  [[deprecated("Use `FOO.lastStartTimeInMillis() = BAR` instead of `FOO.set_lastStartTimeInMillis(BAR)`")]]
  ::std::int64_t& set_lastStartTimeInMillis(::std::int64_t lastStartTimeInMillis_);

  /** Glean { "field": "lastEndTimeInMillis" } */
  [[deprecated("Use `FOO.lastEndTimeInMillis().value()` instead of `FOO.get_lastEndTimeInMillis()`")]]
  ::std::int64_t get_lastEndTimeInMillis() const;

  /** Glean { "field": "lastEndTimeInMillis" } */
  [[deprecated("Use `FOO.lastEndTimeInMillis() = BAR` instead of `FOO.set_lastEndTimeInMillis(BAR)`")]]
  ::std::int64_t& set_lastEndTimeInMillis(::std::int64_t lastEndTimeInMillis_);

  /** Glean { "field": "inputPipeline" } */
  [[deprecated("Use `FOO.inputPipeline().value()` instead of `FOO.get_inputPipeline()`")]]
  bool get_inputPipeline() const;

  /** Glean { "field": "inputPipeline" } */
  [[deprecated("Use `FOO.inputPipeline() = BAR` instead of `FOO.set_inputPipeline(BAR)`")]]
  bool& set_inputPipeline(bool inputPipeline_);

  /** Glean { "field": "outputPipeline" } */
  [[deprecated("Use `FOO.outputPipeline().value()` instead of `FOO.get_outputPipeline()`")]]
  bool get_outputPipeline() const;

  /** Glean { "field": "outputPipeline" } */
  [[deprecated("Use `FOO.outputPipeline() = BAR` instead of `FOO.set_outputPipeline(BAR)`")]]
  bool& set_outputPipeline(bool outputPipeline_);

  /** Glean { "field": "totalDrivers" } */
  [[deprecated("Use `FOO.totalDrivers().value()` instead of `FOO.get_totalDrivers()`")]]
  ::std::int32_t get_totalDrivers() const;

  /** Glean { "field": "totalDrivers" } */
  [[deprecated("Use `FOO.totalDrivers() = BAR` instead of `FOO.set_totalDrivers(BAR)`")]]
  ::std::int32_t& set_totalDrivers(::std::int32_t totalDrivers_);

  /** Glean { "field": "queuedDrivers" } */
  [[deprecated("Use `FOO.queuedDrivers().value()` instead of `FOO.get_queuedDrivers()`")]]
  ::std::int32_t get_queuedDrivers() const;

  /** Glean { "field": "queuedDrivers" } */
  [[deprecated("Use `FOO.queuedDrivers() = BAR` instead of `FOO.set_queuedDrivers(BAR)`")]]
  ::std::int32_t& set_queuedDrivers(::std::int32_t queuedDrivers_);

  /** Glean { "field": "queuedPartitionedDrivers" } */
  [[deprecated("Use `FOO.queuedPartitionedDrivers().value()` instead of `FOO.get_queuedPartitionedDrivers()`")]]
  ::std::int32_t get_queuedPartitionedDrivers() const;

  /** Glean { "field": "queuedPartitionedDrivers" } */
  [[deprecated("Use `FOO.queuedPartitionedDrivers() = BAR` instead of `FOO.set_queuedPartitionedDrivers(BAR)`")]]
  ::std::int32_t& set_queuedPartitionedDrivers(::std::int32_t queuedPartitionedDrivers_);

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.queuedPartitionedSplitsWeight().value()` instead of `FOO.get_queuedPartitionedSplitsWeight()`")]]
  ::std::int64_t get_queuedPartitionedSplitsWeight() const;

  /** Glean { "field": "queuedPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.queuedPartitionedSplitsWeight() = BAR` instead of `FOO.set_queuedPartitionedSplitsWeight(BAR)`")]]
  ::std::int64_t& set_queuedPartitionedSplitsWeight(::std::int64_t queuedPartitionedSplitsWeight_);

  /** Glean { "field": "runningDrivers" } */
  [[deprecated("Use `FOO.runningDrivers().value()` instead of `FOO.get_runningDrivers()`")]]
  ::std::int32_t get_runningDrivers() const;

  /** Glean { "field": "runningDrivers" } */
  [[deprecated("Use `FOO.runningDrivers() = BAR` instead of `FOO.set_runningDrivers(BAR)`")]]
  ::std::int32_t& set_runningDrivers(::std::int32_t runningDrivers_);

  /** Glean { "field": "runningPartitionedDrivers" } */
  [[deprecated("Use `FOO.runningPartitionedDrivers().value()` instead of `FOO.get_runningPartitionedDrivers()`")]]
  ::std::int32_t get_runningPartitionedDrivers() const;

  /** Glean { "field": "runningPartitionedDrivers" } */
  [[deprecated("Use `FOO.runningPartitionedDrivers() = BAR` instead of `FOO.set_runningPartitionedDrivers(BAR)`")]]
  ::std::int32_t& set_runningPartitionedDrivers(::std::int32_t runningPartitionedDrivers_);

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.runningPartitionedSplitsWeight().value()` instead of `FOO.get_runningPartitionedSplitsWeight()`")]]
  ::std::int64_t get_runningPartitionedSplitsWeight() const;

  /** Glean { "field": "runningPartitionedSplitsWeight" } */
  [[deprecated("Use `FOO.runningPartitionedSplitsWeight() = BAR` instead of `FOO.set_runningPartitionedSplitsWeight(BAR)`")]]
  ::std::int64_t& set_runningPartitionedSplitsWeight(::std::int64_t runningPartitionedSplitsWeight_);

  /** Glean { "field": "blockedDrivers" } */
  [[deprecated("Use `FOO.blockedDrivers().value()` instead of `FOO.get_blockedDrivers()`")]]
  ::std::int32_t get_blockedDrivers() const;

  /** Glean { "field": "blockedDrivers" } */
  [[deprecated("Use `FOO.blockedDrivers() = BAR` instead of `FOO.set_blockedDrivers(BAR)`")]]
  ::std::int32_t& set_blockedDrivers(::std::int32_t blockedDrivers_);

  /** Glean { "field": "completedDrivers" } */
  [[deprecated("Use `FOO.completedDrivers().value()` instead of `FOO.get_completedDrivers()`")]]
  ::std::int32_t get_completedDrivers() const;

  /** Glean { "field": "completedDrivers" } */
  [[deprecated("Use `FOO.completedDrivers() = BAR` instead of `FOO.set_completedDrivers(BAR)`")]]
  ::std::int32_t& set_completedDrivers(::std::int32_t completedDrivers_);

  /** Glean { "field": "userMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.userMemoryReservationInBytes().value()` instead of `FOO.get_userMemoryReservationInBytes()`")]]
  ::std::int64_t get_userMemoryReservationInBytes() const;

  /** Glean { "field": "userMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.userMemoryReservationInBytes() = BAR` instead of `FOO.set_userMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_userMemoryReservationInBytes(::std::int64_t userMemoryReservationInBytes_);

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.revocableMemoryReservationInBytes().value()` instead of `FOO.get_revocableMemoryReservationInBytes()`")]]
  ::std::int64_t get_revocableMemoryReservationInBytes() const;

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.revocableMemoryReservationInBytes() = BAR` instead of `FOO.set_revocableMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_revocableMemoryReservationInBytes(::std::int64_t revocableMemoryReservationInBytes_);

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes().value()` instead of `FOO.get_systemMemoryReservationInBytes()`")]]
  ::std::int64_t get_systemMemoryReservationInBytes() const;

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes() = BAR` instead of `FOO.set_systemMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_);

  /** Glean { "field": "queuedTime" } */
  [[deprecated("Use `FOO.queuedTime().value()` instead of `FOO.get_queuedTime()`")]]
  const ::facebook::presto::protocol::cpp2::DistributionSnapshot& get_queuedTime() const&;

  /** Glean { "field": "queuedTime" } */
  [[deprecated("Use `FOO.queuedTime().value()` instead of `FOO.get_queuedTime()`")]]
  ::facebook::presto::protocol::cpp2::DistributionSnapshot get_queuedTime() &&;

  /** Glean { "field": "queuedTime" } */
  template <typename T_PipelineStats_queuedTime_struct_setter = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  [[deprecated("Use `FOO.queuedTime() = BAR` instead of `FOO.set_queuedTime(BAR)`")]]
  ::facebook::presto::protocol::cpp2::DistributionSnapshot& set_queuedTime(T_PipelineStats_queuedTime_struct_setter&& queuedTime_) {
    queuedTime_ref() = std::forward<T_PipelineStats_queuedTime_struct_setter>(queuedTime_);
    return __fbthrift_field_queuedTime;
  }

  /** Glean { "field": "elapsedTime" } */
  [[deprecated("Use `FOO.elapsedTime().value()` instead of `FOO.get_elapsedTime()`")]]
  const ::facebook::presto::protocol::cpp2::DistributionSnapshot& get_elapsedTime() const&;

  /** Glean { "field": "elapsedTime" } */
  [[deprecated("Use `FOO.elapsedTime().value()` instead of `FOO.get_elapsedTime()`")]]
  ::facebook::presto::protocol::cpp2::DistributionSnapshot get_elapsedTime() &&;

  /** Glean { "field": "elapsedTime" } */
  template <typename T_PipelineStats_elapsedTime_struct_setter = ::facebook::presto::protocol::cpp2::DistributionSnapshot>
  [[deprecated("Use `FOO.elapsedTime() = BAR` instead of `FOO.set_elapsedTime(BAR)`")]]
  ::facebook::presto::protocol::cpp2::DistributionSnapshot& set_elapsedTime(T_PipelineStats_elapsedTime_struct_setter&& elapsedTime_) {
    elapsedTime_ref() = std::forward<T_PipelineStats_elapsedTime_struct_setter>(elapsedTime_);
    return __fbthrift_field_elapsedTime;
  }

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  [[deprecated("Use `FOO.totalScheduledTimeInNanos().value()` instead of `FOO.get_totalScheduledTimeInNanos()`")]]
  ::std::int64_t get_totalScheduledTimeInNanos() const;

  /** Glean { "field": "totalScheduledTimeInNanos" } */
  [[deprecated("Use `FOO.totalScheduledTimeInNanos() = BAR` instead of `FOO.set_totalScheduledTimeInNanos(BAR)`")]]
  ::std::int64_t& set_totalScheduledTimeInNanos(::std::int64_t totalScheduledTimeInNanos_);

  /** Glean { "field": "totalCpuTimeInNanos" } */
  [[deprecated("Use `FOO.totalCpuTimeInNanos().value()` instead of `FOO.get_totalCpuTimeInNanos()`")]]
  ::std::int64_t get_totalCpuTimeInNanos() const;

  /** Glean { "field": "totalCpuTimeInNanos" } */
  [[deprecated("Use `FOO.totalCpuTimeInNanos() = BAR` instead of `FOO.set_totalCpuTimeInNanos(BAR)`")]]
  ::std::int64_t& set_totalCpuTimeInNanos(::std::int64_t totalCpuTimeInNanos_);

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  [[deprecated("Use `FOO.totalBlockedTimeInNanos().value()` instead of `FOO.get_totalBlockedTimeInNanos()`")]]
  ::std::int64_t get_totalBlockedTimeInNanos() const;

  /** Glean { "field": "totalBlockedTimeInNanos" } */
  [[deprecated("Use `FOO.totalBlockedTimeInNanos() = BAR` instead of `FOO.set_totalBlockedTimeInNanos(BAR)`")]]
  ::std::int64_t& set_totalBlockedTimeInNanos(::std::int64_t totalBlockedTimeInNanos_);

  /** Glean { "field": "fullyBlocked" } */
  [[deprecated("Use `FOO.fullyBlocked().value()` instead of `FOO.get_fullyBlocked()`")]]
  bool get_fullyBlocked() const;

  /** Glean { "field": "fullyBlocked" } */
  [[deprecated("Use `FOO.fullyBlocked() = BAR` instead of `FOO.set_fullyBlocked(BAR)`")]]
  bool& set_fullyBlocked(bool fullyBlocked_);

  /** Glean { "field": "blockedReasons" } */
  [[deprecated("Use `FOO.blockedReasons().value()` instead of `FOO.get_blockedReasons()`")]]
  const ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>& get_blockedReasons() const&;

  /** Glean { "field": "blockedReasons" } */
  [[deprecated("Use `FOO.blockedReasons().value()` instead of `FOO.get_blockedReasons()`")]]
  ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> get_blockedReasons() &&;

  /** Glean { "field": "blockedReasons" } */
  template <typename T_PipelineStats_blockedReasons_struct_setter = ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>>
  [[deprecated("Use `FOO.blockedReasons() = BAR` instead of `FOO.set_blockedReasons(BAR)`")]]
  ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>& set_blockedReasons(T_PipelineStats_blockedReasons_struct_setter&& blockedReasons_) {
    blockedReasons_ref() = std::forward<T_PipelineStats_blockedReasons_struct_setter>(blockedReasons_);
    return __fbthrift_field_blockedReasons;
  }

  /** Glean { "field": "totalAllocationInBytes" } */
  [[deprecated("Use `FOO.totalAllocationInBytes().value()` instead of `FOO.get_totalAllocationInBytes()`")]]
  ::std::int64_t get_totalAllocationInBytes() const;

  /** Glean { "field": "totalAllocationInBytes" } */
  [[deprecated("Use `FOO.totalAllocationInBytes() = BAR` instead of `FOO.set_totalAllocationInBytes(BAR)`")]]
  ::std::int64_t& set_totalAllocationInBytes(::std::int64_t totalAllocationInBytes_);

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.rawInputDataSizeInBytes().value()` instead of `FOO.get_rawInputDataSizeInBytes()`")]]
  ::std::int64_t get_rawInputDataSizeInBytes() const;

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.rawInputDataSizeInBytes() = BAR` instead of `FOO.set_rawInputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_rawInputDataSizeInBytes(::std::int64_t rawInputDataSizeInBytes_);

  /** Glean { "field": "rawInputPositions" } */
  [[deprecated("Use `FOO.rawInputPositions().value()` instead of `FOO.get_rawInputPositions()`")]]
  ::std::int64_t get_rawInputPositions() const;

  /** Glean { "field": "rawInputPositions" } */
  [[deprecated("Use `FOO.rawInputPositions() = BAR` instead of `FOO.set_rawInputPositions(BAR)`")]]
  ::std::int64_t& set_rawInputPositions(::std::int64_t rawInputPositions_);

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.processedInputDataSizeInBytes().value()` instead of `FOO.get_processedInputDataSizeInBytes()`")]]
  ::std::int64_t get_processedInputDataSizeInBytes() const;

  /** Glean { "field": "processedInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.processedInputDataSizeInBytes() = BAR` instead of `FOO.set_processedInputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_processedInputDataSizeInBytes(::std::int64_t processedInputDataSizeInBytes_);

  /** Glean { "field": "processedInputPositions" } */
  [[deprecated("Use `FOO.processedInputPositions().value()` instead of `FOO.get_processedInputPositions()`")]]
  ::std::int64_t get_processedInputPositions() const;

  /** Glean { "field": "processedInputPositions" } */
  [[deprecated("Use `FOO.processedInputPositions() = BAR` instead of `FOO.set_processedInputPositions(BAR)`")]]
  ::std::int64_t& set_processedInputPositions(::std::int64_t processedInputPositions_);

  /** Glean { "field": "outputDataSizeInBytes" } */
  [[deprecated("Use `FOO.outputDataSizeInBytes().value()` instead of `FOO.get_outputDataSizeInBytes()`")]]
  ::std::int64_t get_outputDataSizeInBytes() const;

  /** Glean { "field": "outputDataSizeInBytes" } */
  [[deprecated("Use `FOO.outputDataSizeInBytes() = BAR` instead of `FOO.set_outputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_outputDataSizeInBytes(::std::int64_t outputDataSizeInBytes_);

  /** Glean { "field": "outputPositions" } */
  [[deprecated("Use `FOO.outputPositions().value()` instead of `FOO.get_outputPositions()`")]]
  ::std::int64_t get_outputPositions() const;

  /** Glean { "field": "outputPositions" } */
  [[deprecated("Use `FOO.outputPositions() = BAR` instead of `FOO.set_outputPositions(BAR)`")]]
  ::std::int64_t& set_outputPositions(::std::int64_t outputPositions_);

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes().value()` instead of `FOO.get_physicalWrittenDataSizeInBytes()`")]]
  ::std::int64_t get_physicalWrittenDataSizeInBytes() const;

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes() = BAR` instead of `FOO.set_physicalWrittenDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_);

  /** Glean { "field": "operatorSummaries" } */
  [[deprecated("Use `FOO.operatorSummaries().value()` instead of `FOO.get_operatorSummaries()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>& get_operatorSummaries() const&;

  /** Glean { "field": "operatorSummaries" } */
  [[deprecated("Use `FOO.operatorSummaries().value()` instead of `FOO.get_operatorSummaries()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> get_operatorSummaries() &&;

  /** Glean { "field": "operatorSummaries" } */
  template <typename T_PipelineStats_operatorSummaries_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>
  [[deprecated("Use `FOO.operatorSummaries() = BAR` instead of `FOO.set_operatorSummaries(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>& set_operatorSummaries(T_PipelineStats_operatorSummaries_struct_setter&& operatorSummaries_) {
    operatorSummaries_ref() = std::forward<T_PipelineStats_operatorSummaries_struct_setter>(operatorSummaries_);
    return __fbthrift_field_operatorSummaries;
  }

  /** Glean { "field": "drivers" } */
  [[deprecated("Use `FOO.drivers().value()` instead of `FOO.get_drivers()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>& get_drivers() const&;

  /** Glean { "field": "drivers" } */
  [[deprecated("Use `FOO.drivers().value()` instead of `FOO.get_drivers()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::DriverStats> get_drivers() &&;

  /** Glean { "field": "drivers" } */
  template <typename T_PipelineStats_drivers_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>>
  [[deprecated("Use `FOO.drivers() = BAR` instead of `FOO.set_drivers(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>& set_drivers(T_PipelineStats_drivers_struct_setter&& drivers_) {
    drivers_ref() = std::forward<T_PipelineStats_drivers_struct_setter>(drivers_);
    return __fbthrift_field_drivers;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<PipelineStats>;
  friend void swap(PipelineStats& a, PipelineStats& b);
};

template <class Protocol_>
unsigned long PipelineStats::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "RuntimeMetric", "kind": "struct" } */
class RuntimeMetric final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::sum,
    ::apache::thrift::ident::count,
    ::apache::thrift::ident::max,
    ::apache::thrift::ident::min,
    ::apache::thrift::ident::unit
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::RuntimeUnit>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RuntimeMetric;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  RuntimeMetric();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RuntimeMetric(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::int64_t sum__arg, ::std::int64_t count__arg, ::std::int64_t max__arg, ::std::int64_t min__arg, ::facebook::presto::protocol::cpp2::RuntimeUnit unit__arg);

  RuntimeMetric(RuntimeMetric&&) noexcept;

  RuntimeMetric(const RuntimeMetric& src);


  RuntimeMetric& operator=(RuntimeMetric&&) noexcept;
  RuntimeMetric& operator=(const RuntimeMetric& src);

  ~RuntimeMetric();

 private:
  ::std::string __fbthrift_field_name;
 private:
  ::std::int64_t __fbthrift_field_sum;
 private:
  ::std::int64_t __fbthrift_field_count;
 private:
  ::std::int64_t __fbthrift_field_max;
 private:
  ::std::int64_t __fbthrift_field_min;
 private:
  ::facebook::presto::protocol::cpp2::RuntimeUnit __fbthrift_field_unit;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const RuntimeMetric&) const;
  bool operator<(const RuntimeMetric&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sum" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sum_ref() const& {
    return {this->__fbthrift_field_sum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sum" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sum_ref() & {
    return {this->__fbthrift_field_sum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sum" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sum), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sum" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sum() const& {
    return {this->__fbthrift_field_sum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sum" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sum() & {
    return {this->__fbthrift_field_sum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "sum" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sum), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> count_ref() const& {
    return {this->__fbthrift_field_count, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> count_ref() & {
    return {this->__fbthrift_field_count, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> count_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_count), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> count() const& {
    return {this->__fbthrift_field_count, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> count() & {
    return {this->__fbthrift_field_count, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> count() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_count), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> max_ref() const& {
    return {this->__fbthrift_field_max, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> max_ref() & {
    return {this->__fbthrift_field_max, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> max_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_max), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> max() const& {
    return {this->__fbthrift_field_max, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> max() & {
    return {this->__fbthrift_field_max, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> max() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_max), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> min_ref() const& {
    return {this->__fbthrift_field_min, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> min_ref() & {
    return {this->__fbthrift_field_min, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> min_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_min), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> min() const& {
    return {this->__fbthrift_field_min, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> min() & {
    return {this->__fbthrift_field_min, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> min() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_min), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "unit" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeUnit>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unit_ref() const& {
    return {this->__fbthrift_field_unit, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "unit" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeUnit>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unit_ref() & {
    return {this->__fbthrift_field_unit, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "unit" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeUnit>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unit_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unit), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "unit" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeUnit>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unit() const& {
    return {this->__fbthrift_field_unit, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "unit" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeUnit>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unit() & {
    return {this->__fbthrift_field_unit, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "unit" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeUnit>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unit() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unit), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_RuntimeMetric_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_RuntimeMetric_name_struct_setter&& name_) {
    name_ref() = std::forward<T_RuntimeMetric_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "sum" } */
  [[deprecated("Use `FOO.sum().value()` instead of `FOO.get_sum()`")]]
  ::std::int64_t get_sum() const;

  /** Glean { "field": "sum" } */
  [[deprecated("Use `FOO.sum() = BAR` instead of `FOO.set_sum(BAR)`")]]
  ::std::int64_t& set_sum(::std::int64_t sum_);

  /** Glean { "field": "count" } */
  [[deprecated("Use `FOO.count().value()` instead of `FOO.get_count()`")]]
  ::std::int64_t get_count() const;

  /** Glean { "field": "count" } */
  [[deprecated("Use `FOO.count() = BAR` instead of `FOO.set_count(BAR)`")]]
  ::std::int64_t& set_count(::std::int64_t count_);

  /** Glean { "field": "max" } */
  [[deprecated("Use `FOO.max().value()` instead of `FOO.get_max()`")]]
  ::std::int64_t get_max() const;

  /** Glean { "field": "max" } */
  [[deprecated("Use `FOO.max() = BAR` instead of `FOO.set_max(BAR)`")]]
  ::std::int64_t& set_max(::std::int64_t max_);

  /** Glean { "field": "min" } */
  [[deprecated("Use `FOO.min().value()` instead of `FOO.get_min()`")]]
  ::std::int64_t get_min() const;

  /** Glean { "field": "min" } */
  [[deprecated("Use `FOO.min() = BAR` instead of `FOO.set_min(BAR)`")]]
  ::std::int64_t& set_min(::std::int64_t min_);

  /** Glean { "field": "unit" } */
  [[deprecated("Use `FOO.unit().value()` instead of `FOO.get_unit()`")]]
  ::facebook::presto::protocol::cpp2::RuntimeUnit get_unit() const;

  /** Glean { "field": "unit" } */
  [[deprecated("Use `FOO.unit() = BAR` instead of `FOO.set_unit(BAR)`")]]
  ::facebook::presto::protocol::cpp2::RuntimeUnit& set_unit(::facebook::presto::protocol::cpp2::RuntimeUnit unit_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RuntimeMetric>;
  friend void swap(RuntimeMetric& a, RuntimeMetric& b);
};

template <class Protocol_>
unsigned long RuntimeMetric::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "JoinOperatorInfo", "kind": "struct" } */
class JoinOperatorInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::joinType,
    ::apache::thrift::ident::logHistogramProbes,
    ::apache::thrift::ident::logHistogramOutput,
    ::apache::thrift::ident::lookupSourcePositions
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::JoinType>,
    ::apache::thrift::type::list<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = JoinOperatorInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  JoinOperatorInfo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  JoinOperatorInfo(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::JoinType joinType__arg, ::std::vector<::std::int64_t> logHistogramProbes__arg, ::std::vector<::std::int64_t> logHistogramOutput__arg, ::std::int64_t lookupSourcePositions__arg);

  JoinOperatorInfo(JoinOperatorInfo&&) noexcept;

  JoinOperatorInfo(const JoinOperatorInfo& src);


  JoinOperatorInfo& operator=(JoinOperatorInfo&&) noexcept;
  JoinOperatorInfo& operator=(const JoinOperatorInfo& src);

  ~JoinOperatorInfo();

 private:
  ::facebook::presto::protocol::cpp2::JoinType __fbthrift_field_joinType;
 private:
  ::std::vector<::std::int64_t> __fbthrift_field_logHistogramProbes;
 private:
  ::std::vector<::std::int64_t> __fbthrift_field_logHistogramOutput;
 private:
  ::std::int64_t __fbthrift_field_lookupSourcePositions;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const JoinOperatorInfo&) const;
  bool operator<(const JoinOperatorInfo&) const;

  /** Glean { "field": "joinType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::JoinType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> joinType_ref() const& {
    return {this->__fbthrift_field_joinType, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "joinType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::JoinType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> joinType_ref() & {
    return {this->__fbthrift_field_joinType, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "joinType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::JoinType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> joinType_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_joinType), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "joinType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::JoinType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> joinType() const& {
    return {this->__fbthrift_field_joinType, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "joinType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::JoinType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> joinType() & {
    return {this->__fbthrift_field_joinType, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "joinType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::JoinType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> joinType() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_joinType), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "logHistogramProbes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> logHistogramProbes_ref() const& {
    return {this->__fbthrift_field_logHistogramProbes, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "logHistogramProbes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> logHistogramProbes_ref() & {
    return {this->__fbthrift_field_logHistogramProbes, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "logHistogramProbes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> logHistogramProbes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_logHistogramProbes), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "logHistogramProbes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> logHistogramProbes() const& {
    return {this->__fbthrift_field_logHistogramProbes, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "logHistogramProbes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> logHistogramProbes() & {
    return {this->__fbthrift_field_logHistogramProbes, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "logHistogramProbes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> logHistogramProbes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_logHistogramProbes), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "logHistogramOutput" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> logHistogramOutput_ref() const& {
    return {this->__fbthrift_field_logHistogramOutput, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "logHistogramOutput" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> logHistogramOutput_ref() & {
    return {this->__fbthrift_field_logHistogramOutput, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "logHistogramOutput" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> logHistogramOutput_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_logHistogramOutput), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "logHistogramOutput" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> logHistogramOutput() const& {
    return {this->__fbthrift_field_logHistogramOutput, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "logHistogramOutput" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> logHistogramOutput() & {
    return {this->__fbthrift_field_logHistogramOutput, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "logHistogramOutput" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> logHistogramOutput() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_logHistogramOutput), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lookupSourcePositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> lookupSourcePositions_ref() const& {
    return {this->__fbthrift_field_lookupSourcePositions, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lookupSourcePositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> lookupSourcePositions_ref() & {
    return {this->__fbthrift_field_lookupSourcePositions, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lookupSourcePositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> lookupSourcePositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lookupSourcePositions), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lookupSourcePositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> lookupSourcePositions() const& {
    return {this->__fbthrift_field_lookupSourcePositions, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lookupSourcePositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> lookupSourcePositions() & {
    return {this->__fbthrift_field_lookupSourcePositions, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lookupSourcePositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> lookupSourcePositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lookupSourcePositions), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "joinType" } */
  [[deprecated("Use `FOO.joinType().value()` instead of `FOO.get_joinType()`")]]
  ::facebook::presto::protocol::cpp2::JoinType get_joinType() const;

  /** Glean { "field": "joinType" } */
  [[deprecated("Use `FOO.joinType() = BAR` instead of `FOO.set_joinType(BAR)`")]]
  ::facebook::presto::protocol::cpp2::JoinType& set_joinType(::facebook::presto::protocol::cpp2::JoinType joinType_);

  /** Glean { "field": "logHistogramProbes" } */
  [[deprecated("Use `FOO.logHistogramProbes().value()` instead of `FOO.get_logHistogramProbes()`")]]
  const ::std::vector<::std::int64_t>& get_logHistogramProbes() const&;

  /** Glean { "field": "logHistogramProbes" } */
  [[deprecated("Use `FOO.logHistogramProbes().value()` instead of `FOO.get_logHistogramProbes()`")]]
  ::std::vector<::std::int64_t> get_logHistogramProbes() &&;

  /** Glean { "field": "logHistogramProbes" } */
  template <typename T_JoinOperatorInfo_logHistogramProbes_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.logHistogramProbes() = BAR` instead of `FOO.set_logHistogramProbes(BAR)`")]]
  ::std::vector<::std::int64_t>& set_logHistogramProbes(T_JoinOperatorInfo_logHistogramProbes_struct_setter&& logHistogramProbes_) {
    logHistogramProbes_ref() = std::forward<T_JoinOperatorInfo_logHistogramProbes_struct_setter>(logHistogramProbes_);
    return __fbthrift_field_logHistogramProbes;
  }

  /** Glean { "field": "logHistogramOutput" } */
  [[deprecated("Use `FOO.logHistogramOutput().value()` instead of `FOO.get_logHistogramOutput()`")]]
  const ::std::vector<::std::int64_t>& get_logHistogramOutput() const&;

  /** Glean { "field": "logHistogramOutput" } */
  [[deprecated("Use `FOO.logHistogramOutput().value()` instead of `FOO.get_logHistogramOutput()`")]]
  ::std::vector<::std::int64_t> get_logHistogramOutput() &&;

  /** Glean { "field": "logHistogramOutput" } */
  template <typename T_JoinOperatorInfo_logHistogramOutput_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.logHistogramOutput() = BAR` instead of `FOO.set_logHistogramOutput(BAR)`")]]
  ::std::vector<::std::int64_t>& set_logHistogramOutput(T_JoinOperatorInfo_logHistogramOutput_struct_setter&& logHistogramOutput_) {
    logHistogramOutput_ref() = std::forward<T_JoinOperatorInfo_logHistogramOutput_struct_setter>(logHistogramOutput_);
    return __fbthrift_field_logHistogramOutput;
  }

  /** Glean { "field": "lookupSourcePositions" } */
  [[deprecated("Use `FOO.lookupSourcePositions().value()` instead of `FOO.get_lookupSourcePositions()`")]]
  const ::std::int64_t* get_lookupSourcePositions() const&;

  /** Glean { "field": "lookupSourcePositions" } */
  [[deprecated("Use `FOO.lookupSourcePositions().value()` instead of `FOO.get_lookupSourcePositions()`")]]
  ::std::int64_t* get_lookupSourcePositions() &;

  ::std::int64_t* get_lookupSourcePositions() && = delete;

  /** Glean { "field": "lookupSourcePositions" } */
  [[deprecated("Use `FOO.lookupSourcePositions() = BAR` instead of `FOO.set_lookupSourcePositions(BAR)`")]]
  ::std::int64_t& set_lookupSourcePositions(::std::int64_t lookupSourcePositions_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<JoinOperatorInfo>;
  friend void swap(JoinOperatorInfo& a, JoinOperatorInfo& b);
};

template <class Protocol_>
unsigned long JoinOperatorInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "SessionRepresentation", "kind": "struct" } */
class SessionRepresentation final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 23;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::queryId,
    ::apache::thrift::ident::transactionId,
    ::apache::thrift::ident::clientTransactionSupport,
    ::apache::thrift::ident::user,
    ::apache::thrift::ident::principal,
    ::apache::thrift::ident::source,
    ::apache::thrift::ident::catalog,
    ::apache::thrift::ident::schema,
    ::apache::thrift::ident::traceToken,
    ::apache::thrift::ident::timeZoneKey,
    ::apache::thrift::ident::locale,
    ::apache::thrift::ident::remoteUserAddress,
    ::apache::thrift::ident::userAgent,
    ::apache::thrift::ident::clientInfo,
    ::apache::thrift::ident::clientTags,
    ::apache::thrift::ident::resourceEstimates,
    ::apache::thrift::ident::startTime,
    ::apache::thrift::ident::systemProperties,
    ::apache::thrift::ident::catalogProperties,
    ::apache::thrift::ident::unprocessedCatalogProperties,
    ::apache::thrift::ident::roles,
    ::apache::thrift::ident::preparedStatements,
    ::apache::thrift::ident::sessionFunctions
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TransactionId>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TimeZoneKey>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::set<::apache::thrift::type::string_t>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::ResourceEstimates>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::ConnectorId>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::SelectedRole>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::SqlFunctionId>, ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::SqlInvokedFunction>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SessionRepresentation;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SessionRepresentation();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SessionRepresentation(apache::thrift::FragileConstructor, ::std::string queryId__arg, ::facebook::presto::protocol::cpp2::TransactionId transactionId__arg, bool clientTransactionSupport__arg, ::std::string user__arg, ::std::string principal__arg, ::std::string source__arg, ::std::string catalog__arg, ::std::string schema__arg, ::std::string traceToken__arg, ::facebook::presto::protocol::cpp2::TimeZoneKey timeZoneKey__arg, ::std::string locale__arg, ::std::string remoteUserAddress__arg, ::std::string userAgent__arg, ::std::string clientInfo__arg, ::std::set<::std::string> clientTags__arg, ::facebook::presto::protocol::cpp2::ResourceEstimates resourceEstimates__arg, ::std::int64_t startTime__arg, ::std::map<::std::string, ::std::string> systemProperties__arg, ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>> catalogProperties__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::string>> unprocessedCatalogProperties__arg, ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole> roles__arg, ::std::map<::std::string, ::std::string> preparedStatements__arg, ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction> sessionFunctions__arg);

  SessionRepresentation(SessionRepresentation&&) noexcept;

  SessionRepresentation(const SessionRepresentation& src);


  SessionRepresentation& operator=(SessionRepresentation&&) noexcept;
  SessionRepresentation& operator=(const SessionRepresentation& src);

  ~SessionRepresentation();

 private:
  ::std::string __fbthrift_field_queryId;
 private:
  ::facebook::presto::protocol::cpp2::TransactionId __fbthrift_field_transactionId;
 private:
  bool __fbthrift_field_clientTransactionSupport;
 private:
  ::std::string __fbthrift_field_user;
 private:
  ::std::string __fbthrift_field_principal;
 private:
  ::std::string __fbthrift_field_source;
 private:
  ::std::string __fbthrift_field_catalog;
 private:
  ::std::string __fbthrift_field_schema;
 private:
  ::std::string __fbthrift_field_traceToken;
 private:
  ::facebook::presto::protocol::cpp2::TimeZoneKey __fbthrift_field_timeZoneKey;
 private:
  ::std::string __fbthrift_field_locale;
 private:
  ::std::string __fbthrift_field_remoteUserAddress;
 private:
  ::std::string __fbthrift_field_userAgent;
 private:
  ::std::string __fbthrift_field_clientInfo;
 private:
  ::std::set<::std::string> __fbthrift_field_clientTags;
 private:
  ::facebook::presto::protocol::cpp2::ResourceEstimates __fbthrift_field_resourceEstimates;
 private:
  ::std::int64_t __fbthrift_field_startTime;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_systemProperties;
 private:
  ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>> __fbthrift_field_catalogProperties;
 private:
  ::std::map<::std::string, ::std::map<::std::string, ::std::string>> __fbthrift_field_unprocessedCatalogProperties;
 private:
  ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole> __fbthrift_field_roles;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_preparedStatements;
 private:
  ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction> __fbthrift_field_sessionFunctions;
 private:
  apache::thrift::detail::isset_bitset<23, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SessionRepresentation&) const;
  bool operator<(const SessionRepresentation&) const;

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queryId_ref() const& {
    return {this->__fbthrift_field_queryId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queryId_ref() & {
    return {this->__fbthrift_field_queryId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queryId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queryId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> queryId() const& {
    return {this->__fbthrift_field_queryId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> queryId() & {
    return {this->__fbthrift_field_queryId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "queryId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> queryId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_queryId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "transactionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TransactionId>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> transactionId_ref() const& {
    return {this->__fbthrift_field_transactionId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "transactionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TransactionId>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> transactionId_ref() & {
    return {this->__fbthrift_field_transactionId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "transactionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TransactionId>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> transactionId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_transactionId), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "transactionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TransactionId>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> transactionId() const& {
    return {this->__fbthrift_field_transactionId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "transactionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TransactionId>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> transactionId() & {
    return {this->__fbthrift_field_transactionId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "transactionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TransactionId>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> transactionId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_transactionId), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "clientTransactionSupport" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> clientTransactionSupport_ref() const& {
    return {this->__fbthrift_field_clientTransactionSupport, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "clientTransactionSupport" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> clientTransactionSupport_ref() & {
    return {this->__fbthrift_field_clientTransactionSupport, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "clientTransactionSupport" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> clientTransactionSupport_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_clientTransactionSupport), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "clientTransactionSupport" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> clientTransactionSupport() const& {
    return {this->__fbthrift_field_clientTransactionSupport, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "clientTransactionSupport" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> clientTransactionSupport() & {
    return {this->__fbthrift_field_clientTransactionSupport, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "clientTransactionSupport" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> clientTransactionSupport() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_clientTransactionSupport), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "user" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> user_ref() const& {
    return {this->__fbthrift_field_user, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "user" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> user_ref() & {
    return {this->__fbthrift_field_user, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "user" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> user_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_user), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "user" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> user() const& {
    return {this->__fbthrift_field_user, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "user" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> user() & {
    return {this->__fbthrift_field_user, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "user" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> user() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_user), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "principal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> principal_ref() const& {
    return {this->__fbthrift_field_principal, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "principal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> principal_ref() & {
    return {this->__fbthrift_field_principal, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "principal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> principal_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_principal), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "principal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> principal() const& {
    return {this->__fbthrift_field_principal, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "principal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> principal() & {
    return {this->__fbthrift_field_principal, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "principal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> principal() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_principal), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "source" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> source_ref() const& {
    return {this->__fbthrift_field_source, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "source" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> source_ref() & {
    return {this->__fbthrift_field_source, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "source" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> source_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_source), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "source" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> source() const& {
    return {this->__fbthrift_field_source, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "source" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> source() & {
    return {this->__fbthrift_field_source, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "source" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> source() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_source), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "catalog" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> catalog_ref() const& {
    return {this->__fbthrift_field_catalog, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "catalog" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> catalog_ref() & {
    return {this->__fbthrift_field_catalog, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "catalog" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> catalog_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_catalog), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "catalog" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> catalog() const& {
    return {this->__fbthrift_field_catalog, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "catalog" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> catalog() & {
    return {this->__fbthrift_field_catalog, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "catalog" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> catalog() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_catalog), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "schema" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> schema_ref() const& {
    return {this->__fbthrift_field_schema, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "schema" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> schema_ref() & {
    return {this->__fbthrift_field_schema, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "schema" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> schema_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_schema), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "schema" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> schema() const& {
    return {this->__fbthrift_field_schema, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "schema" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> schema() & {
    return {this->__fbthrift_field_schema, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "schema" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> schema() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_schema), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "traceToken" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> traceToken_ref() const& {
    return {this->__fbthrift_field_traceToken, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "traceToken" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> traceToken_ref() & {
    return {this->__fbthrift_field_traceToken, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "traceToken" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> traceToken_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_traceToken), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "traceToken" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> traceToken() const& {
    return {this->__fbthrift_field_traceToken, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "traceToken" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> traceToken() & {
    return {this->__fbthrift_field_traceToken, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "traceToken" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> traceToken() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_traceToken), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "timeZoneKey" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TimeZoneKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> timeZoneKey_ref() const& {
    return {this->__fbthrift_field_timeZoneKey, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "timeZoneKey" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TimeZoneKey>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> timeZoneKey_ref() & {
    return {this->__fbthrift_field_timeZoneKey, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "timeZoneKey" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TimeZoneKey>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> timeZoneKey_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_timeZoneKey), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "timeZoneKey" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TimeZoneKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> timeZoneKey() const& {
    return {this->__fbthrift_field_timeZoneKey, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "timeZoneKey" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TimeZoneKey>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> timeZoneKey() & {
    return {this->__fbthrift_field_timeZoneKey, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "timeZoneKey" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TimeZoneKey>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> timeZoneKey() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_timeZoneKey), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "locale" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> locale_ref() const& {
    return {this->__fbthrift_field_locale, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "locale" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> locale_ref() & {
    return {this->__fbthrift_field_locale, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "locale" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> locale_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_locale), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "locale" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> locale() const& {
    return {this->__fbthrift_field_locale, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "locale" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> locale() & {
    return {this->__fbthrift_field_locale, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "locale" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> locale() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_locale), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "remoteUserAddress" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> remoteUserAddress_ref() const& {
    return {this->__fbthrift_field_remoteUserAddress, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "remoteUserAddress" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> remoteUserAddress_ref() & {
    return {this->__fbthrift_field_remoteUserAddress, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "remoteUserAddress" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> remoteUserAddress_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_remoteUserAddress), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "remoteUserAddress" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> remoteUserAddress() const& {
    return {this->__fbthrift_field_remoteUserAddress, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "remoteUserAddress" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> remoteUserAddress() & {
    return {this->__fbthrift_field_remoteUserAddress, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "remoteUserAddress" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> remoteUserAddress() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_remoteUserAddress), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "userAgent" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> userAgent_ref() const& {
    return {this->__fbthrift_field_userAgent, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "userAgent" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> userAgent_ref() & {
    return {this->__fbthrift_field_userAgent, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "userAgent" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> userAgent_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userAgent), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "userAgent" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> userAgent() const& {
    return {this->__fbthrift_field_userAgent, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "userAgent" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> userAgent() & {
    return {this->__fbthrift_field_userAgent, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "userAgent" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> userAgent() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userAgent), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "clientInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> clientInfo_ref() const& {
    return {this->__fbthrift_field_clientInfo, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "clientInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> clientInfo_ref() & {
    return {this->__fbthrift_field_clientInfo, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "clientInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> clientInfo_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_clientInfo), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "clientInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> clientInfo() const& {
    return {this->__fbthrift_field_clientInfo, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "clientInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> clientInfo() & {
    return {this->__fbthrift_field_clientInfo, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "clientInfo" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> clientInfo() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_clientInfo), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "clientTags" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> clientTags_ref() const& {
    return {this->__fbthrift_field_clientTags, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "clientTags" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> clientTags_ref() & {
    return {this->__fbthrift_field_clientTags, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "clientTags" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> clientTags_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_clientTags), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "clientTags" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> clientTags() const& {
    return {this->__fbthrift_field_clientTags, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "clientTags" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> clientTags() & {
    return {this->__fbthrift_field_clientTags, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "clientTags" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> clientTags() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_clientTags), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "resourceEstimates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ResourceEstimates>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> resourceEstimates_ref() const& {
    return {this->__fbthrift_field_resourceEstimates, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "resourceEstimates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ResourceEstimates>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> resourceEstimates_ref() & {
    return {this->__fbthrift_field_resourceEstimates, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "resourceEstimates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ResourceEstimates>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> resourceEstimates_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_resourceEstimates), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "resourceEstimates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ResourceEstimates>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> resourceEstimates() const& {
    return {this->__fbthrift_field_resourceEstimates, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "resourceEstimates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ResourceEstimates>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> resourceEstimates() & {
    return {this->__fbthrift_field_resourceEstimates, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "resourceEstimates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ResourceEstimates>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> resourceEstimates() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_resourceEstimates), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "startTime" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> startTime_ref() const& {
    return {this->__fbthrift_field_startTime, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "startTime" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> startTime_ref() & {
    return {this->__fbthrift_field_startTime, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "startTime" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> startTime_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_startTime), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "startTime" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> startTime() const& {
    return {this->__fbthrift_field_startTime, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "startTime" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> startTime() & {
    return {this->__fbthrift_field_startTime, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "startTime" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> startTime() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_startTime), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "systemProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemProperties_ref() const& {
    return {this->__fbthrift_field_systemProperties, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemProperties_ref() & {
    return {this->__fbthrift_field_systemProperties, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemProperties_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemProperties), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemProperties() const& {
    return {this->__fbthrift_field_systemProperties, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemProperties() & {
    return {this->__fbthrift_field_systemProperties, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "systemProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemProperties() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemProperties), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "catalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> catalogProperties_ref() const& {
    return {this->__fbthrift_field_catalogProperties, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "catalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> catalogProperties_ref() & {
    return {this->__fbthrift_field_catalogProperties, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "catalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> catalogProperties_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_catalogProperties), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "catalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> catalogProperties() const& {
    return {this->__fbthrift_field_catalogProperties, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "catalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> catalogProperties() & {
    return {this->__fbthrift_field_catalogProperties, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "catalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> catalogProperties() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_catalogProperties), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "unprocessedCatalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unprocessedCatalogProperties_ref() const& {
    return {this->__fbthrift_field_unprocessedCatalogProperties, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "unprocessedCatalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unprocessedCatalogProperties_ref() & {
    return {this->__fbthrift_field_unprocessedCatalogProperties, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "unprocessedCatalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unprocessedCatalogProperties_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unprocessedCatalogProperties), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "unprocessedCatalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unprocessedCatalogProperties() const& {
    return {this->__fbthrift_field_unprocessedCatalogProperties, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "unprocessedCatalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unprocessedCatalogProperties() & {
    return {this->__fbthrift_field_unprocessedCatalogProperties, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "unprocessedCatalogProperties" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unprocessedCatalogProperties() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unprocessedCatalogProperties), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "roles" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> roles_ref() const& {
    return {this->__fbthrift_field_roles, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "roles" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> roles_ref() & {
    return {this->__fbthrift_field_roles, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "roles" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> roles_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_roles), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "roles" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> roles() const& {
    return {this->__fbthrift_field_roles, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "roles" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> roles() & {
    return {this->__fbthrift_field_roles, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "roles" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> roles() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_roles), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "preparedStatements" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> preparedStatements_ref() const& {
    return {this->__fbthrift_field_preparedStatements, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "preparedStatements" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> preparedStatements_ref() & {
    return {this->__fbthrift_field_preparedStatements, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "preparedStatements" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> preparedStatements_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_preparedStatements), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "preparedStatements" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> preparedStatements() const& {
    return {this->__fbthrift_field_preparedStatements, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "preparedStatements" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> preparedStatements() & {
    return {this->__fbthrift_field_preparedStatements, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "preparedStatements" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> preparedStatements() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_preparedStatements), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "sessionFunctions" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sessionFunctions_ref() const& {
    return {this->__fbthrift_field_sessionFunctions, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sessionFunctions" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sessionFunctions_ref() & {
    return {this->__fbthrift_field_sessionFunctions, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sessionFunctions" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sessionFunctions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sessionFunctions), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sessionFunctions" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sessionFunctions() const& {
    return {this->__fbthrift_field_sessionFunctions, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sessionFunctions" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sessionFunctions() & {
    return {this->__fbthrift_field_sessionFunctions, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sessionFunctions" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sessionFunctions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sessionFunctions), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "queryId" } */
  [[deprecated("Use `FOO.queryId().value()` instead of `FOO.get_queryId()`")]]
  const ::std::string& get_queryId() const& {
    return __fbthrift_field_queryId;
  }

  /** Glean { "field": "queryId" } */
  [[deprecated("Use `FOO.queryId().value()` instead of `FOO.get_queryId()`")]]
  ::std::string get_queryId() && {
    return static_cast<::std::string&&>(__fbthrift_field_queryId);
  }

  /** Glean { "field": "queryId" } */
  template <typename T_SessionRepresentation_queryId_struct_setter = ::std::string>
  [[deprecated("Use `FOO.queryId() = BAR` instead of `FOO.set_queryId(BAR)`")]]
  ::std::string& set_queryId(T_SessionRepresentation_queryId_struct_setter&& queryId_) {
    queryId_ref() = std::forward<T_SessionRepresentation_queryId_struct_setter>(queryId_);
    return __fbthrift_field_queryId;
  }

  /** Glean { "field": "transactionId" } */
  [[deprecated("Use `FOO.transactionId().value()` instead of `FOO.get_transactionId()`")]]
  const ::facebook::presto::protocol::cpp2::TransactionId* get_transactionId() const&;

  /** Glean { "field": "transactionId" } */
  [[deprecated("Use `FOO.transactionId().value()` instead of `FOO.get_transactionId()`")]]
  ::facebook::presto::protocol::cpp2::TransactionId* get_transactionId() &;

  ::facebook::presto::protocol::cpp2::TransactionId* get_transactionId() && = delete;

  /** Glean { "field": "transactionId" } */
  template <typename T_SessionRepresentation_transactionId_struct_setter = ::facebook::presto::protocol::cpp2::TransactionId>
  [[deprecated("Use `FOO.transactionId() = BAR` instead of `FOO.set_transactionId(BAR)`")]]
  ::facebook::presto::protocol::cpp2::TransactionId& set_transactionId(T_SessionRepresentation_transactionId_struct_setter&& transactionId_) {
    transactionId_ref() = std::forward<T_SessionRepresentation_transactionId_struct_setter>(transactionId_);
    return __fbthrift_field_transactionId;
  }

  /** Glean { "field": "clientTransactionSupport" } */
  [[deprecated("Use `FOO.clientTransactionSupport().value()` instead of `FOO.get_clientTransactionSupport()`")]]
  bool get_clientTransactionSupport() const;

  /** Glean { "field": "clientTransactionSupport" } */
  [[deprecated("Use `FOO.clientTransactionSupport() = BAR` instead of `FOO.set_clientTransactionSupport(BAR)`")]]
  bool& set_clientTransactionSupport(bool clientTransactionSupport_);

  /** Glean { "field": "user" } */
  [[deprecated("Use `FOO.user().value()` instead of `FOO.get_user()`")]]
  const ::std::string& get_user() const& {
    return __fbthrift_field_user;
  }

  /** Glean { "field": "user" } */
  [[deprecated("Use `FOO.user().value()` instead of `FOO.get_user()`")]]
  ::std::string get_user() && {
    return static_cast<::std::string&&>(__fbthrift_field_user);
  }

  /** Glean { "field": "user" } */
  template <typename T_SessionRepresentation_user_struct_setter = ::std::string>
  [[deprecated("Use `FOO.user() = BAR` instead of `FOO.set_user(BAR)`")]]
  ::std::string& set_user(T_SessionRepresentation_user_struct_setter&& user_) {
    user_ref() = std::forward<T_SessionRepresentation_user_struct_setter>(user_);
    return __fbthrift_field_user;
  }

  /** Glean { "field": "principal" } */
  [[deprecated("Use `FOO.principal().value()` instead of `FOO.get_principal()`")]]
  const ::std::string* get_principal() const&;

  /** Glean { "field": "principal" } */
  [[deprecated("Use `FOO.principal().value()` instead of `FOO.get_principal()`")]]
  ::std::string* get_principal() &;

  ::std::string* get_principal() && = delete;

  /** Glean { "field": "principal" } */
  template <typename T_SessionRepresentation_principal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.principal() = BAR` instead of `FOO.set_principal(BAR)`")]]
  ::std::string& set_principal(T_SessionRepresentation_principal_struct_setter&& principal_) {
    principal_ref() = std::forward<T_SessionRepresentation_principal_struct_setter>(principal_);
    return __fbthrift_field_principal;
  }

  /** Glean { "field": "source" } */
  [[deprecated("Use `FOO.source().value()` instead of `FOO.get_source()`")]]
  const ::std::string* get_source() const&;

  /** Glean { "field": "source" } */
  [[deprecated("Use `FOO.source().value()` instead of `FOO.get_source()`")]]
  ::std::string* get_source() &;

  ::std::string* get_source() && = delete;

  /** Glean { "field": "source" } */
  template <typename T_SessionRepresentation_source_struct_setter = ::std::string>
  [[deprecated("Use `FOO.source() = BAR` instead of `FOO.set_source(BAR)`")]]
  ::std::string& set_source(T_SessionRepresentation_source_struct_setter&& source_) {
    source_ref() = std::forward<T_SessionRepresentation_source_struct_setter>(source_);
    return __fbthrift_field_source;
  }

  /** Glean { "field": "catalog" } */
  [[deprecated("Use `FOO.catalog().value()` instead of `FOO.get_catalog()`")]]
  const ::std::string* get_catalog() const&;

  /** Glean { "field": "catalog" } */
  [[deprecated("Use `FOO.catalog().value()` instead of `FOO.get_catalog()`")]]
  ::std::string* get_catalog() &;

  ::std::string* get_catalog() && = delete;

  /** Glean { "field": "catalog" } */
  template <typename T_SessionRepresentation_catalog_struct_setter = ::std::string>
  [[deprecated("Use `FOO.catalog() = BAR` instead of `FOO.set_catalog(BAR)`")]]
  ::std::string& set_catalog(T_SessionRepresentation_catalog_struct_setter&& catalog_) {
    catalog_ref() = std::forward<T_SessionRepresentation_catalog_struct_setter>(catalog_);
    return __fbthrift_field_catalog;
  }

  /** Glean { "field": "schema" } */
  [[deprecated("Use `FOO.schema().value()` instead of `FOO.get_schema()`")]]
  const ::std::string* get_schema() const&;

  /** Glean { "field": "schema" } */
  [[deprecated("Use `FOO.schema().value()` instead of `FOO.get_schema()`")]]
  ::std::string* get_schema() &;

  ::std::string* get_schema() && = delete;

  /** Glean { "field": "schema" } */
  template <typename T_SessionRepresentation_schema_struct_setter = ::std::string>
  [[deprecated("Use `FOO.schema() = BAR` instead of `FOO.set_schema(BAR)`")]]
  ::std::string& set_schema(T_SessionRepresentation_schema_struct_setter&& schema_) {
    schema_ref() = std::forward<T_SessionRepresentation_schema_struct_setter>(schema_);
    return __fbthrift_field_schema;
  }

  /** Glean { "field": "traceToken" } */
  [[deprecated("Use `FOO.traceToken().value()` instead of `FOO.get_traceToken()`")]]
  const ::std::string* get_traceToken() const&;

  /** Glean { "field": "traceToken" } */
  [[deprecated("Use `FOO.traceToken().value()` instead of `FOO.get_traceToken()`")]]
  ::std::string* get_traceToken() &;

  ::std::string* get_traceToken() && = delete;

  /** Glean { "field": "traceToken" } */
  template <typename T_SessionRepresentation_traceToken_struct_setter = ::std::string>
  [[deprecated("Use `FOO.traceToken() = BAR` instead of `FOO.set_traceToken(BAR)`")]]
  ::std::string& set_traceToken(T_SessionRepresentation_traceToken_struct_setter&& traceToken_) {
    traceToken_ref() = std::forward<T_SessionRepresentation_traceToken_struct_setter>(traceToken_);
    return __fbthrift_field_traceToken;
  }

  /** Glean { "field": "timeZoneKey" } */
  [[deprecated("Use `FOO.timeZoneKey().value()` instead of `FOO.get_timeZoneKey()`")]]
  const ::facebook::presto::protocol::cpp2::TimeZoneKey& get_timeZoneKey() const&;

  /** Glean { "field": "timeZoneKey" } */
  [[deprecated("Use `FOO.timeZoneKey().value()` instead of `FOO.get_timeZoneKey()`")]]
  ::facebook::presto::protocol::cpp2::TimeZoneKey get_timeZoneKey() &&;

  /** Glean { "field": "timeZoneKey" } */
  template <typename T_SessionRepresentation_timeZoneKey_struct_setter = ::facebook::presto::protocol::cpp2::TimeZoneKey>
  [[deprecated("Use `FOO.timeZoneKey() = BAR` instead of `FOO.set_timeZoneKey(BAR)`")]]
  ::facebook::presto::protocol::cpp2::TimeZoneKey& set_timeZoneKey(T_SessionRepresentation_timeZoneKey_struct_setter&& timeZoneKey_) {
    timeZoneKey_ref() = std::forward<T_SessionRepresentation_timeZoneKey_struct_setter>(timeZoneKey_);
    return __fbthrift_field_timeZoneKey;
  }

  /** Glean { "field": "locale" } */
  [[deprecated("Use `FOO.locale().value()` instead of `FOO.get_locale()`")]]
  const ::std::string& get_locale() const& {
    return __fbthrift_field_locale;
  }

  /** Glean { "field": "locale" } */
  [[deprecated("Use `FOO.locale().value()` instead of `FOO.get_locale()`")]]
  ::std::string get_locale() && {
    return static_cast<::std::string&&>(__fbthrift_field_locale);
  }

  /** Glean { "field": "locale" } */
  template <typename T_SessionRepresentation_locale_struct_setter = ::std::string>
  [[deprecated("Use `FOO.locale() = BAR` instead of `FOO.set_locale(BAR)`")]]
  ::std::string& set_locale(T_SessionRepresentation_locale_struct_setter&& locale_) {
    locale_ref() = std::forward<T_SessionRepresentation_locale_struct_setter>(locale_);
    return __fbthrift_field_locale;
  }

  /** Glean { "field": "remoteUserAddress" } */
  [[deprecated("Use `FOO.remoteUserAddress().value()` instead of `FOO.get_remoteUserAddress()`")]]
  const ::std::string* get_remoteUserAddress() const&;

  /** Glean { "field": "remoteUserAddress" } */
  [[deprecated("Use `FOO.remoteUserAddress().value()` instead of `FOO.get_remoteUserAddress()`")]]
  ::std::string* get_remoteUserAddress() &;

  ::std::string* get_remoteUserAddress() && = delete;

  /** Glean { "field": "remoteUserAddress" } */
  template <typename T_SessionRepresentation_remoteUserAddress_struct_setter = ::std::string>
  [[deprecated("Use `FOO.remoteUserAddress() = BAR` instead of `FOO.set_remoteUserAddress(BAR)`")]]
  ::std::string& set_remoteUserAddress(T_SessionRepresentation_remoteUserAddress_struct_setter&& remoteUserAddress_) {
    remoteUserAddress_ref() = std::forward<T_SessionRepresentation_remoteUserAddress_struct_setter>(remoteUserAddress_);
    return __fbthrift_field_remoteUserAddress;
  }

  /** Glean { "field": "userAgent" } */
  [[deprecated("Use `FOO.userAgent().value()` instead of `FOO.get_userAgent()`")]]
  const ::std::string* get_userAgent() const&;

  /** Glean { "field": "userAgent" } */
  [[deprecated("Use `FOO.userAgent().value()` instead of `FOO.get_userAgent()`")]]
  ::std::string* get_userAgent() &;

  ::std::string* get_userAgent() && = delete;

  /** Glean { "field": "userAgent" } */
  template <typename T_SessionRepresentation_userAgent_struct_setter = ::std::string>
  [[deprecated("Use `FOO.userAgent() = BAR` instead of `FOO.set_userAgent(BAR)`")]]
  ::std::string& set_userAgent(T_SessionRepresentation_userAgent_struct_setter&& userAgent_) {
    userAgent_ref() = std::forward<T_SessionRepresentation_userAgent_struct_setter>(userAgent_);
    return __fbthrift_field_userAgent;
  }

  /** Glean { "field": "clientInfo" } */
  [[deprecated("Use `FOO.clientInfo().value()` instead of `FOO.get_clientInfo()`")]]
  const ::std::string* get_clientInfo() const&;

  /** Glean { "field": "clientInfo" } */
  [[deprecated("Use `FOO.clientInfo().value()` instead of `FOO.get_clientInfo()`")]]
  ::std::string* get_clientInfo() &;

  ::std::string* get_clientInfo() && = delete;

  /** Glean { "field": "clientInfo" } */
  template <typename T_SessionRepresentation_clientInfo_struct_setter = ::std::string>
  [[deprecated("Use `FOO.clientInfo() = BAR` instead of `FOO.set_clientInfo(BAR)`")]]
  ::std::string& set_clientInfo(T_SessionRepresentation_clientInfo_struct_setter&& clientInfo_) {
    clientInfo_ref() = std::forward<T_SessionRepresentation_clientInfo_struct_setter>(clientInfo_);
    return __fbthrift_field_clientInfo;
  }

  /** Glean { "field": "clientTags" } */
  [[deprecated("Use `FOO.clientTags().value()` instead of `FOO.get_clientTags()`")]]
  const ::std::set<::std::string>& get_clientTags() const&;

  /** Glean { "field": "clientTags" } */
  [[deprecated("Use `FOO.clientTags().value()` instead of `FOO.get_clientTags()`")]]
  ::std::set<::std::string> get_clientTags() &&;

  /** Glean { "field": "clientTags" } */
  template <typename T_SessionRepresentation_clientTags_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.clientTags() = BAR` instead of `FOO.set_clientTags(BAR)`")]]
  ::std::set<::std::string>& set_clientTags(T_SessionRepresentation_clientTags_struct_setter&& clientTags_) {
    clientTags_ref() = std::forward<T_SessionRepresentation_clientTags_struct_setter>(clientTags_);
    return __fbthrift_field_clientTags;
  }

  /** Glean { "field": "resourceEstimates" } */
  [[deprecated("Use `FOO.resourceEstimates().value()` instead of `FOO.get_resourceEstimates()`")]]
  const ::facebook::presto::protocol::cpp2::ResourceEstimates& get_resourceEstimates() const&;

  /** Glean { "field": "resourceEstimates" } */
  [[deprecated("Use `FOO.resourceEstimates().value()` instead of `FOO.get_resourceEstimates()`")]]
  ::facebook::presto::protocol::cpp2::ResourceEstimates get_resourceEstimates() &&;

  /** Glean { "field": "resourceEstimates" } */
  template <typename T_SessionRepresentation_resourceEstimates_struct_setter = ::facebook::presto::protocol::cpp2::ResourceEstimates>
  [[deprecated("Use `FOO.resourceEstimates() = BAR` instead of `FOO.set_resourceEstimates(BAR)`")]]
  ::facebook::presto::protocol::cpp2::ResourceEstimates& set_resourceEstimates(T_SessionRepresentation_resourceEstimates_struct_setter&& resourceEstimates_) {
    resourceEstimates_ref() = std::forward<T_SessionRepresentation_resourceEstimates_struct_setter>(resourceEstimates_);
    return __fbthrift_field_resourceEstimates;
  }

  /** Glean { "field": "startTime" } */
  [[deprecated("Use `FOO.startTime().value()` instead of `FOO.get_startTime()`")]]
  ::std::int64_t get_startTime() const;

  /** Glean { "field": "startTime" } */
  [[deprecated("Use `FOO.startTime() = BAR` instead of `FOO.set_startTime(BAR)`")]]
  ::std::int64_t& set_startTime(::std::int64_t startTime_);

  /** Glean { "field": "systemProperties" } */
  [[deprecated("Use `FOO.systemProperties().value()` instead of `FOO.get_systemProperties()`")]]
  const ::std::map<::std::string, ::std::string>& get_systemProperties() const&;

  /** Glean { "field": "systemProperties" } */
  [[deprecated("Use `FOO.systemProperties().value()` instead of `FOO.get_systemProperties()`")]]
  ::std::map<::std::string, ::std::string> get_systemProperties() &&;

  /** Glean { "field": "systemProperties" } */
  template <typename T_SessionRepresentation_systemProperties_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.systemProperties() = BAR` instead of `FOO.set_systemProperties(BAR)`")]]
  ::std::map<::std::string, ::std::string>& set_systemProperties(T_SessionRepresentation_systemProperties_struct_setter&& systemProperties_) {
    systemProperties_ref() = std::forward<T_SessionRepresentation_systemProperties_struct_setter>(systemProperties_);
    return __fbthrift_field_systemProperties;
  }

  /** Glean { "field": "catalogProperties" } */
  [[deprecated("Use `FOO.catalogProperties().value()` instead of `FOO.get_catalogProperties()`")]]
  const ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>& get_catalogProperties() const&;

  /** Glean { "field": "catalogProperties" } */
  [[deprecated("Use `FOO.catalogProperties().value()` instead of `FOO.get_catalogProperties()`")]]
  ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>> get_catalogProperties() &&;

  /** Glean { "field": "catalogProperties" } */
  template <typename T_SessionRepresentation_catalogProperties_struct_setter = ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>>
  [[deprecated("Use `FOO.catalogProperties() = BAR` instead of `FOO.set_catalogProperties(BAR)`")]]
  ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>& set_catalogProperties(T_SessionRepresentation_catalogProperties_struct_setter&& catalogProperties_) {
    catalogProperties_ref() = std::forward<T_SessionRepresentation_catalogProperties_struct_setter>(catalogProperties_);
    return __fbthrift_field_catalogProperties;
  }

  /** Glean { "field": "unprocessedCatalogProperties" } */
  [[deprecated("Use `FOO.unprocessedCatalogProperties().value()` instead of `FOO.get_unprocessedCatalogProperties()`")]]
  const ::std::map<::std::string, ::std::map<::std::string, ::std::string>>& get_unprocessedCatalogProperties() const&;

  /** Glean { "field": "unprocessedCatalogProperties" } */
  [[deprecated("Use `FOO.unprocessedCatalogProperties().value()` instead of `FOO.get_unprocessedCatalogProperties()`")]]
  ::std::map<::std::string, ::std::map<::std::string, ::std::string>> get_unprocessedCatalogProperties() &&;

  /** Glean { "field": "unprocessedCatalogProperties" } */
  template <typename T_SessionRepresentation_unprocessedCatalogProperties_struct_setter = ::std::map<::std::string, ::std::map<::std::string, ::std::string>>>
  [[deprecated("Use `FOO.unprocessedCatalogProperties() = BAR` instead of `FOO.set_unprocessedCatalogProperties(BAR)`")]]
  ::std::map<::std::string, ::std::map<::std::string, ::std::string>>& set_unprocessedCatalogProperties(T_SessionRepresentation_unprocessedCatalogProperties_struct_setter&& unprocessedCatalogProperties_) {
    unprocessedCatalogProperties_ref() = std::forward<T_SessionRepresentation_unprocessedCatalogProperties_struct_setter>(unprocessedCatalogProperties_);
    return __fbthrift_field_unprocessedCatalogProperties;
  }

  /** Glean { "field": "roles" } */
  [[deprecated("Use `FOO.roles().value()` instead of `FOO.get_roles()`")]]
  const ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>& get_roles() const&;

  /** Glean { "field": "roles" } */
  [[deprecated("Use `FOO.roles().value()` instead of `FOO.get_roles()`")]]
  ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole> get_roles() &&;

  /** Glean { "field": "roles" } */
  template <typename T_SessionRepresentation_roles_struct_setter = ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>>
  [[deprecated("Use `FOO.roles() = BAR` instead of `FOO.set_roles(BAR)`")]]
  ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>& set_roles(T_SessionRepresentation_roles_struct_setter&& roles_) {
    roles_ref() = std::forward<T_SessionRepresentation_roles_struct_setter>(roles_);
    return __fbthrift_field_roles;
  }

  /** Glean { "field": "preparedStatements" } */
  [[deprecated("Use `FOO.preparedStatements().value()` instead of `FOO.get_preparedStatements()`")]]
  const ::std::map<::std::string, ::std::string>& get_preparedStatements() const&;

  /** Glean { "field": "preparedStatements" } */
  [[deprecated("Use `FOO.preparedStatements().value()` instead of `FOO.get_preparedStatements()`")]]
  ::std::map<::std::string, ::std::string> get_preparedStatements() &&;

  /** Glean { "field": "preparedStatements" } */
  template <typename T_SessionRepresentation_preparedStatements_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.preparedStatements() = BAR` instead of `FOO.set_preparedStatements(BAR)`")]]
  ::std::map<::std::string, ::std::string>& set_preparedStatements(T_SessionRepresentation_preparedStatements_struct_setter&& preparedStatements_) {
    preparedStatements_ref() = std::forward<T_SessionRepresentation_preparedStatements_struct_setter>(preparedStatements_);
    return __fbthrift_field_preparedStatements;
  }

  /** Glean { "field": "sessionFunctions" } */
  [[deprecated("Use `FOO.sessionFunctions().value()` instead of `FOO.get_sessionFunctions()`")]]
  const ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>& get_sessionFunctions() const&;

  /** Glean { "field": "sessionFunctions" } */
  [[deprecated("Use `FOO.sessionFunctions().value()` instead of `FOO.get_sessionFunctions()`")]]
  ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction> get_sessionFunctions() &&;

  /** Glean { "field": "sessionFunctions" } */
  template <typename T_SessionRepresentation_sessionFunctions_struct_setter = ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>>
  [[deprecated("Use `FOO.sessionFunctions() = BAR` instead of `FOO.set_sessionFunctions(BAR)`")]]
  ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>& set_sessionFunctions(T_SessionRepresentation_sessionFunctions_struct_setter&& sessionFunctions_) {
    sessionFunctions_ref() = std::forward<T_SessionRepresentation_sessionFunctions_struct_setter>(sessionFunctions_);
    return __fbthrift_field_sessionFunctions;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SessionRepresentation>;
  friend void swap(SessionRepresentation& a, SessionRepresentation& b);
};

template <class Protocol_>
unsigned long SessionRepresentation::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "SelectedRole", "kind": "struct" } */
class SelectedRole final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::type,
    ::apache::thrift::ident::role
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::Type>,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SelectedRole;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SelectedRole();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SelectedRole(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::Type type__arg, ::std::string role__arg);

  SelectedRole(SelectedRole&&) noexcept;

  SelectedRole(const SelectedRole& src);


  SelectedRole& operator=(SelectedRole&&) noexcept;
  SelectedRole& operator=(const SelectedRole& src);

  ~SelectedRole();

 private:
  ::facebook::presto::protocol::cpp2::Type __fbthrift_field_type;
 private:
  ::std::string __fbthrift_field_role;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SelectedRole&) const;
  bool operator<(const SelectedRole&) const;

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Type>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type_ref() const& {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Type>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type_ref() & {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Type>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Type>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type() const& {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Type>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type() & {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Type>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "role" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> role_ref() const& {
    return {this->__fbthrift_field_role, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "role" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> role_ref() & {
    return {this->__fbthrift_field_role, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "role" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> role_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_role), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "role" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> role() const& {
    return {this->__fbthrift_field_role, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "role" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> role() & {
    return {this->__fbthrift_field_role, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "role" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> role() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_role), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type().value()` instead of `FOO.get_type()`")]]
  ::facebook::presto::protocol::cpp2::Type get_type() const;

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type() = BAR` instead of `FOO.set_type(BAR)`")]]
  ::facebook::presto::protocol::cpp2::Type& set_type(::facebook::presto::protocol::cpp2::Type type_);

  /** Glean { "field": "role" } */
  [[deprecated("Use `FOO.role().value()` instead of `FOO.get_role()`")]]
  const ::std::string* get_role() const&;

  /** Glean { "field": "role" } */
  [[deprecated("Use `FOO.role().value()` instead of `FOO.get_role()`")]]
  ::std::string* get_role() &;

  ::std::string* get_role() && = delete;

  /** Glean { "field": "role" } */
  template <typename T_SelectedRole_role_struct_setter = ::std::string>
  [[deprecated("Use `FOO.role() = BAR` instead of `FOO.set_role(BAR)`")]]
  ::std::string& set_role(T_SelectedRole_role_struct_setter&& role_) {
    role_ref() = std::forward<T_SelectedRole_role_struct_setter>(role_);
    return __fbthrift_field_role;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SelectedRole>;
  friend void swap(SelectedRole& a, SelectedRole& b);
};

template <class Protocol_>
unsigned long SelectedRole::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "Parameter", "kind": "struct" } */
class Parameter final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::type
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TypeSignature>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Parameter;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Parameter();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Parameter(apache::thrift::FragileConstructor, ::std::string name__arg, ::facebook::presto::protocol::cpp2::TypeSignature type__arg);

  Parameter(Parameter&&) noexcept;

  Parameter(const Parameter& src);


  Parameter& operator=(Parameter&&) noexcept;
  Parameter& operator=(const Parameter& src);

  ~Parameter();

 private:
  ::std::string __fbthrift_field_name;
 private:
  ::facebook::presto::protocol::cpp2::TypeSignature __fbthrift_field_type;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Parameter&) const;
  bool operator<(const Parameter&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type_ref() const& {
    return {this->__fbthrift_field_type, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type_ref() & {
    return {this->__fbthrift_field_type, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type() const& {
    return {this->__fbthrift_field_type, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type() & {
    return {this->__fbthrift_field_type, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_Parameter_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_Parameter_name_struct_setter&& name_) {
    name_ref() = std::forward<T_Parameter_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type().value()` instead of `FOO.get_type()`")]]
  const ::facebook::presto::protocol::cpp2::TypeSignature& get_type() const&;

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type().value()` instead of `FOO.get_type()`")]]
  ::facebook::presto::protocol::cpp2::TypeSignature get_type() &&;

  /** Glean { "field": "type" } */
  template <typename T_Parameter_type_struct_setter = ::facebook::presto::protocol::cpp2::TypeSignature>
  [[deprecated("Use `FOO.type() = BAR` instead of `FOO.set_type(BAR)`")]]
  ::facebook::presto::protocol::cpp2::TypeSignature& set_type(T_Parameter_type_struct_setter&& type_) {
    type_ref() = std::forward<T_Parameter_type_struct_setter>(type_);
    return __fbthrift_field_type;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Parameter>;
  friend void swap(Parameter& a, Parameter& b);
};

template <class Protocol_>
unsigned long Parameter::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "RoutineCharacteristics", "kind": "struct" } */
class RoutineCharacteristics final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::language,
    ::apache::thrift::ident::determinism,
    ::apache::thrift::ident::nullCallClause
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::Language>,
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::Determinism>,
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::NullCallClause>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RoutineCharacteristics;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  RoutineCharacteristics() :
      __fbthrift_field_determinism(),
      __fbthrift_field_nullCallClause() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RoutineCharacteristics(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::Language language__arg, ::facebook::presto::protocol::cpp2::Determinism determinism__arg, ::facebook::presto::protocol::cpp2::NullCallClause nullCallClause__arg);

  RoutineCharacteristics(RoutineCharacteristics&&) noexcept;

  RoutineCharacteristics(const RoutineCharacteristics& src);


  RoutineCharacteristics& operator=(RoutineCharacteristics&&) noexcept;
  RoutineCharacteristics& operator=(const RoutineCharacteristics& src);
 private:
  ::facebook::presto::protocol::cpp2::Language __fbthrift_field_language;
 private:
  ::facebook::presto::protocol::cpp2::Determinism __fbthrift_field_determinism;
 private:
  ::facebook::presto::protocol::cpp2::NullCallClause __fbthrift_field_nullCallClause;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const RoutineCharacteristics&) const;
  bool operator<(const RoutineCharacteristics&) const;

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Language>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> language_ref() const& {
    return {this->__fbthrift_field_language, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Language>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> language_ref() & {
    return {this->__fbthrift_field_language, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Language>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> language_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_language), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Language>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> language() const& {
    return {this->__fbthrift_field_language, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Language>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> language() & {
    return {this->__fbthrift_field_language, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "language" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Language>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> language() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_language), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "determinism" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Determinism>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> determinism_ref() const& {
    return {this->__fbthrift_field_determinism, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "determinism" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Determinism>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> determinism_ref() & {
    return {this->__fbthrift_field_determinism, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "determinism" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Determinism>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> determinism_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_determinism), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "determinism" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Determinism>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> determinism() const& {
    return {this->__fbthrift_field_determinism, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "determinism" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Determinism>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> determinism() & {
    return {this->__fbthrift_field_determinism, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "determinism" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Determinism>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> determinism() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_determinism), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "nullCallClause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::NullCallClause>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nullCallClause_ref() const& {
    return {this->__fbthrift_field_nullCallClause, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "nullCallClause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::NullCallClause>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nullCallClause_ref() & {
    return {this->__fbthrift_field_nullCallClause, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "nullCallClause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::NullCallClause>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nullCallClause_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nullCallClause), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "nullCallClause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::NullCallClause>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nullCallClause() const& {
    return {this->__fbthrift_field_nullCallClause, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "nullCallClause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::NullCallClause>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nullCallClause() & {
    return {this->__fbthrift_field_nullCallClause, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "nullCallClause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::NullCallClause>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nullCallClause() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nullCallClause), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "language" } */
  [[deprecated("Use `FOO.language().value()` instead of `FOO.get_language()`")]]
  const ::facebook::presto::protocol::cpp2::Language& get_language() const&;

  /** Glean { "field": "language" } */
  [[deprecated("Use `FOO.language().value()` instead of `FOO.get_language()`")]]
  ::facebook::presto::protocol::cpp2::Language get_language() &&;

  /** Glean { "field": "language" } */
  template <typename T_RoutineCharacteristics_language_struct_setter = ::facebook::presto::protocol::cpp2::Language>
  [[deprecated("Use `FOO.language() = BAR` instead of `FOO.set_language(BAR)`")]]
  ::facebook::presto::protocol::cpp2::Language& set_language(T_RoutineCharacteristics_language_struct_setter&& language_) {
    language_ref() = std::forward<T_RoutineCharacteristics_language_struct_setter>(language_);
    return __fbthrift_field_language;
  }

  /** Glean { "field": "determinism" } */
  [[deprecated("Use `FOO.determinism().value()` instead of `FOO.get_determinism()`")]]
  ::facebook::presto::protocol::cpp2::Determinism get_determinism() const;

  /** Glean { "field": "determinism" } */
  [[deprecated("Use `FOO.determinism() = BAR` instead of `FOO.set_determinism(BAR)`")]]
  ::facebook::presto::protocol::cpp2::Determinism& set_determinism(::facebook::presto::protocol::cpp2::Determinism determinism_);

  /** Glean { "field": "nullCallClause" } */
  [[deprecated("Use `FOO.nullCallClause().value()` instead of `FOO.get_nullCallClause()`")]]
  ::facebook::presto::protocol::cpp2::NullCallClause get_nullCallClause() const;

  /** Glean { "field": "nullCallClause" } */
  [[deprecated("Use `FOO.nullCallClause() = BAR` instead of `FOO.set_nullCallClause(BAR)`")]]
  ::facebook::presto::protocol::cpp2::NullCallClause& set_nullCallClause(::facebook::presto::protocol::cpp2::NullCallClause nullCallClause_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RoutineCharacteristics>;
  friend void swap(RoutineCharacteristics& a, RoutineCharacteristics& b);
};

template <class Protocol_>
unsigned long RoutineCharacteristics::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "Signature", "kind": "struct" } */
class Signature final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 7;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::kind,
    ::apache::thrift::ident::returnType,
    ::apache::thrift::ident::argumentTypes,
    ::apache::thrift::ident::variableArity,
    ::apache::thrift::ident::typeVariableConstraints,
    ::apache::thrift::ident::longVariableConstraints
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::QualifiedObjectName>,
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::FunctionKind>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TypeSignature>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TypeSignature>>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::LongVariableConstraint>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Signature;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Signature();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Signature(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::QualifiedObjectName name__arg, ::facebook::presto::protocol::cpp2::FunctionKind kind__arg, ::facebook::presto::protocol::cpp2::TypeSignature returnType__arg, ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature> argumentTypes__arg, bool variableArity__arg, ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint> typeVariableConstraints__arg, ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint> longVariableConstraints__arg);

  Signature(Signature&&) noexcept;

  Signature(const Signature& src);


  Signature& operator=(Signature&&) noexcept;
  Signature& operator=(const Signature& src);

  ~Signature();

 private:
  ::facebook::presto::protocol::cpp2::QualifiedObjectName __fbthrift_field_name;
 private:
  ::facebook::presto::protocol::cpp2::FunctionKind __fbthrift_field_kind;
 private:
  ::facebook::presto::protocol::cpp2::TypeSignature __fbthrift_field_returnType;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature> __fbthrift_field_argumentTypes;
 private:
  bool __fbthrift_field_variableArity;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint> __fbthrift_field_typeVariableConstraints;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint> __fbthrift_field_longVariableConstraints;
 private:
  apache::thrift::detail::isset_bitset<7, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Signature&) const;
  bool operator<(const Signature&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::QualifiedObjectName>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::QualifiedObjectName>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::QualifiedObjectName>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::QualifiedObjectName>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::QualifiedObjectName>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::QualifiedObjectName>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "kind" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::FunctionKind>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> kind_ref() const& {
    return {this->__fbthrift_field_kind, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "kind" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::FunctionKind>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> kind_ref() & {
    return {this->__fbthrift_field_kind, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "kind" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::FunctionKind>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> kind_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_kind), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "kind" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::FunctionKind>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> kind() const& {
    return {this->__fbthrift_field_kind, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "kind" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::FunctionKind>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> kind() & {
    return {this->__fbthrift_field_kind, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "kind" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::FunctionKind>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> kind() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_kind), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "returnType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> returnType_ref() const& {
    return {this->__fbthrift_field_returnType, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "returnType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> returnType_ref() & {
    return {this->__fbthrift_field_returnType, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "returnType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> returnType_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_returnType), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "returnType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> returnType() const& {
    return {this->__fbthrift_field_returnType, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "returnType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> returnType() & {
    return {this->__fbthrift_field_returnType, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "returnType" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TypeSignature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> returnType() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_returnType), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "argumentTypes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> argumentTypes_ref() const& {
    return {this->__fbthrift_field_argumentTypes, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "argumentTypes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> argumentTypes_ref() & {
    return {this->__fbthrift_field_argumentTypes, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "argumentTypes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> argumentTypes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_argumentTypes), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "argumentTypes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> argumentTypes() const& {
    return {this->__fbthrift_field_argumentTypes, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "argumentTypes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> argumentTypes() & {
    return {this->__fbthrift_field_argumentTypes, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "argumentTypes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> argumentTypes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_argumentTypes), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> variableArity_ref() const& {
    return {this->__fbthrift_field_variableArity, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> variableArity_ref() & {
    return {this->__fbthrift_field_variableArity, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> variableArity_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_variableArity), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> variableArity() const& {
    return {this->__fbthrift_field_variableArity, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> variableArity() & {
    return {this->__fbthrift_field_variableArity, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> variableArity() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_variableArity), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "typeVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> typeVariableConstraints_ref() const& {
    return {this->__fbthrift_field_typeVariableConstraints, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "typeVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> typeVariableConstraints_ref() & {
    return {this->__fbthrift_field_typeVariableConstraints, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "typeVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> typeVariableConstraints_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_typeVariableConstraints), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "typeVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> typeVariableConstraints() const& {
    return {this->__fbthrift_field_typeVariableConstraints, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "typeVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> typeVariableConstraints() & {
    return {this->__fbthrift_field_typeVariableConstraints, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "typeVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> typeVariableConstraints() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_typeVariableConstraints), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "longVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> longVariableConstraints_ref() const& {
    return {this->__fbthrift_field_longVariableConstraints, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "longVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> longVariableConstraints_ref() & {
    return {this->__fbthrift_field_longVariableConstraints, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "longVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> longVariableConstraints_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_longVariableConstraints), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "longVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> longVariableConstraints() const& {
    return {this->__fbthrift_field_longVariableConstraints, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "longVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> longVariableConstraints() & {
    return {this->__fbthrift_field_longVariableConstraints, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "longVariableConstraints" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> longVariableConstraints() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_longVariableConstraints), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::facebook::presto::protocol::cpp2::QualifiedObjectName& get_name() const&;

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::facebook::presto::protocol::cpp2::QualifiedObjectName get_name() &&;

  /** Glean { "field": "name" } */
  template <typename T_Signature_name_struct_setter = ::facebook::presto::protocol::cpp2::QualifiedObjectName>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::facebook::presto::protocol::cpp2::QualifiedObjectName& set_name(T_Signature_name_struct_setter&& name_) {
    name_ref() = std::forward<T_Signature_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "kind" } */
  [[deprecated("Use `FOO.kind().value()` instead of `FOO.get_kind()`")]]
  ::facebook::presto::protocol::cpp2::FunctionKind get_kind() const;

  /** Glean { "field": "kind" } */
  [[deprecated("Use `FOO.kind() = BAR` instead of `FOO.set_kind(BAR)`")]]
  ::facebook::presto::protocol::cpp2::FunctionKind& set_kind(::facebook::presto::protocol::cpp2::FunctionKind kind_);

  /** Glean { "field": "returnType" } */
  [[deprecated("Use `FOO.returnType().value()` instead of `FOO.get_returnType()`")]]
  const ::facebook::presto::protocol::cpp2::TypeSignature& get_returnType() const&;

  /** Glean { "field": "returnType" } */
  [[deprecated("Use `FOO.returnType().value()` instead of `FOO.get_returnType()`")]]
  ::facebook::presto::protocol::cpp2::TypeSignature get_returnType() &&;

  /** Glean { "field": "returnType" } */
  template <typename T_Signature_returnType_struct_setter = ::facebook::presto::protocol::cpp2::TypeSignature>
  [[deprecated("Use `FOO.returnType() = BAR` instead of `FOO.set_returnType(BAR)`")]]
  ::facebook::presto::protocol::cpp2::TypeSignature& set_returnType(T_Signature_returnType_struct_setter&& returnType_) {
    returnType_ref() = std::forward<T_Signature_returnType_struct_setter>(returnType_);
    return __fbthrift_field_returnType;
  }

  /** Glean { "field": "argumentTypes" } */
  [[deprecated("Use `FOO.argumentTypes().value()` instead of `FOO.get_argumentTypes()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>& get_argumentTypes() const&;

  /** Glean { "field": "argumentTypes" } */
  [[deprecated("Use `FOO.argumentTypes().value()` instead of `FOO.get_argumentTypes()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature> get_argumentTypes() &&;

  /** Glean { "field": "argumentTypes" } */
  template <typename T_Signature_argumentTypes_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>>
  [[deprecated("Use `FOO.argumentTypes() = BAR` instead of `FOO.set_argumentTypes(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>& set_argumentTypes(T_Signature_argumentTypes_struct_setter&& argumentTypes_) {
    argumentTypes_ref() = std::forward<T_Signature_argumentTypes_struct_setter>(argumentTypes_);
    return __fbthrift_field_argumentTypes;
  }

  /** Glean { "field": "variableArity" } */
  [[deprecated("Use `FOO.variableArity().value()` instead of `FOO.get_variableArity()`")]]
  bool get_variableArity() const;

  /** Glean { "field": "variableArity" } */
  [[deprecated("Use `FOO.variableArity() = BAR` instead of `FOO.set_variableArity(BAR)`")]]
  bool& set_variableArity(bool variableArity_);

  /** Glean { "field": "typeVariableConstraints" } */
  [[deprecated("Use `FOO.typeVariableConstraints().value()` instead of `FOO.get_typeVariableConstraints()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>& get_typeVariableConstraints() const&;

  /** Glean { "field": "typeVariableConstraints" } */
  [[deprecated("Use `FOO.typeVariableConstraints().value()` instead of `FOO.get_typeVariableConstraints()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint> get_typeVariableConstraints() &&;

  /** Glean { "field": "typeVariableConstraints" } */
  template <typename T_Signature_typeVariableConstraints_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>
  [[deprecated("Use `FOO.typeVariableConstraints() = BAR` instead of `FOO.set_typeVariableConstraints(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>& set_typeVariableConstraints(T_Signature_typeVariableConstraints_struct_setter&& typeVariableConstraints_) {
    typeVariableConstraints_ref() = std::forward<T_Signature_typeVariableConstraints_struct_setter>(typeVariableConstraints_);
    return __fbthrift_field_typeVariableConstraints;
  }

  /** Glean { "field": "longVariableConstraints" } */
  [[deprecated("Use `FOO.longVariableConstraints().value()` instead of `FOO.get_longVariableConstraints()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>& get_longVariableConstraints() const&;

  /** Glean { "field": "longVariableConstraints" } */
  [[deprecated("Use `FOO.longVariableConstraints().value()` instead of `FOO.get_longVariableConstraints()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint> get_longVariableConstraints() &&;

  /** Glean { "field": "longVariableConstraints" } */
  template <typename T_Signature_longVariableConstraints_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>>
  [[deprecated("Use `FOO.longVariableConstraints() = BAR` instead of `FOO.set_longVariableConstraints(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>& set_longVariableConstraints(T_Signature_longVariableConstraints_struct_setter&& longVariableConstraints_) {
    longVariableConstraints_ref() = std::forward<T_Signature_longVariableConstraints_struct_setter>(longVariableConstraints_);
    return __fbthrift_field_longVariableConstraints;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Signature>;
  friend void swap(Signature& a, Signature& b);
};

template <class Protocol_>
unsigned long Signature::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "OutputBuffers", "kind": "struct" } */
class OutputBuffers final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::type,
    ::apache::thrift::ident::version,
    ::apache::thrift::ident::noMoreBufferIds,
    ::apache::thrift::ident::buffers
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::BufferType>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::map<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::OutputBufferId>, ::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OutputBuffers;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  OutputBuffers();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OutputBuffers(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::BufferType type__arg, ::std::int64_t version__arg, bool noMoreBufferIds__arg, ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t> buffers__arg);

  OutputBuffers(OutputBuffers&&) noexcept;

  OutputBuffers(const OutputBuffers& src);


  OutputBuffers& operator=(OutputBuffers&&) noexcept;
  OutputBuffers& operator=(const OutputBuffers& src);

  ~OutputBuffers();

 private:
  ::facebook::presto::protocol::cpp2::BufferType __fbthrift_field_type;
 private:
  ::std::int64_t __fbthrift_field_version;
 private:
  bool __fbthrift_field_noMoreBufferIds;
 private:
  ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t> __fbthrift_field_buffers;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OutputBuffers&) const;
  bool operator<(const OutputBuffers&) const;

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type_ref() const& {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type_ref() & {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type() const& {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type() & {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BufferType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> version_ref() const& {
    return {this->__fbthrift_field_version, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> version_ref() & {
    return {this->__fbthrift_field_version, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> version_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_version), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> version() const& {
    return {this->__fbthrift_field_version, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> version() & {
    return {this->__fbthrift_field_version, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "version" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> version() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_version), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "noMoreBufferIds" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreBufferIds_ref() const& {
    return {this->__fbthrift_field_noMoreBufferIds, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreBufferIds" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreBufferIds_ref() & {
    return {this->__fbthrift_field_noMoreBufferIds, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreBufferIds" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreBufferIds_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreBufferIds), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreBufferIds" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreBufferIds() const& {
    return {this->__fbthrift_field_noMoreBufferIds, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreBufferIds" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreBufferIds() & {
    return {this->__fbthrift_field_noMoreBufferIds, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "noMoreBufferIds" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreBufferIds() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreBufferIds), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buffers_ref() const& {
    return {this->__fbthrift_field_buffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buffers_ref() & {
    return {this->__fbthrift_field_buffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buffers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buffers), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buffers() const& {
    return {this->__fbthrift_field_buffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buffers() & {
    return {this->__fbthrift_field_buffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "buffers" } */
  template <typename..., typename fbthrift_T = ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buffers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buffers), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type().value()` instead of `FOO.get_type()`")]]
  ::facebook::presto::protocol::cpp2::BufferType get_type() const;

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type() = BAR` instead of `FOO.set_type(BAR)`")]]
  ::facebook::presto::protocol::cpp2::BufferType& set_type(::facebook::presto::protocol::cpp2::BufferType type_);

  /** Glean { "field": "version" } */
  [[deprecated("Use `FOO.version().value()` instead of `FOO.get_version()`")]]
  ::std::int64_t get_version() const;

  /** Glean { "field": "version" } */
  [[deprecated("Use `FOO.version() = BAR` instead of `FOO.set_version(BAR)`")]]
  ::std::int64_t& set_version(::std::int64_t version_);

  /** Glean { "field": "noMoreBufferIds" } */
  [[deprecated("Use `FOO.noMoreBufferIds().value()` instead of `FOO.get_noMoreBufferIds()`")]]
  bool get_noMoreBufferIds() const;

  /** Glean { "field": "noMoreBufferIds" } */
  [[deprecated("Use `FOO.noMoreBufferIds() = BAR` instead of `FOO.set_noMoreBufferIds(BAR)`")]]
  bool& set_noMoreBufferIds(bool noMoreBufferIds_);

  /** Glean { "field": "buffers" } */
  [[deprecated("Use `FOO.buffers().value()` instead of `FOO.get_buffers()`")]]
  const ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>& get_buffers() const&;

  /** Glean { "field": "buffers" } */
  [[deprecated("Use `FOO.buffers().value()` instead of `FOO.get_buffers()`")]]
  ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t> get_buffers() &&;

  /** Glean { "field": "buffers" } */
  template <typename T_OutputBuffers_buffers_struct_setter = ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>>
  [[deprecated("Use `FOO.buffers() = BAR` instead of `FOO.set_buffers(BAR)`")]]
  ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>& set_buffers(T_OutputBuffers_buffers_struct_setter&& buffers_) {
    buffers_ref() = std::forward<T_OutputBuffers_buffers_struct_setter>(buffers_);
    return __fbthrift_field_buffers;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OutputBuffers>;
  friend void swap(OutputBuffers& a, OutputBuffers& b);
};

template <class Protocol_>
unsigned long OutputBuffers::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TaskUpdateRequest", "kind": "struct" } */
class TaskUpdateRequest final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::session,
    ::apache::thrift::ident::extraCredentials,
    ::apache::thrift::ident::fragment,
    ::apache::thrift::ident::sources,
    ::apache::thrift::ident::outputIds,
    ::apache::thrift::ident::tableWriteInfo
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::SessionRepresentation>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TaskSource>>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::OutputBuffers>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TaskUpdateRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TaskUpdateRequest();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TaskUpdateRequest(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::SessionRepresentation session__arg, ::std::map<::std::string, ::std::string> extraCredentials__arg, ::std::string fragment__arg, ::std::vector<::facebook::presto::protocol::cpp2::TaskSource> sources__arg, ::facebook::presto::protocol::cpp2::OutputBuffers outputIds__arg, ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper tableWriteInfo__arg);

  TaskUpdateRequest(TaskUpdateRequest&&) noexcept;

  TaskUpdateRequest(const TaskUpdateRequest& src);


  TaskUpdateRequest& operator=(TaskUpdateRequest&&) noexcept;
  TaskUpdateRequest& operator=(const TaskUpdateRequest& src);

  ~TaskUpdateRequest();

 private:
  ::facebook::presto::protocol::cpp2::SessionRepresentation __fbthrift_field_session;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_extraCredentials;
 private:
  ::std::string __fbthrift_field_fragment;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::TaskSource> __fbthrift_field_sources;
 private:
  ::facebook::presto::protocol::cpp2::OutputBuffers __fbthrift_field_outputIds;
 private:
  ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper __fbthrift_field_tableWriteInfo;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TaskUpdateRequest&) const;
  bool operator<(const TaskUpdateRequest&) const;

  /** Glean { "field": "session" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SessionRepresentation>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> session_ref() const& {
    return {this->__fbthrift_field_session, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "session" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SessionRepresentation>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> session_ref() & {
    return {this->__fbthrift_field_session, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "session" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SessionRepresentation>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> session_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_session), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "session" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SessionRepresentation>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> session() const& {
    return {this->__fbthrift_field_session, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "session" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SessionRepresentation>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> session() & {
    return {this->__fbthrift_field_session, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "session" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SessionRepresentation>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> session() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_session), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "extraCredentials" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> extraCredentials_ref() const& {
    return {this->__fbthrift_field_extraCredentials, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "extraCredentials" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> extraCredentials_ref() & {
    return {this->__fbthrift_field_extraCredentials, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "extraCredentials" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> extraCredentials_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_extraCredentials), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "extraCredentials" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> extraCredentials() const& {
    return {this->__fbthrift_field_extraCredentials, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "extraCredentials" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> extraCredentials() & {
    return {this->__fbthrift_field_extraCredentials, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "extraCredentials" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> extraCredentials() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_extraCredentials), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fragment" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fragment_ref() const& {
    return {this->__fbthrift_field_fragment, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fragment" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fragment_ref() & {
    return {this->__fbthrift_field_fragment, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fragment" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fragment_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fragment), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fragment" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fragment() const& {
    return {this->__fbthrift_field_fragment, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fragment" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fragment() & {
    return {this->__fbthrift_field_fragment, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fragment" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fragment() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fragment), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "sources" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sources_ref() const& {
    return {this->__fbthrift_field_sources, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "sources" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sources_ref() & {
    return {this->__fbthrift_field_sources, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "sources" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sources_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sources), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "sources" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sources() const& {
    return {this->__fbthrift_field_sources, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "sources" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sources() & {
    return {this->__fbthrift_field_sources, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "sources" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sources() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sources), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "outputIds" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBuffers>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputIds_ref() const& {
    return {this->__fbthrift_field_outputIds, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "outputIds" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBuffers>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputIds_ref() & {
    return {this->__fbthrift_field_outputIds, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "outputIds" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBuffers>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputIds_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputIds), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "outputIds" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBuffers>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputIds() const& {
    return {this->__fbthrift_field_outputIds, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "outputIds" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBuffers>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputIds() & {
    return {this->__fbthrift_field_outputIds, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "outputIds" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBuffers>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputIds() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputIds), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> tableWriteInfo_ref() const& {
    return {this->__fbthrift_field_tableWriteInfo, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> tableWriteInfo_ref() & {
    return {this->__fbthrift_field_tableWriteInfo, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> tableWriteInfo_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_tableWriteInfo), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> tableWriteInfo() const& {
    return {this->__fbthrift_field_tableWriteInfo, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> tableWriteInfo() & {
    return {this->__fbthrift_field_tableWriteInfo, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "tableWriteInfo" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> tableWriteInfo() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_tableWriteInfo), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "session" } */
  [[deprecated("Use `FOO.session().value()` instead of `FOO.get_session()`")]]
  const ::facebook::presto::protocol::cpp2::SessionRepresentation& get_session() const&;

  /** Glean { "field": "session" } */
  [[deprecated("Use `FOO.session().value()` instead of `FOO.get_session()`")]]
  ::facebook::presto::protocol::cpp2::SessionRepresentation get_session() &&;

  /** Glean { "field": "session" } */
  template <typename T_TaskUpdateRequest_session_struct_setter = ::facebook::presto::protocol::cpp2::SessionRepresentation>
  [[deprecated("Use `FOO.session() = BAR` instead of `FOO.set_session(BAR)`")]]
  ::facebook::presto::protocol::cpp2::SessionRepresentation& set_session(T_TaskUpdateRequest_session_struct_setter&& session_) {
    session_ref() = std::forward<T_TaskUpdateRequest_session_struct_setter>(session_);
    return __fbthrift_field_session;
  }

  /** Glean { "field": "extraCredentials" } */
  [[deprecated("Use `FOO.extraCredentials().value()` instead of `FOO.get_extraCredentials()`")]]
  const ::std::map<::std::string, ::std::string>& get_extraCredentials() const&;

  /** Glean { "field": "extraCredentials" } */
  [[deprecated("Use `FOO.extraCredentials().value()` instead of `FOO.get_extraCredentials()`")]]
  ::std::map<::std::string, ::std::string> get_extraCredentials() &&;

  /** Glean { "field": "extraCredentials" } */
  template <typename T_TaskUpdateRequest_extraCredentials_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.extraCredentials() = BAR` instead of `FOO.set_extraCredentials(BAR)`")]]
  ::std::map<::std::string, ::std::string>& set_extraCredentials(T_TaskUpdateRequest_extraCredentials_struct_setter&& extraCredentials_) {
    extraCredentials_ref() = std::forward<T_TaskUpdateRequest_extraCredentials_struct_setter>(extraCredentials_);
    return __fbthrift_field_extraCredentials;
  }

  /** Glean { "field": "fragment" } */
  [[deprecated("Use `FOO.fragment().value()` instead of `FOO.get_fragment()`")]]
  const ::std::string* get_fragment() const&;

  /** Glean { "field": "fragment" } */
  [[deprecated("Use `FOO.fragment().value()` instead of `FOO.get_fragment()`")]]
  ::std::string* get_fragment() &;

  ::std::string* get_fragment() && = delete;

  /** Glean { "field": "fragment" } */
  template <typename T_TaskUpdateRequest_fragment_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fragment() = BAR` instead of `FOO.set_fragment(BAR)`")]]
  ::std::string& set_fragment(T_TaskUpdateRequest_fragment_struct_setter&& fragment_) {
    fragment_ref() = std::forward<T_TaskUpdateRequest_fragment_struct_setter>(fragment_);
    return __fbthrift_field_fragment;
  }

  /** Glean { "field": "sources" } */
  [[deprecated("Use `FOO.sources().value()` instead of `FOO.get_sources()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>& get_sources() const&;

  /** Glean { "field": "sources" } */
  [[deprecated("Use `FOO.sources().value()` instead of `FOO.get_sources()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::TaskSource> get_sources() &&;

  /** Glean { "field": "sources" } */
  template <typename T_TaskUpdateRequest_sources_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>>
  [[deprecated("Use `FOO.sources() = BAR` instead of `FOO.set_sources(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>& set_sources(T_TaskUpdateRequest_sources_struct_setter&& sources_) {
    sources_ref() = std::forward<T_TaskUpdateRequest_sources_struct_setter>(sources_);
    return __fbthrift_field_sources;
  }

  /** Glean { "field": "outputIds" } */
  [[deprecated("Use `FOO.outputIds().value()` instead of `FOO.get_outputIds()`")]]
  const ::facebook::presto::protocol::cpp2::OutputBuffers& get_outputIds() const&;

  /** Glean { "field": "outputIds" } */
  [[deprecated("Use `FOO.outputIds().value()` instead of `FOO.get_outputIds()`")]]
  ::facebook::presto::protocol::cpp2::OutputBuffers get_outputIds() &&;

  /** Glean { "field": "outputIds" } */
  template <typename T_TaskUpdateRequest_outputIds_struct_setter = ::facebook::presto::protocol::cpp2::OutputBuffers>
  [[deprecated("Use `FOO.outputIds() = BAR` instead of `FOO.set_outputIds(BAR)`")]]
  ::facebook::presto::protocol::cpp2::OutputBuffers& set_outputIds(T_TaskUpdateRequest_outputIds_struct_setter&& outputIds_) {
    outputIds_ref() = std::forward<T_TaskUpdateRequest_outputIds_struct_setter>(outputIds_);
    return __fbthrift_field_outputIds;
  }

  /** Glean { "field": "tableWriteInfo" } */
  [[deprecated("Use `FOO.tableWriteInfo().value()` instead of `FOO.get_tableWriteInfo()`")]]
  const ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper* get_tableWriteInfo() const&;

  /** Glean { "field": "tableWriteInfo" } */
  [[deprecated("Use `FOO.tableWriteInfo().value()` instead of `FOO.get_tableWriteInfo()`")]]
  ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper* get_tableWriteInfo() &;

  ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper* get_tableWriteInfo() && = delete;

  /** Glean { "field": "tableWriteInfo" } */
  template <typename T_TaskUpdateRequest_tableWriteInfo_struct_setter = ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>
  [[deprecated("Use `FOO.tableWriteInfo() = BAR` instead of `FOO.set_tableWriteInfo(BAR)`")]]
  ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper& set_tableWriteInfo(T_TaskUpdateRequest_tableWriteInfo_struct_setter&& tableWriteInfo_) {
    tableWriteInfo_ref() = std::forward<T_TaskUpdateRequest_tableWriteInfo_struct_setter>(tableWriteInfo_);
    return __fbthrift_field_tableWriteInfo;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TaskUpdateRequest>;
  friend void swap(TaskUpdateRequest& a, TaskUpdateRequest& b);
};

template <class Protocol_>
unsigned long TaskUpdateRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "ExecutionFailureInfo", "kind": "struct" } */
class ExecutionFailureInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::type,
    ::apache::thrift::ident::message,
    ::apache::thrift::ident::cause,
    ::apache::thrift::ident::suppressed,
    ::apache::thrift::ident::stack,
    ::apache::thrift::ident::errorLocation,
    ::apache::thrift::ident::errorCode,
    ::apache::thrift::ident::remoteHost,
    ::apache::thrift::ident::errorCause
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>,
    ::apache::thrift::type::list<::apache::thrift::type::string_t>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::ErrorLocation>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::ErrorCode>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::HostAddress>,
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::ErrorCause>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ExecutionFailureInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ExecutionFailureInfo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ExecutionFailureInfo(apache::thrift::FragileConstructor, ::std::string type__arg, ::std::string message__arg, ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> cause__arg, ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> suppressed__arg, ::std::vector<::std::string> stack__arg, ::facebook::presto::protocol::cpp2::ErrorLocation errorLocation__arg, ::facebook::presto::protocol::cpp2::ErrorCode errorCode__arg, ::facebook::presto::protocol::cpp2::HostAddress remoteHost__arg, ::facebook::presto::protocol::cpp2::ErrorCause errorCause__arg);

  ExecutionFailureInfo(ExecutionFailureInfo&&) noexcept;

  ExecutionFailureInfo(const ExecutionFailureInfo& src);


  ExecutionFailureInfo& operator=(ExecutionFailureInfo&&) noexcept;
  ExecutionFailureInfo& operator=(const ExecutionFailureInfo& src);

  ~ExecutionFailureInfo();

 private:
  ::std::string __fbthrift_field_type;
 private:
  ::std::string __fbthrift_field_message;
 private:
  ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> __fbthrift_field_cause;
 private:
  ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> __fbthrift_field_suppressed;
 private:
  ::std::vector<::std::string> __fbthrift_field_stack;
 private:
  ::facebook::presto::protocol::cpp2::ErrorLocation __fbthrift_field_errorLocation;
 private:
  ::facebook::presto::protocol::cpp2::ErrorCode __fbthrift_field_errorCode;
 private:
  ::facebook::presto::protocol::cpp2::HostAddress __fbthrift_field_remoteHost;
 private:
  ::facebook::presto::protocol::cpp2::ErrorCause __fbthrift_field_errorCause;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ExecutionFailureInfo&) const;
  bool operator<(const ExecutionFailureInfo&) const;

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type_ref() const& {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type_ref() & {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> type() const& {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> type() & {
    return {this->__fbthrift_field_type, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "type" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> type() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_type), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message_ref() const& {
    return {this->__fbthrift_field_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message_ref() & {
    return {this->__fbthrift_field_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message() const& {
    return {this->__fbthrift_field_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message() & {
    return {this->__fbthrift_field_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(1), __isset.bit(1)};
  }
  /** Glean { "field": "cause" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE fbthrift_T& cause_ref() & {
    return __fbthrift_field_cause;
  }

  /** Glean { "field": "cause" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE const fbthrift_T& cause_ref() const& {
    return __fbthrift_field_cause;
  }

  /** Glean { "field": "cause" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE fbthrift_T&& cause_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_cause);
  }

  /** Glean { "field": "cause" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE const fbthrift_T&& cause_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_cause);
  }

  /** Glean { "field": "cause" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE fbthrift_T& cause() & {
    return __fbthrift_field_cause;
  }

  /** Glean { "field": "cause" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE const fbthrift_T& cause() const& {
    return __fbthrift_field_cause;
  }

  /** Glean { "field": "cause" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE fbthrift_T&& cause() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_cause);
  }

  /** Glean { "field": "cause" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE const fbthrift_T&& cause() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_cause);
  }

  /** Glean { "field": "suppressed" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> suppressed_ref() const& {
    return {this->__fbthrift_field_suppressed, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "suppressed" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> suppressed_ref() & {
    return {this->__fbthrift_field_suppressed, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "suppressed" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> suppressed_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_suppressed), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "suppressed" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> suppressed() const& {
    return {this->__fbthrift_field_suppressed, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "suppressed" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> suppressed() & {
    return {this->__fbthrift_field_suppressed, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "suppressed" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> suppressed() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_suppressed), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "stack" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stack_ref() const& {
    return {this->__fbthrift_field_stack, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "stack" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stack_ref() & {
    return {this->__fbthrift_field_stack, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "stack" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stack_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stack), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "stack" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stack() const& {
    return {this->__fbthrift_field_stack, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "stack" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stack() & {
    return {this->__fbthrift_field_stack, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "stack" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stack() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stack), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "errorLocation" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorLocation>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> errorLocation_ref() const& {
    return {this->__fbthrift_field_errorLocation, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "errorLocation" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorLocation>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> errorLocation_ref() & {
    return {this->__fbthrift_field_errorLocation, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "errorLocation" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorLocation>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> errorLocation_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorLocation), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "errorLocation" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorLocation>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> errorLocation() const& {
    return {this->__fbthrift_field_errorLocation, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "errorLocation" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorLocation>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> errorLocation() & {
    return {this->__fbthrift_field_errorLocation, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "errorLocation" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorLocation>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> errorLocation() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorLocation), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCode>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> errorCode_ref() const& {
    return {this->__fbthrift_field_errorCode, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCode>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> errorCode_ref() & {
    return {this->__fbthrift_field_errorCode, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCode>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> errorCode_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorCode), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCode>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> errorCode() const& {
    return {this->__fbthrift_field_errorCode, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCode>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> errorCode() & {
    return {this->__fbthrift_field_errorCode, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCode>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> errorCode() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorCode), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "remoteHost" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::HostAddress>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> remoteHost_ref() const& {
    return {this->__fbthrift_field_remoteHost, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "remoteHost" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::HostAddress>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> remoteHost_ref() & {
    return {this->__fbthrift_field_remoteHost, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "remoteHost" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::HostAddress>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> remoteHost_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_remoteHost), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "remoteHost" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::HostAddress>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> remoteHost() const& {
    return {this->__fbthrift_field_remoteHost, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "remoteHost" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::HostAddress>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> remoteHost() & {
    return {this->__fbthrift_field_remoteHost, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "remoteHost" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::HostAddress>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> remoteHost() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_remoteHost), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "errorCause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCause>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> errorCause_ref() const& {
    return {this->__fbthrift_field_errorCause, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "errorCause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCause>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> errorCause_ref() & {
    return {this->__fbthrift_field_errorCause, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "errorCause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCause>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> errorCause_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorCause), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "errorCause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCause>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> errorCause() const& {
    return {this->__fbthrift_field_errorCause, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "errorCause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCause>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> errorCause() & {
    return {this->__fbthrift_field_errorCause, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "errorCause" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::ErrorCause>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> errorCause() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorCause), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type().value()` instead of `FOO.get_type()`")]]
  const ::std::string& get_type() const& {
    return __fbthrift_field_type;
  }

  /** Glean { "field": "type" } */
  [[deprecated("Use `FOO.type().value()` instead of `FOO.get_type()`")]]
  ::std::string get_type() && {
    return static_cast<::std::string&&>(__fbthrift_field_type);
  }

  /** Glean { "field": "type" } */
  template <typename T_ExecutionFailureInfo_type_struct_setter = ::std::string>
  [[deprecated("Use `FOO.type() = BAR` instead of `FOO.set_type(BAR)`")]]
  ::std::string& set_type(T_ExecutionFailureInfo_type_struct_setter&& type_) {
    type_ref() = std::forward<T_ExecutionFailureInfo_type_struct_setter>(type_);
    return __fbthrift_field_type;
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  const ::std::string& get_message() const& {
    return __fbthrift_field_message;
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  ::std::string get_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_message);
  }

  /** Glean { "field": "message" } */
  template <typename T_ExecutionFailureInfo_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message() = BAR` instead of `FOO.set_message(BAR)`")]]
  ::std::string& set_message(T_ExecutionFailureInfo_message_struct_setter&& message_) {
    message_ref() = std::forward<T_ExecutionFailureInfo_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  /** Glean { "field": "suppressed" } */
  [[deprecated("Use `FOO.suppressed().value()` instead of `FOO.get_suppressed()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>& get_suppressed() const&;

  /** Glean { "field": "suppressed" } */
  [[deprecated("Use `FOO.suppressed().value()` instead of `FOO.get_suppressed()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> get_suppressed() &&;

  /** Glean { "field": "suppressed" } */
  template <typename T_ExecutionFailureInfo_suppressed_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>
  [[deprecated("Use `FOO.suppressed() = BAR` instead of `FOO.set_suppressed(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>& set_suppressed(T_ExecutionFailureInfo_suppressed_struct_setter&& suppressed_) {
    suppressed_ref() = std::forward<T_ExecutionFailureInfo_suppressed_struct_setter>(suppressed_);
    return __fbthrift_field_suppressed;
  }

  /** Glean { "field": "stack" } */
  [[deprecated("Use `FOO.stack().value()` instead of `FOO.get_stack()`")]]
  const ::std::vector<::std::string>& get_stack() const&;

  /** Glean { "field": "stack" } */
  [[deprecated("Use `FOO.stack().value()` instead of `FOO.get_stack()`")]]
  ::std::vector<::std::string> get_stack() &&;

  /** Glean { "field": "stack" } */
  template <typename T_ExecutionFailureInfo_stack_struct_setter = ::std::vector<::std::string>>
  [[deprecated("Use `FOO.stack() = BAR` instead of `FOO.set_stack(BAR)`")]]
  ::std::vector<::std::string>& set_stack(T_ExecutionFailureInfo_stack_struct_setter&& stack_) {
    stack_ref() = std::forward<T_ExecutionFailureInfo_stack_struct_setter>(stack_);
    return __fbthrift_field_stack;
  }

  /** Glean { "field": "errorLocation" } */
  [[deprecated("Use `FOO.errorLocation().value()` instead of `FOO.get_errorLocation()`")]]
  const ::facebook::presto::protocol::cpp2::ErrorLocation& get_errorLocation() const&;

  /** Glean { "field": "errorLocation" } */
  [[deprecated("Use `FOO.errorLocation().value()` instead of `FOO.get_errorLocation()`")]]
  ::facebook::presto::protocol::cpp2::ErrorLocation get_errorLocation() &&;

  /** Glean { "field": "errorLocation" } */
  template <typename T_ExecutionFailureInfo_errorLocation_struct_setter = ::facebook::presto::protocol::cpp2::ErrorLocation>
  [[deprecated("Use `FOO.errorLocation() = BAR` instead of `FOO.set_errorLocation(BAR)`")]]
  ::facebook::presto::protocol::cpp2::ErrorLocation& set_errorLocation(T_ExecutionFailureInfo_errorLocation_struct_setter&& errorLocation_) {
    errorLocation_ref() = std::forward<T_ExecutionFailureInfo_errorLocation_struct_setter>(errorLocation_);
    return __fbthrift_field_errorLocation;
  }

  /** Glean { "field": "errorCode" } */
  [[deprecated("Use `FOO.errorCode().value()` instead of `FOO.get_errorCode()`")]]
  const ::facebook::presto::protocol::cpp2::ErrorCode& get_errorCode() const&;

  /** Glean { "field": "errorCode" } */
  [[deprecated("Use `FOO.errorCode().value()` instead of `FOO.get_errorCode()`")]]
  ::facebook::presto::protocol::cpp2::ErrorCode get_errorCode() &&;

  /** Glean { "field": "errorCode" } */
  template <typename T_ExecutionFailureInfo_errorCode_struct_setter = ::facebook::presto::protocol::cpp2::ErrorCode>
  [[deprecated("Use `FOO.errorCode() = BAR` instead of `FOO.set_errorCode(BAR)`")]]
  ::facebook::presto::protocol::cpp2::ErrorCode& set_errorCode(T_ExecutionFailureInfo_errorCode_struct_setter&& errorCode_) {
    errorCode_ref() = std::forward<T_ExecutionFailureInfo_errorCode_struct_setter>(errorCode_);
    return __fbthrift_field_errorCode;
  }

  /** Glean { "field": "remoteHost" } */
  [[deprecated("Use `FOO.remoteHost().value()` instead of `FOO.get_remoteHost()`")]]
  const ::facebook::presto::protocol::cpp2::HostAddress& get_remoteHost() const&;

  /** Glean { "field": "remoteHost" } */
  [[deprecated("Use `FOO.remoteHost().value()` instead of `FOO.get_remoteHost()`")]]
  ::facebook::presto::protocol::cpp2::HostAddress get_remoteHost() &&;

  /** Glean { "field": "remoteHost" } */
  template <typename T_ExecutionFailureInfo_remoteHost_struct_setter = ::facebook::presto::protocol::cpp2::HostAddress>
  [[deprecated("Use `FOO.remoteHost() = BAR` instead of `FOO.set_remoteHost(BAR)`")]]
  ::facebook::presto::protocol::cpp2::HostAddress& set_remoteHost(T_ExecutionFailureInfo_remoteHost_struct_setter&& remoteHost_) {
    remoteHost_ref() = std::forward<T_ExecutionFailureInfo_remoteHost_struct_setter>(remoteHost_);
    return __fbthrift_field_remoteHost;
  }

  /** Glean { "field": "errorCause" } */
  [[deprecated("Use `FOO.errorCause().value()` instead of `FOO.get_errorCause()`")]]
  ::facebook::presto::protocol::cpp2::ErrorCause get_errorCause() const;

  /** Glean { "field": "errorCause" } */
  [[deprecated("Use `FOO.errorCause() = BAR` instead of `FOO.set_errorCause(BAR)`")]]
  ::facebook::presto::protocol::cpp2::ErrorCause& set_errorCause(::facebook::presto::protocol::cpp2::ErrorCause errorCause_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ExecutionFailureInfo>;
  friend void swap(ExecutionFailureInfo& a, ExecutionFailureInfo& b);
};

template <class Protocol_>
unsigned long ExecutionFailureInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TaskId", "kind": "struct" } */
class TaskId final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::stageExecutionId,
    ::apache::thrift::ident::id,
    ::apache::thrift::ident::attemptNumber
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::StageExecutionId>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TaskId;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TaskId() :
      __fbthrift_field_id(),
      __fbthrift_field_attemptNumber() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TaskId(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::StageExecutionId stageExecutionId__arg, ::std::int32_t id__arg, ::std::int32_t attemptNumber__arg);

  TaskId(TaskId&&) noexcept;

  TaskId(const TaskId& src);


  TaskId& operator=(TaskId&&) noexcept;
  TaskId& operator=(const TaskId& src);
 private:
  ::facebook::presto::protocol::cpp2::StageExecutionId __fbthrift_field_stageExecutionId;
 private:
  ::std::int32_t __fbthrift_field_id;
 private:
  ::std::int32_t __fbthrift_field_attemptNumber;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TaskId&) const;
  bool operator<(const TaskId&) const;

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageExecutionId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stageExecutionId_ref() const& {
    return {this->__fbthrift_field_stageExecutionId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageExecutionId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stageExecutionId_ref() & {
    return {this->__fbthrift_field_stageExecutionId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageExecutionId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stageExecutionId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stageExecutionId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageExecutionId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stageExecutionId() const& {
    return {this->__fbthrift_field_stageExecutionId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageExecutionId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stageExecutionId() & {
    return {this->__fbthrift_field_stageExecutionId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::StageExecutionId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stageExecutionId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stageExecutionId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id_ref() const& {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id_ref() & {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id() const& {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id() & {
    return {this->__fbthrift_field_id, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "attemptNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> attemptNumber_ref() const& {
    return {this->__fbthrift_field_attemptNumber, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "attemptNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> attemptNumber_ref() & {
    return {this->__fbthrift_field_attemptNumber, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "attemptNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> attemptNumber_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_attemptNumber), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "attemptNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> attemptNumber() const& {
    return {this->__fbthrift_field_attemptNumber, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "attemptNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> attemptNumber() & {
    return {this->__fbthrift_field_attemptNumber, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "attemptNumber" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> attemptNumber() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_attemptNumber), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "stageExecutionId" } */
  [[deprecated("Use `FOO.stageExecutionId().value()` instead of `FOO.get_stageExecutionId()`")]]
  const ::facebook::presto::protocol::cpp2::StageExecutionId& get_stageExecutionId() const&;

  /** Glean { "field": "stageExecutionId" } */
  [[deprecated("Use `FOO.stageExecutionId().value()` instead of `FOO.get_stageExecutionId()`")]]
  ::facebook::presto::protocol::cpp2::StageExecutionId get_stageExecutionId() &&;

  /** Glean { "field": "stageExecutionId" } */
  template <typename T_TaskId_stageExecutionId_struct_setter = ::facebook::presto::protocol::cpp2::StageExecutionId>
  [[deprecated("Use `FOO.stageExecutionId() = BAR` instead of `FOO.set_stageExecutionId(BAR)`")]]
  ::facebook::presto::protocol::cpp2::StageExecutionId& set_stageExecutionId(T_TaskId_stageExecutionId_struct_setter&& stageExecutionId_) {
    stageExecutionId_ref() = std::forward<T_TaskId_stageExecutionId_struct_setter>(stageExecutionId_);
    return __fbthrift_field_stageExecutionId;
  }

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id().value()` instead of `FOO.get_id()`")]]
  ::std::int32_t get_id() const;

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id() = BAR` instead of `FOO.set_id(BAR)`")]]
  ::std::int32_t& set_id(::std::int32_t id_);

  /** Glean { "field": "attemptNumber" } */
  [[deprecated("Use `FOO.attemptNumber().value()` instead of `FOO.get_attemptNumber()`")]]
  ::std::int32_t get_attemptNumber() const;

  /** Glean { "field": "attemptNumber" } */
  [[deprecated("Use `FOO.attemptNumber() = BAR` instead of `FOO.set_attemptNumber(BAR)`")]]
  ::std::int32_t& set_attemptNumber(::std::int32_t attemptNumber_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TaskId>;
  friend void swap(TaskId& a, TaskId& b);
};

template <class Protocol_>
unsigned long TaskId::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "OperatorInfoUnion", "kind": "union" } */
class OperatorInfoUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 10;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::exchangeClientStatus,
    ::apache::thrift::ident::localExchangeBufferInfo,
    ::apache::thrift::ident::tableFinishInfo,
    ::apache::thrift::ident::splitOperatorInfo,
    ::apache::thrift::ident::hashCollisionsInfo,
    ::apache::thrift::ident::partitionedOutputInfo,
    ::apache::thrift::ident::joinOperatorInfo,
    ::apache::thrift::ident::windowInfo,
    ::apache::thrift::ident::tableWriterInfo,
    ::apache::thrift::ident::tableWriterMergeInfo
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::ExchangeClientStatus>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TableFinishInfo>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::SplitOperatorInfo>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::HashCollisionsInfo>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::PartitionedOutputInfo>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::JoinOperatorInfo>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::WindowInfo>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TableWriterInfo>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TableWriterMergeInfo>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OperatorInfoUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    exchangeClientStatus = 1,
    localExchangeBufferInfo = 2,
    tableFinishInfo = 3,
    splitOperatorInfo = 4,
    hashCollisionsInfo = 5,
    partitionedOutputInfo = 6,
    joinOperatorInfo = 7,
    windowInfo = 8,
    tableWriterInfo = 9,
    tableWriterMergeInfo = 10,
  } ;

  OperatorInfoUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  OperatorInfoUnion(OperatorInfoUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::exchangeClientStatus:
      {
        set_exchangeClientStatus(std::move(rhs.value_.exchangeClientStatus));
        break;
      }
      case Type::localExchangeBufferInfo:
      {
        set_localExchangeBufferInfo(std::move(rhs.value_.localExchangeBufferInfo));
        break;
      }
      case Type::tableFinishInfo:
      {
        set_tableFinishInfo(std::move(rhs.value_.tableFinishInfo));
        break;
      }
      case Type::splitOperatorInfo:
      {
        set_splitOperatorInfo(std::move(rhs.value_.splitOperatorInfo));
        break;
      }
      case Type::hashCollisionsInfo:
      {
        set_hashCollisionsInfo(std::move(rhs.value_.hashCollisionsInfo));
        break;
      }
      case Type::partitionedOutputInfo:
      {
        set_partitionedOutputInfo(std::move(rhs.value_.partitionedOutputInfo));
        break;
      }
      case Type::joinOperatorInfo:
      {
        set_joinOperatorInfo(std::move(rhs.value_.joinOperatorInfo));
        break;
      }
      case Type::windowInfo:
      {
        set_windowInfo(std::move(rhs.value_.windowInfo));
        break;
      }
      case Type::tableWriterInfo:
      {
        set_tableWriterInfo(std::move(rhs.value_.tableWriterInfo));
        break;
      }
      case Type::tableWriterMergeInfo:
      {
        set_tableWriterMergeInfo(std::move(rhs.value_.tableWriterMergeInfo));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  OperatorInfoUnion(const OperatorInfoUnion& rhs);

  OperatorInfoUnion& operator=(OperatorInfoUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::exchangeClientStatus:
      {
        set_exchangeClientStatus(std::move(rhs.value_.exchangeClientStatus));
        break;
      }
      case Type::localExchangeBufferInfo:
      {
        set_localExchangeBufferInfo(std::move(rhs.value_.localExchangeBufferInfo));
        break;
      }
      case Type::tableFinishInfo:
      {
        set_tableFinishInfo(std::move(rhs.value_.tableFinishInfo));
        break;
      }
      case Type::splitOperatorInfo:
      {
        set_splitOperatorInfo(std::move(rhs.value_.splitOperatorInfo));
        break;
      }
      case Type::hashCollisionsInfo:
      {
        set_hashCollisionsInfo(std::move(rhs.value_.hashCollisionsInfo));
        break;
      }
      case Type::partitionedOutputInfo:
      {
        set_partitionedOutputInfo(std::move(rhs.value_.partitionedOutputInfo));
        break;
      }
      case Type::joinOperatorInfo:
      {
        set_joinOperatorInfo(std::move(rhs.value_.joinOperatorInfo));
        break;
      }
      case Type::windowInfo:
      {
        set_windowInfo(std::move(rhs.value_.windowInfo));
        break;
      }
      case Type::tableWriterInfo:
      {
        set_tableWriterInfo(std::move(rhs.value_.tableWriterInfo));
        break;
      }
      case Type::tableWriterMergeInfo:
      {
        set_tableWriterMergeInfo(std::move(rhs.value_.tableWriterMergeInfo));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  OperatorInfoUnion& operator=(const OperatorInfoUnion& rhs);

  ~OperatorInfoUnion();

  union storage_type {
    ::facebook::presto::protocol::cpp2::ExchangeClientStatus exchangeClientStatus;
    ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo localExchangeBufferInfo;
    ::facebook::presto::protocol::cpp2::TableFinishInfo tableFinishInfo;
    ::facebook::presto::protocol::cpp2::SplitOperatorInfo splitOperatorInfo;
    ::facebook::presto::protocol::cpp2::HashCollisionsInfo hashCollisionsInfo;
    ::facebook::presto::protocol::cpp2::PartitionedOutputInfo partitionedOutputInfo;
    ::facebook::presto::protocol::cpp2::JoinOperatorInfo joinOperatorInfo;
    ::facebook::presto::protocol::cpp2::WindowInfo windowInfo;
    ::facebook::presto::protocol::cpp2::TableWriterInfo tableWriterInfo;
    ::facebook::presto::protocol::cpp2::TableWriterMergeInfo tableWriterMergeInfo;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const OperatorInfoUnion&) const;
  bool operator<(const OperatorInfoUnion&) const;

  /** Glean { "field": "exchangeClientStatus" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::ExchangeClientStatus& set_exchangeClientStatus(::facebook::presto::protocol::cpp2::ExchangeClientStatus const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::ExchangeClientStatus;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::exchangeClientStatus);
    ::new (std::addressof(value_.exchangeClientStatus)) T(t);
    return value_.exchangeClientStatus;
  }

  /** Glean { "field": "exchangeClientStatus" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::ExchangeClientStatus& set_exchangeClientStatus(::facebook::presto::protocol::cpp2::ExchangeClientStatus&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::ExchangeClientStatus;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::exchangeClientStatus);
    ::new (std::addressof(value_.exchangeClientStatus)) T(std::move(t));
    return value_.exchangeClientStatus;
  }

  /** Glean { "field": "exchangeClientStatus" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::ExchangeClientStatus, T...>> ::facebook::presto::protocol::cpp2::ExchangeClientStatus& set_exchangeClientStatus(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::exchangeClientStatus);
    ::new (std::addressof(value_.exchangeClientStatus)) ::facebook::presto::protocol::cpp2::ExchangeClientStatus(std::forward<T>(t)...);
    return value_.exchangeClientStatus;
  }

  /** Glean { "field": "localExchangeBufferInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo& set_localExchangeBufferInfo(::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::localExchangeBufferInfo);
    ::new (std::addressof(value_.localExchangeBufferInfo)) T(t);
    return value_.localExchangeBufferInfo;
  }

  /** Glean { "field": "localExchangeBufferInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo& set_localExchangeBufferInfo(::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::localExchangeBufferInfo);
    ::new (std::addressof(value_.localExchangeBufferInfo)) T(std::move(t));
    return value_.localExchangeBufferInfo;
  }

  /** Glean { "field": "localExchangeBufferInfo" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo, T...>> ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo& set_localExchangeBufferInfo(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::localExchangeBufferInfo);
    ::new (std::addressof(value_.localExchangeBufferInfo)) ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo(std::forward<T>(t)...);
    return value_.localExchangeBufferInfo;
  }

  /** Glean { "field": "tableFinishInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::TableFinishInfo& set_tableFinishInfo(::facebook::presto::protocol::cpp2::TableFinishInfo const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::TableFinishInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::tableFinishInfo);
    ::new (std::addressof(value_.tableFinishInfo)) T(t);
    return value_.tableFinishInfo;
  }

  /** Glean { "field": "tableFinishInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::TableFinishInfo& set_tableFinishInfo(::facebook::presto::protocol::cpp2::TableFinishInfo&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::TableFinishInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::tableFinishInfo);
    ::new (std::addressof(value_.tableFinishInfo)) T(std::move(t));
    return value_.tableFinishInfo;
  }

  /** Glean { "field": "tableFinishInfo" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::TableFinishInfo, T...>> ::facebook::presto::protocol::cpp2::TableFinishInfo& set_tableFinishInfo(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::tableFinishInfo);
    ::new (std::addressof(value_.tableFinishInfo)) ::facebook::presto::protocol::cpp2::TableFinishInfo(std::forward<T>(t)...);
    return value_.tableFinishInfo;
  }

  /** Glean { "field": "splitOperatorInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::SplitOperatorInfo& set_splitOperatorInfo(::facebook::presto::protocol::cpp2::SplitOperatorInfo const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::SplitOperatorInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::splitOperatorInfo);
    ::new (std::addressof(value_.splitOperatorInfo)) T(t);
    return value_.splitOperatorInfo;
  }

  /** Glean { "field": "splitOperatorInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::SplitOperatorInfo& set_splitOperatorInfo(::facebook::presto::protocol::cpp2::SplitOperatorInfo&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::SplitOperatorInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::splitOperatorInfo);
    ::new (std::addressof(value_.splitOperatorInfo)) T(std::move(t));
    return value_.splitOperatorInfo;
  }

  /** Glean { "field": "splitOperatorInfo" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::SplitOperatorInfo, T...>> ::facebook::presto::protocol::cpp2::SplitOperatorInfo& set_splitOperatorInfo(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::splitOperatorInfo);
    ::new (std::addressof(value_.splitOperatorInfo)) ::facebook::presto::protocol::cpp2::SplitOperatorInfo(std::forward<T>(t)...);
    return value_.splitOperatorInfo;
  }

  /** Glean { "field": "hashCollisionsInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::HashCollisionsInfo& set_hashCollisionsInfo(::facebook::presto::protocol::cpp2::HashCollisionsInfo const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::HashCollisionsInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::hashCollisionsInfo);
    ::new (std::addressof(value_.hashCollisionsInfo)) T(t);
    return value_.hashCollisionsInfo;
  }

  /** Glean { "field": "hashCollisionsInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::HashCollisionsInfo& set_hashCollisionsInfo(::facebook::presto::protocol::cpp2::HashCollisionsInfo&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::HashCollisionsInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::hashCollisionsInfo);
    ::new (std::addressof(value_.hashCollisionsInfo)) T(std::move(t));
    return value_.hashCollisionsInfo;
  }

  /** Glean { "field": "hashCollisionsInfo" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::HashCollisionsInfo, T...>> ::facebook::presto::protocol::cpp2::HashCollisionsInfo& set_hashCollisionsInfo(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::hashCollisionsInfo);
    ::new (std::addressof(value_.hashCollisionsInfo)) ::facebook::presto::protocol::cpp2::HashCollisionsInfo(std::forward<T>(t)...);
    return value_.hashCollisionsInfo;
  }

  /** Glean { "field": "partitionedOutputInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::PartitionedOutputInfo& set_partitionedOutputInfo(::facebook::presto::protocol::cpp2::PartitionedOutputInfo const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::PartitionedOutputInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::partitionedOutputInfo);
    ::new (std::addressof(value_.partitionedOutputInfo)) T(t);
    return value_.partitionedOutputInfo;
  }

  /** Glean { "field": "partitionedOutputInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::PartitionedOutputInfo& set_partitionedOutputInfo(::facebook::presto::protocol::cpp2::PartitionedOutputInfo&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::PartitionedOutputInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::partitionedOutputInfo);
    ::new (std::addressof(value_.partitionedOutputInfo)) T(std::move(t));
    return value_.partitionedOutputInfo;
  }

  /** Glean { "field": "partitionedOutputInfo" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::PartitionedOutputInfo, T...>> ::facebook::presto::protocol::cpp2::PartitionedOutputInfo& set_partitionedOutputInfo(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::partitionedOutputInfo);
    ::new (std::addressof(value_.partitionedOutputInfo)) ::facebook::presto::protocol::cpp2::PartitionedOutputInfo(std::forward<T>(t)...);
    return value_.partitionedOutputInfo;
  }

  /** Glean { "field": "joinOperatorInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::JoinOperatorInfo& set_joinOperatorInfo(::facebook::presto::protocol::cpp2::JoinOperatorInfo const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::JoinOperatorInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::joinOperatorInfo);
    ::new (std::addressof(value_.joinOperatorInfo)) T(t);
    return value_.joinOperatorInfo;
  }

  /** Glean { "field": "joinOperatorInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::JoinOperatorInfo& set_joinOperatorInfo(::facebook::presto::protocol::cpp2::JoinOperatorInfo&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::JoinOperatorInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::joinOperatorInfo);
    ::new (std::addressof(value_.joinOperatorInfo)) T(std::move(t));
    return value_.joinOperatorInfo;
  }

  /** Glean { "field": "joinOperatorInfo" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::JoinOperatorInfo, T...>> ::facebook::presto::protocol::cpp2::JoinOperatorInfo& set_joinOperatorInfo(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::joinOperatorInfo);
    ::new (std::addressof(value_.joinOperatorInfo)) ::facebook::presto::protocol::cpp2::JoinOperatorInfo(std::forward<T>(t)...);
    return value_.joinOperatorInfo;
  }

  /** Glean { "field": "windowInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::WindowInfo& set_windowInfo(::facebook::presto::protocol::cpp2::WindowInfo const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::WindowInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::windowInfo);
    ::new (std::addressof(value_.windowInfo)) T(t);
    return value_.windowInfo;
  }

  /** Glean { "field": "windowInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::WindowInfo& set_windowInfo(::facebook::presto::protocol::cpp2::WindowInfo&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::WindowInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::windowInfo);
    ::new (std::addressof(value_.windowInfo)) T(std::move(t));
    return value_.windowInfo;
  }

  /** Glean { "field": "windowInfo" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::WindowInfo, T...>> ::facebook::presto::protocol::cpp2::WindowInfo& set_windowInfo(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::windowInfo);
    ::new (std::addressof(value_.windowInfo)) ::facebook::presto::protocol::cpp2::WindowInfo(std::forward<T>(t)...);
    return value_.windowInfo;
  }

  /** Glean { "field": "tableWriterInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::TableWriterInfo& set_tableWriterInfo(::facebook::presto::protocol::cpp2::TableWriterInfo const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::TableWriterInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::tableWriterInfo);
    ::new (std::addressof(value_.tableWriterInfo)) T(t);
    return value_.tableWriterInfo;
  }

  /** Glean { "field": "tableWriterInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::TableWriterInfo& set_tableWriterInfo(::facebook::presto::protocol::cpp2::TableWriterInfo&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::TableWriterInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::tableWriterInfo);
    ::new (std::addressof(value_.tableWriterInfo)) T(std::move(t));
    return value_.tableWriterInfo;
  }

  /** Glean { "field": "tableWriterInfo" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::TableWriterInfo, T...>> ::facebook::presto::protocol::cpp2::TableWriterInfo& set_tableWriterInfo(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::tableWriterInfo);
    ::new (std::addressof(value_.tableWriterInfo)) ::facebook::presto::protocol::cpp2::TableWriterInfo(std::forward<T>(t)...);
    return value_.tableWriterInfo;
  }

  /** Glean { "field": "tableWriterMergeInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::TableWriterMergeInfo& set_tableWriterMergeInfo(::facebook::presto::protocol::cpp2::TableWriterMergeInfo const &t) {
    using T0 = ::facebook::presto::protocol::cpp2::TableWriterMergeInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::tableWriterMergeInfo);
    ::new (std::addressof(value_.tableWriterMergeInfo)) T(t);
    return value_.tableWriterMergeInfo;
  }

  /** Glean { "field": "tableWriterMergeInfo" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::presto::protocol::cpp2::TableWriterMergeInfo& set_tableWriterMergeInfo(::facebook::presto::protocol::cpp2::TableWriterMergeInfo&& t) {
    using T0 = ::facebook::presto::protocol::cpp2::TableWriterMergeInfo;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::tableWriterMergeInfo);
    ::new (std::addressof(value_.tableWriterMergeInfo)) T(std::move(t));
    return value_.tableWriterMergeInfo;
  }

  /** Glean { "field": "tableWriterMergeInfo" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::presto::protocol::cpp2::TableWriterMergeInfo, T...>> ::facebook::presto::protocol::cpp2::TableWriterMergeInfo& set_tableWriterMergeInfo(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::tableWriterMergeInfo);
    ::new (std::addressof(value_.tableWriterMergeInfo)) ::facebook::presto::protocol::cpp2::TableWriterMergeInfo(std::forward<T>(t)...);
    return value_.tableWriterMergeInfo;
  }

  /** Glean { "field": "exchangeClientStatus" } */
  ::facebook::presto::protocol::cpp2::ExchangeClientStatus const& get_exchangeClientStatus() const {
    if (getType() != Type::exchangeClientStatus) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.exchangeClientStatus;
  }

  /** Glean { "field": "localExchangeBufferInfo" } */
  ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo const& get_localExchangeBufferInfo() const {
    if (getType() != Type::localExchangeBufferInfo) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.localExchangeBufferInfo;
  }

  /** Glean { "field": "tableFinishInfo" } */
  ::facebook::presto::protocol::cpp2::TableFinishInfo const& get_tableFinishInfo() const {
    if (getType() != Type::tableFinishInfo) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.tableFinishInfo;
  }

  /** Glean { "field": "splitOperatorInfo" } */
  ::facebook::presto::protocol::cpp2::SplitOperatorInfo const& get_splitOperatorInfo() const {
    if (getType() != Type::splitOperatorInfo) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.splitOperatorInfo;
  }

  /** Glean { "field": "hashCollisionsInfo" } */
  ::facebook::presto::protocol::cpp2::HashCollisionsInfo const& get_hashCollisionsInfo() const {
    if (getType() != Type::hashCollisionsInfo) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.hashCollisionsInfo;
  }

  /** Glean { "field": "partitionedOutputInfo" } */
  ::facebook::presto::protocol::cpp2::PartitionedOutputInfo const& get_partitionedOutputInfo() const {
    if (getType() != Type::partitionedOutputInfo) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.partitionedOutputInfo;
  }

  /** Glean { "field": "joinOperatorInfo" } */
  ::facebook::presto::protocol::cpp2::JoinOperatorInfo const& get_joinOperatorInfo() const {
    if (getType() != Type::joinOperatorInfo) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.joinOperatorInfo;
  }

  /** Glean { "field": "windowInfo" } */
  ::facebook::presto::protocol::cpp2::WindowInfo const& get_windowInfo() const {
    if (getType() != Type::windowInfo) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.windowInfo;
  }

  /** Glean { "field": "tableWriterInfo" } */
  ::facebook::presto::protocol::cpp2::TableWriterInfo const& get_tableWriterInfo() const {
    if (getType() != Type::tableWriterInfo) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.tableWriterInfo;
  }

  /** Glean { "field": "tableWriterMergeInfo" } */
  ::facebook::presto::protocol::cpp2::TableWriterMergeInfo const& get_tableWriterMergeInfo() const {
    if (getType() != Type::tableWriterMergeInfo) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.tableWriterMergeInfo;
  }

  ::facebook::presto::protocol::cpp2::ExchangeClientStatus& mutable_exchangeClientStatus() {
    assert(getType() == Type::exchangeClientStatus);
    return value_.exchangeClientStatus;
  }

  ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo& mutable_localExchangeBufferInfo() {
    assert(getType() == Type::localExchangeBufferInfo);
    return value_.localExchangeBufferInfo;
  }

  ::facebook::presto::protocol::cpp2::TableFinishInfo& mutable_tableFinishInfo() {
    assert(getType() == Type::tableFinishInfo);
    return value_.tableFinishInfo;
  }

  ::facebook::presto::protocol::cpp2::SplitOperatorInfo& mutable_splitOperatorInfo() {
    assert(getType() == Type::splitOperatorInfo);
    return value_.splitOperatorInfo;
  }

  ::facebook::presto::protocol::cpp2::HashCollisionsInfo& mutable_hashCollisionsInfo() {
    assert(getType() == Type::hashCollisionsInfo);
    return value_.hashCollisionsInfo;
  }

  ::facebook::presto::protocol::cpp2::PartitionedOutputInfo& mutable_partitionedOutputInfo() {
    assert(getType() == Type::partitionedOutputInfo);
    return value_.partitionedOutputInfo;
  }

  ::facebook::presto::protocol::cpp2::JoinOperatorInfo& mutable_joinOperatorInfo() {
    assert(getType() == Type::joinOperatorInfo);
    return value_.joinOperatorInfo;
  }

  ::facebook::presto::protocol::cpp2::WindowInfo& mutable_windowInfo() {
    assert(getType() == Type::windowInfo);
    return value_.windowInfo;
  }

  ::facebook::presto::protocol::cpp2::TableWriterInfo& mutable_tableWriterInfo() {
    assert(getType() == Type::tableWriterInfo);
    return value_.tableWriterInfo;
  }

  ::facebook::presto::protocol::cpp2::TableWriterMergeInfo& mutable_tableWriterMergeInfo() {
    assert(getType() == Type::tableWriterMergeInfo);
    return value_.tableWriterMergeInfo;
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::ExchangeClientStatus>
  T move_exchangeClientStatus() {
    assert(getType() == Type::exchangeClientStatus);
    return std::move(value_.exchangeClientStatus);
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>
  T move_localExchangeBufferInfo() {
    assert(getType() == Type::localExchangeBufferInfo);
    return std::move(value_.localExchangeBufferInfo);
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableFinishInfo>
  T move_tableFinishInfo() {
    assert(getType() == Type::tableFinishInfo);
    return std::move(value_.tableFinishInfo);
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::SplitOperatorInfo>
  T move_splitOperatorInfo() {
    assert(getType() == Type::splitOperatorInfo);
    return std::move(value_.splitOperatorInfo);
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::HashCollisionsInfo>
  T move_hashCollisionsInfo() {
    assert(getType() == Type::hashCollisionsInfo);
    return std::move(value_.hashCollisionsInfo);
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::PartitionedOutputInfo>
  T move_partitionedOutputInfo() {
    assert(getType() == Type::partitionedOutputInfo);
    return std::move(value_.partitionedOutputInfo);
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::JoinOperatorInfo>
  T move_joinOperatorInfo() {
    assert(getType() == Type::joinOperatorInfo);
    return std::move(value_.joinOperatorInfo);
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::WindowInfo>
  T move_windowInfo() {
    assert(getType() == Type::windowInfo);
    return std::move(value_.windowInfo);
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterInfo>
  T move_tableWriterInfo() {
    assert(getType() == Type::tableWriterInfo);
    return std::move(value_.tableWriterInfo);
  }

  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterMergeInfo>
  T move_tableWriterMergeInfo() {
    assert(getType() == Type::tableWriterMergeInfo);
    return std::move(value_.tableWriterMergeInfo);
  }

  /** Glean { "field": "exchangeClientStatus" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::ExchangeClientStatus>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> exchangeClientStatus_ref() const& {
    return {value_.exchangeClientStatus, type_, folly::to_underlying(Type::exchangeClientStatus), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "exchangeClientStatus" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::ExchangeClientStatus>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> exchangeClientStatus_ref() const&& {
    return {std::move(value_.exchangeClientStatus), type_, folly::to_underlying(Type::exchangeClientStatus), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "exchangeClientStatus" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::ExchangeClientStatus>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> exchangeClientStatus_ref() & {
    return {value_.exchangeClientStatus, type_, folly::to_underlying(Type::exchangeClientStatus), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "exchangeClientStatus" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::ExchangeClientStatus>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> exchangeClientStatus_ref() && {
    return {std::move(value_.exchangeClientStatus), type_, folly::to_underlying(Type::exchangeClientStatus), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "localExchangeBufferInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> localExchangeBufferInfo_ref() const& {
    return {value_.localExchangeBufferInfo, type_, folly::to_underlying(Type::localExchangeBufferInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "localExchangeBufferInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> localExchangeBufferInfo_ref() const&& {
    return {std::move(value_.localExchangeBufferInfo), type_, folly::to_underlying(Type::localExchangeBufferInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "localExchangeBufferInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> localExchangeBufferInfo_ref() & {
    return {value_.localExchangeBufferInfo, type_, folly::to_underlying(Type::localExchangeBufferInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "localExchangeBufferInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> localExchangeBufferInfo_ref() && {
    return {std::move(value_.localExchangeBufferInfo), type_, folly::to_underlying(Type::localExchangeBufferInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "tableFinishInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableFinishInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> tableFinishInfo_ref() const& {
    return {value_.tableFinishInfo, type_, folly::to_underlying(Type::tableFinishInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "tableFinishInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableFinishInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> tableFinishInfo_ref() const&& {
    return {std::move(value_.tableFinishInfo), type_, folly::to_underlying(Type::tableFinishInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "tableFinishInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableFinishInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> tableFinishInfo_ref() & {
    return {value_.tableFinishInfo, type_, folly::to_underlying(Type::tableFinishInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "tableFinishInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableFinishInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> tableFinishInfo_ref() && {
    return {std::move(value_.tableFinishInfo), type_, folly::to_underlying(Type::tableFinishInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "splitOperatorInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::SplitOperatorInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> splitOperatorInfo_ref() const& {
    return {value_.splitOperatorInfo, type_, folly::to_underlying(Type::splitOperatorInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "splitOperatorInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::SplitOperatorInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> splitOperatorInfo_ref() const&& {
    return {std::move(value_.splitOperatorInfo), type_, folly::to_underlying(Type::splitOperatorInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "splitOperatorInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::SplitOperatorInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> splitOperatorInfo_ref() & {
    return {value_.splitOperatorInfo, type_, folly::to_underlying(Type::splitOperatorInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "splitOperatorInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::SplitOperatorInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> splitOperatorInfo_ref() && {
    return {std::move(value_.splitOperatorInfo), type_, folly::to_underlying(Type::splitOperatorInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "hashCollisionsInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::HashCollisionsInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> hashCollisionsInfo_ref() const& {
    return {value_.hashCollisionsInfo, type_, folly::to_underlying(Type::hashCollisionsInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "hashCollisionsInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::HashCollisionsInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> hashCollisionsInfo_ref() const&& {
    return {std::move(value_.hashCollisionsInfo), type_, folly::to_underlying(Type::hashCollisionsInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "hashCollisionsInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::HashCollisionsInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> hashCollisionsInfo_ref() & {
    return {value_.hashCollisionsInfo, type_, folly::to_underlying(Type::hashCollisionsInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "hashCollisionsInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::HashCollisionsInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> hashCollisionsInfo_ref() && {
    return {std::move(value_.hashCollisionsInfo), type_, folly::to_underlying(Type::hashCollisionsInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "partitionedOutputInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::PartitionedOutputInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> partitionedOutputInfo_ref() const& {
    return {value_.partitionedOutputInfo, type_, folly::to_underlying(Type::partitionedOutputInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "partitionedOutputInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::PartitionedOutputInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> partitionedOutputInfo_ref() const&& {
    return {std::move(value_.partitionedOutputInfo), type_, folly::to_underlying(Type::partitionedOutputInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "partitionedOutputInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::PartitionedOutputInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> partitionedOutputInfo_ref() & {
    return {value_.partitionedOutputInfo, type_, folly::to_underlying(Type::partitionedOutputInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "partitionedOutputInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::PartitionedOutputInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> partitionedOutputInfo_ref() && {
    return {std::move(value_.partitionedOutputInfo), type_, folly::to_underlying(Type::partitionedOutputInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "joinOperatorInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::JoinOperatorInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> joinOperatorInfo_ref() const& {
    return {value_.joinOperatorInfo, type_, folly::to_underlying(Type::joinOperatorInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "joinOperatorInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::JoinOperatorInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> joinOperatorInfo_ref() const&& {
    return {std::move(value_.joinOperatorInfo), type_, folly::to_underlying(Type::joinOperatorInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "joinOperatorInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::JoinOperatorInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> joinOperatorInfo_ref() & {
    return {value_.joinOperatorInfo, type_, folly::to_underlying(Type::joinOperatorInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "joinOperatorInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::JoinOperatorInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> joinOperatorInfo_ref() && {
    return {std::move(value_.joinOperatorInfo), type_, folly::to_underlying(Type::joinOperatorInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "windowInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::WindowInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> windowInfo_ref() const& {
    return {value_.windowInfo, type_, folly::to_underlying(Type::windowInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "windowInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::WindowInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> windowInfo_ref() const&& {
    return {std::move(value_.windowInfo), type_, folly::to_underlying(Type::windowInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "windowInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::WindowInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> windowInfo_ref() & {
    return {value_.windowInfo, type_, folly::to_underlying(Type::windowInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "windowInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::WindowInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> windowInfo_ref() && {
    return {std::move(value_.windowInfo), type_, folly::to_underlying(Type::windowInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "tableWriterInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> tableWriterInfo_ref() const& {
    return {value_.tableWriterInfo, type_, folly::to_underlying(Type::tableWriterInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "tableWriterInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> tableWriterInfo_ref() const&& {
    return {std::move(value_.tableWriterInfo), type_, folly::to_underlying(Type::tableWriterInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "tableWriterInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> tableWriterInfo_ref() & {
    return {value_.tableWriterInfo, type_, folly::to_underlying(Type::tableWriterInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "tableWriterInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> tableWriterInfo_ref() && {
    return {std::move(value_.tableWriterInfo), type_, folly::to_underlying(Type::tableWriterInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "tableWriterMergeInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterMergeInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> tableWriterMergeInfo_ref() const& {
    return {value_.tableWriterMergeInfo, type_, folly::to_underlying(Type::tableWriterMergeInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "tableWriterMergeInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterMergeInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> tableWriterMergeInfo_ref() const&& {
    return {std::move(value_.tableWriterMergeInfo), type_, folly::to_underlying(Type::tableWriterMergeInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "tableWriterMergeInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterMergeInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> tableWriterMergeInfo_ref() & {
    return {value_.tableWriterMergeInfo, type_, folly::to_underlying(Type::tableWriterMergeInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "tableWriterMergeInfo" } */
  template <typename..., typename T = ::facebook::presto::protocol::cpp2::TableWriterMergeInfo>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> tableWriterMergeInfo_ref() && {
    return {std::move(value_.tableWriterMergeInfo), type_, folly::to_underlying(Type::tableWriterMergeInfo), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OperatorInfoUnion>;
  friend void swap(OperatorInfoUnion& a, OperatorInfoUnion& b);
};

template <class Protocol_>
unsigned long OperatorInfoUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "SqlInvokedFunction", "kind": "struct" } */
class SqlInvokedFunction final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 7;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::parameters,
    ::apache::thrift::ident::description,
    ::apache::thrift::ident::routineCharacteristics,
    ::apache::thrift::ident::body,
    ::apache::thrift::ident::variableArity,
    ::apache::thrift::ident::signature,
    ::apache::thrift::ident::functionId
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::Parameter>>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::RoutineCharacteristics>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::Signature>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::SqlFunctionId>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SqlInvokedFunction;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SqlInvokedFunction();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SqlInvokedFunction(apache::thrift::FragileConstructor, ::std::vector<::facebook::presto::protocol::cpp2::Parameter> parameters__arg, ::std::string description__arg, ::facebook::presto::protocol::cpp2::RoutineCharacteristics routineCharacteristics__arg, ::std::string body__arg, bool variableArity__arg, ::facebook::presto::protocol::cpp2::Signature signature__arg, ::facebook::presto::protocol::cpp2::SqlFunctionId functionId__arg);

  SqlInvokedFunction(SqlInvokedFunction&&) noexcept;

  SqlInvokedFunction(const SqlInvokedFunction& src);


  SqlInvokedFunction& operator=(SqlInvokedFunction&&) noexcept;
  SqlInvokedFunction& operator=(const SqlInvokedFunction& src);

  ~SqlInvokedFunction();

 private:
  ::std::vector<::facebook::presto::protocol::cpp2::Parameter> __fbthrift_field_parameters;
 private:
  ::std::string __fbthrift_field_description;
 private:
  ::facebook::presto::protocol::cpp2::RoutineCharacteristics __fbthrift_field_routineCharacteristics;
 private:
  ::std::string __fbthrift_field_body;
 private:
  bool __fbthrift_field_variableArity;
 private:
  ::facebook::presto::protocol::cpp2::Signature __fbthrift_field_signature;
 private:
  ::facebook::presto::protocol::cpp2::SqlFunctionId __fbthrift_field_functionId;
 private:
  apache::thrift::detail::isset_bitset<7, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SqlInvokedFunction&) const;
  bool operator<(const SqlInvokedFunction&) const;

  /** Glean { "field": "parameters" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::Parameter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> parameters_ref() const& {
    return {this->__fbthrift_field_parameters, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "parameters" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::Parameter>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> parameters_ref() & {
    return {this->__fbthrift_field_parameters, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "parameters" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::Parameter>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> parameters_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_parameters), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "parameters" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::Parameter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> parameters() const& {
    return {this->__fbthrift_field_parameters, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "parameters" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::Parameter>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> parameters() & {
    return {this->__fbthrift_field_parameters, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "parameters" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::presto::protocol::cpp2::Parameter>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> parameters() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_parameters), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "description" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> description_ref() const& {
    return {this->__fbthrift_field_description, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "description" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> description_ref() & {
    return {this->__fbthrift_field_description, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "description" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> description_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_description), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "description" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> description() const& {
    return {this->__fbthrift_field_description, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "description" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> description() & {
    return {this->__fbthrift_field_description, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "description" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> description() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_description), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "routineCharacteristics" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RoutineCharacteristics>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> routineCharacteristics_ref() const& {
    return {this->__fbthrift_field_routineCharacteristics, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "routineCharacteristics" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RoutineCharacteristics>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> routineCharacteristics_ref() & {
    return {this->__fbthrift_field_routineCharacteristics, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "routineCharacteristics" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RoutineCharacteristics>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> routineCharacteristics_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_routineCharacteristics), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "routineCharacteristics" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RoutineCharacteristics>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> routineCharacteristics() const& {
    return {this->__fbthrift_field_routineCharacteristics, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "routineCharacteristics" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RoutineCharacteristics>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> routineCharacteristics() & {
    return {this->__fbthrift_field_routineCharacteristics, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "routineCharacteristics" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RoutineCharacteristics>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> routineCharacteristics() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_routineCharacteristics), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "body" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> body_ref() const& {
    return {this->__fbthrift_field_body, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "body" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> body_ref() & {
    return {this->__fbthrift_field_body, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "body" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> body_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_body), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "body" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> body() const& {
    return {this->__fbthrift_field_body, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "body" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> body() & {
    return {this->__fbthrift_field_body, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "body" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> body() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_body), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> variableArity_ref() const& {
    return {this->__fbthrift_field_variableArity, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> variableArity_ref() & {
    return {this->__fbthrift_field_variableArity, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> variableArity_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_variableArity), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> variableArity() const& {
    return {this->__fbthrift_field_variableArity, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> variableArity() & {
    return {this->__fbthrift_field_variableArity, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "variableArity" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> variableArity() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_variableArity), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Signature>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> signature_ref() const& {
    return {this->__fbthrift_field_signature, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Signature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> signature_ref() & {
    return {this->__fbthrift_field_signature, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Signature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> signature_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_signature), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Signature>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> signature() const& {
    return {this->__fbthrift_field_signature, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Signature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> signature() & {
    return {this->__fbthrift_field_signature, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::Signature>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> signature() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_signature), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "functionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SqlFunctionId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> functionId_ref() const& {
    return {this->__fbthrift_field_functionId, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "functionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SqlFunctionId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> functionId_ref() & {
    return {this->__fbthrift_field_functionId, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "functionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SqlFunctionId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> functionId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_functionId), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "functionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SqlFunctionId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> functionId() const& {
    return {this->__fbthrift_field_functionId, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "functionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SqlFunctionId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> functionId() & {
    return {this->__fbthrift_field_functionId, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "functionId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::SqlFunctionId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> functionId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_functionId), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "parameters" } */
  [[deprecated("Use `FOO.parameters().value()` instead of `FOO.get_parameters()`")]]
  const ::std::vector<::facebook::presto::protocol::cpp2::Parameter>& get_parameters() const&;

  /** Glean { "field": "parameters" } */
  [[deprecated("Use `FOO.parameters().value()` instead of `FOO.get_parameters()`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::Parameter> get_parameters() &&;

  /** Glean { "field": "parameters" } */
  template <typename T_SqlInvokedFunction_parameters_struct_setter = ::std::vector<::facebook::presto::protocol::cpp2::Parameter>>
  [[deprecated("Use `FOO.parameters() = BAR` instead of `FOO.set_parameters(BAR)`")]]
  ::std::vector<::facebook::presto::protocol::cpp2::Parameter>& set_parameters(T_SqlInvokedFunction_parameters_struct_setter&& parameters_) {
    parameters_ref() = std::forward<T_SqlInvokedFunction_parameters_struct_setter>(parameters_);
    return __fbthrift_field_parameters;
  }

  /** Glean { "field": "description" } */
  [[deprecated("Use `FOO.description().value()` instead of `FOO.get_description()`")]]
  const ::std::string& get_description() const& {
    return __fbthrift_field_description;
  }

  /** Glean { "field": "description" } */
  [[deprecated("Use `FOO.description().value()` instead of `FOO.get_description()`")]]
  ::std::string get_description() && {
    return static_cast<::std::string&&>(__fbthrift_field_description);
  }

  /** Glean { "field": "description" } */
  template <typename T_SqlInvokedFunction_description_struct_setter = ::std::string>
  [[deprecated("Use `FOO.description() = BAR` instead of `FOO.set_description(BAR)`")]]
  ::std::string& set_description(T_SqlInvokedFunction_description_struct_setter&& description_) {
    description_ref() = std::forward<T_SqlInvokedFunction_description_struct_setter>(description_);
    return __fbthrift_field_description;
  }

  /** Glean { "field": "routineCharacteristics" } */
  [[deprecated("Use `FOO.routineCharacteristics().value()` instead of `FOO.get_routineCharacteristics()`")]]
  const ::facebook::presto::protocol::cpp2::RoutineCharacteristics& get_routineCharacteristics() const&;

  /** Glean { "field": "routineCharacteristics" } */
  [[deprecated("Use `FOO.routineCharacteristics().value()` instead of `FOO.get_routineCharacteristics()`")]]
  ::facebook::presto::protocol::cpp2::RoutineCharacteristics get_routineCharacteristics() &&;

  /** Glean { "field": "routineCharacteristics" } */
  template <typename T_SqlInvokedFunction_routineCharacteristics_struct_setter = ::facebook::presto::protocol::cpp2::RoutineCharacteristics>
  [[deprecated("Use `FOO.routineCharacteristics() = BAR` instead of `FOO.set_routineCharacteristics(BAR)`")]]
  ::facebook::presto::protocol::cpp2::RoutineCharacteristics& set_routineCharacteristics(T_SqlInvokedFunction_routineCharacteristics_struct_setter&& routineCharacteristics_) {
    routineCharacteristics_ref() = std::forward<T_SqlInvokedFunction_routineCharacteristics_struct_setter>(routineCharacteristics_);
    return __fbthrift_field_routineCharacteristics;
  }

  /** Glean { "field": "body" } */
  [[deprecated("Use `FOO.body().value()` instead of `FOO.get_body()`")]]
  const ::std::string& get_body() const& {
    return __fbthrift_field_body;
  }

  /** Glean { "field": "body" } */
  [[deprecated("Use `FOO.body().value()` instead of `FOO.get_body()`")]]
  ::std::string get_body() && {
    return static_cast<::std::string&&>(__fbthrift_field_body);
  }

  /** Glean { "field": "body" } */
  template <typename T_SqlInvokedFunction_body_struct_setter = ::std::string>
  [[deprecated("Use `FOO.body() = BAR` instead of `FOO.set_body(BAR)`")]]
  ::std::string& set_body(T_SqlInvokedFunction_body_struct_setter&& body_) {
    body_ref() = std::forward<T_SqlInvokedFunction_body_struct_setter>(body_);
    return __fbthrift_field_body;
  }

  /** Glean { "field": "variableArity" } */
  [[deprecated("Use `FOO.variableArity().value()` instead of `FOO.get_variableArity()`")]]
  bool get_variableArity() const;

  /** Glean { "field": "variableArity" } */
  [[deprecated("Use `FOO.variableArity() = BAR` instead of `FOO.set_variableArity(BAR)`")]]
  bool& set_variableArity(bool variableArity_);

  /** Glean { "field": "signature" } */
  [[deprecated("Use `FOO.signature().value()` instead of `FOO.get_signature()`")]]
  const ::facebook::presto::protocol::cpp2::Signature& get_signature() const&;

  /** Glean { "field": "signature" } */
  [[deprecated("Use `FOO.signature().value()` instead of `FOO.get_signature()`")]]
  ::facebook::presto::protocol::cpp2::Signature get_signature() &&;

  /** Glean { "field": "signature" } */
  template <typename T_SqlInvokedFunction_signature_struct_setter = ::facebook::presto::protocol::cpp2::Signature>
  [[deprecated("Use `FOO.signature() = BAR` instead of `FOO.set_signature(BAR)`")]]
  ::facebook::presto::protocol::cpp2::Signature& set_signature(T_SqlInvokedFunction_signature_struct_setter&& signature_) {
    signature_ref() = std::forward<T_SqlInvokedFunction_signature_struct_setter>(signature_);
    return __fbthrift_field_signature;
  }

  /** Glean { "field": "functionId" } */
  [[deprecated("Use `FOO.functionId().value()` instead of `FOO.get_functionId()`")]]
  const ::facebook::presto::protocol::cpp2::SqlFunctionId& get_functionId() const&;

  /** Glean { "field": "functionId" } */
  [[deprecated("Use `FOO.functionId().value()` instead of `FOO.get_functionId()`")]]
  ::facebook::presto::protocol::cpp2::SqlFunctionId get_functionId() &&;

  /** Glean { "field": "functionId" } */
  template <typename T_SqlInvokedFunction_functionId_struct_setter = ::facebook::presto::protocol::cpp2::SqlFunctionId>
  [[deprecated("Use `FOO.functionId() = BAR` instead of `FOO.set_functionId(BAR)`")]]
  ::facebook::presto::protocol::cpp2::SqlFunctionId& set_functionId(T_SqlInvokedFunction_functionId_struct_setter&& functionId_) {
    functionId_ref() = std::forward<T_SqlInvokedFunction_functionId_struct_setter>(functionId_);
    return __fbthrift_field_functionId;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SqlInvokedFunction>;
  friend void swap(SqlInvokedFunction& a, SqlInvokedFunction& b);
};

template <class Protocol_>
unsigned long SqlInvokedFunction::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "TaskInfo", "kind": "struct" } */
class TaskInfo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::taskId,
    ::apache::thrift::ident::taskStatus,
    ::apache::thrift::ident::lastHeartbeatInMillis,
    ::apache::thrift::ident::outputBuffers,
    ::apache::thrift::ident::noMoreSplits,
    ::apache::thrift::ident::stats,
    ::apache::thrift::ident::needsPlan,
    ::apache::thrift::ident::metadataUpdates,
    ::apache::thrift::ident::nodeId
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TaskId>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TaskStatus>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::OutputBufferInfo>,
    ::apache::thrift::type::set<::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::PlanNodeId>>,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::TaskStats>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TaskInfo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TaskInfo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TaskInfo(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::TaskId taskId__arg, ::facebook::presto::protocol::cpp2::TaskStatus taskStatus__arg, ::std::int64_t lastHeartbeatInMillis__arg, ::facebook::presto::protocol::cpp2::OutputBufferInfo outputBuffers__arg, ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> noMoreSplits__arg, ::facebook::presto::protocol::cpp2::TaskStats stats__arg, bool needsPlan__arg, ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper metadataUpdates__arg, ::std::string nodeId__arg);

  TaskInfo(TaskInfo&&) noexcept;

  TaskInfo(const TaskInfo& src);


  TaskInfo& operator=(TaskInfo&&) noexcept;
  TaskInfo& operator=(const TaskInfo& src);

  ~TaskInfo();

 private:
  ::facebook::presto::protocol::cpp2::TaskId __fbthrift_field_taskId;
 private:
  ::facebook::presto::protocol::cpp2::TaskStatus __fbthrift_field_taskStatus;
 private:
  ::std::int64_t __fbthrift_field_lastHeartbeatInMillis;
 private:
  ::facebook::presto::protocol::cpp2::OutputBufferInfo __fbthrift_field_outputBuffers;
 private:
  ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> __fbthrift_field_noMoreSplits;
 private:
  ::facebook::presto::protocol::cpp2::TaskStats __fbthrift_field_stats;
 private:
  bool __fbthrift_field_needsPlan;
 private:
  ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper __fbthrift_field_metadataUpdates;
 private:
  ::std::string __fbthrift_field_nodeId;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TaskInfo&) const;
  bool operator<(const TaskInfo&) const;

  /** Glean { "field": "taskId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskId_ref() const& {
    return {this->__fbthrift_field_taskId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskId_ref() & {
    return {this->__fbthrift_field_taskId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskId() const& {
    return {this->__fbthrift_field_taskId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskId() & {
    return {this->__fbthrift_field_taskId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "taskStatus" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStatus>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskStatus_ref() const& {
    return {this->__fbthrift_field_taskStatus, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskStatus" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStatus>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskStatus_ref() & {
    return {this->__fbthrift_field_taskStatus, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskStatus" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStatus>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskStatus_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskStatus), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskStatus" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStatus>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> taskStatus() const& {
    return {this->__fbthrift_field_taskStatus, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskStatus" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStatus>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> taskStatus() & {
    return {this->__fbthrift_field_taskStatus, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "taskStatus" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStatus>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> taskStatus() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_taskStatus), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "lastHeartbeatInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastHeartbeatInMillis_ref() const& {
    return {this->__fbthrift_field_lastHeartbeatInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastHeartbeatInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastHeartbeatInMillis_ref() & {
    return {this->__fbthrift_field_lastHeartbeatInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastHeartbeatInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastHeartbeatInMillis_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastHeartbeatInMillis), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastHeartbeatInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lastHeartbeatInMillis() const& {
    return {this->__fbthrift_field_lastHeartbeatInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastHeartbeatInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lastHeartbeatInMillis() & {
    return {this->__fbthrift_field_lastHeartbeatInMillis, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "lastHeartbeatInMillis" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lastHeartbeatInMillis() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lastHeartbeatInMillis), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "outputBuffers" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputBuffers_ref() const& {
    return {this->__fbthrift_field_outputBuffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "outputBuffers" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputBuffers_ref() & {
    return {this->__fbthrift_field_outputBuffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "outputBuffers" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputBuffers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputBuffers), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "outputBuffers" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputBuffers() const& {
    return {this->__fbthrift_field_outputBuffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "outputBuffers" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputBuffers() & {
    return {this->__fbthrift_field_outputBuffers, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "outputBuffers" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OutputBufferInfo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputBuffers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputBuffers), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreSplits_ref() const& {
    return {this->__fbthrift_field_noMoreSplits, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreSplits_ref() & {
    return {this->__fbthrift_field_noMoreSplits, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreSplits_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreSplits), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> noMoreSplits() const& {
    return {this->__fbthrift_field_noMoreSplits, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> noMoreSplits() & {
    return {this->__fbthrift_field_noMoreSplits, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "noMoreSplits" } */
  template <typename..., typename fbthrift_T = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> noMoreSplits() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_noMoreSplits), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "stats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stats_ref() const& {
    return {this->__fbthrift_field_stats, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "stats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stats_ref() & {
    return {this->__fbthrift_field_stats, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "stats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stats_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stats), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "stats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stats() const& {
    return {this->__fbthrift_field_stats, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "stats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stats() & {
    return {this->__fbthrift_field_stats, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "stats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::TaskStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stats() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stats), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "needsPlan" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> needsPlan_ref() const& {
    return {this->__fbthrift_field_needsPlan, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "needsPlan" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> needsPlan_ref() & {
    return {this->__fbthrift_field_needsPlan, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "needsPlan" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> needsPlan_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_needsPlan), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "needsPlan" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> needsPlan() const& {
    return {this->__fbthrift_field_needsPlan, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "needsPlan" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> needsPlan() & {
    return {this->__fbthrift_field_needsPlan, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "needsPlan" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> needsPlan() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_needsPlan), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> metadataUpdates_ref() const& {
    return {this->__fbthrift_field_metadataUpdates, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> metadataUpdates_ref() & {
    return {this->__fbthrift_field_metadataUpdates, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> metadataUpdates_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_metadataUpdates), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> metadataUpdates() const& {
    return {this->__fbthrift_field_metadataUpdates, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> metadataUpdates() & {
    return {this->__fbthrift_field_metadataUpdates, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "metadataUpdates" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> metadataUpdates() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_metadataUpdates), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "nodeId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nodeId_ref() const& {
    return {this->__fbthrift_field_nodeId, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "nodeId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nodeId_ref() & {
    return {this->__fbthrift_field_nodeId, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "nodeId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nodeId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nodeId), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "nodeId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nodeId() const& {
    return {this->__fbthrift_field_nodeId, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "nodeId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nodeId() & {
    return {this->__fbthrift_field_nodeId, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "nodeId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nodeId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nodeId), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "taskId" } */
  [[deprecated("Use `FOO.taskId().value()` instead of `FOO.get_taskId()`")]]
  const ::facebook::presto::protocol::cpp2::TaskId& get_taskId() const&;

  /** Glean { "field": "taskId" } */
  [[deprecated("Use `FOO.taskId().value()` instead of `FOO.get_taskId()`")]]
  ::facebook::presto::protocol::cpp2::TaskId get_taskId() &&;

  /** Glean { "field": "taskId" } */
  template <typename T_TaskInfo_taskId_struct_setter = ::facebook::presto::protocol::cpp2::TaskId>
  [[deprecated("Use `FOO.taskId() = BAR` instead of `FOO.set_taskId(BAR)`")]]
  ::facebook::presto::protocol::cpp2::TaskId& set_taskId(T_TaskInfo_taskId_struct_setter&& taskId_) {
    taskId_ref() = std::forward<T_TaskInfo_taskId_struct_setter>(taskId_);
    return __fbthrift_field_taskId;
  }

  /** Glean { "field": "taskStatus" } */
  [[deprecated("Use `FOO.taskStatus().value()` instead of `FOO.get_taskStatus()`")]]
  const ::facebook::presto::protocol::cpp2::TaskStatus& get_taskStatus() const&;

  /** Glean { "field": "taskStatus" } */
  [[deprecated("Use `FOO.taskStatus().value()` instead of `FOO.get_taskStatus()`")]]
  ::facebook::presto::protocol::cpp2::TaskStatus get_taskStatus() &&;

  /** Glean { "field": "taskStatus" } */
  template <typename T_TaskInfo_taskStatus_struct_setter = ::facebook::presto::protocol::cpp2::TaskStatus>
  [[deprecated("Use `FOO.taskStatus() = BAR` instead of `FOO.set_taskStatus(BAR)`")]]
  ::facebook::presto::protocol::cpp2::TaskStatus& set_taskStatus(T_TaskInfo_taskStatus_struct_setter&& taskStatus_) {
    taskStatus_ref() = std::forward<T_TaskInfo_taskStatus_struct_setter>(taskStatus_);
    return __fbthrift_field_taskStatus;
  }

  /** Glean { "field": "lastHeartbeatInMillis" } */
  [[deprecated("Use `FOO.lastHeartbeatInMillis().value()` instead of `FOO.get_lastHeartbeatInMillis()`")]]
  ::std::int64_t get_lastHeartbeatInMillis() const;

  /** Glean { "field": "lastHeartbeatInMillis" } */
  [[deprecated("Use `FOO.lastHeartbeatInMillis() = BAR` instead of `FOO.set_lastHeartbeatInMillis(BAR)`")]]
  ::std::int64_t& set_lastHeartbeatInMillis(::std::int64_t lastHeartbeatInMillis_);

  /** Glean { "field": "outputBuffers" } */
  [[deprecated("Use `FOO.outputBuffers().value()` instead of `FOO.get_outputBuffers()`")]]
  const ::facebook::presto::protocol::cpp2::OutputBufferInfo& get_outputBuffers() const&;

  /** Glean { "field": "outputBuffers" } */
  [[deprecated("Use `FOO.outputBuffers().value()` instead of `FOO.get_outputBuffers()`")]]
  ::facebook::presto::protocol::cpp2::OutputBufferInfo get_outputBuffers() &&;

  /** Glean { "field": "outputBuffers" } */
  template <typename T_TaskInfo_outputBuffers_struct_setter = ::facebook::presto::protocol::cpp2::OutputBufferInfo>
  [[deprecated("Use `FOO.outputBuffers() = BAR` instead of `FOO.set_outputBuffers(BAR)`")]]
  ::facebook::presto::protocol::cpp2::OutputBufferInfo& set_outputBuffers(T_TaskInfo_outputBuffers_struct_setter&& outputBuffers_) {
    outputBuffers_ref() = std::forward<T_TaskInfo_outputBuffers_struct_setter>(outputBuffers_);
    return __fbthrift_field_outputBuffers;
  }

  /** Glean { "field": "noMoreSplits" } */
  [[deprecated("Use `FOO.noMoreSplits().value()` instead of `FOO.get_noMoreSplits()`")]]
  const ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>& get_noMoreSplits() const&;

  /** Glean { "field": "noMoreSplits" } */
  [[deprecated("Use `FOO.noMoreSplits().value()` instead of `FOO.get_noMoreSplits()`")]]
  ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> get_noMoreSplits() &&;

  /** Glean { "field": "noMoreSplits" } */
  template <typename T_TaskInfo_noMoreSplits_struct_setter = ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>
  [[deprecated("Use `FOO.noMoreSplits() = BAR` instead of `FOO.set_noMoreSplits(BAR)`")]]
  ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>& set_noMoreSplits(T_TaskInfo_noMoreSplits_struct_setter&& noMoreSplits_) {
    noMoreSplits_ref() = std::forward<T_TaskInfo_noMoreSplits_struct_setter>(noMoreSplits_);
    return __fbthrift_field_noMoreSplits;
  }

  /** Glean { "field": "stats" } */
  [[deprecated("Use `FOO.stats().value()` instead of `FOO.get_stats()`")]]
  const ::facebook::presto::protocol::cpp2::TaskStats& get_stats() const&;

  /** Glean { "field": "stats" } */
  [[deprecated("Use `FOO.stats().value()` instead of `FOO.get_stats()`")]]
  ::facebook::presto::protocol::cpp2::TaskStats get_stats() &&;

  /** Glean { "field": "stats" } */
  template <typename T_TaskInfo_stats_struct_setter = ::facebook::presto::protocol::cpp2::TaskStats>
  [[deprecated("Use `FOO.stats() = BAR` instead of `FOO.set_stats(BAR)`")]]
  ::facebook::presto::protocol::cpp2::TaskStats& set_stats(T_TaskInfo_stats_struct_setter&& stats_) {
    stats_ref() = std::forward<T_TaskInfo_stats_struct_setter>(stats_);
    return __fbthrift_field_stats;
  }

  /** Glean { "field": "needsPlan" } */
  [[deprecated("Use `FOO.needsPlan().value()` instead of `FOO.get_needsPlan()`")]]
  bool get_needsPlan() const;

  /** Glean { "field": "needsPlan" } */
  [[deprecated("Use `FOO.needsPlan() = BAR` instead of `FOO.set_needsPlan(BAR)`")]]
  bool& set_needsPlan(bool needsPlan_);

  /** Glean { "field": "metadataUpdates" } */
  [[deprecated("Use `FOO.metadataUpdates().value()` instead of `FOO.get_metadataUpdates()`")]]
  const ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper& get_metadataUpdates() const&;

  /** Glean { "field": "metadataUpdates" } */
  [[deprecated("Use `FOO.metadataUpdates().value()` instead of `FOO.get_metadataUpdates()`")]]
  ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper get_metadataUpdates() &&;

  /** Glean { "field": "metadataUpdates" } */
  template <typename T_TaskInfo_metadataUpdates_struct_setter = ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>
  [[deprecated("Use `FOO.metadataUpdates() = BAR` instead of `FOO.set_metadataUpdates(BAR)`")]]
  ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper& set_metadataUpdates(T_TaskInfo_metadataUpdates_struct_setter&& metadataUpdates_) {
    metadataUpdates_ref() = std::forward<T_TaskInfo_metadataUpdates_struct_setter>(metadataUpdates_);
    return __fbthrift_field_metadataUpdates;
  }

  /** Glean { "field": "nodeId" } */
  [[deprecated("Use `FOO.nodeId().value()` instead of `FOO.get_nodeId()`")]]
  const ::std::string& get_nodeId() const& {
    return __fbthrift_field_nodeId;
  }

  /** Glean { "field": "nodeId" } */
  [[deprecated("Use `FOO.nodeId().value()` instead of `FOO.get_nodeId()`")]]
  ::std::string get_nodeId() && {
    return static_cast<::std::string&&>(__fbthrift_field_nodeId);
  }

  /** Glean { "field": "nodeId" } */
  template <typename T_TaskInfo_nodeId_struct_setter = ::std::string>
  [[deprecated("Use `FOO.nodeId() = BAR` instead of `FOO.set_nodeId(BAR)`")]]
  ::std::string& set_nodeId(T_TaskInfo_nodeId_struct_setter&& nodeId_) {
    nodeId_ref() = std::forward<T_TaskInfo_nodeId_struct_setter>(nodeId_);
    return __fbthrift_field_nodeId;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TaskInfo>;
  friend void swap(TaskInfo& a, TaskInfo& b);
};

template <class Protocol_>
unsigned long TaskInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "presto_protocol_api.thrift", "name": "OperatorStats", "kind": "struct" } */
class OperatorStats final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "presto_protocol_api";
  }
  static constexpr std::size_t __fbthrift_num_fields = 48;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::stageId,
    ::apache::thrift::ident::stageExecutionId,
    ::apache::thrift::ident::pipelineId,
    ::apache::thrift::ident::operatorId,
    ::apache::thrift::ident::planNodeId,
    ::apache::thrift::ident::operatorType,
    ::apache::thrift::ident::totalDrivers,
    ::apache::thrift::ident::addInputCalls,
    ::apache::thrift::ident::addInputWall,
    ::apache::thrift::ident::addInputCpu,
    ::apache::thrift::ident::addInputAllocationInBytes,
    ::apache::thrift::ident::rawInputDataSizeInBytes,
    ::apache::thrift::ident::rawInputPositions,
    ::apache::thrift::ident::inputDataSizeInBytes,
    ::apache::thrift::ident::inputPositions,
    ::apache::thrift::ident::sumSquaredInputPositions,
    ::apache::thrift::ident::getOutputCalls,
    ::apache::thrift::ident::getOutputWall,
    ::apache::thrift::ident::getOutputCpu,
    ::apache::thrift::ident::getOutputAllocationInBytes,
    ::apache::thrift::ident::outputDataSizeInBytes,
    ::apache::thrift::ident::outputPositions,
    ::apache::thrift::ident::physicalWrittenDataSizeInBytes,
    ::apache::thrift::ident::additionalCpu,
    ::apache::thrift::ident::blockedWall,
    ::apache::thrift::ident::finishCalls,
    ::apache::thrift::ident::finishWall,
    ::apache::thrift::ident::finishCpu,
    ::apache::thrift::ident::finishAllocationInBytes,
    ::apache::thrift::ident::userMemoryReservationInBytes,
    ::apache::thrift::ident::revocableMemoryReservationInBytes,
    ::apache::thrift::ident::systemMemoryReservationInBytes,
    ::apache::thrift::ident::peakUserMemoryReservationInBytes,
    ::apache::thrift::ident::peakSystemMemoryReservationInBytes,
    ::apache::thrift::ident::peakTotalMemoryReservationInBytes,
    ::apache::thrift::ident::spilledDataSizeInBytes,
    ::apache::thrift::ident::runtimeStats,
    ::apache::thrift::ident::blockedReason,
    ::apache::thrift::ident::infoUnion,
    ::apache::thrift::ident::nullJoinBuildKeyCount,
    ::apache::thrift::ident::joinBuildKeyCount,
    ::apache::thrift::ident::nullJoinProbeKeyCount,
    ::apache::thrift::ident::joinProbeKeyCount,
    ::apache::thrift::ident::dynamicFilterStats,
    ::apache::thrift::ident::isBlockedCalls,
    ::apache::thrift::ident::isBlockedWall,
    ::apache::thrift::ident::isBlockedCpu,
    ::apache::thrift::ident::isBlockedAllocationInBytes
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::PlanNodeId>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::RuntimeStats>,
    ::apache::thrift::type::enum_t<::facebook::presto::protocol::cpp2::BlockedReason>,
    ::apache::thrift::type::union_t<::facebook::presto::protocol::cpp2::OperatorInfoUnion>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::facebook::presto::protocol::cpp2::DynamicFilterStats>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OperatorStats;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  OperatorStats();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OperatorStats(apache::thrift::FragileConstructor, ::std::int32_t stageId__arg, ::std::int32_t stageExecutionId__arg, ::std::int32_t pipelineId__arg, ::std::int32_t operatorId__arg, ::facebook::presto::protocol::cpp2::PlanNodeId planNodeId__arg, ::std::string operatorType__arg, ::std::int64_t totalDrivers__arg, ::std::int64_t addInputCalls__arg, double addInputWall__arg, double addInputCpu__arg, ::std::int64_t addInputAllocationInBytes__arg, ::std::int64_t rawInputDataSizeInBytes__arg, ::std::int64_t rawInputPositions__arg, ::std::int64_t inputDataSizeInBytes__arg, ::std::int64_t inputPositions__arg, double sumSquaredInputPositions__arg, ::std::int64_t getOutputCalls__arg, double getOutputWall__arg, double getOutputCpu__arg, ::std::int64_t getOutputAllocationInBytes__arg, ::std::int64_t outputDataSizeInBytes__arg, ::std::int64_t outputPositions__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, double additionalCpu__arg, double blockedWall__arg, ::std::int64_t finishCalls__arg, double finishWall__arg, double finishCpu__arg, ::std::int64_t finishAllocationInBytes__arg, ::std::int64_t userMemoryReservationInBytes__arg, ::std::int64_t revocableMemoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, ::std::int64_t peakUserMemoryReservationInBytes__arg, ::std::int64_t peakSystemMemoryReservationInBytes__arg, ::std::int64_t peakTotalMemoryReservationInBytes__arg, ::std::int64_t spilledDataSizeInBytes__arg, ::facebook::presto::protocol::cpp2::RuntimeStats runtimeStats__arg, ::facebook::presto::protocol::cpp2::BlockedReason blockedReason__arg, ::facebook::presto::protocol::cpp2::OperatorInfoUnion infoUnion__arg, ::std::int64_t nullJoinBuildKeyCount__arg, ::std::int64_t joinBuildKeyCount__arg, ::std::int64_t nullJoinProbeKeyCount__arg, ::std::int64_t joinProbeKeyCount__arg, ::facebook::presto::protocol::cpp2::DynamicFilterStats dynamicFilterStats__arg, ::std::int64_t isBlockedCalls__arg, double isBlockedWall__arg, double isBlockedCpu__arg, ::std::int64_t isBlockedAllocationInBytes__arg);

  OperatorStats(OperatorStats&&) noexcept;

  OperatorStats(const OperatorStats& src);


  OperatorStats& operator=(OperatorStats&&) noexcept;
  OperatorStats& operator=(const OperatorStats& src);

  ~OperatorStats();

 private:
  ::std::int32_t __fbthrift_field_stageId;
 private:
  ::std::int32_t __fbthrift_field_stageExecutionId;
 private:
  ::std::int32_t __fbthrift_field_pipelineId;
 private:
  ::std::int32_t __fbthrift_field_operatorId;
 private:
  ::facebook::presto::protocol::cpp2::PlanNodeId __fbthrift_field_planNodeId;
 private:
  ::std::string __fbthrift_field_operatorType;
 private:
  ::std::int64_t __fbthrift_field_totalDrivers;
 private:
  ::std::int64_t __fbthrift_field_addInputCalls;
 private:
  double __fbthrift_field_addInputWall;
 private:
  double __fbthrift_field_addInputCpu;
 private:
  ::std::int64_t __fbthrift_field_addInputAllocationInBytes;
 private:
  ::std::int64_t __fbthrift_field_rawInputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_rawInputPositions;
 private:
  ::std::int64_t __fbthrift_field_inputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_inputPositions;
 private:
  double __fbthrift_field_sumSquaredInputPositions;
 private:
  ::std::int64_t __fbthrift_field_getOutputCalls;
 private:
  double __fbthrift_field_getOutputWall;
 private:
  double __fbthrift_field_getOutputCpu;
 private:
  ::std::int64_t __fbthrift_field_getOutputAllocationInBytes;
 private:
  ::std::int64_t __fbthrift_field_outputDataSizeInBytes;
 private:
  ::std::int64_t __fbthrift_field_outputPositions;
 private:
  ::std::int64_t __fbthrift_field_physicalWrittenDataSizeInBytes;
 private:
  double __fbthrift_field_additionalCpu;
 private:
  double __fbthrift_field_blockedWall;
 private:
  ::std::int64_t __fbthrift_field_finishCalls;
 private:
  double __fbthrift_field_finishWall;
 private:
  double __fbthrift_field_finishCpu;
 private:
  ::std::int64_t __fbthrift_field_finishAllocationInBytes;
 private:
  ::std::int64_t __fbthrift_field_userMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_revocableMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_systemMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_peakUserMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_peakSystemMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_peakTotalMemoryReservationInBytes;
 private:
  ::std::int64_t __fbthrift_field_spilledDataSizeInBytes;
 private:
  ::facebook::presto::protocol::cpp2::RuntimeStats __fbthrift_field_runtimeStats;
 private:
  ::facebook::presto::protocol::cpp2::BlockedReason __fbthrift_field_blockedReason;
 private:
  ::facebook::presto::protocol::cpp2::OperatorInfoUnion __fbthrift_field_infoUnion;
 private:
  ::std::int64_t __fbthrift_field_nullJoinBuildKeyCount;
 private:
  ::std::int64_t __fbthrift_field_joinBuildKeyCount;
 private:
  ::std::int64_t __fbthrift_field_nullJoinProbeKeyCount;
 private:
  ::std::int64_t __fbthrift_field_joinProbeKeyCount;
 private:
  ::facebook::presto::protocol::cpp2::DynamicFilterStats __fbthrift_field_dynamicFilterStats;
 private:
  ::std::int64_t __fbthrift_field_isBlockedCalls;
 private:
  double __fbthrift_field_isBlockedWall;
 private:
  double __fbthrift_field_isBlockedCpu;
 private:
  ::std::int64_t __fbthrift_field_isBlockedAllocationInBytes;
 private:
  apache::thrift::detail::isset_bitset<48, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OperatorStats&) const;
  bool operator<(const OperatorStats&) const;

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stageId_ref() const& {
    return {this->__fbthrift_field_stageId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stageId_ref() & {
    return {this->__fbthrift_field_stageId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stageId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stageId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stageId() const& {
    return {this->__fbthrift_field_stageId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stageId() & {
    return {this->__fbthrift_field_stageId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stageId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stageId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stageExecutionId_ref() const& {
    return {this->__fbthrift_field_stageExecutionId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stageExecutionId_ref() & {
    return {this->__fbthrift_field_stageExecutionId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stageExecutionId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stageExecutionId), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stageExecutionId() const& {
    return {this->__fbthrift_field_stageExecutionId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stageExecutionId() & {
    return {this->__fbthrift_field_stageExecutionId, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stageExecutionId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stageExecutionId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stageExecutionId), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pipelineId_ref() const& {
    return {this->__fbthrift_field_pipelineId, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pipelineId_ref() & {
    return {this->__fbthrift_field_pipelineId, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pipelineId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pipelineId), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pipelineId() const& {
    return {this->__fbthrift_field_pipelineId, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pipelineId() & {
    return {this->__fbthrift_field_pipelineId, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "pipelineId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pipelineId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pipelineId), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "operatorId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> operatorId_ref() const& {
    return {this->__fbthrift_field_operatorId, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "operatorId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> operatorId_ref() & {
    return {this->__fbthrift_field_operatorId, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "operatorId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> operatorId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_operatorId), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "operatorId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> operatorId() const& {
    return {this->__fbthrift_field_operatorId, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "operatorId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> operatorId() & {
    return {this->__fbthrift_field_operatorId, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "operatorId" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> operatorId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_operatorId), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> planNodeId_ref() const& {
    return {this->__fbthrift_field_planNodeId, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> planNodeId_ref() & {
    return {this->__fbthrift_field_planNodeId, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> planNodeId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_planNodeId), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> planNodeId() const& {
    return {this->__fbthrift_field_planNodeId, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> planNodeId() & {
    return {this->__fbthrift_field_planNodeId, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "planNodeId" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::PlanNodeId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> planNodeId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_planNodeId), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "operatorType" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> operatorType_ref() const& {
    return {this->__fbthrift_field_operatorType, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "operatorType" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> operatorType_ref() & {
    return {this->__fbthrift_field_operatorType, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "operatorType" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> operatorType_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_operatorType), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "operatorType" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> operatorType() const& {
    return {this->__fbthrift_field_operatorType, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "operatorType" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> operatorType() & {
    return {this->__fbthrift_field_operatorType, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "operatorType" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> operatorType() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_operatorType), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalDrivers_ref() const& {
    return {this->__fbthrift_field_totalDrivers, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalDrivers_ref() & {
    return {this->__fbthrift_field_totalDrivers, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalDrivers_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalDrivers), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> totalDrivers() const& {
    return {this->__fbthrift_field_totalDrivers, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> totalDrivers() & {
    return {this->__fbthrift_field_totalDrivers, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "totalDrivers" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> totalDrivers() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_totalDrivers), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "addInputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> addInputCalls_ref() const& {
    return {this->__fbthrift_field_addInputCalls, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "addInputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> addInputCalls_ref() & {
    return {this->__fbthrift_field_addInputCalls, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "addInputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> addInputCalls_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_addInputCalls), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "addInputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> addInputCalls() const& {
    return {this->__fbthrift_field_addInputCalls, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "addInputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> addInputCalls() & {
    return {this->__fbthrift_field_addInputCalls, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "addInputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> addInputCalls() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_addInputCalls), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "addInputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> addInputWall_ref() const& {
    return {this->__fbthrift_field_addInputWall, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "addInputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> addInputWall_ref() & {
    return {this->__fbthrift_field_addInputWall, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "addInputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> addInputWall_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_addInputWall), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "addInputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> addInputWall() const& {
    return {this->__fbthrift_field_addInputWall, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "addInputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> addInputWall() & {
    return {this->__fbthrift_field_addInputWall, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "addInputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> addInputWall() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_addInputWall), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "addInputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> addInputCpu_ref() const& {
    return {this->__fbthrift_field_addInputCpu, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "addInputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> addInputCpu_ref() & {
    return {this->__fbthrift_field_addInputCpu, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "addInputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> addInputCpu_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_addInputCpu), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "addInputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> addInputCpu() const& {
    return {this->__fbthrift_field_addInputCpu, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "addInputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> addInputCpu() & {
    return {this->__fbthrift_field_addInputCpu, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "addInputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> addInputCpu() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_addInputCpu), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "addInputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> addInputAllocationInBytes_ref() const& {
    return {this->__fbthrift_field_addInputAllocationInBytes, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "addInputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> addInputAllocationInBytes_ref() & {
    return {this->__fbthrift_field_addInputAllocationInBytes, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "addInputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> addInputAllocationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_addInputAllocationInBytes), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "addInputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> addInputAllocationInBytes() const& {
    return {this->__fbthrift_field_addInputAllocationInBytes, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "addInputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> addInputAllocationInBytes() & {
    return {this->__fbthrift_field_addInputAllocationInBytes, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "addInputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> addInputAllocationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_addInputAllocationInBytes), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputDataSizeInBytes), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputDataSizeInBytes() const& {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputDataSizeInBytes() & {
    return {this->__fbthrift_field_rawInputDataSizeInBytes, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputDataSizeInBytes), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputPositions_ref() const& {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputPositions_ref() & {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputPositions), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> rawInputPositions() const& {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> rawInputPositions() & {
    return {this->__fbthrift_field_rawInputPositions, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "rawInputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> rawInputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_rawInputPositions), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "inputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_inputDataSizeInBytes, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "inputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_inputDataSizeInBytes, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "inputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inputDataSizeInBytes), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "inputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inputDataSizeInBytes() const& {
    return {this->__fbthrift_field_inputDataSizeInBytes, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "inputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inputDataSizeInBytes() & {
    return {this->__fbthrift_field_inputDataSizeInBytes, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "inputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inputDataSizeInBytes), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "inputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inputPositions_ref() const& {
    return {this->__fbthrift_field_inputPositions, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "inputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inputPositions_ref() & {
    return {this->__fbthrift_field_inputPositions, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "inputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inputPositions), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "inputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inputPositions() const& {
    return {this->__fbthrift_field_inputPositions, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "inputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inputPositions() & {
    return {this->__fbthrift_field_inputPositions, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "inputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inputPositions), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "sumSquaredInputPositions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sumSquaredInputPositions_ref() const& {
    return {this->__fbthrift_field_sumSquaredInputPositions, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "sumSquaredInputPositions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sumSquaredInputPositions_ref() & {
    return {this->__fbthrift_field_sumSquaredInputPositions, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "sumSquaredInputPositions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sumSquaredInputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sumSquaredInputPositions), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "sumSquaredInputPositions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sumSquaredInputPositions() const& {
    return {this->__fbthrift_field_sumSquaredInputPositions, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "sumSquaredInputPositions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sumSquaredInputPositions() & {
    return {this->__fbthrift_field_sumSquaredInputPositions, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "sumSquaredInputPositions" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sumSquaredInputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sumSquaredInputPositions), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "getOutputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> getOutputCalls_ref() const& {
    return {this->__fbthrift_field_getOutputCalls, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "getOutputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> getOutputCalls_ref() & {
    return {this->__fbthrift_field_getOutputCalls, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "getOutputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> getOutputCalls_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_getOutputCalls), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "getOutputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> getOutputCalls() const& {
    return {this->__fbthrift_field_getOutputCalls, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "getOutputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> getOutputCalls() & {
    return {this->__fbthrift_field_getOutputCalls, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "getOutputCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> getOutputCalls() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_getOutputCalls), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "getOutputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> getOutputWall_ref() const& {
    return {this->__fbthrift_field_getOutputWall, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "getOutputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> getOutputWall_ref() & {
    return {this->__fbthrift_field_getOutputWall, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "getOutputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> getOutputWall_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_getOutputWall), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "getOutputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> getOutputWall() const& {
    return {this->__fbthrift_field_getOutputWall, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "getOutputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> getOutputWall() & {
    return {this->__fbthrift_field_getOutputWall, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "getOutputWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> getOutputWall() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_getOutputWall), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "getOutputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> getOutputCpu_ref() const& {
    return {this->__fbthrift_field_getOutputCpu, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "getOutputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> getOutputCpu_ref() & {
    return {this->__fbthrift_field_getOutputCpu, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "getOutputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> getOutputCpu_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_getOutputCpu), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "getOutputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> getOutputCpu() const& {
    return {this->__fbthrift_field_getOutputCpu, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "getOutputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> getOutputCpu() & {
    return {this->__fbthrift_field_getOutputCpu, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "getOutputCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> getOutputCpu() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_getOutputCpu), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "getOutputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> getOutputAllocationInBytes_ref() const& {
    return {this->__fbthrift_field_getOutputAllocationInBytes, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "getOutputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> getOutputAllocationInBytes_ref() & {
    return {this->__fbthrift_field_getOutputAllocationInBytes, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "getOutputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> getOutputAllocationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_getOutputAllocationInBytes), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "getOutputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> getOutputAllocationInBytes() const& {
    return {this->__fbthrift_field_getOutputAllocationInBytes, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "getOutputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> getOutputAllocationInBytes() & {
    return {this->__fbthrift_field_getOutputAllocationInBytes, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "getOutputAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> getOutputAllocationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_getOutputAllocationInBytes), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputDataSizeInBytes), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputDataSizeInBytes() const& {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputDataSizeInBytes() & {
    return {this->__fbthrift_field_outputDataSizeInBytes, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputDataSizeInBytes), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPositions_ref() const& {
    return {this->__fbthrift_field_outputPositions, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPositions_ref() & {
    return {this->__fbthrift_field_outputPositions, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPositions_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPositions), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> outputPositions() const& {
    return {this->__fbthrift_field_outputPositions, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> outputPositions() & {
    return {this->__fbthrift_field_outputPositions, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "outputPositions" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> outputPositions() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_outputPositions), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> physicalWrittenDataSizeInBytes() const& {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> physicalWrittenDataSizeInBytes() & {
    return {this->__fbthrift_field_physicalWrittenDataSizeInBytes, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> physicalWrittenDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_physicalWrittenDataSizeInBytes), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "additionalCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> additionalCpu_ref() const& {
    return {this->__fbthrift_field_additionalCpu, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "additionalCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> additionalCpu_ref() & {
    return {this->__fbthrift_field_additionalCpu, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "additionalCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> additionalCpu_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_additionalCpu), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "additionalCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> additionalCpu() const& {
    return {this->__fbthrift_field_additionalCpu, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "additionalCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> additionalCpu() & {
    return {this->__fbthrift_field_additionalCpu, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "additionalCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> additionalCpu() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_additionalCpu), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "blockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedWall_ref() const& {
    return {this->__fbthrift_field_blockedWall, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedWall_ref() & {
    return {this->__fbthrift_field_blockedWall, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedWall_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedWall), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> blockedWall() const& {
    return {this->__fbthrift_field_blockedWall, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> blockedWall() & {
    return {this->__fbthrift_field_blockedWall, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "blockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> blockedWall() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedWall), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "finishCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finishCalls_ref() const& {
    return {this->__fbthrift_field_finishCalls, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "finishCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finishCalls_ref() & {
    return {this->__fbthrift_field_finishCalls, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "finishCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finishCalls_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finishCalls), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "finishCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finishCalls() const& {
    return {this->__fbthrift_field_finishCalls, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "finishCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finishCalls() & {
    return {this->__fbthrift_field_finishCalls, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "finishCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finishCalls() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finishCalls), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "finishWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finishWall_ref() const& {
    return {this->__fbthrift_field_finishWall, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "finishWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finishWall_ref() & {
    return {this->__fbthrift_field_finishWall, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "finishWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finishWall_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finishWall), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "finishWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finishWall() const& {
    return {this->__fbthrift_field_finishWall, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "finishWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finishWall() & {
    return {this->__fbthrift_field_finishWall, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "finishWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finishWall() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finishWall), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "finishCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finishCpu_ref() const& {
    return {this->__fbthrift_field_finishCpu, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "finishCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finishCpu_ref() & {
    return {this->__fbthrift_field_finishCpu, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "finishCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finishCpu_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finishCpu), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "finishCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finishCpu() const& {
    return {this->__fbthrift_field_finishCpu, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "finishCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finishCpu() & {
    return {this->__fbthrift_field_finishCpu, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "finishCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finishCpu() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finishCpu), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "finishAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finishAllocationInBytes_ref() const& {
    return {this->__fbthrift_field_finishAllocationInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "finishAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finishAllocationInBytes_ref() & {
    return {this->__fbthrift_field_finishAllocationInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "finishAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finishAllocationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finishAllocationInBytes), __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "finishAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> finishAllocationInBytes() const& {
    return {this->__fbthrift_field_finishAllocationInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "finishAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> finishAllocationInBytes() & {
    return {this->__fbthrift_field_finishAllocationInBytes, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "finishAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> finishAllocationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_finishAllocationInBytes), __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> userMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> userMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> userMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userMemoryReservationInBytes), __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> userMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> userMemoryReservationInBytes() & {
    return {this->__fbthrift_field_userMemoryReservationInBytes, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "userMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> userMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_userMemoryReservationInBytes), __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> revocableMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> revocableMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> revocableMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_revocableMemoryReservationInBytes), __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> revocableMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> revocableMemoryReservationInBytes() & {
    return {this->__fbthrift_field_revocableMemoryReservationInBytes, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> revocableMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_revocableMemoryReservationInBytes), __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> systemMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> systemMemoryReservationInBytes() & {
    return {this->__fbthrift_field_systemMemoryReservationInBytes, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> systemMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_systemMemoryReservationInBytes), __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "peakUserMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakUserMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_peakUserMemoryReservationInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "peakUserMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakUserMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_peakUserMemoryReservationInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "peakUserMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakUserMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakUserMemoryReservationInBytes), __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "peakUserMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakUserMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_peakUserMemoryReservationInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "peakUserMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakUserMemoryReservationInBytes() & {
    return {this->__fbthrift_field_peakUserMemoryReservationInBytes, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "peakUserMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakUserMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakUserMemoryReservationInBytes), __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "peakSystemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakSystemMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_peakSystemMemoryReservationInBytes, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "peakSystemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakSystemMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_peakSystemMemoryReservationInBytes, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "peakSystemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakSystemMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakSystemMemoryReservationInBytes), __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "peakSystemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakSystemMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_peakSystemMemoryReservationInBytes, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "peakSystemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakSystemMemoryReservationInBytes() & {
    return {this->__fbthrift_field_peakSystemMemoryReservationInBytes, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "peakSystemMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakSystemMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakSystemMemoryReservationInBytes), __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "peakTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakTotalMemoryReservationInBytes_ref() const& {
    return {this->__fbthrift_field_peakTotalMemoryReservationInBytes, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "peakTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakTotalMemoryReservationInBytes_ref() & {
    return {this->__fbthrift_field_peakTotalMemoryReservationInBytes, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "peakTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakTotalMemoryReservationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakTotalMemoryReservationInBytes), __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "peakTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> peakTotalMemoryReservationInBytes() const& {
    return {this->__fbthrift_field_peakTotalMemoryReservationInBytes, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "peakTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> peakTotalMemoryReservationInBytes() & {
    return {this->__fbthrift_field_peakTotalMemoryReservationInBytes, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "peakTotalMemoryReservationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> peakTotalMemoryReservationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_peakTotalMemoryReservationInBytes), __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "spilledDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> spilledDataSizeInBytes_ref() const& {
    return {this->__fbthrift_field_spilledDataSizeInBytes, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "spilledDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> spilledDataSizeInBytes_ref() & {
    return {this->__fbthrift_field_spilledDataSizeInBytes, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "spilledDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> spilledDataSizeInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_spilledDataSizeInBytes), __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "spilledDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> spilledDataSizeInBytes() const& {
    return {this->__fbthrift_field_spilledDataSizeInBytes, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "spilledDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> spilledDataSizeInBytes() & {
    return {this->__fbthrift_field_spilledDataSizeInBytes, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "spilledDataSizeInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> spilledDataSizeInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_spilledDataSizeInBytes), __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runtimeStats_ref() const& {
    return {this->__fbthrift_field_runtimeStats, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runtimeStats_ref() & {
    return {this->__fbthrift_field_runtimeStats, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runtimeStats_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runtimeStats), __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> runtimeStats() const& {
    return {this->__fbthrift_field_runtimeStats, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> runtimeStats() & {
    return {this->__fbthrift_field_runtimeStats, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "runtimeStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::RuntimeStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> runtimeStats() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_runtimeStats), __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "blockedReason" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BlockedReason>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> blockedReason_ref() const& {
    return {this->__fbthrift_field_blockedReason, __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "blockedReason" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BlockedReason>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> blockedReason_ref() & {
    return {this->__fbthrift_field_blockedReason, __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "blockedReason" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BlockedReason>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> blockedReason_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedReason), __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "blockedReason" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BlockedReason>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> blockedReason() const& {
    return {this->__fbthrift_field_blockedReason, __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "blockedReason" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BlockedReason>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> blockedReason() & {
    return {this->__fbthrift_field_blockedReason, __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "blockedReason" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::BlockedReason>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> blockedReason() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_blockedReason), __isset.at(37), __isset.bit(37)};
  }

  /** Glean { "field": "infoUnion" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OperatorInfoUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> infoUnion_ref() const& {
    return {this->__fbthrift_field_infoUnion, __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "infoUnion" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OperatorInfoUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> infoUnion_ref() & {
    return {this->__fbthrift_field_infoUnion, __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "infoUnion" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OperatorInfoUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> infoUnion_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_infoUnion), __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "infoUnion" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OperatorInfoUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> infoUnion() const& {
    return {this->__fbthrift_field_infoUnion, __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "infoUnion" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OperatorInfoUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> infoUnion() & {
    return {this->__fbthrift_field_infoUnion, __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "infoUnion" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::OperatorInfoUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> infoUnion() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_infoUnion), __isset.at(38), __isset.bit(38)};
  }

  /** Glean { "field": "nullJoinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nullJoinBuildKeyCount_ref() const& {
    return {this->__fbthrift_field_nullJoinBuildKeyCount, __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "nullJoinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nullJoinBuildKeyCount_ref() & {
    return {this->__fbthrift_field_nullJoinBuildKeyCount, __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "nullJoinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nullJoinBuildKeyCount_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nullJoinBuildKeyCount), __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "nullJoinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nullJoinBuildKeyCount() const& {
    return {this->__fbthrift_field_nullJoinBuildKeyCount, __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "nullJoinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nullJoinBuildKeyCount() & {
    return {this->__fbthrift_field_nullJoinBuildKeyCount, __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "nullJoinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nullJoinBuildKeyCount() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nullJoinBuildKeyCount), __isset.at(39), __isset.bit(39)};
  }

  /** Glean { "field": "joinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> joinBuildKeyCount_ref() const& {
    return {this->__fbthrift_field_joinBuildKeyCount, __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "joinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> joinBuildKeyCount_ref() & {
    return {this->__fbthrift_field_joinBuildKeyCount, __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "joinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> joinBuildKeyCount_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_joinBuildKeyCount), __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "joinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> joinBuildKeyCount() const& {
    return {this->__fbthrift_field_joinBuildKeyCount, __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "joinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> joinBuildKeyCount() & {
    return {this->__fbthrift_field_joinBuildKeyCount, __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "joinBuildKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> joinBuildKeyCount() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_joinBuildKeyCount), __isset.at(40), __isset.bit(40)};
  }

  /** Glean { "field": "nullJoinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nullJoinProbeKeyCount_ref() const& {
    return {this->__fbthrift_field_nullJoinProbeKeyCount, __isset.at(41), __isset.bit(41)};
  }

  /** Glean { "field": "nullJoinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nullJoinProbeKeyCount_ref() & {
    return {this->__fbthrift_field_nullJoinProbeKeyCount, __isset.at(41), __isset.bit(41)};
  }

  /** Glean { "field": "nullJoinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nullJoinProbeKeyCount_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nullJoinProbeKeyCount), __isset.at(41), __isset.bit(41)};
  }

  /** Glean { "field": "nullJoinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nullJoinProbeKeyCount() const& {
    return {this->__fbthrift_field_nullJoinProbeKeyCount, __isset.at(41), __isset.bit(41)};
  }

  /** Glean { "field": "nullJoinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nullJoinProbeKeyCount() & {
    return {this->__fbthrift_field_nullJoinProbeKeyCount, __isset.at(41), __isset.bit(41)};
  }

  /** Glean { "field": "nullJoinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nullJoinProbeKeyCount() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nullJoinProbeKeyCount), __isset.at(41), __isset.bit(41)};
  }

  /** Glean { "field": "joinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> joinProbeKeyCount_ref() const& {
    return {this->__fbthrift_field_joinProbeKeyCount, __isset.at(42), __isset.bit(42)};
  }

  /** Glean { "field": "joinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> joinProbeKeyCount_ref() & {
    return {this->__fbthrift_field_joinProbeKeyCount, __isset.at(42), __isset.bit(42)};
  }

  /** Glean { "field": "joinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> joinProbeKeyCount_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_joinProbeKeyCount), __isset.at(42), __isset.bit(42)};
  }

  /** Glean { "field": "joinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> joinProbeKeyCount() const& {
    return {this->__fbthrift_field_joinProbeKeyCount, __isset.at(42), __isset.bit(42)};
  }

  /** Glean { "field": "joinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> joinProbeKeyCount() & {
    return {this->__fbthrift_field_joinProbeKeyCount, __isset.at(42), __isset.bit(42)};
  }

  /** Glean { "field": "joinProbeKeyCount" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> joinProbeKeyCount() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_joinProbeKeyCount), __isset.at(42), __isset.bit(42)};
  }

  /** Glean { "field": "dynamicFilterStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DynamicFilterStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> dynamicFilterStats_ref() const& {
    return {this->__fbthrift_field_dynamicFilterStats, __isset.at(43), __isset.bit(43)};
  }

  /** Glean { "field": "dynamicFilterStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DynamicFilterStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> dynamicFilterStats_ref() & {
    return {this->__fbthrift_field_dynamicFilterStats, __isset.at(43), __isset.bit(43)};
  }

  /** Glean { "field": "dynamicFilterStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DynamicFilterStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> dynamicFilterStats_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_dynamicFilterStats), __isset.at(43), __isset.bit(43)};
  }

  /** Glean { "field": "dynamicFilterStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DynamicFilterStats>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> dynamicFilterStats() const& {
    return {this->__fbthrift_field_dynamicFilterStats, __isset.at(43), __isset.bit(43)};
  }

  /** Glean { "field": "dynamicFilterStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DynamicFilterStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> dynamicFilterStats() & {
    return {this->__fbthrift_field_dynamicFilterStats, __isset.at(43), __isset.bit(43)};
  }

  /** Glean { "field": "dynamicFilterStats" } */
  template <typename..., typename fbthrift_T = ::facebook::presto::protocol::cpp2::DynamicFilterStats>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> dynamicFilterStats() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_dynamicFilterStats), __isset.at(43), __isset.bit(43)};
  }

  /** Glean { "field": "isBlockedCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> isBlockedCalls_ref() const& {
    return {this->__fbthrift_field_isBlockedCalls, __isset.at(44), __isset.bit(44)};
  }

  /** Glean { "field": "isBlockedCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> isBlockedCalls_ref() & {
    return {this->__fbthrift_field_isBlockedCalls, __isset.at(44), __isset.bit(44)};
  }

  /** Glean { "field": "isBlockedCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> isBlockedCalls_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_isBlockedCalls), __isset.at(44), __isset.bit(44)};
  }

  /** Glean { "field": "isBlockedCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> isBlockedCalls() const& {
    return {this->__fbthrift_field_isBlockedCalls, __isset.at(44), __isset.bit(44)};
  }

  /** Glean { "field": "isBlockedCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> isBlockedCalls() & {
    return {this->__fbthrift_field_isBlockedCalls, __isset.at(44), __isset.bit(44)};
  }

  /** Glean { "field": "isBlockedCalls" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> isBlockedCalls() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_isBlockedCalls), __isset.at(44), __isset.bit(44)};
  }

  /** Glean { "field": "isBlockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> isBlockedWall_ref() const& {
    return {this->__fbthrift_field_isBlockedWall, __isset.at(45), __isset.bit(45)};
  }

  /** Glean { "field": "isBlockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> isBlockedWall_ref() & {
    return {this->__fbthrift_field_isBlockedWall, __isset.at(45), __isset.bit(45)};
  }

  /** Glean { "field": "isBlockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> isBlockedWall_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_isBlockedWall), __isset.at(45), __isset.bit(45)};
  }

  /** Glean { "field": "isBlockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> isBlockedWall() const& {
    return {this->__fbthrift_field_isBlockedWall, __isset.at(45), __isset.bit(45)};
  }

  /** Glean { "field": "isBlockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> isBlockedWall() & {
    return {this->__fbthrift_field_isBlockedWall, __isset.at(45), __isset.bit(45)};
  }

  /** Glean { "field": "isBlockedWall" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> isBlockedWall() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_isBlockedWall), __isset.at(45), __isset.bit(45)};
  }

  /** Glean { "field": "isBlockedCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> isBlockedCpu_ref() const& {
    return {this->__fbthrift_field_isBlockedCpu, __isset.at(46), __isset.bit(46)};
  }

  /** Glean { "field": "isBlockedCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> isBlockedCpu_ref() & {
    return {this->__fbthrift_field_isBlockedCpu, __isset.at(46), __isset.bit(46)};
  }

  /** Glean { "field": "isBlockedCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> isBlockedCpu_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_isBlockedCpu), __isset.at(46), __isset.bit(46)};
  }

  /** Glean { "field": "isBlockedCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> isBlockedCpu() const& {
    return {this->__fbthrift_field_isBlockedCpu, __isset.at(46), __isset.bit(46)};
  }

  /** Glean { "field": "isBlockedCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> isBlockedCpu() & {
    return {this->__fbthrift_field_isBlockedCpu, __isset.at(46), __isset.bit(46)};
  }

  /** Glean { "field": "isBlockedCpu" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> isBlockedCpu() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_isBlockedCpu), __isset.at(46), __isset.bit(46)};
  }

  /** Glean { "field": "isBlockedAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> isBlockedAllocationInBytes_ref() const& {
    return {this->__fbthrift_field_isBlockedAllocationInBytes, __isset.at(47), __isset.bit(47)};
  }

  /** Glean { "field": "isBlockedAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> isBlockedAllocationInBytes_ref() & {
    return {this->__fbthrift_field_isBlockedAllocationInBytes, __isset.at(47), __isset.bit(47)};
  }

  /** Glean { "field": "isBlockedAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> isBlockedAllocationInBytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_isBlockedAllocationInBytes), __isset.at(47), __isset.bit(47)};
  }

  /** Glean { "field": "isBlockedAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> isBlockedAllocationInBytes() const& {
    return {this->__fbthrift_field_isBlockedAllocationInBytes, __isset.at(47), __isset.bit(47)};
  }

  /** Glean { "field": "isBlockedAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> isBlockedAllocationInBytes() & {
    return {this->__fbthrift_field_isBlockedAllocationInBytes, __isset.at(47), __isset.bit(47)};
  }

  /** Glean { "field": "isBlockedAllocationInBytes" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> isBlockedAllocationInBytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_isBlockedAllocationInBytes), __isset.at(47), __isset.bit(47)};
  }

  /** Glean { "field": "stageId" } */
  [[deprecated("Use `FOO.stageId().value()` instead of `FOO.get_stageId()`")]]
  ::std::int32_t get_stageId() const;

  /** Glean { "field": "stageId" } */
  [[deprecated("Use `FOO.stageId() = BAR` instead of `FOO.set_stageId(BAR)`")]]
  ::std::int32_t& set_stageId(::std::int32_t stageId_);

  /** Glean { "field": "stageExecutionId" } */
  [[deprecated("Use `FOO.stageExecutionId().value()` instead of `FOO.get_stageExecutionId()`")]]
  ::std::int32_t get_stageExecutionId() const;

  /** Glean { "field": "stageExecutionId" } */
  [[deprecated("Use `FOO.stageExecutionId() = BAR` instead of `FOO.set_stageExecutionId(BAR)`")]]
  ::std::int32_t& set_stageExecutionId(::std::int32_t stageExecutionId_);

  /** Glean { "field": "pipelineId" } */
  [[deprecated("Use `FOO.pipelineId().value()` instead of `FOO.get_pipelineId()`")]]
  ::std::int32_t get_pipelineId() const;

  /** Glean { "field": "pipelineId" } */
  [[deprecated("Use `FOO.pipelineId() = BAR` instead of `FOO.set_pipelineId(BAR)`")]]
  ::std::int32_t& set_pipelineId(::std::int32_t pipelineId_);

  /** Glean { "field": "operatorId" } */
  [[deprecated("Use `FOO.operatorId().value()` instead of `FOO.get_operatorId()`")]]
  ::std::int32_t get_operatorId() const;

  /** Glean { "field": "operatorId" } */
  [[deprecated("Use `FOO.operatorId() = BAR` instead of `FOO.set_operatorId(BAR)`")]]
  ::std::int32_t& set_operatorId(::std::int32_t operatorId_);

  /** Glean { "field": "planNodeId" } */
  [[deprecated("Use `FOO.planNodeId().value()` instead of `FOO.get_planNodeId()`")]]
  const ::facebook::presto::protocol::cpp2::PlanNodeId& get_planNodeId() const&;

  /** Glean { "field": "planNodeId" } */
  [[deprecated("Use `FOO.planNodeId().value()` instead of `FOO.get_planNodeId()`")]]
  ::facebook::presto::protocol::cpp2::PlanNodeId get_planNodeId() &&;

  /** Glean { "field": "planNodeId" } */
  template <typename T_OperatorStats_planNodeId_struct_setter = ::facebook::presto::protocol::cpp2::PlanNodeId>
  [[deprecated("Use `FOO.planNodeId() = BAR` instead of `FOO.set_planNodeId(BAR)`")]]
  ::facebook::presto::protocol::cpp2::PlanNodeId& set_planNodeId(T_OperatorStats_planNodeId_struct_setter&& planNodeId_) {
    planNodeId_ref() = std::forward<T_OperatorStats_planNodeId_struct_setter>(planNodeId_);
    return __fbthrift_field_planNodeId;
  }

  /** Glean { "field": "operatorType" } */
  [[deprecated("Use `FOO.operatorType().value()` instead of `FOO.get_operatorType()`")]]
  const ::std::string& get_operatorType() const& {
    return __fbthrift_field_operatorType;
  }

  /** Glean { "field": "operatorType" } */
  [[deprecated("Use `FOO.operatorType().value()` instead of `FOO.get_operatorType()`")]]
  ::std::string get_operatorType() && {
    return static_cast<::std::string&&>(__fbthrift_field_operatorType);
  }

  /** Glean { "field": "operatorType" } */
  template <typename T_OperatorStats_operatorType_struct_setter = ::std::string>
  [[deprecated("Use `FOO.operatorType() = BAR` instead of `FOO.set_operatorType(BAR)`")]]
  ::std::string& set_operatorType(T_OperatorStats_operatorType_struct_setter&& operatorType_) {
    operatorType_ref() = std::forward<T_OperatorStats_operatorType_struct_setter>(operatorType_);
    return __fbthrift_field_operatorType;
  }

  /** Glean { "field": "totalDrivers" } */
  [[deprecated("Use `FOO.totalDrivers().value()` instead of `FOO.get_totalDrivers()`")]]
  ::std::int64_t get_totalDrivers() const;

  /** Glean { "field": "totalDrivers" } */
  [[deprecated("Use `FOO.totalDrivers() = BAR` instead of `FOO.set_totalDrivers(BAR)`")]]
  ::std::int64_t& set_totalDrivers(::std::int64_t totalDrivers_);

  /** Glean { "field": "addInputCalls" } */
  [[deprecated("Use `FOO.addInputCalls().value()` instead of `FOO.get_addInputCalls()`")]]
  ::std::int64_t get_addInputCalls() const;

  /** Glean { "field": "addInputCalls" } */
  [[deprecated("Use `FOO.addInputCalls() = BAR` instead of `FOO.set_addInputCalls(BAR)`")]]
  ::std::int64_t& set_addInputCalls(::std::int64_t addInputCalls_);

  /** Glean { "field": "addInputWall" } */
  [[deprecated("Use `FOO.addInputWall().value()` instead of `FOO.get_addInputWall()`")]]
  double get_addInputWall() const;

  /** Glean { "field": "addInputWall" } */
  [[deprecated("Use `FOO.addInputWall() = BAR` instead of `FOO.set_addInputWall(BAR)`")]]
  double& set_addInputWall(double addInputWall_);

  /** Glean { "field": "addInputCpu" } */
  [[deprecated("Use `FOO.addInputCpu().value()` instead of `FOO.get_addInputCpu()`")]]
  double get_addInputCpu() const;

  /** Glean { "field": "addInputCpu" } */
  [[deprecated("Use `FOO.addInputCpu() = BAR` instead of `FOO.set_addInputCpu(BAR)`")]]
  double& set_addInputCpu(double addInputCpu_);

  /** Glean { "field": "addInputAllocationInBytes" } */
  [[deprecated("Use `FOO.addInputAllocationInBytes().value()` instead of `FOO.get_addInputAllocationInBytes()`")]]
  ::std::int64_t get_addInputAllocationInBytes() const;

  /** Glean { "field": "addInputAllocationInBytes" } */
  [[deprecated("Use `FOO.addInputAllocationInBytes() = BAR` instead of `FOO.set_addInputAllocationInBytes(BAR)`")]]
  ::std::int64_t& set_addInputAllocationInBytes(::std::int64_t addInputAllocationInBytes_);

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.rawInputDataSizeInBytes().value()` instead of `FOO.get_rawInputDataSizeInBytes()`")]]
  ::std::int64_t get_rawInputDataSizeInBytes() const;

  /** Glean { "field": "rawInputDataSizeInBytes" } */
  [[deprecated("Use `FOO.rawInputDataSizeInBytes() = BAR` instead of `FOO.set_rawInputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_rawInputDataSizeInBytes(::std::int64_t rawInputDataSizeInBytes_);

  /** Glean { "field": "rawInputPositions" } */
  [[deprecated("Use `FOO.rawInputPositions().value()` instead of `FOO.get_rawInputPositions()`")]]
  ::std::int64_t get_rawInputPositions() const;

  /** Glean { "field": "rawInputPositions" } */
  [[deprecated("Use `FOO.rawInputPositions() = BAR` instead of `FOO.set_rawInputPositions(BAR)`")]]
  ::std::int64_t& set_rawInputPositions(::std::int64_t rawInputPositions_);

  /** Glean { "field": "inputDataSizeInBytes" } */
  [[deprecated("Use `FOO.inputDataSizeInBytes().value()` instead of `FOO.get_inputDataSizeInBytes()`")]]
  ::std::int64_t get_inputDataSizeInBytes() const;

  /** Glean { "field": "inputDataSizeInBytes" } */
  [[deprecated("Use `FOO.inputDataSizeInBytes() = BAR` instead of `FOO.set_inputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_inputDataSizeInBytes(::std::int64_t inputDataSizeInBytes_);

  /** Glean { "field": "inputPositions" } */
  [[deprecated("Use `FOO.inputPositions().value()` instead of `FOO.get_inputPositions()`")]]
  ::std::int64_t get_inputPositions() const;

  /** Glean { "field": "inputPositions" } */
  [[deprecated("Use `FOO.inputPositions() = BAR` instead of `FOO.set_inputPositions(BAR)`")]]
  ::std::int64_t& set_inputPositions(::std::int64_t inputPositions_);

  /** Glean { "field": "sumSquaredInputPositions" } */
  [[deprecated("Use `FOO.sumSquaredInputPositions().value()` instead of `FOO.get_sumSquaredInputPositions()`")]]
  double get_sumSquaredInputPositions() const;

  /** Glean { "field": "sumSquaredInputPositions" } */
  [[deprecated("Use `FOO.sumSquaredInputPositions() = BAR` instead of `FOO.set_sumSquaredInputPositions(BAR)`")]]
  double& set_sumSquaredInputPositions(double sumSquaredInputPositions_);

  /** Glean { "field": "getOutputCalls" } */
  [[deprecated("Use `FOO.getOutputCalls().value()` instead of `FOO.get_getOutputCalls()`")]]
  ::std::int64_t get_getOutputCalls() const;

  /** Glean { "field": "getOutputCalls" } */
  [[deprecated("Use `FOO.getOutputCalls() = BAR` instead of `FOO.set_getOutputCalls(BAR)`")]]
  ::std::int64_t& set_getOutputCalls(::std::int64_t getOutputCalls_);

  /** Glean { "field": "getOutputWall" } */
  [[deprecated("Use `FOO.getOutputWall().value()` instead of `FOO.get_getOutputWall()`")]]
  double get_getOutputWall() const;

  /** Glean { "field": "getOutputWall" } */
  [[deprecated("Use `FOO.getOutputWall() = BAR` instead of `FOO.set_getOutputWall(BAR)`")]]
  double& set_getOutputWall(double getOutputWall_);

  /** Glean { "field": "getOutputCpu" } */
  [[deprecated("Use `FOO.getOutputCpu().value()` instead of `FOO.get_getOutputCpu()`")]]
  double get_getOutputCpu() const;

  /** Glean { "field": "getOutputCpu" } */
  [[deprecated("Use `FOO.getOutputCpu() = BAR` instead of `FOO.set_getOutputCpu(BAR)`")]]
  double& set_getOutputCpu(double getOutputCpu_);

  /** Glean { "field": "getOutputAllocationInBytes" } */
  [[deprecated("Use `FOO.getOutputAllocationInBytes().value()` instead of `FOO.get_getOutputAllocationInBytes()`")]]
  ::std::int64_t get_getOutputAllocationInBytes() const;

  /** Glean { "field": "getOutputAllocationInBytes" } */
  [[deprecated("Use `FOO.getOutputAllocationInBytes() = BAR` instead of `FOO.set_getOutputAllocationInBytes(BAR)`")]]
  ::std::int64_t& set_getOutputAllocationInBytes(::std::int64_t getOutputAllocationInBytes_);

  /** Glean { "field": "outputDataSizeInBytes" } */
  [[deprecated("Use `FOO.outputDataSizeInBytes().value()` instead of `FOO.get_outputDataSizeInBytes()`")]]
  ::std::int64_t get_outputDataSizeInBytes() const;

  /** Glean { "field": "outputDataSizeInBytes" } */
  [[deprecated("Use `FOO.outputDataSizeInBytes() = BAR` instead of `FOO.set_outputDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_outputDataSizeInBytes(::std::int64_t outputDataSizeInBytes_);

  /** Glean { "field": "outputPositions" } */
  [[deprecated("Use `FOO.outputPositions().value()` instead of `FOO.get_outputPositions()`")]]
  ::std::int64_t get_outputPositions() const;

  /** Glean { "field": "outputPositions" } */
  [[deprecated("Use `FOO.outputPositions() = BAR` instead of `FOO.set_outputPositions(BAR)`")]]
  ::std::int64_t& set_outputPositions(::std::int64_t outputPositions_);

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes().value()` instead of `FOO.get_physicalWrittenDataSizeInBytes()`")]]
  ::std::int64_t get_physicalWrittenDataSizeInBytes() const;

  /** Glean { "field": "physicalWrittenDataSizeInBytes" } */
  [[deprecated("Use `FOO.physicalWrittenDataSizeInBytes() = BAR` instead of `FOO.set_physicalWrittenDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_);

  /** Glean { "field": "additionalCpu" } */
  [[deprecated("Use `FOO.additionalCpu().value()` instead of `FOO.get_additionalCpu()`")]]
  double get_additionalCpu() const;

  /** Glean { "field": "additionalCpu" } */
  [[deprecated("Use `FOO.additionalCpu() = BAR` instead of `FOO.set_additionalCpu(BAR)`")]]
  double& set_additionalCpu(double additionalCpu_);

  /** Glean { "field": "blockedWall" } */
  [[deprecated("Use `FOO.blockedWall().value()` instead of `FOO.get_blockedWall()`")]]
  double get_blockedWall() const;

  /** Glean { "field": "blockedWall" } */
  [[deprecated("Use `FOO.blockedWall() = BAR` instead of `FOO.set_blockedWall(BAR)`")]]
  double& set_blockedWall(double blockedWall_);

  /** Glean { "field": "finishCalls" } */
  [[deprecated("Use `FOO.finishCalls().value()` instead of `FOO.get_finishCalls()`")]]
  ::std::int64_t get_finishCalls() const;

  /** Glean { "field": "finishCalls" } */
  [[deprecated("Use `FOO.finishCalls() = BAR` instead of `FOO.set_finishCalls(BAR)`")]]
  ::std::int64_t& set_finishCalls(::std::int64_t finishCalls_);

  /** Glean { "field": "finishWall" } */
  [[deprecated("Use `FOO.finishWall().value()` instead of `FOO.get_finishWall()`")]]
  double get_finishWall() const;

  /** Glean { "field": "finishWall" } */
  [[deprecated("Use `FOO.finishWall() = BAR` instead of `FOO.set_finishWall(BAR)`")]]
  double& set_finishWall(double finishWall_);

  /** Glean { "field": "finishCpu" } */
  [[deprecated("Use `FOO.finishCpu().value()` instead of `FOO.get_finishCpu()`")]]
  double get_finishCpu() const;

  /** Glean { "field": "finishCpu" } */
  [[deprecated("Use `FOO.finishCpu() = BAR` instead of `FOO.set_finishCpu(BAR)`")]]
  double& set_finishCpu(double finishCpu_);

  /** Glean { "field": "finishAllocationInBytes" } */
  [[deprecated("Use `FOO.finishAllocationInBytes().value()` instead of `FOO.get_finishAllocationInBytes()`")]]
  ::std::int64_t get_finishAllocationInBytes() const;

  /** Glean { "field": "finishAllocationInBytes" } */
  [[deprecated("Use `FOO.finishAllocationInBytes() = BAR` instead of `FOO.set_finishAllocationInBytes(BAR)`")]]
  ::std::int64_t& set_finishAllocationInBytes(::std::int64_t finishAllocationInBytes_);

  /** Glean { "field": "userMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.userMemoryReservationInBytes().value()` instead of `FOO.get_userMemoryReservationInBytes()`")]]
  ::std::int64_t get_userMemoryReservationInBytes() const;

  /** Glean { "field": "userMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.userMemoryReservationInBytes() = BAR` instead of `FOO.set_userMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_userMemoryReservationInBytes(::std::int64_t userMemoryReservationInBytes_);

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.revocableMemoryReservationInBytes().value()` instead of `FOO.get_revocableMemoryReservationInBytes()`")]]
  ::std::int64_t get_revocableMemoryReservationInBytes() const;

  /** Glean { "field": "revocableMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.revocableMemoryReservationInBytes() = BAR` instead of `FOO.set_revocableMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_revocableMemoryReservationInBytes(::std::int64_t revocableMemoryReservationInBytes_);

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes().value()` instead of `FOO.get_systemMemoryReservationInBytes()`")]]
  ::std::int64_t get_systemMemoryReservationInBytes() const;

  /** Glean { "field": "systemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.systemMemoryReservationInBytes() = BAR` instead of `FOO.set_systemMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_);

  /** Glean { "field": "peakUserMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.peakUserMemoryReservationInBytes().value()` instead of `FOO.get_peakUserMemoryReservationInBytes()`")]]
  ::std::int64_t get_peakUserMemoryReservationInBytes() const;

  /** Glean { "field": "peakUserMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.peakUserMemoryReservationInBytes() = BAR` instead of `FOO.set_peakUserMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_peakUserMemoryReservationInBytes(::std::int64_t peakUserMemoryReservationInBytes_);

  /** Glean { "field": "peakSystemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.peakSystemMemoryReservationInBytes().value()` instead of `FOO.get_peakSystemMemoryReservationInBytes()`")]]
  ::std::int64_t get_peakSystemMemoryReservationInBytes() const;

  /** Glean { "field": "peakSystemMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.peakSystemMemoryReservationInBytes() = BAR` instead of `FOO.set_peakSystemMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_peakSystemMemoryReservationInBytes(::std::int64_t peakSystemMemoryReservationInBytes_);

  /** Glean { "field": "peakTotalMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.peakTotalMemoryReservationInBytes().value()` instead of `FOO.get_peakTotalMemoryReservationInBytes()`")]]
  ::std::int64_t get_peakTotalMemoryReservationInBytes() const;

  /** Glean { "field": "peakTotalMemoryReservationInBytes" } */
  [[deprecated("Use `FOO.peakTotalMemoryReservationInBytes() = BAR` instead of `FOO.set_peakTotalMemoryReservationInBytes(BAR)`")]]
  ::std::int64_t& set_peakTotalMemoryReservationInBytes(::std::int64_t peakTotalMemoryReservationInBytes_);

  /** Glean { "field": "spilledDataSizeInBytes" } */
  [[deprecated("Use `FOO.spilledDataSizeInBytes().value()` instead of `FOO.get_spilledDataSizeInBytes()`")]]
  ::std::int64_t get_spilledDataSizeInBytes() const;

  /** Glean { "field": "spilledDataSizeInBytes" } */
  [[deprecated("Use `FOO.spilledDataSizeInBytes() = BAR` instead of `FOO.set_spilledDataSizeInBytes(BAR)`")]]
  ::std::int64_t& set_spilledDataSizeInBytes(::std::int64_t spilledDataSizeInBytes_);

  /** Glean { "field": "runtimeStats" } */
  [[deprecated("Use `FOO.runtimeStats().value()` instead of `FOO.get_runtimeStats()`")]]
  const ::facebook::presto::protocol::cpp2::RuntimeStats& get_runtimeStats() const&;

  /** Glean { "field": "runtimeStats" } */
  [[deprecated("Use `FOO.runtimeStats().value()` instead of `FOO.get_runtimeStats()`")]]
  ::facebook::presto::protocol::cpp2::RuntimeStats get_runtimeStats() &&;

  /** Glean { "field": "runtimeStats" } */
  template <typename T_OperatorStats_runtimeStats_struct_setter = ::facebook::presto::protocol::cpp2::RuntimeStats>
  [[deprecated("Use `FOO.runtimeStats() = BAR` instead of `FOO.set_runtimeStats(BAR)`")]]
  ::facebook::presto::protocol::cpp2::RuntimeStats& set_runtimeStats(T_OperatorStats_runtimeStats_struct_setter&& runtimeStats_) {
    runtimeStats_ref() = std::forward<T_OperatorStats_runtimeStats_struct_setter>(runtimeStats_);
    return __fbthrift_field_runtimeStats;
  }

  /** Glean { "field": "blockedReason" } */
  [[deprecated("Use `FOO.blockedReason().value()` instead of `FOO.get_blockedReason()`")]]
  const ::facebook::presto::protocol::cpp2::BlockedReason* get_blockedReason() const&;

  /** Glean { "field": "blockedReason" } */
  [[deprecated("Use `FOO.blockedReason().value()` instead of `FOO.get_blockedReason()`")]]
  ::facebook::presto::protocol::cpp2::BlockedReason* get_blockedReason() &;

  ::facebook::presto::protocol::cpp2::BlockedReason* get_blockedReason() && = delete;

  /** Glean { "field": "blockedReason" } */
  [[deprecated("Use `FOO.blockedReason() = BAR` instead of `FOO.set_blockedReason(BAR)`")]]
  ::facebook::presto::protocol::cpp2::BlockedReason& set_blockedReason(::facebook::presto::protocol::cpp2::BlockedReason blockedReason_);

  /** Glean { "field": "infoUnion" } */
  [[deprecated("Use `FOO.infoUnion().value()` instead of `FOO.get_infoUnion()`")]]
  const ::facebook::presto::protocol::cpp2::OperatorInfoUnion& get_infoUnion() const&;

  /** Glean { "field": "infoUnion" } */
  [[deprecated("Use `FOO.infoUnion().value()` instead of `FOO.get_infoUnion()`")]]
  ::facebook::presto::protocol::cpp2::OperatorInfoUnion get_infoUnion() &&;

  /** Glean { "field": "infoUnion" } */
  template <typename T_OperatorStats_infoUnion_struct_setter = ::facebook::presto::protocol::cpp2::OperatorInfoUnion>
  [[deprecated("Use `FOO.infoUnion() = BAR` instead of `FOO.set_infoUnion(BAR)`")]]
  ::facebook::presto::protocol::cpp2::OperatorInfoUnion& set_infoUnion(T_OperatorStats_infoUnion_struct_setter&& infoUnion_) {
    infoUnion_ref() = std::forward<T_OperatorStats_infoUnion_struct_setter>(infoUnion_);
    return __fbthrift_field_infoUnion;
  }

  /** Glean { "field": "nullJoinBuildKeyCount" } */
  [[deprecated("Use `FOO.nullJoinBuildKeyCount().value()` instead of `FOO.get_nullJoinBuildKeyCount()`")]]
  ::std::int64_t get_nullJoinBuildKeyCount() const;

  /** Glean { "field": "nullJoinBuildKeyCount" } */
  [[deprecated("Use `FOO.nullJoinBuildKeyCount() = BAR` instead of `FOO.set_nullJoinBuildKeyCount(BAR)`")]]
  ::std::int64_t& set_nullJoinBuildKeyCount(::std::int64_t nullJoinBuildKeyCount_);

  /** Glean { "field": "joinBuildKeyCount" } */
  [[deprecated("Use `FOO.joinBuildKeyCount().value()` instead of `FOO.get_joinBuildKeyCount()`")]]
  ::std::int64_t get_joinBuildKeyCount() const;

  /** Glean { "field": "joinBuildKeyCount" } */
  [[deprecated("Use `FOO.joinBuildKeyCount() = BAR` instead of `FOO.set_joinBuildKeyCount(BAR)`")]]
  ::std::int64_t& set_joinBuildKeyCount(::std::int64_t joinBuildKeyCount_);

  /** Glean { "field": "nullJoinProbeKeyCount" } */
  [[deprecated("Use `FOO.nullJoinProbeKeyCount().value()` instead of `FOO.get_nullJoinProbeKeyCount()`")]]
  ::std::int64_t get_nullJoinProbeKeyCount() const;

  /** Glean { "field": "nullJoinProbeKeyCount" } */
  [[deprecated("Use `FOO.nullJoinProbeKeyCount() = BAR` instead of `FOO.set_nullJoinProbeKeyCount(BAR)`")]]
  ::std::int64_t& set_nullJoinProbeKeyCount(::std::int64_t nullJoinProbeKeyCount_);

  /** Glean { "field": "joinProbeKeyCount" } */
  [[deprecated("Use `FOO.joinProbeKeyCount().value()` instead of `FOO.get_joinProbeKeyCount()`")]]
  ::std::int64_t get_joinProbeKeyCount() const;

  /** Glean { "field": "joinProbeKeyCount" } */
  [[deprecated("Use `FOO.joinProbeKeyCount() = BAR` instead of `FOO.set_joinProbeKeyCount(BAR)`")]]
  ::std::int64_t& set_joinProbeKeyCount(::std::int64_t joinProbeKeyCount_);

  /** Glean { "field": "dynamicFilterStats" } */
  [[deprecated("Use `FOO.dynamicFilterStats().value()` instead of `FOO.get_dynamicFilterStats()`")]]
  const ::facebook::presto::protocol::cpp2::DynamicFilterStats& get_dynamicFilterStats() const&;

  /** Glean { "field": "dynamicFilterStats" } */
  [[deprecated("Use `FOO.dynamicFilterStats().value()` instead of `FOO.get_dynamicFilterStats()`")]]
  ::facebook::presto::protocol::cpp2::DynamicFilterStats get_dynamicFilterStats() &&;

  /** Glean { "field": "dynamicFilterStats" } */
  template <typename T_OperatorStats_dynamicFilterStats_struct_setter = ::facebook::presto::protocol::cpp2::DynamicFilterStats>
  [[deprecated("Use `FOO.dynamicFilterStats() = BAR` instead of `FOO.set_dynamicFilterStats(BAR)`")]]
  ::facebook::presto::protocol::cpp2::DynamicFilterStats& set_dynamicFilterStats(T_OperatorStats_dynamicFilterStats_struct_setter&& dynamicFilterStats_) {
    dynamicFilterStats_ref() = std::forward<T_OperatorStats_dynamicFilterStats_struct_setter>(dynamicFilterStats_);
    return __fbthrift_field_dynamicFilterStats;
  }

  /** Glean { "field": "isBlockedCalls" } */
  [[deprecated("Use `FOO.isBlockedCalls().value()` instead of `FOO.get_isBlockedCalls()`")]]
  ::std::int64_t get_isBlockedCalls() const;

  /** Glean { "field": "isBlockedCalls" } */
  [[deprecated("Use `FOO.isBlockedCalls() = BAR` instead of `FOO.set_isBlockedCalls(BAR)`")]]
  ::std::int64_t& set_isBlockedCalls(::std::int64_t isBlockedCalls_);

  /** Glean { "field": "isBlockedWall" } */
  [[deprecated("Use `FOO.isBlockedWall().value()` instead of `FOO.get_isBlockedWall()`")]]
  double get_isBlockedWall() const;

  /** Glean { "field": "isBlockedWall" } */
  [[deprecated("Use `FOO.isBlockedWall() = BAR` instead of `FOO.set_isBlockedWall(BAR)`")]]
  double& set_isBlockedWall(double isBlockedWall_);

  /** Glean { "field": "isBlockedCpu" } */
  [[deprecated("Use `FOO.isBlockedCpu().value()` instead of `FOO.get_isBlockedCpu()`")]]
  double get_isBlockedCpu() const;

  /** Glean { "field": "isBlockedCpu" } */
  [[deprecated("Use `FOO.isBlockedCpu() = BAR` instead of `FOO.set_isBlockedCpu(BAR)`")]]
  double& set_isBlockedCpu(double isBlockedCpu_);

  /** Glean { "field": "isBlockedAllocationInBytes" } */
  [[deprecated("Use `FOO.isBlockedAllocationInBytes().value()` instead of `FOO.get_isBlockedAllocationInBytes()`")]]
  ::std::int64_t get_isBlockedAllocationInBytes() const;

  /** Glean { "field": "isBlockedAllocationInBytes" } */
  [[deprecated("Use `FOO.isBlockedAllocationInBytes() = BAR` instead of `FOO.set_isBlockedAllocationInBytes(BAR)`")]]
  ::std::int64_t& set_isBlockedAllocationInBytes(::std::int64_t isBlockedAllocationInBytes_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OperatorStats>;
  friend void swap(OperatorStats& a, OperatorStats& b);
};

template <class Protocol_>
unsigned long OperatorStats::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::presto::protocol::cpp2

namespace apache::thrift {

template <> struct TEnumDataStorage<::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type>;

template <> struct TEnumTraits<::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type> {
  using type = ::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type;

  static constexpr std::size_t const size = 10;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::SplitWrapper, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x7c\xbd\x17\x3b\x24\xea\xe4\x3f\x29\x7e\x44\x99\x01\x07\x1c\x64", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TableWriteInfoWrapper, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xf4\xfd\x13\xcc\xe5\xa2\x89\xb6\xf1\xf9\x8b\x2b\x1a\x16\xb6\xbf", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xd1\x9a\xb6\xdc\x15\x8e\x42\xe9\xe3\xef\x74\x14\x87\xe3\x1d\xf1", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::Lifespan, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xd0\x3f\x08\xa9\x6f\xab\x40\x01\x0f\x23\x43\x23\x7f\xa2\x04\x81", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::ErrorLocation, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xdd\x97\xbf\x06\xdc\x6e\x7f\xb9\x0f\x1f\x71\xbe\xcc\x96\x23\xf6", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::HostAddress, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x55\xb6\x8d\x00\x37\x34\xd3\x0b\x0a\xd6\xf3\x1b\x74\x55\x65\xc6", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::StageId, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x4e\x6e\x36\x2e\x85\xfc\x04\xea\xdf\xd5\x39\x86\xdc\xcf\x94\xd8", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::OutputBufferId, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xae\x37\x06\xab\xd2\xcc\x48\xb8\x00\x61\x8e\xe7\x36\xca\xed\xee", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::PageBufferInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xff\x43\x00\x33\xb0\x25\x9a\xa9\x68\x7a\xf6\xdd\xbe\xa3\xaf\x4e", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::PlanNodeId, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x84\x9a\x83\xd0\xff\xdc\xcb\x6a\x5e\x6a\xb0\x61\x44\x38\xad\x04", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::DistributionSnapshot, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x72\x89\x3e\xb0\xe8\x24\x8a\x39\xf3\x23\x5f\x89\x81\xe0\x0c\xe2", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::RuntimeStats, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x06\xcb\x45\x06\xb7\xf9\x70\x9b\xf4\xd1\x71\x2b\x90\x2f\x3e\xe7", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::ExchangeClientStatus, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x1c\x98\xc4\xc3\x99\x08\x5d\x0c\xe5\x67\xae\xd1\x9d\x64\xea\x11", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::PageBufferClientStatus, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xd6\xd7\x54\xad\x6a\x6b\x1d\xac\x35\x85\xad\xf8\x5a\x2e\x60\x15", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xc8\x2e\x88\x82\x45\x5b\xc9\xf5\xf2\x0e\x1d\x26\xa4\xb2\xb5\x88", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TableFinishInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xef\x2b\x17\x31\x28\x2b\x2e\xda\x13\x62\xf8\xcb\x0b\x3b\xfd\xb9", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::SplitOperatorInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x15\xd4\x42\x42\x80\x8f\xc7\x6d\x1a\x75\x2e\xfe\x16\x67\x2b\x46", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::HashCollisionsInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xf6\x58\x58\xff\x47\x95\x25\x94\xdf\x31\xad\x1f\xc1\x28\x93\x65", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::PartitionedOutputInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x57\x6f\xa9\xc4\x44\xfb\xc1\xcc\x4d\x21\x92\x2e\xf8\xcc\xe0\x5d", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::WindowInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x09\x43\x07\xe9\x8c\xd2\xb1\xf2\x5a\xdf\xb6\x9d\xf1\x92\x15\xdf", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::DriverWindowInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x16\x44\xa4\xdf\xe7\x62\x0a\xdf\x8a\x3d\x92\xa4\x4d\x28\x2d\x12", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TableWriterInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x46\x0a\xc1\xea\x95\x13\x3f\xf7\x93\xe9\xf7\xa9\xed\xd7\x85\xd6", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TableWriterMergeInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x42\xae\xeb\x41\x41\xc8\xb5\xb9\x62\x64\xe8\x9e\x24\xf9\xac\x22", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::DynamicFilterStats, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x10\x3b\x5c\x91\xd2\x7a\xc8\x0e\x84\x91\xb8\x1b\xfb\x1b\xba\x71", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::DriverStats, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x44\xba\x67\x06\x43\x5a\xc8\xed\x2c\x5a\x78\xaa\x3d\xff\x65\xe0", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TransactionId, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xbc\xf2\xed\xc6\x0e\xf9\xe2\x5a\xc4\xb5\xdc\x27\x4c\x0d\x25\x7d", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TimeZoneKey, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xab\x34\xb7\x0b\x95\x61\x91\x46\x9c\x3d\x43\x33\xc4\xe2\xb9\xbb", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::ResourceEstimates, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x18\x0c\xb9\x2c\xa3\x68\xf2\xe0\x33\x23\xca\xa9\x3b\x08\x5c\x9f", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::ConnectorId, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xd5\xdb\xee\xa4\xb1\xaa\x11\x78\xb3\xf7\x30\xff\x4f\x44\x9e\x53", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::SqlFunctionId, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xcb\xea\x38\xf6\x3d\x78\x10\x06\xa8\xfd\x62\x06\x95\x8c\x35\x4b", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TypeSignature, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xa5\x40\x75\xb9\x2e\x07\x24\x5d\x4b\xba\xa8\xe0\x2a\x0f\x59\xb9", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::Language, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xa0\xe9\xa3\xa4\x33\x26\x46\x71\xcd\xc4\x8c\xf7\x91\xca\x37\x8f", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::QualifiedObjectName, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xe5\x97\x89\x57\x42\x19\x1b\x1b\x9c\x17\x91\xe3\xe2\x4e\x79\x7e", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TypeVariableConstraint, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x9c\x4e\x9f\x5e\x2a\xf1\x09\xc4\xc7\x87\x5d\xdf\x2a\x26\x3f\x23", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::LongVariableConstraint, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x08\xe7\x3e\xa1\xdf\x45\xbc\xb4\x51\x38\x01\x5d\xd8\xd4\x49\x73", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TaskSource, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xe1\x76\x35\x67\xf2\x0c\x05\xc8\x0a\x09\x1a\xf8\xe5\x3f\xc7\x8b", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::ScheduledSplit, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x7a\xff\xda\x02\x08\x11\xf2\xcd\x3f\xc7\xc6\x7d\xc6\x3a\x2a\xfd", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TaskStatus, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x52\x6b\xce\xe0\x58\xda\x25\x3c\x2c\xc8\x44\xfa\xcf\x4b\x80\x01", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::ErrorCode, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x3a\x4c\x0d\xa0\x02\x51\x1d\xa8\x33\x7b\xe6\xa4\xb5\x84\x1e\x35", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::StageExecutionId, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xd4\xfc\xf2\x72\x18\x29\x86\x25\xb0\xa9\x57\x2c\x9c\x3e\x19\x30", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::OutputBufferInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x1d\x63\x73\x9c\x9c\x20\x60\x24\x48\x1c\x4b\xe1\x5e\x79\x7a\xa5", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::BufferInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x70\x73\xe9\x05\xdb\x52\x00\x85\x52\xe4\x5e\xf3\xc2\xa2\x41\xc1", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TaskStats, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xc9\x9b\x20\x05\x6e\xcf\x76\xe0\x8f\x79\xbc\x6d\x9f\x39\xe8\xe5", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::PipelineStats, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x8d\x99\xdd\xe5\x0d\xe0\x2e\xbc\x30\xf8\x55\xcc\x2c\x9d\xee\x3d", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::RuntimeMetric, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x3a\x46\x2c\x01\x68\x0c\x6a\x88\xb8\xaa\x2c\x63\x49\x85\xb9\x80", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::JoinOperatorInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x61\xfb\xc8\x1c\xa8\x0d\xac\x8e\x68\xfb\xdf\x7e\x60\xaa\xa7\x1a", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::SessionRepresentation, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x96\x53\x0c\xfe\x49\x6c\x3f\x43\x4c\x70\xf0\x7e\x89\x5c\x5e\x60", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::SelectedRole, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xca\x00\xc7\x8e\x3b\x72\xd6\xe4\x91\x67\x08\xca\x5d\xc4\x79\x90", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::Parameter, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x74\xd8\x73\x85\x71\xe8\xb6\xde\xbd\xc2\xfd\xf1\xb7\xb4\xd4\xb8", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::RoutineCharacteristics, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x73\xdc\x73\x6f\x63\x96\xed\xf9\xb8\x97\x92\xf8\x62\x51\x12\xb1", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::Signature, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xb8\x2d\x4d\xa3\x62\x6a\x15\xec\x2b\x54\xc4\x5f\xe2\x24\x3b\x76", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::OutputBuffers, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xc6\x3c\xfd\x45\xdc\xc7\xe4\x70\x7d\xf4\x1f\x93\x8a\xeb\xcf\x3a", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TaskUpdateRequest, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xd5\xa7\xb3\xb7\xbd\x38\x7d\x7b\x35\x43\xa4\xdc\x4d\x41\x34\xfe", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::ExecutionFailureInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x4a\xe5\x35\x3b\x27\x78\x3b\xbf\x0a\xb4\x7e\xf7\x73\xc8\x2f\x2c", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TaskId, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x71\x86\xe2\x14\x82\x9a\xdc\x04\xff\x18\xce\x96\xe7\xbe\xc4\x4a", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::OperatorInfoUnion, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xa3\x1d\xd9\x88\xb0\x35\x7e\xea\x20\x5c\xc5\xd5\x86\x3a\xf3\x2a", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::SqlInvokedFunction, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xf7\xf7\xb5\x9d\xe6\x30\x75\x7e\x92\x46\x44\xbd\x9b\x3c\xf8\xae", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TaskInfo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x53\xdb\x52\x74\xd7\x4e\xcf\xa1\xac\xab\xe6\xb3\x80\x53\x69\x29", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::OperatorStats, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xa9\x67\x0a\x77\xa1\x37\xc7\x34\x81\xde\x04\x37\x4e\xa4\x0d\xb7", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::TaskState, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x91\xc4\x9e\x50\x4d\x50\xc2\xb1\x7f\xd1\x04\x3c\x40\x81\xe0\xee", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::ErrorType, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x48\xb4\xa2\x0b\xbd\xaa\xd4\x29\xda\x78\x0d\x2c\x29\xa8\xdc\x2a", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::ErrorCause, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xba\x9e\xc2\x25\x71\x98\x92\xf2\xd7\x51\x36\x12\xd6\x9a\x18\xf8", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::BufferState, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x74\xe4\xc4\x3e\xf6\x8f\xa1\x9e\xa1\x2c\x4c\x5f\x28\xa2\xab\x56", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::BlockedReason, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xe1\x86\x7e\x09\x22\xb3\x8f\x04\x43\x49\x71\x02\x3c\xb1\x89\xdc", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::RuntimeUnit, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x4c\x65\x4c\x7f\x4e\xcb\xf8\x17\x48\xb4\x02\x63\xa1\xea\xf9\x0a", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::JoinType, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x1a\x45\x71\x74\x65\xe9\x5a\xc9\x95\x09\x41\xac\xac\x59\x24\xdb", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::Type, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x31\x92\x17\xa6\x14\x66\x07\x59\xdb\x86\x5d\x64\x30\x94\xcc\xb8", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::Determinism, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x0d\x36\x1d\xab\x83\xf9\x93\x65\x2e\x0f\x09\x9e\xff\xba\x14\x41", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::NullCallClause, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x37\x69\x42\x7d\xdd\x8c\x84\xdc\x60\xc2\xe2\x65\xe0\xe0\xee\x58", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::FunctionKind, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\x37\x66\x4b\x50\x6a\x26\xe7\x5e\x6f\x71\xbd\xd6\xb2\xc9\xa5\x5b", 16};
};
template <> struct TSchemaAssociation<::facebook::presto::protocol::cpp2::BufferType, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6048396889738343593;
  static constexpr ::std::string_view definitionKey = {"\xd4\x24\x7d\xaf\x07\xcd\x19\x9b\xa8\xbe\xb4\x17\x8a\x8e\x02\xc4", 16};
};
} // namespace apache::thrift::detail
