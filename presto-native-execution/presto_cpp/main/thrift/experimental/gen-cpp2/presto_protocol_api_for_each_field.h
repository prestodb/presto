/**
 * Autogenerated by Thrift for presto_protocol_api.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated  
 */
#pragma once

#include "presto_protocol_api_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::SplitWrapper> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).split_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TableWriteInfoWrapper> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).tableWriteInfo_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).metadataUpdates_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::Lifespan> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).grouped_ref()...);
    f(1, static_cast<T&&>(t).groupId_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::ErrorLocation> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).lineNumber_ref()...);
    f(1, static_cast<T&&>(t).columnNumber_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::HostAddress> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).host_ref()...);
    f(1, static_cast<T&&>(t).port_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::StageId> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).queryId_ref()...);
    f(1, static_cast<T&&>(t).id_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::OutputBufferId> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).id_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::PageBufferInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).partition_ref()...);
    f(1, static_cast<T&&>(t).bufferedPages_ref()...);
    f(2, static_cast<T&&>(t).bufferedBytes_ref()...);
    f(3, static_cast<T&&>(t).rowsAdded_ref()...);
    f(4, static_cast<T&&>(t).pagesAdded_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::PlanNodeId> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).id_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::DistributionSnapshot> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).maxError_ref()...);
    f(1, static_cast<T&&>(t).count_ref()...);
    f(2, static_cast<T&&>(t).total_ref()...);
    f(3, static_cast<T&&>(t).p01_ref()...);
    f(4, static_cast<T&&>(t).p05_ref()...);
    f(5, static_cast<T&&>(t).p10_ref()...);
    f(6, static_cast<T&&>(t).p25_ref()...);
    f(7, static_cast<T&&>(t).p50_ref()...);
    f(8, static_cast<T&&>(t).p75_ref()...);
    f(9, static_cast<T&&>(t).p90_ref()...);
    f(10, static_cast<T&&>(t).p95_ref()...);
    f(11, static_cast<T&&>(t).p99_ref()...);
    f(12, static_cast<T&&>(t).min_ref()...);
    f(13, static_cast<T&&>(t).max_ref()...);
    f(14, static_cast<T&&>(t).avg_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::RuntimeStats> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).metrics_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::ExchangeClientStatus> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).bufferedBytes_ref()...);
    f(1, static_cast<T&&>(t).maxBufferedBytes_ref()...);
    f(2, static_cast<T&&>(t).averageBytesPerRequest_ref()...);
    f(3, static_cast<T&&>(t).successfulRequestsCount_ref()...);
    f(4, static_cast<T&&>(t).bufferedPages_ref()...);
    f(5, static_cast<T&&>(t).noMoreLocations_ref()...);
    f(6, static_cast<T&&>(t).pageBufferClientStatuses_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::PageBufferClientStatus> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).uri_ref()...);
    f(1, static_cast<T&&>(t).state_ref()...);
    f(2, static_cast<T&&>(t).lastUpdate_ref()...);
    f(3, static_cast<T&&>(t).rowsReceived_ref()...);
    f(4, static_cast<T&&>(t).pagesReceived_ref()...);
    f(5, static_cast<T&&>(t).rowsRejected_ref()...);
    f(6, static_cast<T&&>(t).pagesRejected_ref()...);
    f(7, static_cast<T&&>(t).requestsScheduled_ref()...);
    f(8, static_cast<T&&>(t).requestsCompleted_ref()...);
    f(9, static_cast<T&&>(t).requestsFailed_ref()...);
    f(10, static_cast<T&&>(t).httpRequestState_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).bufferedBytes_ref()...);
    f(1, static_cast<T&&>(t).bufferedPages_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TableFinishInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).serializedConnectorOutputMetadata_ref()...);
    f(1, static_cast<T&&>(t).jsonLengthLimitExceeded_ref()...);
    f(2, static_cast<T&&>(t).statisticsWallTime_ref()...);
    f(3, static_cast<T&&>(t).statisticsCpuTime_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::SplitOperatorInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).splitInfoMap_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::HashCollisionsInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).weightedSumSquaredHashCollisions_ref()...);
    f(1, static_cast<T&&>(t).weightedHashCollisions_ref()...);
    f(2, static_cast<T&&>(t).weightedExpectedHashCollisions_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::PartitionedOutputInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).rowsAdded_ref()...);
    f(1, static_cast<T&&>(t).pagesAdded_ref()...);
    f(2, static_cast<T&&>(t).outputBufferPeakMemoryUsage_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::WindowInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).windowInfos_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::DriverWindowInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).sumSquaredDifferencesPositionsOfIndex_ref()...);
    f(1, static_cast<T&&>(t).sumSquaredDifferencesSizeOfIndex_ref()...);
    f(2, static_cast<T&&>(t).sumSquaredDifferencesSizeInPartition_ref()...);
    f(3, static_cast<T&&>(t).totalPartitionsCount_ref()...);
    f(4, static_cast<T&&>(t).totalRowsCount_ref()...);
    f(5, static_cast<T&&>(t).numberOfIndexes_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TableWriterInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).pageSinkPeakMemoryUsage_ref()...);
    f(1, static_cast<T&&>(t).statisticsWallTime_ref()...);
    f(2, static_cast<T&&>(t).statisticsCpuTime_ref()...);
    f(3, static_cast<T&&>(t).validationCpuTime_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TableWriterMergeInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).statisticsWallTime_ref()...);
    f(1, static_cast<T&&>(t).statisticsCpuTime_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::DynamicFilterStats> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).producerNodeIds_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::DriverStats> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).lifespan_ref()...);
    f(1, static_cast<T&&>(t).createTimeInMillis_ref()...);
    f(2, static_cast<T&&>(t).startTimeInMillis_ref()...);
    f(3, static_cast<T&&>(t).endTimeInMillis_ref()...);
    f(4, static_cast<T&&>(t).queuedTime_ref()...);
    f(5, static_cast<T&&>(t).elapsedTime_ref()...);
    f(6, static_cast<T&&>(t).userMemoryReservationInBytes_ref()...);
    f(7, static_cast<T&&>(t).revocableMemoryReservationInBytes_ref()...);
    f(8, static_cast<T&&>(t).systemMemoryReservationInBytes_ref()...);
    f(9, static_cast<T&&>(t).totalScheduledTime_ref()...);
    f(10, static_cast<T&&>(t).totalCpuTime_ref()...);
    f(11, static_cast<T&&>(t).totalBlockedTime_ref()...);
    f(12, static_cast<T&&>(t).fullyBlocked_ref()...);
    f(13, static_cast<T&&>(t).blockedReasons_ref()...);
    f(14, static_cast<T&&>(t).totalAllocationInBytes_ref()...);
    f(15, static_cast<T&&>(t).rawInputDataSizeInBytes_ref()...);
    f(16, static_cast<T&&>(t).rawInputReadTime_ref()...);
    f(17, static_cast<T&&>(t).rawInputPositions_ref()...);
    f(18, static_cast<T&&>(t).processedInputDataSizeInBytes_ref()...);
    f(19, static_cast<T&&>(t).processedInputPositions_ref()...);
    f(20, static_cast<T&&>(t).outputDataSizeInBytes_ref()...);
    f(21, static_cast<T&&>(t).outputPositions_ref()...);
    f(22, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref()...);
    f(23, static_cast<T&&>(t).operatorStats_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TransactionId> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).uuid_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TimeZoneKey> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).id_ref()...);
    f(1, static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::ResourceEstimates> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).executionTime_ref()...);
    f(1, static_cast<T&&>(t).cpuTime_ref()...);
    f(2, static_cast<T&&>(t).peakMemory_ref()...);
    f(3, static_cast<T&&>(t).peakTaskMemory_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::ConnectorId> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).catalogName_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::SqlFunctionId> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).signature_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TypeSignature> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).signature_ref()...);
    f(1, static_cast<T&&>(t).ignore_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::Language> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).language_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::QualifiedObjectName> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).catalogName_ref()...);
    f(1, static_cast<T&&>(t).schemaName_ref()...);
    f(2, static_cast<T&&>(t).objectName_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TypeVariableConstraint> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).comparableRequired_ref()...);
    f(2, static_cast<T&&>(t).orderableRequired_ref()...);
    f(3, static_cast<T&&>(t).variadicBound_ref()...);
    f(4, static_cast<T&&>(t).nonDecimalNumericRequired_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::LongVariableConstraint> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).expression_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TaskSource> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).planNodeId_ref()...);
    f(1, static_cast<T&&>(t).splits_ref()...);
    f(2, static_cast<T&&>(t).noMoreSplitsForLifespan_ref()...);
    f(3, static_cast<T&&>(t).noMoreSplits_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::ScheduledSplit> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).sequenceId_ref()...);
    f(1, static_cast<T&&>(t).planNodeId_ref()...);
    f(2, static_cast<T&&>(t).split_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TaskStatus> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).taskInstanceIdLeastSignificantBits_ref()...);
    f(1, static_cast<T&&>(t).taskInstanceIdMostSignificantBits_ref()...);
    f(2, static_cast<T&&>(t).version_ref()...);
    f(3, static_cast<T&&>(t).state_ref()...);
    f(4, static_cast<T&&>(t).selfUri_ref()...);
    f(5, static_cast<T&&>(t).completedDriverGroups_ref()...);
    f(6, static_cast<T&&>(t).failures_ref()...);
    f(7, static_cast<T&&>(t).queuedPartitionedDrivers_ref()...);
    f(8, static_cast<T&&>(t).runningPartitionedDrivers_ref()...);
    f(9, static_cast<T&&>(t).outputBufferUtilization_ref()...);
    f(10, static_cast<T&&>(t).outputBufferOverutilized_ref()...);
    f(11, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref()...);
    f(12, static_cast<T&&>(t).memoryReservationInBytes_ref()...);
    f(13, static_cast<T&&>(t).systemMemoryReservationInBytes_ref()...);
    f(14, static_cast<T&&>(t).fullGcCount_ref()...);
    f(15, static_cast<T&&>(t).fullGcTimeInMillis_ref()...);
    f(16, static_cast<T&&>(t).peakNodeTotalMemoryReservationInBytes_ref()...);
    f(17, static_cast<T&&>(t).totalCpuTimeInNanos_ref()...);
    f(18, static_cast<T&&>(t).taskAgeInMillis_ref()...);
    f(19, static_cast<T&&>(t).queuedPartitionedSplitsWeight_ref()...);
    f(20, static_cast<T&&>(t).runningPartitionedSplitsWeight_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::ErrorCode> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).name_ref()...);
    f(2, static_cast<T&&>(t).type_ref()...);
    f(3, static_cast<T&&>(t).retriable_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::StageExecutionId> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).stageId_ref()...);
    f(1, static_cast<T&&>(t).id_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::OutputBufferInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).type_ref()...);
    f(1, static_cast<T&&>(t).state_ref()...);
    f(2, static_cast<T&&>(t).buffers_ref()...);
    f(3, static_cast<T&&>(t).canAddBuffers_ref()...);
    f(4, static_cast<T&&>(t).canAddPages_ref()...);
    f(5, static_cast<T&&>(t).totalBufferedBytes_ref()...);
    f(6, static_cast<T&&>(t).totalBufferedPages_ref()...);
    f(7, static_cast<T&&>(t).totalRowsSent_ref()...);
    f(8, static_cast<T&&>(t).totalPagesSent_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::BufferInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).bufferId_ref()...);
    f(1, static_cast<T&&>(t).finished_ref()...);
    f(2, static_cast<T&&>(t).bufferedPages_ref()...);
    f(3, static_cast<T&&>(t).pagesSent_ref()...);
    f(4, static_cast<T&&>(t).pageBufferInfo_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TaskStats> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).createTimeInMillis_ref()...);
    f(1, static_cast<T&&>(t).firstStartTimeInMillis_ref()...);
    f(2, static_cast<T&&>(t).lastStartTimeInMillis_ref()...);
    f(3, static_cast<T&&>(t).lastEndTimeInMillis_ref()...);
    f(4, static_cast<T&&>(t).endTimeInMillis_ref()...);
    f(5, static_cast<T&&>(t).elapsedTimeInNanos_ref()...);
    f(6, static_cast<T&&>(t).queuedTimeInNanos_ref()...);
    f(7, static_cast<T&&>(t).totalDrivers_ref()...);
    f(8, static_cast<T&&>(t).queuedDrivers_ref()...);
    f(9, static_cast<T&&>(t).runningDrivers_ref()...);
    f(10, static_cast<T&&>(t).blockedDrivers_ref()...);
    f(11, static_cast<T&&>(t).completedDrivers_ref()...);
    f(12, static_cast<T&&>(t).cumulativeUserMemory_ref()...);
    f(13, static_cast<T&&>(t).cumulativeTotalMemory_ref()...);
    f(14, static_cast<T&&>(t).userMemoryReservationInBytes_ref()...);
    f(15, static_cast<T&&>(t).revocableMemoryReservationInBytes_ref()...);
    f(16, static_cast<T&&>(t).systemMemoryReservationInBytes_ref()...);
    f(17, static_cast<T&&>(t).peakUserMemoryInBytes_ref()...);
    f(18, static_cast<T&&>(t).peakTotalMemoryInBytes_ref()...);
    f(19, static_cast<T&&>(t).peakNodeTotalMemoryInBytes_ref()...);
    f(20, static_cast<T&&>(t).totalScheduledTimeInNanos_ref()...);
    f(21, static_cast<T&&>(t).totalCpuTimeInNanos_ref()...);
    f(22, static_cast<T&&>(t).totalBlockedTimeInNanos_ref()...);
    f(23, static_cast<T&&>(t).fullyBlocked_ref()...);
    f(24, static_cast<T&&>(t).blockedReasons_ref()...);
    f(25, static_cast<T&&>(t).totalAllocationInBytes_ref()...);
    f(26, static_cast<T&&>(t).rawInputDataSizeInBytes_ref()...);
    f(27, static_cast<T&&>(t).rawInputPositions_ref()...);
    f(28, static_cast<T&&>(t).processedInputDataSizeInBytes_ref()...);
    f(29, static_cast<T&&>(t).processedInputPositions_ref()...);
    f(30, static_cast<T&&>(t).outputDataSizeInBytes_ref()...);
    f(31, static_cast<T&&>(t).outputPositions_ref()...);
    f(32, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref()...);
    f(33, static_cast<T&&>(t).pipelines_ref()...);
    f(34, static_cast<T&&>(t).queuedPartitionedDrivers_ref()...);
    f(35, static_cast<T&&>(t).queuedPartitionedSplitsWeight_ref()...);
    f(36, static_cast<T&&>(t).runningPartitionedDrivers_ref()...);
    f(37, static_cast<T&&>(t).runningPartitionedSplitsWeight_ref()...);
    f(38, static_cast<T&&>(t).fullGcCount_ref()...);
    f(39, static_cast<T&&>(t).fullGcTimeInMillis_ref()...);
    f(40, static_cast<T&&>(t).runtimeStats_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::PipelineStats> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).pipelineId_ref()...);
    f(1, static_cast<T&&>(t).firstStartTimeInMillis_ref()...);
    f(2, static_cast<T&&>(t).lastStartTimeInMillis_ref()...);
    f(3, static_cast<T&&>(t).lastEndTimeInMillis_ref()...);
    f(4, static_cast<T&&>(t).inputPipeline_ref()...);
    f(5, static_cast<T&&>(t).outputPipeline_ref()...);
    f(6, static_cast<T&&>(t).totalDrivers_ref()...);
    f(7, static_cast<T&&>(t).queuedDrivers_ref()...);
    f(8, static_cast<T&&>(t).queuedPartitionedDrivers_ref()...);
    f(9, static_cast<T&&>(t).queuedPartitionedSplitsWeight_ref()...);
    f(10, static_cast<T&&>(t).runningDrivers_ref()...);
    f(11, static_cast<T&&>(t).runningPartitionedDrivers_ref()...);
    f(12, static_cast<T&&>(t).runningPartitionedSplitsWeight_ref()...);
    f(13, static_cast<T&&>(t).blockedDrivers_ref()...);
    f(14, static_cast<T&&>(t).completedDrivers_ref()...);
    f(15, static_cast<T&&>(t).userMemoryReservationInBytes_ref()...);
    f(16, static_cast<T&&>(t).revocableMemoryReservationInBytes_ref()...);
    f(17, static_cast<T&&>(t).systemMemoryReservationInBytes_ref()...);
    f(18, static_cast<T&&>(t).queuedTime_ref()...);
    f(19, static_cast<T&&>(t).elapsedTime_ref()...);
    f(20, static_cast<T&&>(t).totalScheduledTimeInNanos_ref()...);
    f(21, static_cast<T&&>(t).totalCpuTimeInNanos_ref()...);
    f(22, static_cast<T&&>(t).totalBlockedTimeInNanos_ref()...);
    f(23, static_cast<T&&>(t).fullyBlocked_ref()...);
    f(24, static_cast<T&&>(t).blockedReasons_ref()...);
    f(25, static_cast<T&&>(t).totalAllocationInBytes_ref()...);
    f(26, static_cast<T&&>(t).rawInputDataSizeInBytes_ref()...);
    f(27, static_cast<T&&>(t).rawInputPositions_ref()...);
    f(28, static_cast<T&&>(t).processedInputDataSizeInBytes_ref()...);
    f(29, static_cast<T&&>(t).processedInputPositions_ref()...);
    f(30, static_cast<T&&>(t).outputDataSizeInBytes_ref()...);
    f(31, static_cast<T&&>(t).outputPositions_ref()...);
    f(32, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref()...);
    f(33, static_cast<T&&>(t).operatorSummaries_ref()...);
    f(34, static_cast<T&&>(t).drivers_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::RuntimeMetric> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).sum_ref()...);
    f(2, static_cast<T&&>(t).count_ref()...);
    f(3, static_cast<T&&>(t).max_ref()...);
    f(4, static_cast<T&&>(t).min_ref()...);
    f(5, static_cast<T&&>(t).unit_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::JoinOperatorInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).joinType_ref()...);
    f(1, static_cast<T&&>(t).logHistogramProbes_ref()...);
    f(2, static_cast<T&&>(t).logHistogramOutput_ref()...);
    f(3, static_cast<T&&>(t).lookupSourcePositions_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::SessionRepresentation> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).queryId_ref()...);
    f(1, static_cast<T&&>(t).transactionId_ref()...);
    f(2, static_cast<T&&>(t).clientTransactionSupport_ref()...);
    f(3, static_cast<T&&>(t).user_ref()...);
    f(4, static_cast<T&&>(t).principal_ref()...);
    f(5, static_cast<T&&>(t).source_ref()...);
    f(6, static_cast<T&&>(t).catalog_ref()...);
    f(7, static_cast<T&&>(t).schema_ref()...);
    f(8, static_cast<T&&>(t).traceToken_ref()...);
    f(9, static_cast<T&&>(t).timeZoneKey_ref()...);
    f(10, static_cast<T&&>(t).locale_ref()...);
    f(11, static_cast<T&&>(t).remoteUserAddress_ref()...);
    f(12, static_cast<T&&>(t).userAgent_ref()...);
    f(13, static_cast<T&&>(t).clientInfo_ref()...);
    f(14, static_cast<T&&>(t).clientTags_ref()...);
    f(15, static_cast<T&&>(t).resourceEstimates_ref()...);
    f(16, static_cast<T&&>(t).startTime_ref()...);
    f(17, static_cast<T&&>(t).systemProperties_ref()...);
    f(18, static_cast<T&&>(t).catalogProperties_ref()...);
    f(19, static_cast<T&&>(t).unprocessedCatalogProperties_ref()...);
    f(20, static_cast<T&&>(t).roles_ref()...);
    f(21, static_cast<T&&>(t).preparedStatements_ref()...);
    f(22, static_cast<T&&>(t).sessionFunctions_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::SelectedRole> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).type_ref()...);
    f(1, static_cast<T&&>(t).role_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::Parameter> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).type_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::RoutineCharacteristics> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).language_ref()...);
    f(1, static_cast<T&&>(t).determinism_ref()...);
    f(2, static_cast<T&&>(t).nullCallClause_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::Signature> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).kind_ref()...);
    f(2, static_cast<T&&>(t).returnType_ref()...);
    f(3, static_cast<T&&>(t).argumentTypes_ref()...);
    f(4, static_cast<T&&>(t).variableArity_ref()...);
    f(5, static_cast<T&&>(t).typeVariableConstraints_ref()...);
    f(6, static_cast<T&&>(t).longVariableConstraints_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::OutputBuffers> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).type_ref()...);
    f(1, static_cast<T&&>(t).version_ref()...);
    f(2, static_cast<T&&>(t).noMoreBufferIds_ref()...);
    f(3, static_cast<T&&>(t).buffers_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TaskUpdateRequest> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).session_ref()...);
    f(1, static_cast<T&&>(t).extraCredentials_ref()...);
    f(2, static_cast<T&&>(t).fragment_ref()...);
    f(3, static_cast<T&&>(t).sources_ref()...);
    f(4, static_cast<T&&>(t).outputIds_ref()...);
    f(5, static_cast<T&&>(t).tableWriteInfo_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).type_ref()...);
    f(1, static_cast<T&&>(t).message_ref()...);
    f(2, static_cast<T&&>(t).cause_ref()...);
    f(3, static_cast<T&&>(t).suppressed_ref()...);
    f(4, static_cast<T&&>(t).stack_ref()...);
    f(5, static_cast<T&&>(t).errorLocation_ref()...);
    f(6, static_cast<T&&>(t).errorCode_ref()...);
    f(7, static_cast<T&&>(t).remoteHost_ref()...);
    f(8, static_cast<T&&>(t).errorCause_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TaskId> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).stageExecutionId_ref()...);
    f(1, static_cast<T&&>(t).id_ref()...);
    f(2, static_cast<T&&>(t).attemptNumber_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::OperatorInfoUnion> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).exchangeClientStatus_ref()...);
    f(1, static_cast<T&&>(t).localExchangeBufferInfo_ref()...);
    f(2, static_cast<T&&>(t).tableFinishInfo_ref()...);
    f(3, static_cast<T&&>(t).splitOperatorInfo_ref()...);
    f(4, static_cast<T&&>(t).hashCollisionsInfo_ref()...);
    f(5, static_cast<T&&>(t).partitionedOutputInfo_ref()...);
    f(6, static_cast<T&&>(t).joinOperatorInfo_ref()...);
    f(7, static_cast<T&&>(t).windowInfo_ref()...);
    f(8, static_cast<T&&>(t).tableWriterInfo_ref()...);
    f(9, static_cast<T&&>(t).tableWriterMergeInfo_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::SqlInvokedFunction> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).parameters_ref()...);
    f(1, static_cast<T&&>(t).description_ref()...);
    f(2, static_cast<T&&>(t).routineCharacteristics_ref()...);
    f(3, static_cast<T&&>(t).body_ref()...);
    f(4, static_cast<T&&>(t).variableArity_ref()...);
    f(5, static_cast<T&&>(t).signature_ref()...);
    f(6, static_cast<T&&>(t).functionId_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::TaskInfo> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).taskId_ref()...);
    f(1, static_cast<T&&>(t).taskStatus_ref()...);
    f(2, static_cast<T&&>(t).lastHeartbeatInMillis_ref()...);
    f(3, static_cast<T&&>(t).outputBuffers_ref()...);
    f(4, static_cast<T&&>(t).noMoreSplits_ref()...);
    f(5, static_cast<T&&>(t).stats_ref()...);
    f(6, static_cast<T&&>(t).needsPlan_ref()...);
    f(7, static_cast<T&&>(t).metadataUpdates_ref()...);
    f(8, static_cast<T&&>(t).nodeId_ref()...);
  }
};

template <>
struct ForEachField<::facebook::presto::protocol::cpp2::OperatorStats> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).stageId_ref()...);
    f(1, static_cast<T&&>(t).stageExecutionId_ref()...);
    f(2, static_cast<T&&>(t).pipelineId_ref()...);
    f(3, static_cast<T&&>(t).operatorId_ref()...);
    f(4, static_cast<T&&>(t).planNodeId_ref()...);
    f(5, static_cast<T&&>(t).operatorType_ref()...);
    f(6, static_cast<T&&>(t).totalDrivers_ref()...);
    f(7, static_cast<T&&>(t).addInputCalls_ref()...);
    f(8, static_cast<T&&>(t).addInputWall_ref()...);
    f(9, static_cast<T&&>(t).addInputCpu_ref()...);
    f(10, static_cast<T&&>(t).addInputAllocationInBytes_ref()...);
    f(11, static_cast<T&&>(t).rawInputDataSizeInBytes_ref()...);
    f(12, static_cast<T&&>(t).rawInputPositions_ref()...);
    f(13, static_cast<T&&>(t).inputDataSizeInBytes_ref()...);
    f(14, static_cast<T&&>(t).inputPositions_ref()...);
    f(15, static_cast<T&&>(t).sumSquaredInputPositions_ref()...);
    f(16, static_cast<T&&>(t).getOutputCalls_ref()...);
    f(17, static_cast<T&&>(t).getOutputWall_ref()...);
    f(18, static_cast<T&&>(t).getOutputCpu_ref()...);
    f(19, static_cast<T&&>(t).getOutputAllocationInBytes_ref()...);
    f(20, static_cast<T&&>(t).outputDataSizeInBytes_ref()...);
    f(21, static_cast<T&&>(t).outputPositions_ref()...);
    f(22, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref()...);
    f(23, static_cast<T&&>(t).additionalCpu_ref()...);
    f(24, static_cast<T&&>(t).blockedWall_ref()...);
    f(25, static_cast<T&&>(t).finishCalls_ref()...);
    f(26, static_cast<T&&>(t).finishWall_ref()...);
    f(27, static_cast<T&&>(t).finishCpu_ref()...);
    f(28, static_cast<T&&>(t).finishAllocationInBytes_ref()...);
    f(29, static_cast<T&&>(t).userMemoryReservationInBytes_ref()...);
    f(30, static_cast<T&&>(t).revocableMemoryReservationInBytes_ref()...);
    f(31, static_cast<T&&>(t).systemMemoryReservationInBytes_ref()...);
    f(32, static_cast<T&&>(t).peakUserMemoryReservationInBytes_ref()...);
    f(33, static_cast<T&&>(t).peakSystemMemoryReservationInBytes_ref()...);
    f(34, static_cast<T&&>(t).peakTotalMemoryReservationInBytes_ref()...);
    f(35, static_cast<T&&>(t).spilledDataSizeInBytes_ref()...);
    f(36, static_cast<T&&>(t).runtimeStats_ref()...);
    f(37, static_cast<T&&>(t).blockedReason_ref()...);
    f(38, static_cast<T&&>(t).infoUnion_ref()...);
    f(39, static_cast<T&&>(t).nullJoinBuildKeyCount_ref()...);
    f(40, static_cast<T&&>(t).joinBuildKeyCount_ref()...);
    f(41, static_cast<T&&>(t).nullJoinProbeKeyCount_ref()...);
    f(42, static_cast<T&&>(t).joinProbeKeyCount_ref()...);
    f(43, static_cast<T&&>(t).dynamicFilterStats_ref()...);
    f(44, static_cast<T&&>(t).isBlockedCalls_ref()...);
    f(45, static_cast<T&&>(t).isBlockedWall_ref()...);
    f(46, static_cast<T&&>(t).isBlockedCpu_ref()...);
    f(47, static_cast<T&&>(t).isBlockedAllocationInBytes_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
