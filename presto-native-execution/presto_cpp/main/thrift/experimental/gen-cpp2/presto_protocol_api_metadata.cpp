/**
 * Autogenerated by Thrift for presto_protocol_api.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated  
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "presto_protocol_api_metadata.h"

// some of these functions can be so large that the compiler gives up optimizing
// them - and issues a warning which may be treated as an error!
//
// these functions are so rarely called that it is probably okay for them not to
// be optimized in practice
FOLLY_CLANG_DISABLE_WARNING("-Wignored-optimization-argument")

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);

void EnumMetadata<::facebook::presto::protocol::cpp2::TaskState>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.TaskState", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.TaskState";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::TaskState>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::ErrorType>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.ErrorType", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.ErrorType";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::ErrorType>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::ErrorCause>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.ErrorCause", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.ErrorCause";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::ErrorCause>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::BufferState>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.BufferState", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.BufferState";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::BufferState>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::BlockedReason>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.BlockedReason", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.BlockedReason";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::BlockedReason>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::RuntimeUnit>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.RuntimeUnit", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.RuntimeUnit";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::RuntimeUnit>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::JoinType>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.JoinType", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.JoinType";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::JoinType>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::Type>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.Type", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.Type";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::Type>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::Determinism>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.Determinism", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.Determinism";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::Determinism>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::NullCallClause>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.NullCallClause", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.NullCallClause";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::NullCallClause>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::FunctionKind>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.FunctionKind", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.FunctionKind";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::FunctionKind>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}
void EnumMetadata<::facebook::presto::protocol::cpp2::BufferType>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums()->emplace("presto_protocol_api.BufferType", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name() = "presto_protocol_api.BufferType";
  using EnumTraits = TEnumTraits<::facebook::presto::protocol::cpp2::BufferType>;
  for (std::size_t i = 0; i != EnumTraits::size; ++i) {
    enum_metadata.elements()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i]);
  }
}

const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::SplitWrapper>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.SplitWrapper", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_SplitWrapper = res.first->second;
  presto_protocol_api_SplitWrapper.name() = "presto_protocol_api.SplitWrapper";
  presto_protocol_api_SplitWrapper.is_union() = false;
  static const auto* const
  presto_protocol_api_SplitWrapper_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "split", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_SplitWrapper_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_SplitWrapper.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TableWriteInfoWrapper", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TableWriteInfoWrapper = res.first->second;
  presto_protocol_api_TableWriteInfoWrapper.name() = "presto_protocol_api.TableWriteInfoWrapper";
  presto_protocol_api_TableWriteInfoWrapper.is_union() = false;
  static const auto* const
  presto_protocol_api_TableWriteInfoWrapper_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "tableWriteInfo", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TableWriteInfoWrapper_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TableWriteInfoWrapper.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.MetadataUpdatesWrapper", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_MetadataUpdatesWrapper = res.first->second;
  presto_protocol_api_MetadataUpdatesWrapper.name() = "presto_protocol_api.MetadataUpdatesWrapper";
  presto_protocol_api_MetadataUpdatesWrapper.is_union() = false;
  static const auto* const
  presto_protocol_api_MetadataUpdatesWrapper_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "metadataUpdates", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_MetadataUpdatesWrapper_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_MetadataUpdatesWrapper.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::Lifespan>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.Lifespan", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_Lifespan = res.first->second;
  presto_protocol_api_Lifespan.name() = "presto_protocol_api.Lifespan";
  presto_protocol_api_Lifespan.is_union() = false;
  static const auto* const
  presto_protocol_api_Lifespan_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "grouped", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "groupId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_Lifespan_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_Lifespan.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::ErrorLocation>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.ErrorLocation", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_ErrorLocation = res.first->second;
  presto_protocol_api_ErrorLocation.name() = "presto_protocol_api.ErrorLocation";
  presto_protocol_api_ErrorLocation.is_union() = false;
  static const auto* const
  presto_protocol_api_ErrorLocation_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "lineNumber", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "columnNumber", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_ErrorLocation_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_ErrorLocation.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::HostAddress>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.HostAddress", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_HostAddress = res.first->second;
  presto_protocol_api_HostAddress.name() = "presto_protocol_api.HostAddress";
  presto_protocol_api_HostAddress.is_union() = false;
  static const auto* const
  presto_protocol_api_HostAddress_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "host", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "port", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_HostAddress_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_HostAddress.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::StageId>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.StageId", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_StageId = res.first->second;
  presto_protocol_api_StageId.name() = "presto_protocol_api.StageId";
  presto_protocol_api_StageId.is_union() = false;
  static const auto* const
  presto_protocol_api_StageId_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "queryId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_StageId_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_StageId.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::OutputBufferId>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.OutputBufferId", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_OutputBufferId = res.first->second;
  presto_protocol_api_OutputBufferId.name() = "presto_protocol_api.OutputBufferId";
  presto_protocol_api_OutputBufferId.is_union() = false;
  static const auto* const
  presto_protocol_api_OutputBufferId_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_OutputBufferId_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_OutputBufferId.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::PageBufferInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.PageBufferInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_PageBufferInfo = res.first->second;
  presto_protocol_api_PageBufferInfo.name() = "presto_protocol_api.PageBufferInfo";
  presto_protocol_api_PageBufferInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_PageBufferInfo_fields = new std::array<EncodedThriftField, 5>{ {
    { 1, "partition", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "bufferedPages", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "bufferedBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "rowsAdded", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "pagesAdded", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_PageBufferInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_PageBufferInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::PlanNodeId>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.PlanNodeId", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_PlanNodeId = res.first->second;
  presto_protocol_api_PlanNodeId.name() = "presto_protocol_api.PlanNodeId";
  presto_protocol_api_PlanNodeId.is_union() = false;
  static const auto* const
  presto_protocol_api_PlanNodeId_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_PlanNodeId_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_PlanNodeId.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::DistributionSnapshot>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.DistributionSnapshot", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_DistributionSnapshot = res.first->second;
  presto_protocol_api_DistributionSnapshot.name() = "presto_protocol_api.DistributionSnapshot";
  presto_protocol_api_DistributionSnapshot.is_union() = false;
  static const auto* const
  presto_protocol_api_DistributionSnapshot_fields = new std::array<EncodedThriftField, 15>{ {
    { 1, "maxError", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "count", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "total", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "p01", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "p05", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "p10", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "p25", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "p50", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "p75", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 10, "p90", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 11, "p95", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 12, "p99", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 13, "min", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 14, "max", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 15, "avg", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_DistributionSnapshot_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_DistributionSnapshot.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::RuntimeStats>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.RuntimeStats", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_RuntimeStats = res.first->second;
  presto_protocol_api_RuntimeStats.name() = "presto_protocol_api.RuntimeStats";
  presto_protocol_api_RuntimeStats.is_union() = false;
  static const auto* const
  presto_protocol_api_RuntimeStats_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "metrics", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Struct<::facebook::presto::protocol::cpp2::RuntimeMetric>>("presto_protocol_api.RuntimeMetric")), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_RuntimeStats_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_RuntimeStats.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::ExchangeClientStatus>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.ExchangeClientStatus", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_ExchangeClientStatus = res.first->second;
  presto_protocol_api_ExchangeClientStatus.name() = "presto_protocol_api.ExchangeClientStatus";
  presto_protocol_api_ExchangeClientStatus.is_union() = false;
  static const auto* const
  presto_protocol_api_ExchangeClientStatus_fields = new std::array<EncodedThriftField, 7>{ {
    { 1, "bufferedBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "maxBufferedBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "averageBytesPerRequest", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "successfulRequestsCount", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "bufferedPages", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "noMoreLocations", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "pageBufferClientStatuses", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>("presto_protocol_api.PageBufferClientStatus")), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_ExchangeClientStatus_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_ExchangeClientStatus.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::PageBufferClientStatus>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.PageBufferClientStatus", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_PageBufferClientStatus = res.first->second;
  presto_protocol_api_PageBufferClientStatus.name() = "presto_protocol_api.PageBufferClientStatus";
  presto_protocol_api_PageBufferClientStatus.is_union() = false;
  static const auto* const
  presto_protocol_api_PageBufferClientStatus_fields = new std::array<EncodedThriftField, 11>{ {
    { 1, "uri", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "state", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "lastUpdate", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "rowsReceived", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "pagesReceived", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "rowsRejected", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "pagesRejected", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "requestsScheduled", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "requestsCompleted", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 10, "requestsFailed", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 11, "httpRequestState", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_PageBufferClientStatus_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_PageBufferClientStatus.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.LocalExchangeBufferInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_LocalExchangeBufferInfo = res.first->second;
  presto_protocol_api_LocalExchangeBufferInfo.name() = "presto_protocol_api.LocalExchangeBufferInfo";
  presto_protocol_api_LocalExchangeBufferInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_LocalExchangeBufferInfo_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "bufferedBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "bufferedPages", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_LocalExchangeBufferInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_LocalExchangeBufferInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TableFinishInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TableFinishInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TableFinishInfo = res.first->second;
  presto_protocol_api_TableFinishInfo.name() = "presto_protocol_api.TableFinishInfo";
  presto_protocol_api_TableFinishInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_TableFinishInfo_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "serializedConnectorOutputMetadata", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "jsonLengthLimitExceeded", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "statisticsWallTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "statisticsCpuTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TableFinishInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TableFinishInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::SplitOperatorInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.SplitOperatorInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_SplitOperatorInfo = res.first->second;
  presto_protocol_api_SplitOperatorInfo.name() = "presto_protocol_api.SplitOperatorInfo";
  presto_protocol_api_SplitOperatorInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_SplitOperatorInfo_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "splitInfoMap", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_SplitOperatorInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_SplitOperatorInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::HashCollisionsInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.HashCollisionsInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_HashCollisionsInfo = res.first->second;
  presto_protocol_api_HashCollisionsInfo.name() = "presto_protocol_api.HashCollisionsInfo";
  presto_protocol_api_HashCollisionsInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_HashCollisionsInfo_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "weightedSumSquaredHashCollisions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "weightedHashCollisions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "weightedExpectedHashCollisions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_HashCollisionsInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_HashCollisionsInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::PartitionedOutputInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.PartitionedOutputInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_PartitionedOutputInfo = res.first->second;
  presto_protocol_api_PartitionedOutputInfo.name() = "presto_protocol_api.PartitionedOutputInfo";
  presto_protocol_api_PartitionedOutputInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_PartitionedOutputInfo_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "rowsAdded", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "pagesAdded", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "outputBufferPeakMemoryUsage", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_PartitionedOutputInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_PartitionedOutputInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::WindowInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.WindowInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_WindowInfo = res.first->second;
  presto_protocol_api_WindowInfo.name() = "presto_protocol_api.WindowInfo";
  presto_protocol_api_WindowInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_WindowInfo_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "windowInfos", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::DriverWindowInfo>>("presto_protocol_api.DriverWindowInfo")), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_WindowInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_WindowInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::DriverWindowInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.DriverWindowInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_DriverWindowInfo = res.first->second;
  presto_protocol_api_DriverWindowInfo.name() = "presto_protocol_api.DriverWindowInfo";
  presto_protocol_api_DriverWindowInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_DriverWindowInfo_fields = new std::array<EncodedThriftField, 6>{ {
    { 1, "sumSquaredDifferencesPositionsOfIndex", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "sumSquaredDifferencesSizeOfIndex", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "sumSquaredDifferencesSizeInPartition", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "totalPartitionsCount", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "totalRowsCount", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "numberOfIndexes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_DriverWindowInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_DriverWindowInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TableWriterInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TableWriterInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TableWriterInfo = res.first->second;
  presto_protocol_api_TableWriterInfo.name() = "presto_protocol_api.TableWriterInfo";
  presto_protocol_api_TableWriterInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_TableWriterInfo_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "pageSinkPeakMemoryUsage", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "statisticsWallTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "statisticsCpuTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "validationCpuTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TableWriterInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TableWriterInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TableWriterMergeInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TableWriterMergeInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TableWriterMergeInfo = res.first->second;
  presto_protocol_api_TableWriterMergeInfo.name() = "presto_protocol_api.TableWriterMergeInfo";
  presto_protocol_api_TableWriterMergeInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_TableWriterMergeInfo_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "statisticsWallTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "statisticsCpuTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TableWriterMergeInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TableWriterMergeInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::DynamicFilterStats>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.DynamicFilterStats", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_DynamicFilterStats = res.first->second;
  presto_protocol_api_DynamicFilterStats.name() = "presto_protocol_api.DynamicFilterStats";
  presto_protocol_api_DynamicFilterStats.is_union() = false;
  static const auto* const
  presto_protocol_api_DynamicFilterStats_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "producerNodeIds", false, std::make_unique<Set>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::PlanNodeId>>("presto_protocol_api.PlanNodeId")), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_DynamicFilterStats_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_DynamicFilterStats.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::DriverStats>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.DriverStats", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_DriverStats = res.first->second;
  presto_protocol_api_DriverStats.name() = "presto_protocol_api.DriverStats";
  presto_protocol_api_DriverStats.is_union() = false;
  static const auto* const
  presto_protocol_api_DriverStats_fields = new std::array<EncodedThriftField, 24>{ {
    { 1, "lifespan", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::Lifespan>>("presto_protocol_api.Lifespan"), std::vector<ThriftConstStruct>{ }},    { 2, "createTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "startTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "endTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "queuedTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "elapsedTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "userMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "revocableMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "systemMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 10, "totalScheduledTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 11, "totalCpuTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 12, "totalBlockedTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 13, "fullyBlocked", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 14, "blockedReasons", false, std::make_unique<Set>(std::make_unique<Enum<::facebook::presto::protocol::cpp2::BlockedReason>>("presto_protocol_api.BlockedReason")), std::vector<ThriftConstStruct>{ }},    { 15, "totalAllocationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 16, "rawInputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 17, "rawInputReadTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 18, "rawInputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 19, "processedInputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 20, "processedInputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 21, "outputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 22, "outputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 23, "physicalWrittenDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 24, "operatorStats", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::OperatorStats>>("presto_protocol_api.OperatorStats")), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_DriverStats_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_DriverStats.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TransactionId>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TransactionId", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TransactionId = res.first->second;
  presto_protocol_api_TransactionId.name() = "presto_protocol_api.TransactionId";
  presto_protocol_api_TransactionId.is_union() = false;
  static const auto* const
  presto_protocol_api_TransactionId_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "uuid", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TransactionId_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TransactionId.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TimeZoneKey>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TimeZoneKey", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TimeZoneKey = res.first->second;
  presto_protocol_api_TimeZoneKey.name() = "presto_protocol_api.TimeZoneKey";
  presto_protocol_api_TimeZoneKey.is_union() = false;
  static const auto* const
  presto_protocol_api_TimeZoneKey_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "key", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TimeZoneKey_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TimeZoneKey.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::ResourceEstimates>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.ResourceEstimates", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_ResourceEstimates = res.first->second;
  presto_protocol_api_ResourceEstimates.name() = "presto_protocol_api.ResourceEstimates";
  presto_protocol_api_ResourceEstimates.is_union() = false;
  static const auto* const
  presto_protocol_api_ResourceEstimates_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "executionTime", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "cpuTime", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "peakMemory", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "peakTaskMemory", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_ResourceEstimates_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_ResourceEstimates.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::ConnectorId>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.ConnectorId", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_ConnectorId = res.first->second;
  presto_protocol_api_ConnectorId.name() = "presto_protocol_api.ConnectorId";
  presto_protocol_api_ConnectorId.is_union() = false;
  static const auto* const
  presto_protocol_api_ConnectorId_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "catalogName", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_ConnectorId_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_ConnectorId.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::SqlFunctionId>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.SqlFunctionId", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_SqlFunctionId = res.first->second;
  presto_protocol_api_SqlFunctionId.name() = "presto_protocol_api.SqlFunctionId";
  presto_protocol_api_SqlFunctionId.is_union() = false;
  static const auto* const
  presto_protocol_api_SqlFunctionId_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "signature", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_SqlFunctionId_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_SqlFunctionId.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TypeSignature>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TypeSignature", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TypeSignature = res.first->second;
  presto_protocol_api_TypeSignature.name() = "presto_protocol_api.TypeSignature";
  presto_protocol_api_TypeSignature.is_union() = false;
  static const auto* const
  presto_protocol_api_TypeSignature_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "signature", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "ignore", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TypeSignature_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TypeSignature.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::Language>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.Language", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_Language = res.first->second;
  presto_protocol_api_Language.name() = "presto_protocol_api.Language";
  presto_protocol_api_Language.is_union() = false;
  static const auto* const
  presto_protocol_api_Language_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "language", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_Language_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_Language.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::QualifiedObjectName>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.QualifiedObjectName", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_QualifiedObjectName = res.first->second;
  presto_protocol_api_QualifiedObjectName.name() = "presto_protocol_api.QualifiedObjectName";
  presto_protocol_api_QualifiedObjectName.is_union() = false;
  static const auto* const
  presto_protocol_api_QualifiedObjectName_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "catalogName", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "schemaName", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "objectName", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_QualifiedObjectName_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_QualifiedObjectName.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TypeVariableConstraint>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TypeVariableConstraint", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TypeVariableConstraint = res.first->second;
  presto_protocol_api_TypeVariableConstraint.name() = "presto_protocol_api.TypeVariableConstraint";
  presto_protocol_api_TypeVariableConstraint.is_union() = false;
  static const auto* const
  presto_protocol_api_TypeVariableConstraint_fields = new std::array<EncodedThriftField, 5>{ {
    { 1, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "comparableRequired", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "orderableRequired", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "variadicBound", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "nonDecimalNumericRequired", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TypeVariableConstraint_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TypeVariableConstraint.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::LongVariableConstraint>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.LongVariableConstraint", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_LongVariableConstraint = res.first->second;
  presto_protocol_api_LongVariableConstraint.name() = "presto_protocol_api.LongVariableConstraint";
  presto_protocol_api_LongVariableConstraint.is_union() = false;
  static const auto* const
  presto_protocol_api_LongVariableConstraint_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "expression", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_LongVariableConstraint_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_LongVariableConstraint.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TaskSource>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TaskSource", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TaskSource = res.first->second;
  presto_protocol_api_TaskSource.name() = "presto_protocol_api.TaskSource";
  presto_protocol_api_TaskSource.is_union() = false;
  static const auto* const
  presto_protocol_api_TaskSource_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "planNodeId", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::PlanNodeId>>("presto_protocol_api.PlanNodeId"), std::vector<ThriftConstStruct>{ }},    { 2, "splits", false, std::make_unique<Set>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::ScheduledSplit>>("presto_protocol_api.ScheduledSplit")), std::vector<ThriftConstStruct>{ }},    { 3, "noMoreSplitsForLifespan", false, std::make_unique<Set>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::Lifespan>>("presto_protocol_api.Lifespan")), std::vector<ThriftConstStruct>{ }},    { 4, "noMoreSplits", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TaskSource_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TaskSource.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::ScheduledSplit>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.ScheduledSplit", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_ScheduledSplit = res.first->second;
  presto_protocol_api_ScheduledSplit.name() = "presto_protocol_api.ScheduledSplit";
  presto_protocol_api_ScheduledSplit.is_union() = false;
  static const auto* const
  presto_protocol_api_ScheduledSplit_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "sequenceId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "planNodeId", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::PlanNodeId>>("presto_protocol_api.PlanNodeId"), std::vector<ThriftConstStruct>{ }},    { 3, "split", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::SplitWrapper>>("presto_protocol_api.SplitWrapper"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_ScheduledSplit_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_ScheduledSplit.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TaskStatus>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TaskStatus", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TaskStatus = res.first->second;
  presto_protocol_api_TaskStatus.name() = "presto_protocol_api.TaskStatus";
  presto_protocol_api_TaskStatus.is_union() = false;
  static const auto* const
  presto_protocol_api_TaskStatus_fields = new std::array<EncodedThriftField, 21>{ {
    { 1, "taskInstanceIdLeastSignificantBits", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "taskInstanceIdMostSignificantBits", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "version", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "state", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::TaskState>>("presto_protocol_api.TaskState"), std::vector<ThriftConstStruct>{ }},    { 5, "selfUri", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "completedDriverGroups", false, std::make_unique<Set>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::Lifespan>>("presto_protocol_api.Lifespan")), std::vector<ThriftConstStruct>{ }},    { 7, "failures", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>("presto_protocol_api.ExecutionFailureInfo")), std::vector<ThriftConstStruct>{ }},    { 8, "queuedPartitionedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "runningPartitionedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 10, "outputBufferUtilization", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 11, "outputBufferOverutilized", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 12, "physicalWrittenDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 13, "memoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 14, "systemMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 15, "fullGcCount", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 16, "fullGcTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 17, "peakNodeTotalMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 18, "totalCpuTimeInNanos", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 19, "taskAgeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 20, "queuedPartitionedSplitsWeight", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 21, "runningPartitionedSplitsWeight", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TaskStatus_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TaskStatus.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::ErrorCode>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.ErrorCode", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_ErrorCode = res.first->second;
  presto_protocol_api_ErrorCode.name() = "presto_protocol_api.ErrorCode";
  presto_protocol_api_ErrorCode.is_union() = false;
  static const auto* const
  presto_protocol_api_ErrorCode_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "code", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "type", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::ErrorType>>("presto_protocol_api.ErrorType"), std::vector<ThriftConstStruct>{ }},    { 4, "retriable", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_ErrorCode_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_ErrorCode.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::StageExecutionId>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.StageExecutionId", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_StageExecutionId = res.first->second;
  presto_protocol_api_StageExecutionId.name() = "presto_protocol_api.StageExecutionId";
  presto_protocol_api_StageExecutionId.is_union() = false;
  static const auto* const
  presto_protocol_api_StageExecutionId_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "stageId", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::StageId>>("presto_protocol_api.StageId"), std::vector<ThriftConstStruct>{ }},    { 2, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_StageExecutionId_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_StageExecutionId.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::OutputBufferInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.OutputBufferInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_OutputBufferInfo = res.first->second;
  presto_protocol_api_OutputBufferInfo.name() = "presto_protocol_api.OutputBufferInfo";
  presto_protocol_api_OutputBufferInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_OutputBufferInfo_fields = new std::array<EncodedThriftField, 9>{ {
    { 1, "type", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "state", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::BufferState>>("presto_protocol_api.BufferState"), std::vector<ThriftConstStruct>{ }},    { 3, "buffers", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::BufferInfo>>("presto_protocol_api.BufferInfo")), std::vector<ThriftConstStruct>{ }},    { 4, "canAddBuffers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "canAddPages", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "totalBufferedBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "totalBufferedPages", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "totalRowsSent", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "totalPagesSent", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_OutputBufferInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_OutputBufferInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::BufferInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.BufferInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_BufferInfo = res.first->second;
  presto_protocol_api_BufferInfo.name() = "presto_protocol_api.BufferInfo";
  presto_protocol_api_BufferInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_BufferInfo_fields = new std::array<EncodedThriftField, 5>{ {
    { 1, "bufferId", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::OutputBufferId>>("presto_protocol_api.OutputBufferId"), std::vector<ThriftConstStruct>{ }},    { 2, "finished", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "bufferedPages", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "pagesSent", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "pageBufferInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::PageBufferInfo>>("presto_protocol_api.PageBufferInfo"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_BufferInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_BufferInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TaskStats>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TaskStats", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TaskStats = res.first->second;
  presto_protocol_api_TaskStats.name() = "presto_protocol_api.TaskStats";
  presto_protocol_api_TaskStats.is_union() = false;
  static const auto* const
  presto_protocol_api_TaskStats_fields = new std::array<EncodedThriftField, 41>{ {
    { 1, "createTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "firstStartTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "lastStartTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "lastEndTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "endTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "elapsedTimeInNanos", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "queuedTimeInNanos", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "totalDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "queuedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 10, "runningDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 11, "blockedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 12, "completedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 13, "cumulativeUserMemory", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 14, "cumulativeTotalMemory", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 15, "userMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 16, "revocableMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 17, "systemMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 18, "peakUserMemoryInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 19, "peakTotalMemoryInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 20, "peakNodeTotalMemoryInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 21, "totalScheduledTimeInNanos", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 22, "totalCpuTimeInNanos", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 23, "totalBlockedTimeInNanos", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 24, "fullyBlocked", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 25, "blockedReasons", false, std::make_unique<Set>(std::make_unique<Enum<::facebook::presto::protocol::cpp2::BlockedReason>>("presto_protocol_api.BlockedReason")), std::vector<ThriftConstStruct>{ }},    { 26, "totalAllocationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 27, "rawInputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 28, "rawInputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 29, "processedInputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 30, "processedInputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 31, "outputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 32, "outputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 33, "physicalWrittenDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 34, "pipelines", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::PipelineStats>>("presto_protocol_api.PipelineStats")), std::vector<ThriftConstStruct>{ }},    { 35, "queuedPartitionedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 36, "queuedPartitionedSplitsWeight", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 37, "runningPartitionedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 38, "runningPartitionedSplitsWeight", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 39, "fullGcCount", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 40, "fullGcTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 41, "runtimeStats", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::RuntimeStats>>("presto_protocol_api.RuntimeStats"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TaskStats_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TaskStats.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::PipelineStats>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.PipelineStats", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_PipelineStats = res.first->second;
  presto_protocol_api_PipelineStats.name() = "presto_protocol_api.PipelineStats";
  presto_protocol_api_PipelineStats.is_union() = false;
  static const auto* const
  presto_protocol_api_PipelineStats_fields = new std::array<EncodedThriftField, 35>{ {
    { 1, "pipelineId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "firstStartTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "lastStartTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "lastEndTimeInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "inputPipeline", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "outputPipeline", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "totalDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "queuedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "queuedPartitionedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 10, "queuedPartitionedSplitsWeight", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 11, "runningDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 12, "runningPartitionedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 13, "runningPartitionedSplitsWeight", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 14, "blockedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 15, "completedDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 16, "userMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 17, "revocableMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 18, "systemMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 19, "queuedTime", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::DistributionSnapshot>>("presto_protocol_api.DistributionSnapshot"), std::vector<ThriftConstStruct>{ }},    { 20, "elapsedTime", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::DistributionSnapshot>>("presto_protocol_api.DistributionSnapshot"), std::vector<ThriftConstStruct>{ }},    { 21, "totalScheduledTimeInNanos", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 22, "totalCpuTimeInNanos", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 23, "totalBlockedTimeInNanos", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 24, "fullyBlocked", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 25, "blockedReasons", false, std::make_unique<Set>(std::make_unique<Enum<::facebook::presto::protocol::cpp2::BlockedReason>>("presto_protocol_api.BlockedReason")), std::vector<ThriftConstStruct>{ }},    { 26, "totalAllocationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 27, "rawInputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 28, "rawInputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 29, "processedInputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 30, "processedInputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 31, "outputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 32, "outputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 33, "physicalWrittenDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 34, "operatorSummaries", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::OperatorStats>>("presto_protocol_api.OperatorStats")), std::vector<ThriftConstStruct>{ }},    { 35, "drivers", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::DriverStats>>("presto_protocol_api.DriverStats")), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_PipelineStats_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_PipelineStats.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::RuntimeMetric>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.RuntimeMetric", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_RuntimeMetric = res.first->second;
  presto_protocol_api_RuntimeMetric.name() = "presto_protocol_api.RuntimeMetric";
  presto_protocol_api_RuntimeMetric.is_union() = false;
  static const auto* const
  presto_protocol_api_RuntimeMetric_fields = new std::array<EncodedThriftField, 6>{ {
    { 1, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "sum", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "count", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "max", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "min", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "unit", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::RuntimeUnit>>("presto_protocol_api.RuntimeUnit"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_RuntimeMetric_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_RuntimeMetric.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::JoinOperatorInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.JoinOperatorInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_JoinOperatorInfo = res.first->second;
  presto_protocol_api_JoinOperatorInfo.name() = "presto_protocol_api.JoinOperatorInfo";
  presto_protocol_api_JoinOperatorInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_JoinOperatorInfo_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "joinType", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::JoinType>>("presto_protocol_api.JoinType"), std::vector<ThriftConstStruct>{ }},    { 2, "logHistogramProbes", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE)), std::vector<ThriftConstStruct>{ }},    { 3, "logHistogramOutput", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE)), std::vector<ThriftConstStruct>{ }},    { 4, "lookupSourcePositions", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_JoinOperatorInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_JoinOperatorInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::SessionRepresentation>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.SessionRepresentation", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_SessionRepresentation = res.first->second;
  presto_protocol_api_SessionRepresentation.name() = "presto_protocol_api.SessionRepresentation";
  presto_protocol_api_SessionRepresentation.is_union() = false;
  static const auto* const
  presto_protocol_api_SessionRepresentation_fields = new std::array<EncodedThriftField, 23>{ {
    { 1, "queryId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "transactionId", true, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TransactionId>>("presto_protocol_api.TransactionId"), std::vector<ThriftConstStruct>{ }},    { 3, "clientTransactionSupport", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "user", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "principal", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "source", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "catalog", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "schema", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "traceToken", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 10, "timeZoneKey", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TimeZoneKey>>("presto_protocol_api.TimeZoneKey"), std::vector<ThriftConstStruct>{ }},    { 11, "locale", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 12, "remoteUserAddress", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 13, "userAgent", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 14, "clientInfo", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 15, "clientTags", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{ }},    { 16, "resourceEstimates", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::ResourceEstimates>>("presto_protocol_api.ResourceEstimates"), std::vector<ThriftConstStruct>{ }},    { 17, "startTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 18, "systemProperties", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{ }},    { 19, "catalogProperties", false, std::make_unique<Map>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::ConnectorId>>("presto_protocol_api.ConnectorId"), std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE))), std::vector<ThriftConstStruct>{ }},    { 20, "unprocessedCatalogProperties", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE))), std::vector<ThriftConstStruct>{ }},    { 21, "roles", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Struct<::facebook::presto::protocol::cpp2::SelectedRole>>("presto_protocol_api.SelectedRole")), std::vector<ThriftConstStruct>{ }},    { 22, "preparedStatements", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{ }},    { 23, "sessionFunctions", false, std::make_unique<Map>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::SqlFunctionId>>("presto_protocol_api.SqlFunctionId"), std::make_unique<Struct<::facebook::presto::protocol::cpp2::SqlInvokedFunction>>("presto_protocol_api.SqlInvokedFunction")), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_SessionRepresentation_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_SessionRepresentation.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::SelectedRole>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.SelectedRole", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_SelectedRole = res.first->second;
  presto_protocol_api_SelectedRole.name() = "presto_protocol_api.SelectedRole";
  presto_protocol_api_SelectedRole.is_union() = false;
  static const auto* const
  presto_protocol_api_SelectedRole_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "type", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::Type>>("presto_protocol_api.Type"), std::vector<ThriftConstStruct>{ }},    { 2, "role", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_SelectedRole_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_SelectedRole.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::Parameter>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.Parameter", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_Parameter = res.first->second;
  presto_protocol_api_Parameter.name() = "presto_protocol_api.Parameter";
  presto_protocol_api_Parameter.is_union() = false;
  static const auto* const
  presto_protocol_api_Parameter_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "type", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TypeSignature>>("presto_protocol_api.TypeSignature"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_Parameter_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_Parameter.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::RoutineCharacteristics>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.RoutineCharacteristics", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_RoutineCharacteristics = res.first->second;
  presto_protocol_api_RoutineCharacteristics.name() = "presto_protocol_api.RoutineCharacteristics";
  presto_protocol_api_RoutineCharacteristics.is_union() = false;
  static const auto* const
  presto_protocol_api_RoutineCharacteristics_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "language", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::Language>>("presto_protocol_api.Language"), std::vector<ThriftConstStruct>{ }},    { 2, "determinism", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::Determinism>>("presto_protocol_api.Determinism"), std::vector<ThriftConstStruct>{ }},    { 3, "nullCallClause", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::NullCallClause>>("presto_protocol_api.NullCallClause"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_RoutineCharacteristics_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_RoutineCharacteristics.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::Signature>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.Signature", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_Signature = res.first->second;
  presto_protocol_api_Signature.name() = "presto_protocol_api.Signature";
  presto_protocol_api_Signature.is_union() = false;
  static const auto* const
  presto_protocol_api_Signature_fields = new std::array<EncodedThriftField, 7>{ {
    { 1, "name", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::QualifiedObjectName>>("presto_protocol_api.QualifiedObjectName"), std::vector<ThriftConstStruct>{ }},    { 2, "kind", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::FunctionKind>>("presto_protocol_api.FunctionKind"), std::vector<ThriftConstStruct>{ }},    { 3, "returnType", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TypeSignature>>("presto_protocol_api.TypeSignature"), std::vector<ThriftConstStruct>{ }},    { 4, "argumentTypes", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::TypeSignature>>("presto_protocol_api.TypeSignature")), std::vector<ThriftConstStruct>{ }},    { 5, "variableArity", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "typeVariableConstraints", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>("presto_protocol_api.TypeVariableConstraint")), std::vector<ThriftConstStruct>{ }},    { 7, "longVariableConstraints", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::LongVariableConstraint>>("presto_protocol_api.LongVariableConstraint")), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_Signature_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_Signature.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::OutputBuffers>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.OutputBuffers", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_OutputBuffers = res.first->second;
  presto_protocol_api_OutputBuffers.name() = "presto_protocol_api.OutputBuffers";
  presto_protocol_api_OutputBuffers.is_union() = false;
  static const auto* const
  presto_protocol_api_OutputBuffers_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "type", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::BufferType>>("presto_protocol_api.BufferType"), std::vector<ThriftConstStruct>{ }},    { 2, "version", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "noMoreBufferIds", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "buffers", false, std::make_unique<Map>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::OutputBufferId>>("presto_protocol_api.OutputBufferId"), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_OutputBuffers_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_OutputBuffers.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TaskUpdateRequest>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TaskUpdateRequest", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TaskUpdateRequest = res.first->second;
  presto_protocol_api_TaskUpdateRequest.name() = "presto_protocol_api.TaskUpdateRequest";
  presto_protocol_api_TaskUpdateRequest.is_union() = false;
  static const auto* const
  presto_protocol_api_TaskUpdateRequest_fields = new std::array<EncodedThriftField, 6>{ {
    { 1, "session", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::SessionRepresentation>>("presto_protocol_api.SessionRepresentation"), std::vector<ThriftConstStruct>{ }},    { 2, "extraCredentials", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{ }},    { 3, "fragment", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "sources", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::TaskSource>>("presto_protocol_api.TaskSource")), std::vector<ThriftConstStruct>{ }},    { 5, "outputIds", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::OutputBuffers>>("presto_protocol_api.OutputBuffers"), std::vector<ThriftConstStruct>{ }},    { 6, "tableWriteInfo", true, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>>("presto_protocol_api.TableWriteInfoWrapper"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TaskUpdateRequest_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TaskUpdateRequest.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.ExecutionFailureInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_ExecutionFailureInfo = res.first->second;
  presto_protocol_api_ExecutionFailureInfo.name() = "presto_protocol_api.ExecutionFailureInfo";
  presto_protocol_api_ExecutionFailureInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_ExecutionFailureInfo_fields = new std::array<EncodedThriftField, 9>{ {
    { 1, "type", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "message", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "cause", true, std::make_unique<Struct<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>("presto_protocol_api.ExecutionFailureInfo"), std::vector<ThriftConstStruct>{ }},    { 4, "suppressed", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>("presto_protocol_api.ExecutionFailureInfo")), std::vector<ThriftConstStruct>{ }},    { 5, "stack", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{ }},    { 6, "errorLocation", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::ErrorLocation>>("presto_protocol_api.ErrorLocation"), std::vector<ThriftConstStruct>{ }},    { 7, "errorCode", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::ErrorCode>>("presto_protocol_api.ErrorCode"), std::vector<ThriftConstStruct>{ }},    { 8, "remoteHost", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::HostAddress>>("presto_protocol_api.HostAddress"), std::vector<ThriftConstStruct>{ }},    { 9, "errorCause", false, std::make_unique<Enum<::facebook::presto::protocol::cpp2::ErrorCause>>("presto_protocol_api.ErrorCause"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_ExecutionFailureInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_ExecutionFailureInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TaskId>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TaskId", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TaskId = res.first->second;
  presto_protocol_api_TaskId.name() = "presto_protocol_api.TaskId";
  presto_protocol_api_TaskId.is_union() = false;
  static const auto* const
  presto_protocol_api_TaskId_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "stageExecutionId", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::StageExecutionId>>("presto_protocol_api.StageExecutionId"), std::vector<ThriftConstStruct>{ }},    { 2, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "attemptNumber", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TaskId_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TaskId.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::OperatorInfoUnion>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.OperatorInfoUnion", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_OperatorInfoUnion = res.first->second;
  presto_protocol_api_OperatorInfoUnion.name() = "presto_protocol_api.OperatorInfoUnion";
  presto_protocol_api_OperatorInfoUnion.is_union() = true;
  static const auto* const
  presto_protocol_api_OperatorInfoUnion_fields = new std::array<EncodedThriftField, 10>{ {
    { 1, "exchangeClientStatus", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::ExchangeClientStatus>>("presto_protocol_api.ExchangeClientStatus"), std::vector<ThriftConstStruct>{ }},    { 2, "localExchangeBufferInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>>("presto_protocol_api.LocalExchangeBufferInfo"), std::vector<ThriftConstStruct>{ }},    { 3, "tableFinishInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TableFinishInfo>>("presto_protocol_api.TableFinishInfo"), std::vector<ThriftConstStruct>{ }},    { 4, "splitOperatorInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::SplitOperatorInfo>>("presto_protocol_api.SplitOperatorInfo"), std::vector<ThriftConstStruct>{ }},    { 5, "hashCollisionsInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::HashCollisionsInfo>>("presto_protocol_api.HashCollisionsInfo"), std::vector<ThriftConstStruct>{ }},    { 6, "partitionedOutputInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::PartitionedOutputInfo>>("presto_protocol_api.PartitionedOutputInfo"), std::vector<ThriftConstStruct>{ }},    { 7, "joinOperatorInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::JoinOperatorInfo>>("presto_protocol_api.JoinOperatorInfo"), std::vector<ThriftConstStruct>{ }},    { 8, "windowInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::WindowInfo>>("presto_protocol_api.WindowInfo"), std::vector<ThriftConstStruct>{ }},    { 9, "tableWriterInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TableWriterInfo>>("presto_protocol_api.TableWriterInfo"), std::vector<ThriftConstStruct>{ }},    { 10, "tableWriterMergeInfo", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TableWriterMergeInfo>>("presto_protocol_api.TableWriterMergeInfo"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_OperatorInfoUnion_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_OperatorInfoUnion.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::SqlInvokedFunction>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.SqlInvokedFunction", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_SqlInvokedFunction = res.first->second;
  presto_protocol_api_SqlInvokedFunction.name() = "presto_protocol_api.SqlInvokedFunction";
  presto_protocol_api_SqlInvokedFunction.is_union() = false;
  static const auto* const
  presto_protocol_api_SqlInvokedFunction_fields = new std::array<EncodedThriftField, 7>{ {
    { 1, "parameters", false, std::make_unique<List>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::Parameter>>("presto_protocol_api.Parameter")), std::vector<ThriftConstStruct>{ }},    { 2, "description", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "routineCharacteristics", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::RoutineCharacteristics>>("presto_protocol_api.RoutineCharacteristics"), std::vector<ThriftConstStruct>{ }},    { 4, "body", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "variableArity", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "signature", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::Signature>>("presto_protocol_api.Signature"), std::vector<ThriftConstStruct>{ }},    { 7, "functionId", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::SqlFunctionId>>("presto_protocol_api.SqlFunctionId"), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_SqlInvokedFunction_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_SqlInvokedFunction.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::TaskInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.TaskInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_TaskInfo = res.first->second;
  presto_protocol_api_TaskInfo.name() = "presto_protocol_api.TaskInfo";
  presto_protocol_api_TaskInfo.is_union() = false;
  static const auto* const
  presto_protocol_api_TaskInfo_fields = new std::array<EncodedThriftField, 9>{ {
    { 1, "taskId", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TaskId>>("presto_protocol_api.TaskId"), std::vector<ThriftConstStruct>{ }},    { 2, "taskStatus", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TaskStatus>>("presto_protocol_api.TaskStatus"), std::vector<ThriftConstStruct>{ }},    { 3, "lastHeartbeatInMillis", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "outputBuffers", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::OutputBufferInfo>>("presto_protocol_api.OutputBufferInfo"), std::vector<ThriftConstStruct>{ }},    { 5, "noMoreSplits", false, std::make_unique<Set>(std::make_unique<Struct<::facebook::presto::protocol::cpp2::PlanNodeId>>("presto_protocol_api.PlanNodeId")), std::vector<ThriftConstStruct>{ }},    { 6, "stats", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::TaskStats>>("presto_protocol_api.TaskStats"), std::vector<ThriftConstStruct>{ }},    { 7, "needsPlan", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "metadataUpdates", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>>("presto_protocol_api.MetadataUpdatesWrapper"), std::vector<ThriftConstStruct>{ }},    { 9, "nodeId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_TaskInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_TaskInfo.fields()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::presto::protocol::cpp2::OperatorStats>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs()->emplace("presto_protocol_api.OperatorStats", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& presto_protocol_api_OperatorStats = res.first->second;
  presto_protocol_api_OperatorStats.name() = "presto_protocol_api.OperatorStats";
  presto_protocol_api_OperatorStats.is_union() = false;
  static const auto* const
  presto_protocol_api_OperatorStats_fields = new std::array<EncodedThriftField, 48>{ {
    { 1, "stageId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "stageExecutionId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "pipelineId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "operatorId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "planNodeId", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::PlanNodeId>>("presto_protocol_api.PlanNodeId"), std::vector<ThriftConstStruct>{ }},    { 6, "operatorType", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "totalDrivers", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "addInputCalls", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "addInputWall", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 10, "addInputCpu", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 11, "addInputAllocationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 12, "rawInputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 13, "rawInputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 14, "inputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 15, "inputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 16, "sumSquaredInputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 17, "getOutputCalls", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 18, "getOutputWall", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 19, "getOutputCpu", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 20, "getOutputAllocationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 21, "outputDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 22, "outputPositions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 23, "physicalWrittenDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 24, "additionalCpu", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 25, "blockedWall", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 26, "finishCalls", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 27, "finishWall", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 28, "finishCpu", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 29, "finishAllocationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 30, "userMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 31, "revocableMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 32, "systemMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 33, "peakUserMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 34, "peakSystemMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 35, "peakTotalMemoryReservationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 36, "spilledDataSizeInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 37, "runtimeStats", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::RuntimeStats>>("presto_protocol_api.RuntimeStats"), std::vector<ThriftConstStruct>{ }},    { 38, "blockedReason", true, std::make_unique<Enum<::facebook::presto::protocol::cpp2::BlockedReason>>("presto_protocol_api.BlockedReason"), std::vector<ThriftConstStruct>{ }},    { 39, "infoUnion", false, std::make_unique<Union<::facebook::presto::protocol::cpp2::OperatorInfoUnion>>("presto_protocol_api.OperatorInfoUnion"), std::vector<ThriftConstStruct>{ }},    { 40, "nullJoinBuildKeyCount", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 41, "joinBuildKeyCount", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 42, "nullJoinProbeKeyCount", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 43, "joinProbeKeyCount", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 44, "dynamicFilterStats", false, std::make_unique<Struct<::facebook::presto::protocol::cpp2::DynamicFilterStats>>("presto_protocol_api.DynamicFilterStats"), std::vector<ThriftConstStruct>{ }},    { 45, "isBlockedCalls", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 46, "isBlockedWall", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 47, "isBlockedCpu", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 48, "isBlockedAllocationInBytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *presto_protocol_api_OperatorStats_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    presto_protocol_api_OperatorStats.fields()->push_back(std::move(field));
  }
  return res.first->second;
}

} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
