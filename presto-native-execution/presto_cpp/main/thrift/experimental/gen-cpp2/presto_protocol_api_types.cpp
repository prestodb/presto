/**
 * Autogenerated by Thrift for presto_protocol_api.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated  
 */
#include "presto_protocol_api_types.h"
#include "presto_protocol_api_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "presto_protocol_api_data.h"
[[maybe_unused]] static constexpr std::string_view kModuleName = "presto_protocol_api";


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::TaskState>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::TaskState const*> const TEnumTraits<::facebook::presto::protocol::cpp2::TaskState>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::TaskState>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::TaskState>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::TaskState>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::TaskState>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::TaskState>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::ErrorType>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::ErrorType const*> const TEnumTraits<::facebook::presto::protocol::cpp2::ErrorType>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::ErrorType>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::ErrorType>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::ErrorType>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::ErrorType>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::ErrorType>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::ErrorCause>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::ErrorCause const*> const TEnumTraits<::facebook::presto::protocol::cpp2::ErrorCause>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::ErrorCause>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::ErrorCause>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::ErrorCause>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::ErrorCause>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::ErrorCause>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::BufferState>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::BufferState const*> const TEnumTraits<::facebook::presto::protocol::cpp2::BufferState>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::BufferState>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::BufferState>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::BufferState>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::BufferState>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::BufferState>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::BlockedReason>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::BlockedReason const*> const TEnumTraits<::facebook::presto::protocol::cpp2::BlockedReason>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::BlockedReason>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::BlockedReason>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::BlockedReason>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::BlockedReason>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::BlockedReason>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::RuntimeUnit>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::RuntimeUnit const*> const TEnumTraits<::facebook::presto::protocol::cpp2::RuntimeUnit>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::RuntimeUnit>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::RuntimeUnit>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::RuntimeUnit>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::RuntimeUnit>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::RuntimeUnit>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::JoinType>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::JoinType const*> const TEnumTraits<::facebook::presto::protocol::cpp2::JoinType>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::JoinType>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::JoinType>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::JoinType>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::JoinType>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::JoinType>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::Type>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::Type const*> const TEnumTraits<::facebook::presto::protocol::cpp2::Type>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::Type>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::Type>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::Determinism>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::Determinism const*> const TEnumTraits<::facebook::presto::protocol::cpp2::Determinism>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::Determinism>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::Determinism>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::Determinism>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::Determinism>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::Determinism>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::NullCallClause>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::NullCallClause const*> const TEnumTraits<::facebook::presto::protocol::cpp2::NullCallClause>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::NullCallClause>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::NullCallClause>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::NullCallClause>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::NullCallClause>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::NullCallClause>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::FunctionKind>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::FunctionKind const*> const TEnumTraits<::facebook::presto::protocol::cpp2::FunctionKind>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::FunctionKind>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::FunctionKind>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::FunctionKind>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::FunctionKind>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::FunctionKind>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::presto::protocol::cpp2::BufferType>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::presto::protocol::cpp2::BufferType const*> const TEnumTraits<::facebook::presto::protocol::cpp2::BufferType>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::BufferType>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::BufferType>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::BufferType>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::BufferType>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::BufferType>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::SplitWrapper>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::SplitWrapper>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view SplitWrapper::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SplitWrapper>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SplitWrapper::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SplitWrapper>::name;
}

SplitWrapper::SplitWrapper(const SplitWrapper&) = default;
SplitWrapper& SplitWrapper::operator=(const SplitWrapper&) = default;
SplitWrapper::SplitWrapper() {
}


SplitWrapper::~SplitWrapper() {}

SplitWrapper::SplitWrapper([[maybe_unused]] SplitWrapper&& other) noexcept :
    __fbthrift_field_split(std::move(other.__fbthrift_field_split)),
    __isset(other.__isset) {
}

SplitWrapper& SplitWrapper::operator=([[maybe_unused]] SplitWrapper&& other) noexcept {
    this->__fbthrift_field_split = std::move(other.__fbthrift_field_split);
    __isset = other.__isset;
    return *this;
}


SplitWrapper::SplitWrapper(apache::thrift::FragileConstructor, ::std::string split__arg) :
    __fbthrift_field_split(std::move(split__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void SplitWrapper::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_split = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void SplitWrapper::__fbthrift_clear_terse_fields() {
}

bool SplitWrapper::__fbthrift_is_empty() const {
  return false;
}

bool SplitWrapper::operator==([[maybe_unused]] const SplitWrapper& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SplitWrapper::operator<([[maybe_unused]] const SplitWrapper& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] SplitWrapper& a, [[maybe_unused]] SplitWrapper& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_split, b.__fbthrift_field_split);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void SplitWrapper::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SplitWrapper::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SplitWrapper::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SplitWrapper::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SplitWrapper::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SplitWrapper::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SplitWrapper::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SplitWrapper::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TableWriteInfoWrapper::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TableWriteInfoWrapper>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TableWriteInfoWrapper::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TableWriteInfoWrapper>::name;
}

TableWriteInfoWrapper::TableWriteInfoWrapper(const TableWriteInfoWrapper&) = default;
TableWriteInfoWrapper& TableWriteInfoWrapper::operator=(const TableWriteInfoWrapper&) = default;
TableWriteInfoWrapper::TableWriteInfoWrapper() {
}


TableWriteInfoWrapper::~TableWriteInfoWrapper() {}

TableWriteInfoWrapper::TableWriteInfoWrapper([[maybe_unused]] TableWriteInfoWrapper&& other) noexcept :
    __fbthrift_field_tableWriteInfo(std::move(other.__fbthrift_field_tableWriteInfo)),
    __isset(other.__isset) {
}

TableWriteInfoWrapper& TableWriteInfoWrapper::operator=([[maybe_unused]] TableWriteInfoWrapper&& other) noexcept {
    this->__fbthrift_field_tableWriteInfo = std::move(other.__fbthrift_field_tableWriteInfo);
    __isset = other.__isset;
    return *this;
}


TableWriteInfoWrapper::TableWriteInfoWrapper(apache::thrift::FragileConstructor, ::std::string tableWriteInfo__arg) :
    __fbthrift_field_tableWriteInfo(std::move(tableWriteInfo__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void TableWriteInfoWrapper::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_tableWriteInfo = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void TableWriteInfoWrapper::__fbthrift_clear_terse_fields() {
}

bool TableWriteInfoWrapper::__fbthrift_is_empty() const {
  return false;
}

bool TableWriteInfoWrapper::operator==([[maybe_unused]] const TableWriteInfoWrapper& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TableWriteInfoWrapper::operator<([[maybe_unused]] const TableWriteInfoWrapper& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] TableWriteInfoWrapper& a, [[maybe_unused]] TableWriteInfoWrapper& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_tableWriteInfo, b.__fbthrift_field_tableWriteInfo);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TableWriteInfoWrapper::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TableWriteInfoWrapper::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TableWriteInfoWrapper::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TableWriteInfoWrapper::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TableWriteInfoWrapper::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TableWriteInfoWrapper::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TableWriteInfoWrapper::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TableWriteInfoWrapper::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view MetadataUpdatesWrapper::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MetadataUpdatesWrapper>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MetadataUpdatesWrapper::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MetadataUpdatesWrapper>::name;
}

MetadataUpdatesWrapper::MetadataUpdatesWrapper(const MetadataUpdatesWrapper&) = default;
MetadataUpdatesWrapper& MetadataUpdatesWrapper::operator=(const MetadataUpdatesWrapper&) = default;
MetadataUpdatesWrapper::MetadataUpdatesWrapper() {
}


MetadataUpdatesWrapper::~MetadataUpdatesWrapper() {}

MetadataUpdatesWrapper::MetadataUpdatesWrapper([[maybe_unused]] MetadataUpdatesWrapper&& other) noexcept :
    __fbthrift_field_metadataUpdates(std::move(other.__fbthrift_field_metadataUpdates)),
    __isset(other.__isset) {
}

MetadataUpdatesWrapper& MetadataUpdatesWrapper::operator=([[maybe_unused]] MetadataUpdatesWrapper&& other) noexcept {
    this->__fbthrift_field_metadataUpdates = std::move(other.__fbthrift_field_metadataUpdates);
    __isset = other.__isset;
    return *this;
}


MetadataUpdatesWrapper::MetadataUpdatesWrapper(apache::thrift::FragileConstructor, ::std::string metadataUpdates__arg) :
    __fbthrift_field_metadataUpdates(std::move(metadataUpdates__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void MetadataUpdatesWrapper::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_metadataUpdates = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void MetadataUpdatesWrapper::__fbthrift_clear_terse_fields() {
}

bool MetadataUpdatesWrapper::__fbthrift_is_empty() const {
  return false;
}

bool MetadataUpdatesWrapper::operator==([[maybe_unused]] const MetadataUpdatesWrapper& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MetadataUpdatesWrapper::operator<([[maybe_unused]] const MetadataUpdatesWrapper& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MetadataUpdatesWrapper& a, [[maybe_unused]] MetadataUpdatesWrapper& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_metadataUpdates, b.__fbthrift_field_metadataUpdates);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void MetadataUpdatesWrapper::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MetadataUpdatesWrapper::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MetadataUpdatesWrapper::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MetadataUpdatesWrapper::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MetadataUpdatesWrapper::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MetadataUpdatesWrapper::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MetadataUpdatesWrapper::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MetadataUpdatesWrapper::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::Lifespan>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::Lifespan>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view Lifespan::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Lifespan>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Lifespan::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Lifespan>::name;
}


Lifespan::Lifespan(apache::thrift::FragileConstructor, bool grouped__arg, ::std::int32_t groupId__arg) :
    __fbthrift_field_grouped(std::move(grouped__arg)),
    __fbthrift_field_groupId(std::move(groupId__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void Lifespan::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_grouped = bool();
  this->__fbthrift_field_groupId = ::std::int32_t();
  __isset = {};
}

void Lifespan::__fbthrift_clear_terse_fields() {
}

bool Lifespan::__fbthrift_is_empty() const {
  return false;
}

bool Lifespan::operator==([[maybe_unused]] const Lifespan& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Lifespan::operator<([[maybe_unused]] const Lifespan& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool Lifespan::get_grouped() const {
  return __fbthrift_field_grouped;
}

bool& Lifespan::set_grouped(bool grouped_) {
  grouped_ref() = grouped_;
  return __fbthrift_field_grouped;
}

::std::int32_t Lifespan::get_groupId() const {
  return __fbthrift_field_groupId;
}

::std::int32_t& Lifespan::set_groupId(::std::int32_t groupId_) {
  groupId_ref() = groupId_;
  return __fbthrift_field_groupId;
}

void swap([[maybe_unused]] Lifespan& a, [[maybe_unused]] Lifespan& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_grouped, b.__fbthrift_field_grouped);
  swap(a.__fbthrift_field_groupId, b.__fbthrift_field_groupId);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void Lifespan::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Lifespan::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Lifespan::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Lifespan::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Lifespan::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Lifespan::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Lifespan::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Lifespan::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::ErrorLocation>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::ErrorLocation>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view ErrorLocation::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ErrorLocation>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ErrorLocation::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ErrorLocation>::name;
}


ErrorLocation::ErrorLocation(apache::thrift::FragileConstructor, ::std::int32_t lineNumber__arg, ::std::int32_t columnNumber__arg) :
    __fbthrift_field_lineNumber(std::move(lineNumber__arg)),
    __fbthrift_field_columnNumber(std::move(columnNumber__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void ErrorLocation::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_lineNumber = ::std::int32_t();
  this->__fbthrift_field_columnNumber = ::std::int32_t();
  __isset = {};
}

void ErrorLocation::__fbthrift_clear_terse_fields() {
}

bool ErrorLocation::__fbthrift_is_empty() const {
  return false;
}

bool ErrorLocation::operator==([[maybe_unused]] const ErrorLocation& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ErrorLocation::operator<([[maybe_unused]] const ErrorLocation& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t ErrorLocation::get_lineNumber() const {
  return __fbthrift_field_lineNumber;
}

::std::int32_t& ErrorLocation::set_lineNumber(::std::int32_t lineNumber_) {
  lineNumber_ref() = lineNumber_;
  return __fbthrift_field_lineNumber;
}

::std::int32_t ErrorLocation::get_columnNumber() const {
  return __fbthrift_field_columnNumber;
}

::std::int32_t& ErrorLocation::set_columnNumber(::std::int32_t columnNumber_) {
  columnNumber_ref() = columnNumber_;
  return __fbthrift_field_columnNumber;
}

void swap([[maybe_unused]] ErrorLocation& a, [[maybe_unused]] ErrorLocation& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_lineNumber, b.__fbthrift_field_lineNumber);
  swap(a.__fbthrift_field_columnNumber, b.__fbthrift_field_columnNumber);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void ErrorLocation::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ErrorLocation::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ErrorLocation::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ErrorLocation::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ErrorLocation::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ErrorLocation::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ErrorLocation::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ErrorLocation::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::HostAddress>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::HostAddress>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view HostAddress::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<HostAddress>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view HostAddress::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<HostAddress>::name;
}

HostAddress::HostAddress(const HostAddress&) = default;
HostAddress& HostAddress::operator=(const HostAddress&) = default;
HostAddress::HostAddress() :
    __fbthrift_field_port() {
}


HostAddress::~HostAddress() {}

HostAddress::HostAddress([[maybe_unused]] HostAddress&& other) noexcept :
    __fbthrift_field_host(std::move(other.__fbthrift_field_host)),
    __fbthrift_field_port(std::move(other.__fbthrift_field_port)),
    __isset(other.__isset) {
}

HostAddress& HostAddress::operator=([[maybe_unused]] HostAddress&& other) noexcept {
    this->__fbthrift_field_host = std::move(other.__fbthrift_field_host);
    this->__fbthrift_field_port = std::move(other.__fbthrift_field_port);
    __isset = other.__isset;
    return *this;
}


HostAddress::HostAddress(apache::thrift::FragileConstructor, ::std::string host__arg, ::std::int32_t port__arg) :
    __fbthrift_field_host(std::move(host__arg)),
    __fbthrift_field_port(std::move(port__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void HostAddress::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_host = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_port = ::std::int32_t();
  __isset = {};
}

void HostAddress::__fbthrift_clear_terse_fields() {
}

bool HostAddress::__fbthrift_is_empty() const {
  return false;
}

bool HostAddress::operator==([[maybe_unused]] const HostAddress& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool HostAddress::operator<([[maybe_unused]] const HostAddress& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t HostAddress::get_port() const {
  return __fbthrift_field_port;
}

::std::int32_t& HostAddress::set_port(::std::int32_t port_) {
  port_ref() = port_;
  return __fbthrift_field_port;
}

void swap([[maybe_unused]] HostAddress& a, [[maybe_unused]] HostAddress& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_host, b.__fbthrift_field_host);
  swap(a.__fbthrift_field_port, b.__fbthrift_field_port);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void HostAddress::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t HostAddress::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t HostAddress::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t HostAddress::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void HostAddress::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t HostAddress::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t HostAddress::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t HostAddress::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::StageId>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::StageId>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view StageId::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StageId>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StageId::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StageId>::name;
}

StageId::StageId(const StageId&) = default;
StageId& StageId::operator=(const StageId&) = default;
StageId::StageId() :
    __fbthrift_field_id() {
}


StageId::~StageId() {}

StageId::StageId([[maybe_unused]] StageId&& other) noexcept :
    __fbthrift_field_queryId(std::move(other.__fbthrift_field_queryId)),
    __fbthrift_field_id(std::move(other.__fbthrift_field_id)),
    __isset(other.__isset) {
}

StageId& StageId::operator=([[maybe_unused]] StageId&& other) noexcept {
    this->__fbthrift_field_queryId = std::move(other.__fbthrift_field_queryId);
    this->__fbthrift_field_id = std::move(other.__fbthrift_field_id);
    __isset = other.__isset;
    return *this;
}


StageId::StageId(apache::thrift::FragileConstructor, ::std::string queryId__arg, ::std::int32_t id__arg) :
    __fbthrift_field_queryId(std::move(queryId__arg)),
    __fbthrift_field_id(std::move(id__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void StageId::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_queryId = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_id = ::std::int32_t();
  __isset = {};
}

void StageId::__fbthrift_clear_terse_fields() {
}

bool StageId::__fbthrift_is_empty() const {
  return false;
}

bool StageId::operator==([[maybe_unused]] const StageId& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StageId::operator<([[maybe_unused]] const StageId& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t StageId::get_id() const {
  return __fbthrift_field_id;
}

::std::int32_t& StageId::set_id(::std::int32_t id_) {
  id_ref() = id_;
  return __fbthrift_field_id;
}

void swap([[maybe_unused]] StageId& a, [[maybe_unused]] StageId& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_queryId, b.__fbthrift_field_queryId);
  swap(a.__fbthrift_field_id, b.__fbthrift_field_id);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void StageId::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StageId::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StageId::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StageId::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void StageId::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StageId::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StageId::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StageId::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::OutputBufferId>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::OutputBufferId>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view OutputBufferId::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OutputBufferId>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view OutputBufferId::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<OutputBufferId>::name;
}


OutputBufferId::OutputBufferId(apache::thrift::FragileConstructor, ::std::int32_t id__arg) :
    __fbthrift_field_id(std::move(id__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void OutputBufferId::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_id = ::std::int32_t();
  __isset = {};
}

void OutputBufferId::__fbthrift_clear_terse_fields() {
}

bool OutputBufferId::__fbthrift_is_empty() const {
  return false;
}

bool OutputBufferId::operator==([[maybe_unused]] const OutputBufferId& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool OutputBufferId::operator<([[maybe_unused]] const OutputBufferId& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t OutputBufferId::get_id() const {
  return __fbthrift_field_id;
}

::std::int32_t& OutputBufferId::set_id(::std::int32_t id_) {
  id_ref() = id_;
  return __fbthrift_field_id;
}

void swap([[maybe_unused]] OutputBufferId& a, [[maybe_unused]] OutputBufferId& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_id, b.__fbthrift_field_id);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void OutputBufferId::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OutputBufferId::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OutputBufferId::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OutputBufferId::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OutputBufferId::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OutputBufferId::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OutputBufferId::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OutputBufferId::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::PageBufferInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::PageBufferInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view PageBufferInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<PageBufferInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view PageBufferInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<PageBufferInfo>::name;
}


PageBufferInfo::PageBufferInfo(apache::thrift::FragileConstructor, ::std::int32_t partition__arg, ::std::int64_t bufferedPages__arg, ::std::int64_t bufferedBytes__arg, ::std::int64_t rowsAdded__arg, ::std::int64_t pagesAdded__arg) :
    __fbthrift_field_partition(std::move(partition__arg)),
    __fbthrift_field_bufferedPages(std::move(bufferedPages__arg)),
    __fbthrift_field_bufferedBytes(std::move(bufferedBytes__arg)),
    __fbthrift_field_rowsAdded(std::move(rowsAdded__arg)),
    __fbthrift_field_pagesAdded(std::move(pagesAdded__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
}


void PageBufferInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_partition = ::std::int32_t();
  this->__fbthrift_field_bufferedPages = ::std::int64_t();
  this->__fbthrift_field_bufferedBytes = ::std::int64_t();
  this->__fbthrift_field_rowsAdded = ::std::int64_t();
  this->__fbthrift_field_pagesAdded = ::std::int64_t();
  __isset = {};
}

void PageBufferInfo::__fbthrift_clear_terse_fields() {
}

bool PageBufferInfo::__fbthrift_is_empty() const {
  return false;
}

bool PageBufferInfo::operator==([[maybe_unused]] const PageBufferInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool PageBufferInfo::operator<([[maybe_unused]] const PageBufferInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t PageBufferInfo::get_partition() const {
  return __fbthrift_field_partition;
}

::std::int32_t& PageBufferInfo::set_partition(::std::int32_t partition_) {
  partition_ref() = partition_;
  return __fbthrift_field_partition;
}

::std::int64_t PageBufferInfo::get_bufferedPages() const {
  return __fbthrift_field_bufferedPages;
}

::std::int64_t& PageBufferInfo::set_bufferedPages(::std::int64_t bufferedPages_) {
  bufferedPages_ref() = bufferedPages_;
  return __fbthrift_field_bufferedPages;
}

::std::int64_t PageBufferInfo::get_bufferedBytes() const {
  return __fbthrift_field_bufferedBytes;
}

::std::int64_t& PageBufferInfo::set_bufferedBytes(::std::int64_t bufferedBytes_) {
  bufferedBytes_ref() = bufferedBytes_;
  return __fbthrift_field_bufferedBytes;
}

::std::int64_t PageBufferInfo::get_rowsAdded() const {
  return __fbthrift_field_rowsAdded;
}

::std::int64_t& PageBufferInfo::set_rowsAdded(::std::int64_t rowsAdded_) {
  rowsAdded_ref() = rowsAdded_;
  return __fbthrift_field_rowsAdded;
}

::std::int64_t PageBufferInfo::get_pagesAdded() const {
  return __fbthrift_field_pagesAdded;
}

::std::int64_t& PageBufferInfo::set_pagesAdded(::std::int64_t pagesAdded_) {
  pagesAdded_ref() = pagesAdded_;
  return __fbthrift_field_pagesAdded;
}

void swap([[maybe_unused]] PageBufferInfo& a, [[maybe_unused]] PageBufferInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_partition, b.__fbthrift_field_partition);
  swap(a.__fbthrift_field_bufferedPages, b.__fbthrift_field_bufferedPages);
  swap(a.__fbthrift_field_bufferedBytes, b.__fbthrift_field_bufferedBytes);
  swap(a.__fbthrift_field_rowsAdded, b.__fbthrift_field_rowsAdded);
  swap(a.__fbthrift_field_pagesAdded, b.__fbthrift_field_pagesAdded);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void PageBufferInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t PageBufferInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t PageBufferInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t PageBufferInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void PageBufferInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t PageBufferInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t PageBufferInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t PageBufferInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::PlanNodeId>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::PlanNodeId>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view PlanNodeId::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<PlanNodeId>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view PlanNodeId::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<PlanNodeId>::name;
}

PlanNodeId::PlanNodeId(const PlanNodeId&) = default;
PlanNodeId& PlanNodeId::operator=(const PlanNodeId&) = default;
PlanNodeId::PlanNodeId() {
}


PlanNodeId::~PlanNodeId() {}

PlanNodeId::PlanNodeId([[maybe_unused]] PlanNodeId&& other) noexcept :
    __fbthrift_field_id(std::move(other.__fbthrift_field_id)),
    __isset(other.__isset) {
}

PlanNodeId& PlanNodeId::operator=([[maybe_unused]] PlanNodeId&& other) noexcept {
    this->__fbthrift_field_id = std::move(other.__fbthrift_field_id);
    __isset = other.__isset;
    return *this;
}


PlanNodeId::PlanNodeId(apache::thrift::FragileConstructor, ::std::string id__arg) :
    __fbthrift_field_id(std::move(id__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void PlanNodeId::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_id = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void PlanNodeId::__fbthrift_clear_terse_fields() {
}

bool PlanNodeId::__fbthrift_is_empty() const {
  return false;
}

bool PlanNodeId::operator==([[maybe_unused]] const PlanNodeId& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool PlanNodeId::operator<([[maybe_unused]] const PlanNodeId& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] PlanNodeId& a, [[maybe_unused]] PlanNodeId& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_id, b.__fbthrift_field_id);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void PlanNodeId::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t PlanNodeId::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t PlanNodeId::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t PlanNodeId::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void PlanNodeId::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t PlanNodeId::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t PlanNodeId::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t PlanNodeId::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::DistributionSnapshot>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::DistributionSnapshot>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view DistributionSnapshot::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DistributionSnapshot>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view DistributionSnapshot::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DistributionSnapshot>::name;
}


DistributionSnapshot::DistributionSnapshot(apache::thrift::FragileConstructor, double maxError__arg, double count__arg, double total__arg, ::std::int64_t p01__arg, ::std::int64_t p05__arg, ::std::int64_t p10__arg, ::std::int64_t p25__arg, ::std::int64_t p50__arg, ::std::int64_t p75__arg, ::std::int64_t p90__arg, ::std::int64_t p95__arg, ::std::int64_t p99__arg, ::std::int64_t min__arg, ::std::int64_t max__arg, double avg__arg) :
    __fbthrift_field_maxError(std::move(maxError__arg)),
    __fbthrift_field_count(std::move(count__arg)),
    __fbthrift_field_total(std::move(total__arg)),
    __fbthrift_field_p01(std::move(p01__arg)),
    __fbthrift_field_p05(std::move(p05__arg)),
    __fbthrift_field_p10(std::move(p10__arg)),
    __fbthrift_field_p25(std::move(p25__arg)),
    __fbthrift_field_p50(std::move(p50__arg)),
    __fbthrift_field_p75(std::move(p75__arg)),
    __fbthrift_field_p90(std::move(p90__arg)),
    __fbthrift_field_p95(std::move(p95__arg)),
    __fbthrift_field_p99(std::move(p99__arg)),
    __fbthrift_field_min(std::move(min__arg)),
    __fbthrift_field_max(std::move(max__arg)),
    __fbthrift_field_avg(std::move(avg__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
}


void DistributionSnapshot::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_maxError = double();
  this->__fbthrift_field_count = double();
  this->__fbthrift_field_total = double();
  this->__fbthrift_field_p01 = ::std::int64_t();
  this->__fbthrift_field_p05 = ::std::int64_t();
  this->__fbthrift_field_p10 = ::std::int64_t();
  this->__fbthrift_field_p25 = ::std::int64_t();
  this->__fbthrift_field_p50 = ::std::int64_t();
  this->__fbthrift_field_p75 = ::std::int64_t();
  this->__fbthrift_field_p90 = ::std::int64_t();
  this->__fbthrift_field_p95 = ::std::int64_t();
  this->__fbthrift_field_p99 = ::std::int64_t();
  this->__fbthrift_field_min = ::std::int64_t();
  this->__fbthrift_field_max = ::std::int64_t();
  this->__fbthrift_field_avg = double();
  __isset = {};
}

void DistributionSnapshot::__fbthrift_clear_terse_fields() {
}

bool DistributionSnapshot::__fbthrift_is_empty() const {
  return false;
}

bool DistributionSnapshot::operator==([[maybe_unused]] const DistributionSnapshot& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool DistributionSnapshot::operator<([[maybe_unused]] const DistributionSnapshot& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


double DistributionSnapshot::get_maxError() const {
  return __fbthrift_field_maxError;
}

double& DistributionSnapshot::set_maxError(double maxError_) {
  maxError_ref() = maxError_;
  return __fbthrift_field_maxError;
}

double DistributionSnapshot::get_count() const {
  return __fbthrift_field_count;
}

double& DistributionSnapshot::set_count(double count_) {
  count_ref() = count_;
  return __fbthrift_field_count;
}

double DistributionSnapshot::get_total() const {
  return __fbthrift_field_total;
}

double& DistributionSnapshot::set_total(double total_) {
  total_ref() = total_;
  return __fbthrift_field_total;
}

::std::int64_t DistributionSnapshot::get_p01() const {
  return __fbthrift_field_p01;
}

::std::int64_t& DistributionSnapshot::set_p01(::std::int64_t p01_) {
  p01_ref() = p01_;
  return __fbthrift_field_p01;
}

::std::int64_t DistributionSnapshot::get_p05() const {
  return __fbthrift_field_p05;
}

::std::int64_t& DistributionSnapshot::set_p05(::std::int64_t p05_) {
  p05_ref() = p05_;
  return __fbthrift_field_p05;
}

::std::int64_t DistributionSnapshot::get_p10() const {
  return __fbthrift_field_p10;
}

::std::int64_t& DistributionSnapshot::set_p10(::std::int64_t p10_) {
  p10_ref() = p10_;
  return __fbthrift_field_p10;
}

::std::int64_t DistributionSnapshot::get_p25() const {
  return __fbthrift_field_p25;
}

::std::int64_t& DistributionSnapshot::set_p25(::std::int64_t p25_) {
  p25_ref() = p25_;
  return __fbthrift_field_p25;
}

::std::int64_t DistributionSnapshot::get_p50() const {
  return __fbthrift_field_p50;
}

::std::int64_t& DistributionSnapshot::set_p50(::std::int64_t p50_) {
  p50_ref() = p50_;
  return __fbthrift_field_p50;
}

::std::int64_t DistributionSnapshot::get_p75() const {
  return __fbthrift_field_p75;
}

::std::int64_t& DistributionSnapshot::set_p75(::std::int64_t p75_) {
  p75_ref() = p75_;
  return __fbthrift_field_p75;
}

::std::int64_t DistributionSnapshot::get_p90() const {
  return __fbthrift_field_p90;
}

::std::int64_t& DistributionSnapshot::set_p90(::std::int64_t p90_) {
  p90_ref() = p90_;
  return __fbthrift_field_p90;
}

::std::int64_t DistributionSnapshot::get_p95() const {
  return __fbthrift_field_p95;
}

::std::int64_t& DistributionSnapshot::set_p95(::std::int64_t p95_) {
  p95_ref() = p95_;
  return __fbthrift_field_p95;
}

::std::int64_t DistributionSnapshot::get_p99() const {
  return __fbthrift_field_p99;
}

::std::int64_t& DistributionSnapshot::set_p99(::std::int64_t p99_) {
  p99_ref() = p99_;
  return __fbthrift_field_p99;
}

::std::int64_t DistributionSnapshot::get_min() const {
  return __fbthrift_field_min;
}

::std::int64_t& DistributionSnapshot::set_min(::std::int64_t min_) {
  min_ref() = min_;
  return __fbthrift_field_min;
}

::std::int64_t DistributionSnapshot::get_max() const {
  return __fbthrift_field_max;
}

::std::int64_t& DistributionSnapshot::set_max(::std::int64_t max_) {
  max_ref() = max_;
  return __fbthrift_field_max;
}

double DistributionSnapshot::get_avg() const {
  return __fbthrift_field_avg;
}

double& DistributionSnapshot::set_avg(double avg_) {
  avg_ref() = avg_;
  return __fbthrift_field_avg;
}

void swap([[maybe_unused]] DistributionSnapshot& a, [[maybe_unused]] DistributionSnapshot& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_maxError, b.__fbthrift_field_maxError);
  swap(a.__fbthrift_field_count, b.__fbthrift_field_count);
  swap(a.__fbthrift_field_total, b.__fbthrift_field_total);
  swap(a.__fbthrift_field_p01, b.__fbthrift_field_p01);
  swap(a.__fbthrift_field_p05, b.__fbthrift_field_p05);
  swap(a.__fbthrift_field_p10, b.__fbthrift_field_p10);
  swap(a.__fbthrift_field_p25, b.__fbthrift_field_p25);
  swap(a.__fbthrift_field_p50, b.__fbthrift_field_p50);
  swap(a.__fbthrift_field_p75, b.__fbthrift_field_p75);
  swap(a.__fbthrift_field_p90, b.__fbthrift_field_p90);
  swap(a.__fbthrift_field_p95, b.__fbthrift_field_p95);
  swap(a.__fbthrift_field_p99, b.__fbthrift_field_p99);
  swap(a.__fbthrift_field_min, b.__fbthrift_field_min);
  swap(a.__fbthrift_field_max, b.__fbthrift_field_max);
  swap(a.__fbthrift_field_avg, b.__fbthrift_field_avg);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void DistributionSnapshot::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DistributionSnapshot::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DistributionSnapshot::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DistributionSnapshot::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DistributionSnapshot::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DistributionSnapshot::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DistributionSnapshot::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DistributionSnapshot::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::RuntimeStats>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::RuntimeStats>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view RuntimeStats::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RuntimeStats>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view RuntimeStats::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RuntimeStats>::name;
}

RuntimeStats::RuntimeStats(const RuntimeStats&) = default;
RuntimeStats& RuntimeStats::operator=(const RuntimeStats&) = default;
RuntimeStats::RuntimeStats() {
}


RuntimeStats::~RuntimeStats() {}

RuntimeStats::RuntimeStats([[maybe_unused]] RuntimeStats&& other) noexcept :
    __fbthrift_field_metrics(std::move(other.__fbthrift_field_metrics)),
    __isset(other.__isset) {
}

RuntimeStats& RuntimeStats::operator=([[maybe_unused]] RuntimeStats&& other) noexcept {
    this->__fbthrift_field_metrics = std::move(other.__fbthrift_field_metrics);
    __isset = other.__isset;
    return *this;
}


RuntimeStats::RuntimeStats(apache::thrift::FragileConstructor, ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric> metrics__arg) :
    __fbthrift_field_metrics(std::move(metrics__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void RuntimeStats::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_metrics.clear();
  __isset = {};
}

void RuntimeStats::__fbthrift_clear_terse_fields() {
}

bool RuntimeStats::__fbthrift_is_empty() const {
  return false;
}

bool RuntimeStats::operator==([[maybe_unused]] const RuntimeStats& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RuntimeStats::operator<([[maybe_unused]] const RuntimeStats& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>& RuntimeStats::get_metrics() const& {
  return __fbthrift_field_metrics;
}

::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric> RuntimeStats::get_metrics() && {
  return static_cast<::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>&&>(__fbthrift_field_metrics);
}

void swap([[maybe_unused]] RuntimeStats& a, [[maybe_unused]] RuntimeStats& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_metrics, b.__fbthrift_field_metrics);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void RuntimeStats::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RuntimeStats::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RuntimeStats::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RuntimeStats::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RuntimeStats::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RuntimeStats::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RuntimeStats::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RuntimeStats::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RuntimeStats,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::facebook::presto::protocol::cpp2::RuntimeMetric>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::ExchangeClientStatus>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::ExchangeClientStatus>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view ExchangeClientStatus::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ExchangeClientStatus>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ExchangeClientStatus::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ExchangeClientStatus>::name;
}

ExchangeClientStatus::ExchangeClientStatus(const ExchangeClientStatus&) = default;
ExchangeClientStatus& ExchangeClientStatus::operator=(const ExchangeClientStatus&) = default;
ExchangeClientStatus::ExchangeClientStatus() :
    __fbthrift_field_bufferedBytes(),
    __fbthrift_field_maxBufferedBytes(),
    __fbthrift_field_averageBytesPerRequest(),
    __fbthrift_field_successfulRequestsCount(),
    __fbthrift_field_bufferedPages(),
    __fbthrift_field_noMoreLocations() {
}


ExchangeClientStatus::~ExchangeClientStatus() {}

ExchangeClientStatus::ExchangeClientStatus([[maybe_unused]] ExchangeClientStatus&& other) noexcept :
    __fbthrift_field_bufferedBytes(std::move(other.__fbthrift_field_bufferedBytes)),
    __fbthrift_field_maxBufferedBytes(std::move(other.__fbthrift_field_maxBufferedBytes)),
    __fbthrift_field_averageBytesPerRequest(std::move(other.__fbthrift_field_averageBytesPerRequest)),
    __fbthrift_field_successfulRequestsCount(std::move(other.__fbthrift_field_successfulRequestsCount)),
    __fbthrift_field_bufferedPages(std::move(other.__fbthrift_field_bufferedPages)),
    __fbthrift_field_noMoreLocations(std::move(other.__fbthrift_field_noMoreLocations)),
    __fbthrift_field_pageBufferClientStatuses(std::move(other.__fbthrift_field_pageBufferClientStatuses)),
    __isset(other.__isset) {
}

ExchangeClientStatus& ExchangeClientStatus::operator=([[maybe_unused]] ExchangeClientStatus&& other) noexcept {
    this->__fbthrift_field_bufferedBytes = std::move(other.__fbthrift_field_bufferedBytes);
    this->__fbthrift_field_maxBufferedBytes = std::move(other.__fbthrift_field_maxBufferedBytes);
    this->__fbthrift_field_averageBytesPerRequest = std::move(other.__fbthrift_field_averageBytesPerRequest);
    this->__fbthrift_field_successfulRequestsCount = std::move(other.__fbthrift_field_successfulRequestsCount);
    this->__fbthrift_field_bufferedPages = std::move(other.__fbthrift_field_bufferedPages);
    this->__fbthrift_field_noMoreLocations = std::move(other.__fbthrift_field_noMoreLocations);
    this->__fbthrift_field_pageBufferClientStatuses = std::move(other.__fbthrift_field_pageBufferClientStatuses);
    __isset = other.__isset;
    return *this;
}


ExchangeClientStatus::ExchangeClientStatus(apache::thrift::FragileConstructor, ::std::int64_t bufferedBytes__arg, ::std::int64_t maxBufferedBytes__arg, ::std::int64_t averageBytesPerRequest__arg, ::std::int64_t successfulRequestsCount__arg, ::std::int32_t bufferedPages__arg, bool noMoreLocations__arg, ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus> pageBufferClientStatuses__arg) :
    __fbthrift_field_bufferedBytes(std::move(bufferedBytes__arg)),
    __fbthrift_field_maxBufferedBytes(std::move(maxBufferedBytes__arg)),
    __fbthrift_field_averageBytesPerRequest(std::move(averageBytesPerRequest__arg)),
    __fbthrift_field_successfulRequestsCount(std::move(successfulRequestsCount__arg)),
    __fbthrift_field_bufferedPages(std::move(bufferedPages__arg)),
    __fbthrift_field_noMoreLocations(std::move(noMoreLocations__arg)),
    __fbthrift_field_pageBufferClientStatuses(std::move(pageBufferClientStatuses__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void ExchangeClientStatus::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_bufferedBytes = ::std::int64_t();
  this->__fbthrift_field_maxBufferedBytes = ::std::int64_t();
  this->__fbthrift_field_averageBytesPerRequest = ::std::int64_t();
  this->__fbthrift_field_successfulRequestsCount = ::std::int64_t();
  this->__fbthrift_field_bufferedPages = ::std::int32_t();
  this->__fbthrift_field_noMoreLocations = bool();
  this->__fbthrift_field_pageBufferClientStatuses.clear();
  __isset = {};
}

void ExchangeClientStatus::__fbthrift_clear_terse_fields() {
}

bool ExchangeClientStatus::__fbthrift_is_empty() const {
  return false;
}

bool ExchangeClientStatus::operator==([[maybe_unused]] const ExchangeClientStatus& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ExchangeClientStatus::operator<([[maybe_unused]] const ExchangeClientStatus& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t ExchangeClientStatus::get_bufferedBytes() const {
  return __fbthrift_field_bufferedBytes;
}

::std::int64_t& ExchangeClientStatus::set_bufferedBytes(::std::int64_t bufferedBytes_) {
  bufferedBytes_ref() = bufferedBytes_;
  return __fbthrift_field_bufferedBytes;
}

::std::int64_t ExchangeClientStatus::get_maxBufferedBytes() const {
  return __fbthrift_field_maxBufferedBytes;
}

::std::int64_t& ExchangeClientStatus::set_maxBufferedBytes(::std::int64_t maxBufferedBytes_) {
  maxBufferedBytes_ref() = maxBufferedBytes_;
  return __fbthrift_field_maxBufferedBytes;
}

::std::int64_t ExchangeClientStatus::get_averageBytesPerRequest() const {
  return __fbthrift_field_averageBytesPerRequest;
}

::std::int64_t& ExchangeClientStatus::set_averageBytesPerRequest(::std::int64_t averageBytesPerRequest_) {
  averageBytesPerRequest_ref() = averageBytesPerRequest_;
  return __fbthrift_field_averageBytesPerRequest;
}

::std::int64_t ExchangeClientStatus::get_successfulRequestsCount() const {
  return __fbthrift_field_successfulRequestsCount;
}

::std::int64_t& ExchangeClientStatus::set_successfulRequestsCount(::std::int64_t successfulRequestsCount_) {
  successfulRequestsCount_ref() = successfulRequestsCount_;
  return __fbthrift_field_successfulRequestsCount;
}

::std::int32_t ExchangeClientStatus::get_bufferedPages() const {
  return __fbthrift_field_bufferedPages;
}

::std::int32_t& ExchangeClientStatus::set_bufferedPages(::std::int32_t bufferedPages_) {
  bufferedPages_ref() = bufferedPages_;
  return __fbthrift_field_bufferedPages;
}

bool ExchangeClientStatus::get_noMoreLocations() const {
  return __fbthrift_field_noMoreLocations;
}

bool& ExchangeClientStatus::set_noMoreLocations(bool noMoreLocations_) {
  noMoreLocations_ref() = noMoreLocations_;
  return __fbthrift_field_noMoreLocations;
}

const ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>& ExchangeClientStatus::get_pageBufferClientStatuses() const& {
  return __fbthrift_field_pageBufferClientStatuses;
}

::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus> ExchangeClientStatus::get_pageBufferClientStatuses() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>&&>(__fbthrift_field_pageBufferClientStatuses);
}

void swap([[maybe_unused]] ExchangeClientStatus& a, [[maybe_unused]] ExchangeClientStatus& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bufferedBytes, b.__fbthrift_field_bufferedBytes);
  swap(a.__fbthrift_field_maxBufferedBytes, b.__fbthrift_field_maxBufferedBytes);
  swap(a.__fbthrift_field_averageBytesPerRequest, b.__fbthrift_field_averageBytesPerRequest);
  swap(a.__fbthrift_field_successfulRequestsCount, b.__fbthrift_field_successfulRequestsCount);
  swap(a.__fbthrift_field_bufferedPages, b.__fbthrift_field_bufferedPages);
  swap(a.__fbthrift_field_noMoreLocations, b.__fbthrift_field_noMoreLocations);
  swap(a.__fbthrift_field_pageBufferClientStatuses, b.__fbthrift_field_pageBufferClientStatuses);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void ExchangeClientStatus::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ExchangeClientStatus::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ExchangeClientStatus::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ExchangeClientStatus::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ExchangeClientStatus::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ExchangeClientStatus::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ExchangeClientStatus::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ExchangeClientStatus::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ExchangeClientStatus,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::PageBufferClientStatus>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::PageBufferClientStatus>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::PageBufferClientStatus>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view PageBufferClientStatus::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<PageBufferClientStatus>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view PageBufferClientStatus::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<PageBufferClientStatus>::name;
}

PageBufferClientStatus::PageBufferClientStatus(const PageBufferClientStatus&) = default;
PageBufferClientStatus& PageBufferClientStatus::operator=(const PageBufferClientStatus&) = default;
PageBufferClientStatus::PageBufferClientStatus() :
    __fbthrift_field_lastUpdate(),
    __fbthrift_field_rowsReceived(),
    __fbthrift_field_pagesReceived(),
    __fbthrift_field_rowsRejected(),
    __fbthrift_field_pagesRejected(),
    __fbthrift_field_requestsScheduled(),
    __fbthrift_field_requestsCompleted(),
    __fbthrift_field_requestsFailed() {
}


PageBufferClientStatus::~PageBufferClientStatus() {}

PageBufferClientStatus::PageBufferClientStatus([[maybe_unused]] PageBufferClientStatus&& other) noexcept :
    __fbthrift_field_uri(std::move(other.__fbthrift_field_uri)),
    __fbthrift_field_state(std::move(other.__fbthrift_field_state)),
    __fbthrift_field_lastUpdate(std::move(other.__fbthrift_field_lastUpdate)),
    __fbthrift_field_rowsReceived(std::move(other.__fbthrift_field_rowsReceived)),
    __fbthrift_field_pagesReceived(std::move(other.__fbthrift_field_pagesReceived)),
    __fbthrift_field_rowsRejected(std::move(other.__fbthrift_field_rowsRejected)),
    __fbthrift_field_pagesRejected(std::move(other.__fbthrift_field_pagesRejected)),
    __fbthrift_field_requestsScheduled(std::move(other.__fbthrift_field_requestsScheduled)),
    __fbthrift_field_requestsCompleted(std::move(other.__fbthrift_field_requestsCompleted)),
    __fbthrift_field_requestsFailed(std::move(other.__fbthrift_field_requestsFailed)),
    __fbthrift_field_httpRequestState(std::move(other.__fbthrift_field_httpRequestState)),
    __isset(other.__isset) {
}

PageBufferClientStatus& PageBufferClientStatus::operator=([[maybe_unused]] PageBufferClientStatus&& other) noexcept {
    this->__fbthrift_field_uri = std::move(other.__fbthrift_field_uri);
    this->__fbthrift_field_state = std::move(other.__fbthrift_field_state);
    this->__fbthrift_field_lastUpdate = std::move(other.__fbthrift_field_lastUpdate);
    this->__fbthrift_field_rowsReceived = std::move(other.__fbthrift_field_rowsReceived);
    this->__fbthrift_field_pagesReceived = std::move(other.__fbthrift_field_pagesReceived);
    this->__fbthrift_field_rowsRejected = std::move(other.__fbthrift_field_rowsRejected);
    this->__fbthrift_field_pagesRejected = std::move(other.__fbthrift_field_pagesRejected);
    this->__fbthrift_field_requestsScheduled = std::move(other.__fbthrift_field_requestsScheduled);
    this->__fbthrift_field_requestsCompleted = std::move(other.__fbthrift_field_requestsCompleted);
    this->__fbthrift_field_requestsFailed = std::move(other.__fbthrift_field_requestsFailed);
    this->__fbthrift_field_httpRequestState = std::move(other.__fbthrift_field_httpRequestState);
    __isset = other.__isset;
    return *this;
}


PageBufferClientStatus::PageBufferClientStatus(apache::thrift::FragileConstructor, ::std::string uri__arg, ::std::string state__arg, ::std::int64_t lastUpdate__arg, ::std::int64_t rowsReceived__arg, ::std::int32_t pagesReceived__arg, ::std::int64_t rowsRejected__arg, ::std::int32_t pagesRejected__arg, ::std::int32_t requestsScheduled__arg, ::std::int32_t requestsCompleted__arg, ::std::int32_t requestsFailed__arg, ::std::string httpRequestState__arg) :
    __fbthrift_field_uri(std::move(uri__arg)),
    __fbthrift_field_state(std::move(state__arg)),
    __fbthrift_field_lastUpdate(std::move(lastUpdate__arg)),
    __fbthrift_field_rowsReceived(std::move(rowsReceived__arg)),
    __fbthrift_field_pagesReceived(std::move(pagesReceived__arg)),
    __fbthrift_field_rowsRejected(std::move(rowsRejected__arg)),
    __fbthrift_field_pagesRejected(std::move(pagesRejected__arg)),
    __fbthrift_field_requestsScheduled(std::move(requestsScheduled__arg)),
    __fbthrift_field_requestsCompleted(std::move(requestsCompleted__arg)),
    __fbthrift_field_requestsFailed(std::move(requestsFailed__arg)),
    __fbthrift_field_httpRequestState(std::move(httpRequestState__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
}


void PageBufferClientStatus::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_uri = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_state = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_lastUpdate = ::std::int64_t();
  this->__fbthrift_field_rowsReceived = ::std::int64_t();
  this->__fbthrift_field_pagesReceived = ::std::int32_t();
  this->__fbthrift_field_rowsRejected = ::std::int64_t();
  this->__fbthrift_field_pagesRejected = ::std::int32_t();
  this->__fbthrift_field_requestsScheduled = ::std::int32_t();
  this->__fbthrift_field_requestsCompleted = ::std::int32_t();
  this->__fbthrift_field_requestsFailed = ::std::int32_t();
  this->__fbthrift_field_httpRequestState = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void PageBufferClientStatus::__fbthrift_clear_terse_fields() {
}

bool PageBufferClientStatus::__fbthrift_is_empty() const {
  return false;
}

bool PageBufferClientStatus::operator==([[maybe_unused]] const PageBufferClientStatus& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool PageBufferClientStatus::operator<([[maybe_unused]] const PageBufferClientStatus& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t PageBufferClientStatus::get_lastUpdate() const {
  return __fbthrift_field_lastUpdate;
}

::std::int64_t& PageBufferClientStatus::set_lastUpdate(::std::int64_t lastUpdate_) {
  lastUpdate_ref() = lastUpdate_;
  return __fbthrift_field_lastUpdate;
}

::std::int64_t PageBufferClientStatus::get_rowsReceived() const {
  return __fbthrift_field_rowsReceived;
}

::std::int64_t& PageBufferClientStatus::set_rowsReceived(::std::int64_t rowsReceived_) {
  rowsReceived_ref() = rowsReceived_;
  return __fbthrift_field_rowsReceived;
}

::std::int32_t PageBufferClientStatus::get_pagesReceived() const {
  return __fbthrift_field_pagesReceived;
}

::std::int32_t& PageBufferClientStatus::set_pagesReceived(::std::int32_t pagesReceived_) {
  pagesReceived_ref() = pagesReceived_;
  return __fbthrift_field_pagesReceived;
}

::std::int64_t PageBufferClientStatus::get_rowsRejected() const {
  return __fbthrift_field_rowsRejected;
}

::std::int64_t& PageBufferClientStatus::set_rowsRejected(::std::int64_t rowsRejected_) {
  rowsRejected_ref() = rowsRejected_;
  return __fbthrift_field_rowsRejected;
}

::std::int32_t PageBufferClientStatus::get_pagesRejected() const {
  return __fbthrift_field_pagesRejected;
}

::std::int32_t& PageBufferClientStatus::set_pagesRejected(::std::int32_t pagesRejected_) {
  pagesRejected_ref() = pagesRejected_;
  return __fbthrift_field_pagesRejected;
}

::std::int32_t PageBufferClientStatus::get_requestsScheduled() const {
  return __fbthrift_field_requestsScheduled;
}

::std::int32_t& PageBufferClientStatus::set_requestsScheduled(::std::int32_t requestsScheduled_) {
  requestsScheduled_ref() = requestsScheduled_;
  return __fbthrift_field_requestsScheduled;
}

::std::int32_t PageBufferClientStatus::get_requestsCompleted() const {
  return __fbthrift_field_requestsCompleted;
}

::std::int32_t& PageBufferClientStatus::set_requestsCompleted(::std::int32_t requestsCompleted_) {
  requestsCompleted_ref() = requestsCompleted_;
  return __fbthrift_field_requestsCompleted;
}

::std::int32_t PageBufferClientStatus::get_requestsFailed() const {
  return __fbthrift_field_requestsFailed;
}

::std::int32_t& PageBufferClientStatus::set_requestsFailed(::std::int32_t requestsFailed_) {
  requestsFailed_ref() = requestsFailed_;
  return __fbthrift_field_requestsFailed;
}

void swap([[maybe_unused]] PageBufferClientStatus& a, [[maybe_unused]] PageBufferClientStatus& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_uri, b.__fbthrift_field_uri);
  swap(a.__fbthrift_field_state, b.__fbthrift_field_state);
  swap(a.__fbthrift_field_lastUpdate, b.__fbthrift_field_lastUpdate);
  swap(a.__fbthrift_field_rowsReceived, b.__fbthrift_field_rowsReceived);
  swap(a.__fbthrift_field_pagesReceived, b.__fbthrift_field_pagesReceived);
  swap(a.__fbthrift_field_rowsRejected, b.__fbthrift_field_rowsRejected);
  swap(a.__fbthrift_field_pagesRejected, b.__fbthrift_field_pagesRejected);
  swap(a.__fbthrift_field_requestsScheduled, b.__fbthrift_field_requestsScheduled);
  swap(a.__fbthrift_field_requestsCompleted, b.__fbthrift_field_requestsCompleted);
  swap(a.__fbthrift_field_requestsFailed, b.__fbthrift_field_requestsFailed);
  swap(a.__fbthrift_field_httpRequestState, b.__fbthrift_field_httpRequestState);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void PageBufferClientStatus::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t PageBufferClientStatus::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t PageBufferClientStatus::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t PageBufferClientStatus::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void PageBufferClientStatus::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t PageBufferClientStatus::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t PageBufferClientStatus::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t PageBufferClientStatus::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view LocalExchangeBufferInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LocalExchangeBufferInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view LocalExchangeBufferInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<LocalExchangeBufferInfo>::name;
}


LocalExchangeBufferInfo::LocalExchangeBufferInfo(apache::thrift::FragileConstructor, ::std::int64_t bufferedBytes__arg, ::std::int32_t bufferedPages__arg) :
    __fbthrift_field_bufferedBytes(std::move(bufferedBytes__arg)),
    __fbthrift_field_bufferedPages(std::move(bufferedPages__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void LocalExchangeBufferInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_bufferedBytes = ::std::int64_t();
  this->__fbthrift_field_bufferedPages = ::std::int32_t();
  __isset = {};
}

void LocalExchangeBufferInfo::__fbthrift_clear_terse_fields() {
}

bool LocalExchangeBufferInfo::__fbthrift_is_empty() const {
  return false;
}

bool LocalExchangeBufferInfo::operator==([[maybe_unused]] const LocalExchangeBufferInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool LocalExchangeBufferInfo::operator<([[maybe_unused]] const LocalExchangeBufferInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t LocalExchangeBufferInfo::get_bufferedBytes() const {
  return __fbthrift_field_bufferedBytes;
}

::std::int64_t& LocalExchangeBufferInfo::set_bufferedBytes(::std::int64_t bufferedBytes_) {
  bufferedBytes_ref() = bufferedBytes_;
  return __fbthrift_field_bufferedBytes;
}

::std::int32_t LocalExchangeBufferInfo::get_bufferedPages() const {
  return __fbthrift_field_bufferedPages;
}

::std::int32_t& LocalExchangeBufferInfo::set_bufferedPages(::std::int32_t bufferedPages_) {
  bufferedPages_ref() = bufferedPages_;
  return __fbthrift_field_bufferedPages;
}

void swap([[maybe_unused]] LocalExchangeBufferInfo& a, [[maybe_unused]] LocalExchangeBufferInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bufferedBytes, b.__fbthrift_field_bufferedBytes);
  swap(a.__fbthrift_field_bufferedPages, b.__fbthrift_field_bufferedPages);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void LocalExchangeBufferInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LocalExchangeBufferInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LocalExchangeBufferInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LocalExchangeBufferInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LocalExchangeBufferInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LocalExchangeBufferInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LocalExchangeBufferInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LocalExchangeBufferInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TableFinishInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TableFinishInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TableFinishInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TableFinishInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TableFinishInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TableFinishInfo>::name;
}

TableFinishInfo::TableFinishInfo(const TableFinishInfo&) = default;
TableFinishInfo& TableFinishInfo::operator=(const TableFinishInfo&) = default;
TableFinishInfo::TableFinishInfo() :
    __fbthrift_field_jsonLengthLimitExceeded(),
    __fbthrift_field_statisticsWallTime(),
    __fbthrift_field_statisticsCpuTime() {
}


TableFinishInfo::~TableFinishInfo() {}

TableFinishInfo::TableFinishInfo([[maybe_unused]] TableFinishInfo&& other) noexcept :
    __fbthrift_field_serializedConnectorOutputMetadata(std::move(other.__fbthrift_field_serializedConnectorOutputMetadata)),
    __fbthrift_field_jsonLengthLimitExceeded(std::move(other.__fbthrift_field_jsonLengthLimitExceeded)),
    __fbthrift_field_statisticsWallTime(std::move(other.__fbthrift_field_statisticsWallTime)),
    __fbthrift_field_statisticsCpuTime(std::move(other.__fbthrift_field_statisticsCpuTime)),
    __isset(other.__isset) {
}

TableFinishInfo& TableFinishInfo::operator=([[maybe_unused]] TableFinishInfo&& other) noexcept {
    this->__fbthrift_field_serializedConnectorOutputMetadata = std::move(other.__fbthrift_field_serializedConnectorOutputMetadata);
    this->__fbthrift_field_jsonLengthLimitExceeded = std::move(other.__fbthrift_field_jsonLengthLimitExceeded);
    this->__fbthrift_field_statisticsWallTime = std::move(other.__fbthrift_field_statisticsWallTime);
    this->__fbthrift_field_statisticsCpuTime = std::move(other.__fbthrift_field_statisticsCpuTime);
    __isset = other.__isset;
    return *this;
}


TableFinishInfo::TableFinishInfo(apache::thrift::FragileConstructor, ::std::string serializedConnectorOutputMetadata__arg, bool jsonLengthLimitExceeded__arg, double statisticsWallTime__arg, double statisticsCpuTime__arg) :
    __fbthrift_field_serializedConnectorOutputMetadata(std::move(serializedConnectorOutputMetadata__arg)),
    __fbthrift_field_jsonLengthLimitExceeded(std::move(jsonLengthLimitExceeded__arg)),
    __fbthrift_field_statisticsWallTime(std::move(statisticsWallTime__arg)),
    __fbthrift_field_statisticsCpuTime(std::move(statisticsCpuTime__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void TableFinishInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_serializedConnectorOutputMetadata = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_jsonLengthLimitExceeded = bool();
  this->__fbthrift_field_statisticsWallTime = double();
  this->__fbthrift_field_statisticsCpuTime = double();
  __isset = {};
}

void TableFinishInfo::__fbthrift_clear_terse_fields() {
}

bool TableFinishInfo::__fbthrift_is_empty() const {
  return false;
}

bool TableFinishInfo::operator==([[maybe_unused]] const TableFinishInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TableFinishInfo::operator<([[maybe_unused]] const TableFinishInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool TableFinishInfo::get_jsonLengthLimitExceeded() const {
  return __fbthrift_field_jsonLengthLimitExceeded;
}

bool& TableFinishInfo::set_jsonLengthLimitExceeded(bool jsonLengthLimitExceeded_) {
  jsonLengthLimitExceeded_ref() = jsonLengthLimitExceeded_;
  return __fbthrift_field_jsonLengthLimitExceeded;
}

double TableFinishInfo::get_statisticsWallTime() const {
  return __fbthrift_field_statisticsWallTime;
}

double& TableFinishInfo::set_statisticsWallTime(double statisticsWallTime_) {
  statisticsWallTime_ref() = statisticsWallTime_;
  return __fbthrift_field_statisticsWallTime;
}

double TableFinishInfo::get_statisticsCpuTime() const {
  return __fbthrift_field_statisticsCpuTime;
}

double& TableFinishInfo::set_statisticsCpuTime(double statisticsCpuTime_) {
  statisticsCpuTime_ref() = statisticsCpuTime_;
  return __fbthrift_field_statisticsCpuTime;
}

void swap([[maybe_unused]] TableFinishInfo& a, [[maybe_unused]] TableFinishInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_serializedConnectorOutputMetadata, b.__fbthrift_field_serializedConnectorOutputMetadata);
  swap(a.__fbthrift_field_jsonLengthLimitExceeded, b.__fbthrift_field_jsonLengthLimitExceeded);
  swap(a.__fbthrift_field_statisticsWallTime, b.__fbthrift_field_statisticsWallTime);
  swap(a.__fbthrift_field_statisticsCpuTime, b.__fbthrift_field_statisticsCpuTime);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TableFinishInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TableFinishInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TableFinishInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TableFinishInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TableFinishInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TableFinishInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TableFinishInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TableFinishInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::SplitOperatorInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::SplitOperatorInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view SplitOperatorInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SplitOperatorInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SplitOperatorInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SplitOperatorInfo>::name;
}

SplitOperatorInfo::SplitOperatorInfo(const SplitOperatorInfo&) = default;
SplitOperatorInfo& SplitOperatorInfo::operator=(const SplitOperatorInfo&) = default;
SplitOperatorInfo::SplitOperatorInfo() {
}


SplitOperatorInfo::~SplitOperatorInfo() {}

SplitOperatorInfo::SplitOperatorInfo([[maybe_unused]] SplitOperatorInfo&& other) noexcept :
    __fbthrift_field_splitInfoMap(std::move(other.__fbthrift_field_splitInfoMap)),
    __isset(other.__isset) {
}

SplitOperatorInfo& SplitOperatorInfo::operator=([[maybe_unused]] SplitOperatorInfo&& other) noexcept {
    this->__fbthrift_field_splitInfoMap = std::move(other.__fbthrift_field_splitInfoMap);
    __isset = other.__isset;
    return *this;
}


SplitOperatorInfo::SplitOperatorInfo(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> splitInfoMap__arg) :
    __fbthrift_field_splitInfoMap(std::move(splitInfoMap__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void SplitOperatorInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_splitInfoMap.clear();
  __isset = {};
}

void SplitOperatorInfo::__fbthrift_clear_terse_fields() {
}

bool SplitOperatorInfo::__fbthrift_is_empty() const {
  return false;
}

bool SplitOperatorInfo::operator==([[maybe_unused]] const SplitOperatorInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SplitOperatorInfo::operator<([[maybe_unused]] const SplitOperatorInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::map<::std::string, ::std::string>& SplitOperatorInfo::get_splitInfoMap() const& {
  return __fbthrift_field_splitInfoMap;
}

::std::map<::std::string, ::std::string> SplitOperatorInfo::get_splitInfoMap() && {
  return static_cast<::std::map<::std::string, ::std::string>&&>(__fbthrift_field_splitInfoMap);
}

void swap([[maybe_unused]] SplitOperatorInfo& a, [[maybe_unused]] SplitOperatorInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_splitInfoMap, b.__fbthrift_field_splitInfoMap);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void SplitOperatorInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SplitOperatorInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SplitOperatorInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SplitOperatorInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SplitOperatorInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SplitOperatorInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SplitOperatorInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SplitOperatorInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::HashCollisionsInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::HashCollisionsInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view HashCollisionsInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<HashCollisionsInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view HashCollisionsInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<HashCollisionsInfo>::name;
}


HashCollisionsInfo::HashCollisionsInfo(apache::thrift::FragileConstructor, double weightedSumSquaredHashCollisions__arg, double weightedHashCollisions__arg, double weightedExpectedHashCollisions__arg) :
    __fbthrift_field_weightedSumSquaredHashCollisions(std::move(weightedSumSquaredHashCollisions__arg)),
    __fbthrift_field_weightedHashCollisions(std::move(weightedHashCollisions__arg)),
    __fbthrift_field_weightedExpectedHashCollisions(std::move(weightedExpectedHashCollisions__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void HashCollisionsInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_weightedSumSquaredHashCollisions = double();
  this->__fbthrift_field_weightedHashCollisions = double();
  this->__fbthrift_field_weightedExpectedHashCollisions = double();
  __isset = {};
}

void HashCollisionsInfo::__fbthrift_clear_terse_fields() {
}

bool HashCollisionsInfo::__fbthrift_is_empty() const {
  return false;
}

bool HashCollisionsInfo::operator==([[maybe_unused]] const HashCollisionsInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool HashCollisionsInfo::operator<([[maybe_unused]] const HashCollisionsInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


double HashCollisionsInfo::get_weightedSumSquaredHashCollisions() const {
  return __fbthrift_field_weightedSumSquaredHashCollisions;
}

double& HashCollisionsInfo::set_weightedSumSquaredHashCollisions(double weightedSumSquaredHashCollisions_) {
  weightedSumSquaredHashCollisions_ref() = weightedSumSquaredHashCollisions_;
  return __fbthrift_field_weightedSumSquaredHashCollisions;
}

double HashCollisionsInfo::get_weightedHashCollisions() const {
  return __fbthrift_field_weightedHashCollisions;
}

double& HashCollisionsInfo::set_weightedHashCollisions(double weightedHashCollisions_) {
  weightedHashCollisions_ref() = weightedHashCollisions_;
  return __fbthrift_field_weightedHashCollisions;
}

double HashCollisionsInfo::get_weightedExpectedHashCollisions() const {
  return __fbthrift_field_weightedExpectedHashCollisions;
}

double& HashCollisionsInfo::set_weightedExpectedHashCollisions(double weightedExpectedHashCollisions_) {
  weightedExpectedHashCollisions_ref() = weightedExpectedHashCollisions_;
  return __fbthrift_field_weightedExpectedHashCollisions;
}

void swap([[maybe_unused]] HashCollisionsInfo& a, [[maybe_unused]] HashCollisionsInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_weightedSumSquaredHashCollisions, b.__fbthrift_field_weightedSumSquaredHashCollisions);
  swap(a.__fbthrift_field_weightedHashCollisions, b.__fbthrift_field_weightedHashCollisions);
  swap(a.__fbthrift_field_weightedExpectedHashCollisions, b.__fbthrift_field_weightedExpectedHashCollisions);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void HashCollisionsInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t HashCollisionsInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t HashCollisionsInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t HashCollisionsInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void HashCollisionsInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t HashCollisionsInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t HashCollisionsInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t HashCollisionsInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::PartitionedOutputInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::PartitionedOutputInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view PartitionedOutputInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<PartitionedOutputInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view PartitionedOutputInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<PartitionedOutputInfo>::name;
}


PartitionedOutputInfo::PartitionedOutputInfo(apache::thrift::FragileConstructor, ::std::int64_t rowsAdded__arg, ::std::int64_t pagesAdded__arg, ::std::int64_t outputBufferPeakMemoryUsage__arg) :
    __fbthrift_field_rowsAdded(std::move(rowsAdded__arg)),
    __fbthrift_field_pagesAdded(std::move(pagesAdded__arg)),
    __fbthrift_field_outputBufferPeakMemoryUsage(std::move(outputBufferPeakMemoryUsage__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void PartitionedOutputInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_rowsAdded = ::std::int64_t();
  this->__fbthrift_field_pagesAdded = ::std::int64_t();
  this->__fbthrift_field_outputBufferPeakMemoryUsage = ::std::int64_t();
  __isset = {};
}

void PartitionedOutputInfo::__fbthrift_clear_terse_fields() {
}

bool PartitionedOutputInfo::__fbthrift_is_empty() const {
  return false;
}

bool PartitionedOutputInfo::operator==([[maybe_unused]] const PartitionedOutputInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool PartitionedOutputInfo::operator<([[maybe_unused]] const PartitionedOutputInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t PartitionedOutputInfo::get_rowsAdded() const {
  return __fbthrift_field_rowsAdded;
}

::std::int64_t& PartitionedOutputInfo::set_rowsAdded(::std::int64_t rowsAdded_) {
  rowsAdded_ref() = rowsAdded_;
  return __fbthrift_field_rowsAdded;
}

::std::int64_t PartitionedOutputInfo::get_pagesAdded() const {
  return __fbthrift_field_pagesAdded;
}

::std::int64_t& PartitionedOutputInfo::set_pagesAdded(::std::int64_t pagesAdded_) {
  pagesAdded_ref() = pagesAdded_;
  return __fbthrift_field_pagesAdded;
}

::std::int64_t PartitionedOutputInfo::get_outputBufferPeakMemoryUsage() const {
  return __fbthrift_field_outputBufferPeakMemoryUsage;
}

::std::int64_t& PartitionedOutputInfo::set_outputBufferPeakMemoryUsage(::std::int64_t outputBufferPeakMemoryUsage_) {
  outputBufferPeakMemoryUsage_ref() = outputBufferPeakMemoryUsage_;
  return __fbthrift_field_outputBufferPeakMemoryUsage;
}

void swap([[maybe_unused]] PartitionedOutputInfo& a, [[maybe_unused]] PartitionedOutputInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_rowsAdded, b.__fbthrift_field_rowsAdded);
  swap(a.__fbthrift_field_pagesAdded, b.__fbthrift_field_pagesAdded);
  swap(a.__fbthrift_field_outputBufferPeakMemoryUsage, b.__fbthrift_field_outputBufferPeakMemoryUsage);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void PartitionedOutputInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t PartitionedOutputInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t PartitionedOutputInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t PartitionedOutputInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void PartitionedOutputInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t PartitionedOutputInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t PartitionedOutputInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t PartitionedOutputInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::WindowInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::WindowInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view WindowInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<WindowInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view WindowInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<WindowInfo>::name;
}

WindowInfo::WindowInfo(const WindowInfo&) = default;
WindowInfo& WindowInfo::operator=(const WindowInfo&) = default;
WindowInfo::WindowInfo() {
}


WindowInfo::~WindowInfo() {}

WindowInfo::WindowInfo([[maybe_unused]] WindowInfo&& other) noexcept :
    __fbthrift_field_windowInfos(std::move(other.__fbthrift_field_windowInfos)),
    __isset(other.__isset) {
}

WindowInfo& WindowInfo::operator=([[maybe_unused]] WindowInfo&& other) noexcept {
    this->__fbthrift_field_windowInfos = std::move(other.__fbthrift_field_windowInfos);
    __isset = other.__isset;
    return *this;
}


WindowInfo::WindowInfo(apache::thrift::FragileConstructor, ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo> windowInfos__arg) :
    __fbthrift_field_windowInfos(std::move(windowInfos__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void WindowInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_windowInfos.clear();
  __isset = {};
}

void WindowInfo::__fbthrift_clear_terse_fields() {
}

bool WindowInfo::__fbthrift_is_empty() const {
  return false;
}

bool WindowInfo::operator==([[maybe_unused]] const WindowInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool WindowInfo::operator<([[maybe_unused]] const WindowInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>& WindowInfo::get_windowInfos() const& {
  return __fbthrift_field_windowInfos;
}

::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo> WindowInfo::get_windowInfos() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>&&>(__fbthrift_field_windowInfos);
}

void swap([[maybe_unused]] WindowInfo& a, [[maybe_unused]] WindowInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_windowInfos, b.__fbthrift_field_windowInfos);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void WindowInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t WindowInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t WindowInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t WindowInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void WindowInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t WindowInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t WindowInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t WindowInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        WindowInfo,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::DriverWindowInfo>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::DriverWindowInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::DriverWindowInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view DriverWindowInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DriverWindowInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view DriverWindowInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DriverWindowInfo>::name;
}


DriverWindowInfo::DriverWindowInfo(apache::thrift::FragileConstructor, double sumSquaredDifferencesPositionsOfIndex__arg, double sumSquaredDifferencesSizeOfIndex__arg, double sumSquaredDifferencesSizeInPartition__arg, ::std::int64_t totalPartitionsCount__arg, ::std::int64_t totalRowsCount__arg, ::std::int64_t numberOfIndexes__arg) :
    __fbthrift_field_sumSquaredDifferencesPositionsOfIndex(std::move(sumSquaredDifferencesPositionsOfIndex__arg)),
    __fbthrift_field_sumSquaredDifferencesSizeOfIndex(std::move(sumSquaredDifferencesSizeOfIndex__arg)),
    __fbthrift_field_sumSquaredDifferencesSizeInPartition(std::move(sumSquaredDifferencesSizeInPartition__arg)),
    __fbthrift_field_totalPartitionsCount(std::move(totalPartitionsCount__arg)),
    __fbthrift_field_totalRowsCount(std::move(totalRowsCount__arg)),
    __fbthrift_field_numberOfIndexes(std::move(numberOfIndexes__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}


void DriverWindowInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_sumSquaredDifferencesPositionsOfIndex = double();
  this->__fbthrift_field_sumSquaredDifferencesSizeOfIndex = double();
  this->__fbthrift_field_sumSquaredDifferencesSizeInPartition = double();
  this->__fbthrift_field_totalPartitionsCount = ::std::int64_t();
  this->__fbthrift_field_totalRowsCount = ::std::int64_t();
  this->__fbthrift_field_numberOfIndexes = ::std::int64_t();
  __isset = {};
}

void DriverWindowInfo::__fbthrift_clear_terse_fields() {
}

bool DriverWindowInfo::__fbthrift_is_empty() const {
  return false;
}

bool DriverWindowInfo::operator==([[maybe_unused]] const DriverWindowInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool DriverWindowInfo::operator<([[maybe_unused]] const DriverWindowInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


double DriverWindowInfo::get_sumSquaredDifferencesPositionsOfIndex() const {
  return __fbthrift_field_sumSquaredDifferencesPositionsOfIndex;
}

double& DriverWindowInfo::set_sumSquaredDifferencesPositionsOfIndex(double sumSquaredDifferencesPositionsOfIndex_) {
  sumSquaredDifferencesPositionsOfIndex_ref() = sumSquaredDifferencesPositionsOfIndex_;
  return __fbthrift_field_sumSquaredDifferencesPositionsOfIndex;
}

double DriverWindowInfo::get_sumSquaredDifferencesSizeOfIndex() const {
  return __fbthrift_field_sumSquaredDifferencesSizeOfIndex;
}

double& DriverWindowInfo::set_sumSquaredDifferencesSizeOfIndex(double sumSquaredDifferencesSizeOfIndex_) {
  sumSquaredDifferencesSizeOfIndex_ref() = sumSquaredDifferencesSizeOfIndex_;
  return __fbthrift_field_sumSquaredDifferencesSizeOfIndex;
}

double DriverWindowInfo::get_sumSquaredDifferencesSizeInPartition() const {
  return __fbthrift_field_sumSquaredDifferencesSizeInPartition;
}

double& DriverWindowInfo::set_sumSquaredDifferencesSizeInPartition(double sumSquaredDifferencesSizeInPartition_) {
  sumSquaredDifferencesSizeInPartition_ref() = sumSquaredDifferencesSizeInPartition_;
  return __fbthrift_field_sumSquaredDifferencesSizeInPartition;
}

::std::int64_t DriverWindowInfo::get_totalPartitionsCount() const {
  return __fbthrift_field_totalPartitionsCount;
}

::std::int64_t& DriverWindowInfo::set_totalPartitionsCount(::std::int64_t totalPartitionsCount_) {
  totalPartitionsCount_ref() = totalPartitionsCount_;
  return __fbthrift_field_totalPartitionsCount;
}

::std::int64_t DriverWindowInfo::get_totalRowsCount() const {
  return __fbthrift_field_totalRowsCount;
}

::std::int64_t& DriverWindowInfo::set_totalRowsCount(::std::int64_t totalRowsCount_) {
  totalRowsCount_ref() = totalRowsCount_;
  return __fbthrift_field_totalRowsCount;
}

::std::int64_t DriverWindowInfo::get_numberOfIndexes() const {
  return __fbthrift_field_numberOfIndexes;
}

::std::int64_t& DriverWindowInfo::set_numberOfIndexes(::std::int64_t numberOfIndexes_) {
  numberOfIndexes_ref() = numberOfIndexes_;
  return __fbthrift_field_numberOfIndexes;
}

void swap([[maybe_unused]] DriverWindowInfo& a, [[maybe_unused]] DriverWindowInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_sumSquaredDifferencesPositionsOfIndex, b.__fbthrift_field_sumSquaredDifferencesPositionsOfIndex);
  swap(a.__fbthrift_field_sumSquaredDifferencesSizeOfIndex, b.__fbthrift_field_sumSquaredDifferencesSizeOfIndex);
  swap(a.__fbthrift_field_sumSquaredDifferencesSizeInPartition, b.__fbthrift_field_sumSquaredDifferencesSizeInPartition);
  swap(a.__fbthrift_field_totalPartitionsCount, b.__fbthrift_field_totalPartitionsCount);
  swap(a.__fbthrift_field_totalRowsCount, b.__fbthrift_field_totalRowsCount);
  swap(a.__fbthrift_field_numberOfIndexes, b.__fbthrift_field_numberOfIndexes);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void DriverWindowInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DriverWindowInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DriverWindowInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DriverWindowInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DriverWindowInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DriverWindowInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DriverWindowInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DriverWindowInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TableWriterInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TableWriterInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TableWriterInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TableWriterInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TableWriterInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TableWriterInfo>::name;
}


TableWriterInfo::TableWriterInfo(apache::thrift::FragileConstructor, ::std::int64_t pageSinkPeakMemoryUsage__arg, double statisticsWallTime__arg, double statisticsCpuTime__arg, double validationCpuTime__arg) :
    __fbthrift_field_pageSinkPeakMemoryUsage(std::move(pageSinkPeakMemoryUsage__arg)),
    __fbthrift_field_statisticsWallTime(std::move(statisticsWallTime__arg)),
    __fbthrift_field_statisticsCpuTime(std::move(statisticsCpuTime__arg)),
    __fbthrift_field_validationCpuTime(std::move(validationCpuTime__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void TableWriterInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_pageSinkPeakMemoryUsage = ::std::int64_t();
  this->__fbthrift_field_statisticsWallTime = double();
  this->__fbthrift_field_statisticsCpuTime = double();
  this->__fbthrift_field_validationCpuTime = double();
  __isset = {};
}

void TableWriterInfo::__fbthrift_clear_terse_fields() {
}

bool TableWriterInfo::__fbthrift_is_empty() const {
  return false;
}

bool TableWriterInfo::operator==([[maybe_unused]] const TableWriterInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TableWriterInfo::operator<([[maybe_unused]] const TableWriterInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t TableWriterInfo::get_pageSinkPeakMemoryUsage() const {
  return __fbthrift_field_pageSinkPeakMemoryUsage;
}

::std::int64_t& TableWriterInfo::set_pageSinkPeakMemoryUsage(::std::int64_t pageSinkPeakMemoryUsage_) {
  pageSinkPeakMemoryUsage_ref() = pageSinkPeakMemoryUsage_;
  return __fbthrift_field_pageSinkPeakMemoryUsage;
}

double TableWriterInfo::get_statisticsWallTime() const {
  return __fbthrift_field_statisticsWallTime;
}

double& TableWriterInfo::set_statisticsWallTime(double statisticsWallTime_) {
  statisticsWallTime_ref() = statisticsWallTime_;
  return __fbthrift_field_statisticsWallTime;
}

double TableWriterInfo::get_statisticsCpuTime() const {
  return __fbthrift_field_statisticsCpuTime;
}

double& TableWriterInfo::set_statisticsCpuTime(double statisticsCpuTime_) {
  statisticsCpuTime_ref() = statisticsCpuTime_;
  return __fbthrift_field_statisticsCpuTime;
}

double TableWriterInfo::get_validationCpuTime() const {
  return __fbthrift_field_validationCpuTime;
}

double& TableWriterInfo::set_validationCpuTime(double validationCpuTime_) {
  validationCpuTime_ref() = validationCpuTime_;
  return __fbthrift_field_validationCpuTime;
}

void swap([[maybe_unused]] TableWriterInfo& a, [[maybe_unused]] TableWriterInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_pageSinkPeakMemoryUsage, b.__fbthrift_field_pageSinkPeakMemoryUsage);
  swap(a.__fbthrift_field_statisticsWallTime, b.__fbthrift_field_statisticsWallTime);
  swap(a.__fbthrift_field_statisticsCpuTime, b.__fbthrift_field_statisticsCpuTime);
  swap(a.__fbthrift_field_validationCpuTime, b.__fbthrift_field_validationCpuTime);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TableWriterInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TableWriterInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TableWriterInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TableWriterInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TableWriterInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TableWriterInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TableWriterInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TableWriterInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TableWriterMergeInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TableWriterMergeInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TableWriterMergeInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TableWriterMergeInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TableWriterMergeInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TableWriterMergeInfo>::name;
}


TableWriterMergeInfo::TableWriterMergeInfo(apache::thrift::FragileConstructor, double statisticsWallTime__arg, double statisticsCpuTime__arg) :
    __fbthrift_field_statisticsWallTime(std::move(statisticsWallTime__arg)),
    __fbthrift_field_statisticsCpuTime(std::move(statisticsCpuTime__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void TableWriterMergeInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_statisticsWallTime = double();
  this->__fbthrift_field_statisticsCpuTime = double();
  __isset = {};
}

void TableWriterMergeInfo::__fbthrift_clear_terse_fields() {
}

bool TableWriterMergeInfo::__fbthrift_is_empty() const {
  return false;
}

bool TableWriterMergeInfo::operator==([[maybe_unused]] const TableWriterMergeInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TableWriterMergeInfo::operator<([[maybe_unused]] const TableWriterMergeInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


double TableWriterMergeInfo::get_statisticsWallTime() const {
  return __fbthrift_field_statisticsWallTime;
}

double& TableWriterMergeInfo::set_statisticsWallTime(double statisticsWallTime_) {
  statisticsWallTime_ref() = statisticsWallTime_;
  return __fbthrift_field_statisticsWallTime;
}

double TableWriterMergeInfo::get_statisticsCpuTime() const {
  return __fbthrift_field_statisticsCpuTime;
}

double& TableWriterMergeInfo::set_statisticsCpuTime(double statisticsCpuTime_) {
  statisticsCpuTime_ref() = statisticsCpuTime_;
  return __fbthrift_field_statisticsCpuTime;
}

void swap([[maybe_unused]] TableWriterMergeInfo& a, [[maybe_unused]] TableWriterMergeInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_statisticsWallTime, b.__fbthrift_field_statisticsWallTime);
  swap(a.__fbthrift_field_statisticsCpuTime, b.__fbthrift_field_statisticsCpuTime);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TableWriterMergeInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TableWriterMergeInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TableWriterMergeInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TableWriterMergeInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TableWriterMergeInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TableWriterMergeInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TableWriterMergeInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TableWriterMergeInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::DynamicFilterStats>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::DynamicFilterStats>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view DynamicFilterStats::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DynamicFilterStats>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view DynamicFilterStats::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DynamicFilterStats>::name;
}

DynamicFilterStats::DynamicFilterStats(const DynamicFilterStats&) = default;
DynamicFilterStats& DynamicFilterStats::operator=(const DynamicFilterStats&) = default;
DynamicFilterStats::DynamicFilterStats() {
}


DynamicFilterStats::~DynamicFilterStats() {}

DynamicFilterStats::DynamicFilterStats([[maybe_unused]] DynamicFilterStats&& other) noexcept :
    __fbthrift_field_producerNodeIds(std::move(other.__fbthrift_field_producerNodeIds)),
    __isset(other.__isset) {
}

DynamicFilterStats& DynamicFilterStats::operator=([[maybe_unused]] DynamicFilterStats&& other) noexcept {
    this->__fbthrift_field_producerNodeIds = std::move(other.__fbthrift_field_producerNodeIds);
    __isset = other.__isset;
    return *this;
}


DynamicFilterStats::DynamicFilterStats(apache::thrift::FragileConstructor, ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> producerNodeIds__arg) :
    __fbthrift_field_producerNodeIds(std::move(producerNodeIds__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void DynamicFilterStats::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_producerNodeIds.clear();
  __isset = {};
}

void DynamicFilterStats::__fbthrift_clear_terse_fields() {
}

bool DynamicFilterStats::__fbthrift_is_empty() const {
  return false;
}

bool DynamicFilterStats::operator==([[maybe_unused]] const DynamicFilterStats& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool DynamicFilterStats::operator<([[maybe_unused]] const DynamicFilterStats& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>& DynamicFilterStats::get_producerNodeIds() const& {
  return __fbthrift_field_producerNodeIds;
}

::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> DynamicFilterStats::get_producerNodeIds() && {
  return static_cast<::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>&&>(__fbthrift_field_producerNodeIds);
}

void swap([[maybe_unused]] DynamicFilterStats& a, [[maybe_unused]] DynamicFilterStats& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_producerNodeIds, b.__fbthrift_field_producerNodeIds);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void DynamicFilterStats::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DynamicFilterStats::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DynamicFilterStats::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DynamicFilterStats::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DynamicFilterStats::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DynamicFilterStats::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DynamicFilterStats::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DynamicFilterStats::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        DynamicFilterStats,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::DriverStats>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::DriverStats>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view DriverStats::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DriverStats>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view DriverStats::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DriverStats>::name;
}

DriverStats::DriverStats(const DriverStats&) = default;
DriverStats& DriverStats::operator=(const DriverStats&) = default;
DriverStats::DriverStats() :
    __fbthrift_field_createTimeInMillis(),
    __fbthrift_field_startTimeInMillis(),
    __fbthrift_field_endTimeInMillis(),
    __fbthrift_field_queuedTime(),
    __fbthrift_field_elapsedTime(),
    __fbthrift_field_userMemoryReservationInBytes(),
    __fbthrift_field_revocableMemoryReservationInBytes(),
    __fbthrift_field_systemMemoryReservationInBytes(),
    __fbthrift_field_totalScheduledTime(),
    __fbthrift_field_totalCpuTime(),
    __fbthrift_field_totalBlockedTime(),
    __fbthrift_field_fullyBlocked(),
    __fbthrift_field_totalAllocationInBytes(),
    __fbthrift_field_rawInputDataSizeInBytes(),
    __fbthrift_field_rawInputReadTime(),
    __fbthrift_field_rawInputPositions(),
    __fbthrift_field_processedInputDataSizeInBytes(),
    __fbthrift_field_processedInputPositions(),
    __fbthrift_field_outputDataSizeInBytes(),
    __fbthrift_field_outputPositions(),
    __fbthrift_field_physicalWrittenDataSizeInBytes() {
}


DriverStats::~DriverStats() {}

DriverStats::DriverStats([[maybe_unused]] DriverStats&& other) noexcept :
    __fbthrift_field_lifespan(std::move(other.__fbthrift_field_lifespan)),
    __fbthrift_field_createTimeInMillis(std::move(other.__fbthrift_field_createTimeInMillis)),
    __fbthrift_field_startTimeInMillis(std::move(other.__fbthrift_field_startTimeInMillis)),
    __fbthrift_field_endTimeInMillis(std::move(other.__fbthrift_field_endTimeInMillis)),
    __fbthrift_field_queuedTime(std::move(other.__fbthrift_field_queuedTime)),
    __fbthrift_field_elapsedTime(std::move(other.__fbthrift_field_elapsedTime)),
    __fbthrift_field_userMemoryReservationInBytes(std::move(other.__fbthrift_field_userMemoryReservationInBytes)),
    __fbthrift_field_revocableMemoryReservationInBytes(std::move(other.__fbthrift_field_revocableMemoryReservationInBytes)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(other.__fbthrift_field_systemMemoryReservationInBytes)),
    __fbthrift_field_totalScheduledTime(std::move(other.__fbthrift_field_totalScheduledTime)),
    __fbthrift_field_totalCpuTime(std::move(other.__fbthrift_field_totalCpuTime)),
    __fbthrift_field_totalBlockedTime(std::move(other.__fbthrift_field_totalBlockedTime)),
    __fbthrift_field_fullyBlocked(std::move(other.__fbthrift_field_fullyBlocked)),
    __fbthrift_field_blockedReasons(std::move(other.__fbthrift_field_blockedReasons)),
    __fbthrift_field_totalAllocationInBytes(std::move(other.__fbthrift_field_totalAllocationInBytes)),
    __fbthrift_field_rawInputDataSizeInBytes(std::move(other.__fbthrift_field_rawInputDataSizeInBytes)),
    __fbthrift_field_rawInputReadTime(std::move(other.__fbthrift_field_rawInputReadTime)),
    __fbthrift_field_rawInputPositions(std::move(other.__fbthrift_field_rawInputPositions)),
    __fbthrift_field_processedInputDataSizeInBytes(std::move(other.__fbthrift_field_processedInputDataSizeInBytes)),
    __fbthrift_field_processedInputPositions(std::move(other.__fbthrift_field_processedInputPositions)),
    __fbthrift_field_outputDataSizeInBytes(std::move(other.__fbthrift_field_outputDataSizeInBytes)),
    __fbthrift_field_outputPositions(std::move(other.__fbthrift_field_outputPositions)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes)),
    __fbthrift_field_operatorStats(std::move(other.__fbthrift_field_operatorStats)),
    __isset(other.__isset) {
}

DriverStats& DriverStats::operator=([[maybe_unused]] DriverStats&& other) noexcept {
    this->__fbthrift_field_lifespan = std::move(other.__fbthrift_field_lifespan);
    this->__fbthrift_field_createTimeInMillis = std::move(other.__fbthrift_field_createTimeInMillis);
    this->__fbthrift_field_startTimeInMillis = std::move(other.__fbthrift_field_startTimeInMillis);
    this->__fbthrift_field_endTimeInMillis = std::move(other.__fbthrift_field_endTimeInMillis);
    this->__fbthrift_field_queuedTime = std::move(other.__fbthrift_field_queuedTime);
    this->__fbthrift_field_elapsedTime = std::move(other.__fbthrift_field_elapsedTime);
    this->__fbthrift_field_userMemoryReservationInBytes = std::move(other.__fbthrift_field_userMemoryReservationInBytes);
    this->__fbthrift_field_revocableMemoryReservationInBytes = std::move(other.__fbthrift_field_revocableMemoryReservationInBytes);
    this->__fbthrift_field_systemMemoryReservationInBytes = std::move(other.__fbthrift_field_systemMemoryReservationInBytes);
    this->__fbthrift_field_totalScheduledTime = std::move(other.__fbthrift_field_totalScheduledTime);
    this->__fbthrift_field_totalCpuTime = std::move(other.__fbthrift_field_totalCpuTime);
    this->__fbthrift_field_totalBlockedTime = std::move(other.__fbthrift_field_totalBlockedTime);
    this->__fbthrift_field_fullyBlocked = std::move(other.__fbthrift_field_fullyBlocked);
    this->__fbthrift_field_blockedReasons = std::move(other.__fbthrift_field_blockedReasons);
    this->__fbthrift_field_totalAllocationInBytes = std::move(other.__fbthrift_field_totalAllocationInBytes);
    this->__fbthrift_field_rawInputDataSizeInBytes = std::move(other.__fbthrift_field_rawInputDataSizeInBytes);
    this->__fbthrift_field_rawInputReadTime = std::move(other.__fbthrift_field_rawInputReadTime);
    this->__fbthrift_field_rawInputPositions = std::move(other.__fbthrift_field_rawInputPositions);
    this->__fbthrift_field_processedInputDataSizeInBytes = std::move(other.__fbthrift_field_processedInputDataSizeInBytes);
    this->__fbthrift_field_processedInputPositions = std::move(other.__fbthrift_field_processedInputPositions);
    this->__fbthrift_field_outputDataSizeInBytes = std::move(other.__fbthrift_field_outputDataSizeInBytes);
    this->__fbthrift_field_outputPositions = std::move(other.__fbthrift_field_outputPositions);
    this->__fbthrift_field_physicalWrittenDataSizeInBytes = std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes);
    this->__fbthrift_field_operatorStats = std::move(other.__fbthrift_field_operatorStats);
    __isset = other.__isset;
    return *this;
}


DriverStats::DriverStats(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::Lifespan lifespan__arg, ::std::int64_t createTimeInMillis__arg, ::std::int64_t startTimeInMillis__arg, ::std::int64_t endTimeInMillis__arg, double queuedTime__arg, double elapsedTime__arg, ::std::int64_t userMemoryReservationInBytes__arg, ::std::int64_t revocableMemoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, double totalScheduledTime__arg, double totalCpuTime__arg, double totalBlockedTime__arg, bool fullyBlocked__arg, ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> blockedReasons__arg, ::std::int64_t totalAllocationInBytes__arg, ::std::int64_t rawInputDataSizeInBytes__arg, double rawInputReadTime__arg, ::std::int64_t rawInputPositions__arg, ::std::int64_t processedInputDataSizeInBytes__arg, ::std::int64_t processedInputPositions__arg, ::std::int64_t outputDataSizeInBytes__arg, ::std::int64_t outputPositions__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> operatorStats__arg) :
    __fbthrift_field_lifespan(std::move(lifespan__arg)),
    __fbthrift_field_createTimeInMillis(std::move(createTimeInMillis__arg)),
    __fbthrift_field_startTimeInMillis(std::move(startTimeInMillis__arg)),
    __fbthrift_field_endTimeInMillis(std::move(endTimeInMillis__arg)),
    __fbthrift_field_queuedTime(std::move(queuedTime__arg)),
    __fbthrift_field_elapsedTime(std::move(elapsedTime__arg)),
    __fbthrift_field_userMemoryReservationInBytes(std::move(userMemoryReservationInBytes__arg)),
    __fbthrift_field_revocableMemoryReservationInBytes(std::move(revocableMemoryReservationInBytes__arg)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(systemMemoryReservationInBytes__arg)),
    __fbthrift_field_totalScheduledTime(std::move(totalScheduledTime__arg)),
    __fbthrift_field_totalCpuTime(std::move(totalCpuTime__arg)),
    __fbthrift_field_totalBlockedTime(std::move(totalBlockedTime__arg)),
    __fbthrift_field_fullyBlocked(std::move(fullyBlocked__arg)),
    __fbthrift_field_blockedReasons(std::move(blockedReasons__arg)),
    __fbthrift_field_totalAllocationInBytes(std::move(totalAllocationInBytes__arg)),
    __fbthrift_field_rawInputDataSizeInBytes(std::move(rawInputDataSizeInBytes__arg)),
    __fbthrift_field_rawInputReadTime(std::move(rawInputReadTime__arg)),
    __fbthrift_field_rawInputPositions(std::move(rawInputPositions__arg)),
    __fbthrift_field_processedInputDataSizeInBytes(std::move(processedInputDataSizeInBytes__arg)),
    __fbthrift_field_processedInputPositions(std::move(processedInputPositions__arg)),
    __fbthrift_field_outputDataSizeInBytes(std::move(outputDataSizeInBytes__arg)),
    __fbthrift_field_outputPositions(std::move(outputPositions__arg)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(physicalWrittenDataSizeInBytes__arg)),
    __fbthrift_field_operatorStats(std::move(operatorStats__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
}


void DriverStats::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_lifespan);
  this->__fbthrift_field_createTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_startTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_endTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_queuedTime = double();
  this->__fbthrift_field_elapsedTime = double();
  this->__fbthrift_field_userMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_revocableMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_systemMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_totalScheduledTime = double();
  this->__fbthrift_field_totalCpuTime = double();
  this->__fbthrift_field_totalBlockedTime = double();
  this->__fbthrift_field_fullyBlocked = bool();
  this->__fbthrift_field_blockedReasons.clear();
  this->__fbthrift_field_totalAllocationInBytes = ::std::int64_t();
  this->__fbthrift_field_rawInputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_rawInputReadTime = double();
  this->__fbthrift_field_rawInputPositions = ::std::int64_t();
  this->__fbthrift_field_processedInputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_processedInputPositions = ::std::int64_t();
  this->__fbthrift_field_outputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_outputPositions = ::std::int64_t();
  this->__fbthrift_field_physicalWrittenDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_operatorStats.clear();
  __isset = {};
}

void DriverStats::__fbthrift_clear_terse_fields() {
}

bool DriverStats::__fbthrift_is_empty() const {
  return false;
}

bool DriverStats::operator==([[maybe_unused]] const DriverStats& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool DriverStats::operator<([[maybe_unused]] const DriverStats& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::Lifespan& DriverStats::get_lifespan() const& {
  return __fbthrift_field_lifespan;
}

::facebook::presto::protocol::cpp2::Lifespan DriverStats::get_lifespan() && {
  return static_cast<::facebook::presto::protocol::cpp2::Lifespan&&>(__fbthrift_field_lifespan);
}

::std::int64_t DriverStats::get_createTimeInMillis() const {
  return __fbthrift_field_createTimeInMillis;
}

::std::int64_t& DriverStats::set_createTimeInMillis(::std::int64_t createTimeInMillis_) {
  createTimeInMillis_ref() = createTimeInMillis_;
  return __fbthrift_field_createTimeInMillis;
}

::std::int64_t DriverStats::get_startTimeInMillis() const {
  return __fbthrift_field_startTimeInMillis;
}

::std::int64_t& DriverStats::set_startTimeInMillis(::std::int64_t startTimeInMillis_) {
  startTimeInMillis_ref() = startTimeInMillis_;
  return __fbthrift_field_startTimeInMillis;
}

::std::int64_t DriverStats::get_endTimeInMillis() const {
  return __fbthrift_field_endTimeInMillis;
}

::std::int64_t& DriverStats::set_endTimeInMillis(::std::int64_t endTimeInMillis_) {
  endTimeInMillis_ref() = endTimeInMillis_;
  return __fbthrift_field_endTimeInMillis;
}

double DriverStats::get_queuedTime() const {
  return __fbthrift_field_queuedTime;
}

double& DriverStats::set_queuedTime(double queuedTime_) {
  queuedTime_ref() = queuedTime_;
  return __fbthrift_field_queuedTime;
}

double DriverStats::get_elapsedTime() const {
  return __fbthrift_field_elapsedTime;
}

double& DriverStats::set_elapsedTime(double elapsedTime_) {
  elapsedTime_ref() = elapsedTime_;
  return __fbthrift_field_elapsedTime;
}

::std::int64_t DriverStats::get_userMemoryReservationInBytes() const {
  return __fbthrift_field_userMemoryReservationInBytes;
}

::std::int64_t& DriverStats::set_userMemoryReservationInBytes(::std::int64_t userMemoryReservationInBytes_) {
  userMemoryReservationInBytes_ref() = userMemoryReservationInBytes_;
  return __fbthrift_field_userMemoryReservationInBytes;
}

::std::int64_t DriverStats::get_revocableMemoryReservationInBytes() const {
  return __fbthrift_field_revocableMemoryReservationInBytes;
}

::std::int64_t& DriverStats::set_revocableMemoryReservationInBytes(::std::int64_t revocableMemoryReservationInBytes_) {
  revocableMemoryReservationInBytes_ref() = revocableMemoryReservationInBytes_;
  return __fbthrift_field_revocableMemoryReservationInBytes;
}

::std::int64_t DriverStats::get_systemMemoryReservationInBytes() const {
  return __fbthrift_field_systemMemoryReservationInBytes;
}

::std::int64_t& DriverStats::set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_) {
  systemMemoryReservationInBytes_ref() = systemMemoryReservationInBytes_;
  return __fbthrift_field_systemMemoryReservationInBytes;
}

double DriverStats::get_totalScheduledTime() const {
  return __fbthrift_field_totalScheduledTime;
}

double& DriverStats::set_totalScheduledTime(double totalScheduledTime_) {
  totalScheduledTime_ref() = totalScheduledTime_;
  return __fbthrift_field_totalScheduledTime;
}

double DriverStats::get_totalCpuTime() const {
  return __fbthrift_field_totalCpuTime;
}

double& DriverStats::set_totalCpuTime(double totalCpuTime_) {
  totalCpuTime_ref() = totalCpuTime_;
  return __fbthrift_field_totalCpuTime;
}

double DriverStats::get_totalBlockedTime() const {
  return __fbthrift_field_totalBlockedTime;
}

double& DriverStats::set_totalBlockedTime(double totalBlockedTime_) {
  totalBlockedTime_ref() = totalBlockedTime_;
  return __fbthrift_field_totalBlockedTime;
}

bool DriverStats::get_fullyBlocked() const {
  return __fbthrift_field_fullyBlocked;
}

bool& DriverStats::set_fullyBlocked(bool fullyBlocked_) {
  fullyBlocked_ref() = fullyBlocked_;
  return __fbthrift_field_fullyBlocked;
}

const ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>& DriverStats::get_blockedReasons() const& {
  return __fbthrift_field_blockedReasons;
}

::std::set<::facebook::presto::protocol::cpp2::BlockedReason> DriverStats::get_blockedReasons() && {
  return static_cast<::std::set<::facebook::presto::protocol::cpp2::BlockedReason>&&>(__fbthrift_field_blockedReasons);
}

::std::int64_t DriverStats::get_totalAllocationInBytes() const {
  return __fbthrift_field_totalAllocationInBytes;
}

::std::int64_t& DriverStats::set_totalAllocationInBytes(::std::int64_t totalAllocationInBytes_) {
  totalAllocationInBytes_ref() = totalAllocationInBytes_;
  return __fbthrift_field_totalAllocationInBytes;
}

::std::int64_t DriverStats::get_rawInputDataSizeInBytes() const {
  return __fbthrift_field_rawInputDataSizeInBytes;
}

::std::int64_t& DriverStats::set_rawInputDataSizeInBytes(::std::int64_t rawInputDataSizeInBytes_) {
  rawInputDataSizeInBytes_ref() = rawInputDataSizeInBytes_;
  return __fbthrift_field_rawInputDataSizeInBytes;
}

double DriverStats::get_rawInputReadTime() const {
  return __fbthrift_field_rawInputReadTime;
}

double& DriverStats::set_rawInputReadTime(double rawInputReadTime_) {
  rawInputReadTime_ref() = rawInputReadTime_;
  return __fbthrift_field_rawInputReadTime;
}

::std::int64_t DriverStats::get_rawInputPositions() const {
  return __fbthrift_field_rawInputPositions;
}

::std::int64_t& DriverStats::set_rawInputPositions(::std::int64_t rawInputPositions_) {
  rawInputPositions_ref() = rawInputPositions_;
  return __fbthrift_field_rawInputPositions;
}

::std::int64_t DriverStats::get_processedInputDataSizeInBytes() const {
  return __fbthrift_field_processedInputDataSizeInBytes;
}

::std::int64_t& DriverStats::set_processedInputDataSizeInBytes(::std::int64_t processedInputDataSizeInBytes_) {
  processedInputDataSizeInBytes_ref() = processedInputDataSizeInBytes_;
  return __fbthrift_field_processedInputDataSizeInBytes;
}

::std::int64_t DriverStats::get_processedInputPositions() const {
  return __fbthrift_field_processedInputPositions;
}

::std::int64_t& DriverStats::set_processedInputPositions(::std::int64_t processedInputPositions_) {
  processedInputPositions_ref() = processedInputPositions_;
  return __fbthrift_field_processedInputPositions;
}

::std::int64_t DriverStats::get_outputDataSizeInBytes() const {
  return __fbthrift_field_outputDataSizeInBytes;
}

::std::int64_t& DriverStats::set_outputDataSizeInBytes(::std::int64_t outputDataSizeInBytes_) {
  outputDataSizeInBytes_ref() = outputDataSizeInBytes_;
  return __fbthrift_field_outputDataSizeInBytes;
}

::std::int64_t DriverStats::get_outputPositions() const {
  return __fbthrift_field_outputPositions;
}

::std::int64_t& DriverStats::set_outputPositions(::std::int64_t outputPositions_) {
  outputPositions_ref() = outputPositions_;
  return __fbthrift_field_outputPositions;
}

::std::int64_t DriverStats::get_physicalWrittenDataSizeInBytes() const {
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

::std::int64_t& DriverStats::set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_) {
  physicalWrittenDataSizeInBytes_ref() = physicalWrittenDataSizeInBytes_;
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

const ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>& DriverStats::get_operatorStats() const& {
  return __fbthrift_field_operatorStats;
}

::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> DriverStats::get_operatorStats() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>&&>(__fbthrift_field_operatorStats);
}

void swap([[maybe_unused]] DriverStats& a, [[maybe_unused]] DriverStats& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_lifespan, b.__fbthrift_field_lifespan);
  swap(a.__fbthrift_field_createTimeInMillis, b.__fbthrift_field_createTimeInMillis);
  swap(a.__fbthrift_field_startTimeInMillis, b.__fbthrift_field_startTimeInMillis);
  swap(a.__fbthrift_field_endTimeInMillis, b.__fbthrift_field_endTimeInMillis);
  swap(a.__fbthrift_field_queuedTime, b.__fbthrift_field_queuedTime);
  swap(a.__fbthrift_field_elapsedTime, b.__fbthrift_field_elapsedTime);
  swap(a.__fbthrift_field_userMemoryReservationInBytes, b.__fbthrift_field_userMemoryReservationInBytes);
  swap(a.__fbthrift_field_revocableMemoryReservationInBytes, b.__fbthrift_field_revocableMemoryReservationInBytes);
  swap(a.__fbthrift_field_systemMemoryReservationInBytes, b.__fbthrift_field_systemMemoryReservationInBytes);
  swap(a.__fbthrift_field_totalScheduledTime, b.__fbthrift_field_totalScheduledTime);
  swap(a.__fbthrift_field_totalCpuTime, b.__fbthrift_field_totalCpuTime);
  swap(a.__fbthrift_field_totalBlockedTime, b.__fbthrift_field_totalBlockedTime);
  swap(a.__fbthrift_field_fullyBlocked, b.__fbthrift_field_fullyBlocked);
  swap(a.__fbthrift_field_blockedReasons, b.__fbthrift_field_blockedReasons);
  swap(a.__fbthrift_field_totalAllocationInBytes, b.__fbthrift_field_totalAllocationInBytes);
  swap(a.__fbthrift_field_rawInputDataSizeInBytes, b.__fbthrift_field_rawInputDataSizeInBytes);
  swap(a.__fbthrift_field_rawInputReadTime, b.__fbthrift_field_rawInputReadTime);
  swap(a.__fbthrift_field_rawInputPositions, b.__fbthrift_field_rawInputPositions);
  swap(a.__fbthrift_field_processedInputDataSizeInBytes, b.__fbthrift_field_processedInputDataSizeInBytes);
  swap(a.__fbthrift_field_processedInputPositions, b.__fbthrift_field_processedInputPositions);
  swap(a.__fbthrift_field_outputDataSizeInBytes, b.__fbthrift_field_outputDataSizeInBytes);
  swap(a.__fbthrift_field_outputPositions, b.__fbthrift_field_outputPositions);
  swap(a.__fbthrift_field_physicalWrittenDataSizeInBytes, b.__fbthrift_field_physicalWrittenDataSizeInBytes);
  swap(a.__fbthrift_field_operatorStats, b.__fbthrift_field_operatorStats);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void DriverStats::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DriverStats::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DriverStats::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DriverStats::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DriverStats::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DriverStats::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DriverStats::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DriverStats::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        DriverStats,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::Lifespan>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        DriverStats,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TransactionId>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TransactionId>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TransactionId::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TransactionId>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TransactionId::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TransactionId>::name;
}

TransactionId::TransactionId(const TransactionId&) = default;
TransactionId& TransactionId::operator=(const TransactionId&) = default;
TransactionId::TransactionId() {
}


TransactionId::~TransactionId() {}

TransactionId::TransactionId([[maybe_unused]] TransactionId&& other) noexcept :
    __fbthrift_field_uuid(std::move(other.__fbthrift_field_uuid)),
    __isset(other.__isset) {
}

TransactionId& TransactionId::operator=([[maybe_unused]] TransactionId&& other) noexcept {
    this->__fbthrift_field_uuid = std::move(other.__fbthrift_field_uuid);
    __isset = other.__isset;
    return *this;
}


TransactionId::TransactionId(apache::thrift::FragileConstructor, ::std::string uuid__arg) :
    __fbthrift_field_uuid(std::move(uuid__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void TransactionId::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_uuid = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void TransactionId::__fbthrift_clear_terse_fields() {
}

bool TransactionId::__fbthrift_is_empty() const {
  return false;
}

bool TransactionId::operator==([[maybe_unused]] const TransactionId& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TransactionId::operator<([[maybe_unused]] const TransactionId& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] TransactionId& a, [[maybe_unused]] TransactionId& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_uuid, b.__fbthrift_field_uuid);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TransactionId::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TransactionId::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TransactionId::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TransactionId::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TransactionId::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TransactionId::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TransactionId::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TransactionId::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TimeZoneKey>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TimeZoneKey>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TimeZoneKey::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TimeZoneKey>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TimeZoneKey::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TimeZoneKey>::name;
}

TimeZoneKey::TimeZoneKey(const TimeZoneKey&) = default;
TimeZoneKey& TimeZoneKey::operator=(const TimeZoneKey&) = default;
TimeZoneKey::TimeZoneKey() :
    __fbthrift_field_key() {
}


TimeZoneKey::~TimeZoneKey() {}

TimeZoneKey::TimeZoneKey([[maybe_unused]] TimeZoneKey&& other) noexcept :
    __fbthrift_field_id(std::move(other.__fbthrift_field_id)),
    __fbthrift_field_key(std::move(other.__fbthrift_field_key)),
    __isset(other.__isset) {
}

TimeZoneKey& TimeZoneKey::operator=([[maybe_unused]] TimeZoneKey&& other) noexcept {
    this->__fbthrift_field_id = std::move(other.__fbthrift_field_id);
    this->__fbthrift_field_key = std::move(other.__fbthrift_field_key);
    __isset = other.__isset;
    return *this;
}


TimeZoneKey::TimeZoneKey(apache::thrift::FragileConstructor, ::std::string id__arg, ::std::int16_t key__arg) :
    __fbthrift_field_id(std::move(id__arg)),
    __fbthrift_field_key(std::move(key__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void TimeZoneKey::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_id = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_key = ::std::int16_t();
  __isset = {};
}

void TimeZoneKey::__fbthrift_clear_terse_fields() {
}

bool TimeZoneKey::__fbthrift_is_empty() const {
  return false;
}

bool TimeZoneKey::operator==([[maybe_unused]] const TimeZoneKey& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TimeZoneKey::operator<([[maybe_unused]] const TimeZoneKey& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int16_t TimeZoneKey::get_key() const {
  return __fbthrift_field_key;
}

::std::int16_t& TimeZoneKey::set_key(::std::int16_t key_) {
  key_ref() = key_;
  return __fbthrift_field_key;
}

void swap([[maybe_unused]] TimeZoneKey& a, [[maybe_unused]] TimeZoneKey& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_id, b.__fbthrift_field_id);
  swap(a.__fbthrift_field_key, b.__fbthrift_field_key);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TimeZoneKey::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TimeZoneKey::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TimeZoneKey::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TimeZoneKey::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TimeZoneKey::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TimeZoneKey::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TimeZoneKey::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TimeZoneKey::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::ResourceEstimates>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::ResourceEstimates>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view ResourceEstimates::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ResourceEstimates>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ResourceEstimates::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ResourceEstimates>::name;
}


ResourceEstimates::ResourceEstimates(apache::thrift::FragileConstructor, double executionTime__arg, double cpuTime__arg, double peakMemory__arg, double peakTaskMemory__arg) :
    __fbthrift_field_executionTime(std::move(executionTime__arg)),
    __fbthrift_field_cpuTime(std::move(cpuTime__arg)),
    __fbthrift_field_peakMemory(std::move(peakMemory__arg)),
    __fbthrift_field_peakTaskMemory(std::move(peakTaskMemory__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void ResourceEstimates::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_executionTime = double();
  this->__fbthrift_field_cpuTime = double();
  this->__fbthrift_field_peakMemory = double();
  this->__fbthrift_field_peakTaskMemory = double();
  __isset = {};
}

void ResourceEstimates::__fbthrift_clear_terse_fields() {
}

bool ResourceEstimates::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 !(this->__isset.get(1)) &&
 !(this->__isset.get(2)) &&
 !(this->__isset.get(3));
}

bool ResourceEstimates::operator==([[maybe_unused]] const ResourceEstimates& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ResourceEstimates::operator<([[maybe_unused]] const ResourceEstimates& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const double* ResourceEstimates::get_executionTime() const& {
  return executionTime_ref().has_value() ? std::addressof(__fbthrift_field_executionTime) : nullptr;
}

double* ResourceEstimates::get_executionTime() & {
  return executionTime_ref().has_value() ? std::addressof(__fbthrift_field_executionTime) : nullptr;
}

double& ResourceEstimates::set_executionTime(double executionTime_) {
  executionTime_ref() = executionTime_;
  return __fbthrift_field_executionTime;
}

const double* ResourceEstimates::get_cpuTime() const& {
  return cpuTime_ref().has_value() ? std::addressof(__fbthrift_field_cpuTime) : nullptr;
}

double* ResourceEstimates::get_cpuTime() & {
  return cpuTime_ref().has_value() ? std::addressof(__fbthrift_field_cpuTime) : nullptr;
}

double& ResourceEstimates::set_cpuTime(double cpuTime_) {
  cpuTime_ref() = cpuTime_;
  return __fbthrift_field_cpuTime;
}

const double* ResourceEstimates::get_peakMemory() const& {
  return peakMemory_ref().has_value() ? std::addressof(__fbthrift_field_peakMemory) : nullptr;
}

double* ResourceEstimates::get_peakMemory() & {
  return peakMemory_ref().has_value() ? std::addressof(__fbthrift_field_peakMemory) : nullptr;
}

double& ResourceEstimates::set_peakMemory(double peakMemory_) {
  peakMemory_ref() = peakMemory_;
  return __fbthrift_field_peakMemory;
}

const double* ResourceEstimates::get_peakTaskMemory() const& {
  return peakTaskMemory_ref().has_value() ? std::addressof(__fbthrift_field_peakTaskMemory) : nullptr;
}

double* ResourceEstimates::get_peakTaskMemory() & {
  return peakTaskMemory_ref().has_value() ? std::addressof(__fbthrift_field_peakTaskMemory) : nullptr;
}

double& ResourceEstimates::set_peakTaskMemory(double peakTaskMemory_) {
  peakTaskMemory_ref() = peakTaskMemory_;
  return __fbthrift_field_peakTaskMemory;
}

void swap([[maybe_unused]] ResourceEstimates& a, [[maybe_unused]] ResourceEstimates& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_executionTime, b.__fbthrift_field_executionTime);
  swap(a.__fbthrift_field_cpuTime, b.__fbthrift_field_cpuTime);
  swap(a.__fbthrift_field_peakMemory, b.__fbthrift_field_peakMemory);
  swap(a.__fbthrift_field_peakTaskMemory, b.__fbthrift_field_peakTaskMemory);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void ResourceEstimates::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ResourceEstimates::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ResourceEstimates::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ResourceEstimates::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ResourceEstimates::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ResourceEstimates::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ResourceEstimates::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ResourceEstimates::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::ConnectorId>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::ConnectorId>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view ConnectorId::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ConnectorId>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ConnectorId::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ConnectorId>::name;
}

ConnectorId::ConnectorId(const ConnectorId&) = default;
ConnectorId& ConnectorId::operator=(const ConnectorId&) = default;
ConnectorId::ConnectorId() {
}


ConnectorId::~ConnectorId() {}

ConnectorId::ConnectorId([[maybe_unused]] ConnectorId&& other) noexcept :
    __fbthrift_field_catalogName(std::move(other.__fbthrift_field_catalogName)),
    __isset(other.__isset) {
}

ConnectorId& ConnectorId::operator=([[maybe_unused]] ConnectorId&& other) noexcept {
    this->__fbthrift_field_catalogName = std::move(other.__fbthrift_field_catalogName);
    __isset = other.__isset;
    return *this;
}


ConnectorId::ConnectorId(apache::thrift::FragileConstructor, ::std::string catalogName__arg) :
    __fbthrift_field_catalogName(std::move(catalogName__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void ConnectorId::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_catalogName = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void ConnectorId::__fbthrift_clear_terse_fields() {
}

bool ConnectorId::__fbthrift_is_empty() const {
  return false;
}

bool ConnectorId::operator==([[maybe_unused]] const ConnectorId& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ConnectorId::operator<([[maybe_unused]] const ConnectorId& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] ConnectorId& a, [[maybe_unused]] ConnectorId& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_catalogName, b.__fbthrift_field_catalogName);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void ConnectorId::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ConnectorId::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ConnectorId::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ConnectorId::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ConnectorId::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ConnectorId::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ConnectorId::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ConnectorId::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::SqlFunctionId>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::SqlFunctionId>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view SqlFunctionId::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SqlFunctionId>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SqlFunctionId::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SqlFunctionId>::name;
}

SqlFunctionId::SqlFunctionId(const SqlFunctionId&) = default;
SqlFunctionId& SqlFunctionId::operator=(const SqlFunctionId&) = default;
SqlFunctionId::SqlFunctionId() {
}


SqlFunctionId::~SqlFunctionId() {}

SqlFunctionId::SqlFunctionId([[maybe_unused]] SqlFunctionId&& other) noexcept :
    __fbthrift_field_signature(std::move(other.__fbthrift_field_signature)),
    __isset(other.__isset) {
}

SqlFunctionId& SqlFunctionId::operator=([[maybe_unused]] SqlFunctionId&& other) noexcept {
    this->__fbthrift_field_signature = std::move(other.__fbthrift_field_signature);
    __isset = other.__isset;
    return *this;
}


SqlFunctionId::SqlFunctionId(apache::thrift::FragileConstructor, ::std::string signature__arg) :
    __fbthrift_field_signature(std::move(signature__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void SqlFunctionId::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_signature = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void SqlFunctionId::__fbthrift_clear_terse_fields() {
}

bool SqlFunctionId::__fbthrift_is_empty() const {
  return false;
}

bool SqlFunctionId::operator==([[maybe_unused]] const SqlFunctionId& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SqlFunctionId::operator<([[maybe_unused]] const SqlFunctionId& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] SqlFunctionId& a, [[maybe_unused]] SqlFunctionId& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_signature, b.__fbthrift_field_signature);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void SqlFunctionId::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SqlFunctionId::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SqlFunctionId::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SqlFunctionId::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SqlFunctionId::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SqlFunctionId::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SqlFunctionId::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SqlFunctionId::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TypeSignature>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TypeSignature>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TypeSignature::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TypeSignature>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TypeSignature::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TypeSignature>::name;
}

TypeSignature::TypeSignature(const TypeSignature&) = default;
TypeSignature& TypeSignature::operator=(const TypeSignature&) = default;
TypeSignature::TypeSignature() :
    __fbthrift_field_ignore() {
}


TypeSignature::~TypeSignature() {}

TypeSignature::TypeSignature([[maybe_unused]] TypeSignature&& other) noexcept :
    __fbthrift_field_signature(std::move(other.__fbthrift_field_signature)),
    __fbthrift_field_ignore(std::move(other.__fbthrift_field_ignore)),
    __isset(other.__isset) {
}

TypeSignature& TypeSignature::operator=([[maybe_unused]] TypeSignature&& other) noexcept {
    this->__fbthrift_field_signature = std::move(other.__fbthrift_field_signature);
    this->__fbthrift_field_ignore = std::move(other.__fbthrift_field_ignore);
    __isset = other.__isset;
    return *this;
}


TypeSignature::TypeSignature(apache::thrift::FragileConstructor, ::std::string signature__arg, bool ignore__arg) :
    __fbthrift_field_signature(std::move(signature__arg)),
    __fbthrift_field_ignore(std::move(ignore__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void TypeSignature::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_signature = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_ignore = bool();
  __isset = {};
}

void TypeSignature::__fbthrift_clear_terse_fields() {
}

bool TypeSignature::__fbthrift_is_empty() const {
  return false;
}

bool TypeSignature::operator==([[maybe_unused]] const TypeSignature& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TypeSignature::operator<([[maybe_unused]] const TypeSignature& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool TypeSignature::get_ignore() const {
  return __fbthrift_field_ignore;
}

bool& TypeSignature::set_ignore(bool ignore_) {
  ignore_ref() = ignore_;
  return __fbthrift_field_ignore;
}

void swap([[maybe_unused]] TypeSignature& a, [[maybe_unused]] TypeSignature& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_signature, b.__fbthrift_field_signature);
  swap(a.__fbthrift_field_ignore, b.__fbthrift_field_ignore);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TypeSignature::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TypeSignature::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TypeSignature::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TypeSignature::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TypeSignature::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TypeSignature::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TypeSignature::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TypeSignature::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::Language>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::Language>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view Language::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Language>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Language::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Language>::name;
}

Language::Language(const Language&) = default;
Language& Language::operator=(const Language&) = default;
Language::Language() {
}


Language::~Language() {}

Language::Language([[maybe_unused]] Language&& other) noexcept :
    __fbthrift_field_language(std::move(other.__fbthrift_field_language)),
    __isset(other.__isset) {
}

Language& Language::operator=([[maybe_unused]] Language&& other) noexcept {
    this->__fbthrift_field_language = std::move(other.__fbthrift_field_language);
    __isset = other.__isset;
    return *this;
}


Language::Language(apache::thrift::FragileConstructor, ::std::string language__arg) :
    __fbthrift_field_language(std::move(language__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void Language::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_language = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void Language::__fbthrift_clear_terse_fields() {
}

bool Language::__fbthrift_is_empty() const {
  return false;
}

bool Language::operator==([[maybe_unused]] const Language& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Language::operator<([[maybe_unused]] const Language& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Language& a, [[maybe_unused]] Language& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_language, b.__fbthrift_field_language);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void Language::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Language::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Language::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Language::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Language::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Language::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Language::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Language::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::QualifiedObjectName>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::QualifiedObjectName>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view QualifiedObjectName::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<QualifiedObjectName>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view QualifiedObjectName::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<QualifiedObjectName>::name;
}

QualifiedObjectName::QualifiedObjectName(const QualifiedObjectName&) = default;
QualifiedObjectName& QualifiedObjectName::operator=(const QualifiedObjectName&) = default;
QualifiedObjectName::QualifiedObjectName() {
}


QualifiedObjectName::~QualifiedObjectName() {}

QualifiedObjectName::QualifiedObjectName([[maybe_unused]] QualifiedObjectName&& other) noexcept :
    __fbthrift_field_catalogName(std::move(other.__fbthrift_field_catalogName)),
    __fbthrift_field_schemaName(std::move(other.__fbthrift_field_schemaName)),
    __fbthrift_field_objectName(std::move(other.__fbthrift_field_objectName)),
    __isset(other.__isset) {
}

QualifiedObjectName& QualifiedObjectName::operator=([[maybe_unused]] QualifiedObjectName&& other) noexcept {
    this->__fbthrift_field_catalogName = std::move(other.__fbthrift_field_catalogName);
    this->__fbthrift_field_schemaName = std::move(other.__fbthrift_field_schemaName);
    this->__fbthrift_field_objectName = std::move(other.__fbthrift_field_objectName);
    __isset = other.__isset;
    return *this;
}


QualifiedObjectName::QualifiedObjectName(apache::thrift::FragileConstructor, ::std::string catalogName__arg, ::std::string schemaName__arg, ::std::string objectName__arg) :
    __fbthrift_field_catalogName(std::move(catalogName__arg)),
    __fbthrift_field_schemaName(std::move(schemaName__arg)),
    __fbthrift_field_objectName(std::move(objectName__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void QualifiedObjectName::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_catalogName = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_schemaName = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_objectName = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void QualifiedObjectName::__fbthrift_clear_terse_fields() {
}

bool QualifiedObjectName::__fbthrift_is_empty() const {
  return false;
}

bool QualifiedObjectName::operator==([[maybe_unused]] const QualifiedObjectName& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool QualifiedObjectName::operator<([[maybe_unused]] const QualifiedObjectName& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] QualifiedObjectName& a, [[maybe_unused]] QualifiedObjectName& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_catalogName, b.__fbthrift_field_catalogName);
  swap(a.__fbthrift_field_schemaName, b.__fbthrift_field_schemaName);
  swap(a.__fbthrift_field_objectName, b.__fbthrift_field_objectName);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void QualifiedObjectName::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t QualifiedObjectName::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t QualifiedObjectName::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t QualifiedObjectName::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void QualifiedObjectName::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t QualifiedObjectName::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t QualifiedObjectName::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t QualifiedObjectName::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TypeVariableConstraint>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TypeVariableConstraint>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TypeVariableConstraint::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TypeVariableConstraint>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TypeVariableConstraint::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TypeVariableConstraint>::name;
}

TypeVariableConstraint::TypeVariableConstraint(const TypeVariableConstraint&) = default;
TypeVariableConstraint& TypeVariableConstraint::operator=(const TypeVariableConstraint&) = default;
TypeVariableConstraint::TypeVariableConstraint() :
    __fbthrift_field_comparableRequired(),
    __fbthrift_field_orderableRequired(),
    __fbthrift_field_nonDecimalNumericRequired() {
}


TypeVariableConstraint::~TypeVariableConstraint() {}

TypeVariableConstraint::TypeVariableConstraint([[maybe_unused]] TypeVariableConstraint&& other) noexcept :
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __fbthrift_field_comparableRequired(std::move(other.__fbthrift_field_comparableRequired)),
    __fbthrift_field_orderableRequired(std::move(other.__fbthrift_field_orderableRequired)),
    __fbthrift_field_variadicBound(std::move(other.__fbthrift_field_variadicBound)),
    __fbthrift_field_nonDecimalNumericRequired(std::move(other.__fbthrift_field_nonDecimalNumericRequired)),
    __isset(other.__isset) {
}

TypeVariableConstraint& TypeVariableConstraint::operator=([[maybe_unused]] TypeVariableConstraint&& other) noexcept {
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    this->__fbthrift_field_comparableRequired = std::move(other.__fbthrift_field_comparableRequired);
    this->__fbthrift_field_orderableRequired = std::move(other.__fbthrift_field_orderableRequired);
    this->__fbthrift_field_variadicBound = std::move(other.__fbthrift_field_variadicBound);
    this->__fbthrift_field_nonDecimalNumericRequired = std::move(other.__fbthrift_field_nonDecimalNumericRequired);
    __isset = other.__isset;
    return *this;
}


TypeVariableConstraint::TypeVariableConstraint(apache::thrift::FragileConstructor, ::std::string name__arg, bool comparableRequired__arg, bool orderableRequired__arg, ::std::string variadicBound__arg, bool nonDecimalNumericRequired__arg) :
    __fbthrift_field_name(std::move(name__arg)),
    __fbthrift_field_comparableRequired(std::move(comparableRequired__arg)),
    __fbthrift_field_orderableRequired(std::move(orderableRequired__arg)),
    __fbthrift_field_variadicBound(std::move(variadicBound__arg)),
    __fbthrift_field_nonDecimalNumericRequired(std::move(nonDecimalNumericRequired__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
}


void TypeVariableConstraint::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_name = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_comparableRequired = bool();
  this->__fbthrift_field_orderableRequired = bool();
  this->__fbthrift_field_variadicBound = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_nonDecimalNumericRequired = bool();
  __isset = {};
}

void TypeVariableConstraint::__fbthrift_clear_terse_fields() {
}

bool TypeVariableConstraint::__fbthrift_is_empty() const {
  return false;
}

bool TypeVariableConstraint::operator==([[maybe_unused]] const TypeVariableConstraint& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TypeVariableConstraint::operator<([[maybe_unused]] const TypeVariableConstraint& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool TypeVariableConstraint::get_comparableRequired() const {
  return __fbthrift_field_comparableRequired;
}

bool& TypeVariableConstraint::set_comparableRequired(bool comparableRequired_) {
  comparableRequired_ref() = comparableRequired_;
  return __fbthrift_field_comparableRequired;
}

bool TypeVariableConstraint::get_orderableRequired() const {
  return __fbthrift_field_orderableRequired;
}

bool& TypeVariableConstraint::set_orderableRequired(bool orderableRequired_) {
  orderableRequired_ref() = orderableRequired_;
  return __fbthrift_field_orderableRequired;
}

bool TypeVariableConstraint::get_nonDecimalNumericRequired() const {
  return __fbthrift_field_nonDecimalNumericRequired;
}

bool& TypeVariableConstraint::set_nonDecimalNumericRequired(bool nonDecimalNumericRequired_) {
  nonDecimalNumericRequired_ref() = nonDecimalNumericRequired_;
  return __fbthrift_field_nonDecimalNumericRequired;
}

void swap([[maybe_unused]] TypeVariableConstraint& a, [[maybe_unused]] TypeVariableConstraint& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__fbthrift_field_comparableRequired, b.__fbthrift_field_comparableRequired);
  swap(a.__fbthrift_field_orderableRequired, b.__fbthrift_field_orderableRequired);
  swap(a.__fbthrift_field_variadicBound, b.__fbthrift_field_variadicBound);
  swap(a.__fbthrift_field_nonDecimalNumericRequired, b.__fbthrift_field_nonDecimalNumericRequired);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TypeVariableConstraint::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TypeVariableConstraint::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TypeVariableConstraint::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TypeVariableConstraint::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TypeVariableConstraint::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TypeVariableConstraint::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TypeVariableConstraint::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TypeVariableConstraint::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::LongVariableConstraint>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::LongVariableConstraint>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view LongVariableConstraint::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LongVariableConstraint>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view LongVariableConstraint::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<LongVariableConstraint>::name;
}

LongVariableConstraint::LongVariableConstraint(const LongVariableConstraint&) = default;
LongVariableConstraint& LongVariableConstraint::operator=(const LongVariableConstraint&) = default;
LongVariableConstraint::LongVariableConstraint() {
}


LongVariableConstraint::~LongVariableConstraint() {}

LongVariableConstraint::LongVariableConstraint([[maybe_unused]] LongVariableConstraint&& other) noexcept :
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __fbthrift_field_expression(std::move(other.__fbthrift_field_expression)),
    __isset(other.__isset) {
}

LongVariableConstraint& LongVariableConstraint::operator=([[maybe_unused]] LongVariableConstraint&& other) noexcept {
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    this->__fbthrift_field_expression = std::move(other.__fbthrift_field_expression);
    __isset = other.__isset;
    return *this;
}


LongVariableConstraint::LongVariableConstraint(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::string expression__arg) :
    __fbthrift_field_name(std::move(name__arg)),
    __fbthrift_field_expression(std::move(expression__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void LongVariableConstraint::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_name = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_expression = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void LongVariableConstraint::__fbthrift_clear_terse_fields() {
}

bool LongVariableConstraint::__fbthrift_is_empty() const {
  return false;
}

bool LongVariableConstraint::operator==([[maybe_unused]] const LongVariableConstraint& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool LongVariableConstraint::operator<([[maybe_unused]] const LongVariableConstraint& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] LongVariableConstraint& a, [[maybe_unused]] LongVariableConstraint& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__fbthrift_field_expression, b.__fbthrift_field_expression);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void LongVariableConstraint::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LongVariableConstraint::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LongVariableConstraint::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LongVariableConstraint::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LongVariableConstraint::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LongVariableConstraint::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LongVariableConstraint::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LongVariableConstraint::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TaskSource>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TaskSource>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TaskSource::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TaskSource>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TaskSource::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TaskSource>::name;
}

TaskSource::TaskSource(const TaskSource&) = default;
TaskSource& TaskSource::operator=(const TaskSource&) = default;
TaskSource::TaskSource() :
    __fbthrift_field_noMoreSplits() {
}


TaskSource::~TaskSource() {}

TaskSource::TaskSource([[maybe_unused]] TaskSource&& other) noexcept :
    __fbthrift_field_planNodeId(std::move(other.__fbthrift_field_planNodeId)),
    __fbthrift_field_splits(std::move(other.__fbthrift_field_splits)),
    __fbthrift_field_noMoreSplitsForLifespan(std::move(other.__fbthrift_field_noMoreSplitsForLifespan)),
    __fbthrift_field_noMoreSplits(std::move(other.__fbthrift_field_noMoreSplits)),
    __isset(other.__isset) {
}

TaskSource& TaskSource::operator=([[maybe_unused]] TaskSource&& other) noexcept {
    this->__fbthrift_field_planNodeId = std::move(other.__fbthrift_field_planNodeId);
    this->__fbthrift_field_splits = std::move(other.__fbthrift_field_splits);
    this->__fbthrift_field_noMoreSplitsForLifespan = std::move(other.__fbthrift_field_noMoreSplitsForLifespan);
    this->__fbthrift_field_noMoreSplits = std::move(other.__fbthrift_field_noMoreSplits);
    __isset = other.__isset;
    return *this;
}


TaskSource::TaskSource(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::PlanNodeId planNodeId__arg, ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit> splits__arg, ::std::set<::facebook::presto::protocol::cpp2::Lifespan> noMoreSplitsForLifespan__arg, bool noMoreSplits__arg) :
    __fbthrift_field_planNodeId(std::move(planNodeId__arg)),
    __fbthrift_field_splits(std::move(splits__arg)),
    __fbthrift_field_noMoreSplitsForLifespan(std::move(noMoreSplitsForLifespan__arg)),
    __fbthrift_field_noMoreSplits(std::move(noMoreSplits__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void TaskSource::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_planNodeId);
  this->__fbthrift_field_splits.clear();
  this->__fbthrift_field_noMoreSplitsForLifespan.clear();
  this->__fbthrift_field_noMoreSplits = bool();
  __isset = {};
}

void TaskSource::__fbthrift_clear_terse_fields() {
}

bool TaskSource::__fbthrift_is_empty() const {
  return false;
}

bool TaskSource::operator==([[maybe_unused]] const TaskSource& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TaskSource::operator<([[maybe_unused]] const TaskSource& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::PlanNodeId& TaskSource::get_planNodeId() const& {
  return __fbthrift_field_planNodeId;
}

::facebook::presto::protocol::cpp2::PlanNodeId TaskSource::get_planNodeId() && {
  return static_cast<::facebook::presto::protocol::cpp2::PlanNodeId&&>(__fbthrift_field_planNodeId);
}

const ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>& TaskSource::get_splits() const& {
  return __fbthrift_field_splits;
}

::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit> TaskSource::get_splits() && {
  return static_cast<::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>&&>(__fbthrift_field_splits);
}

const ::std::set<::facebook::presto::protocol::cpp2::Lifespan>& TaskSource::get_noMoreSplitsForLifespan() const& {
  return __fbthrift_field_noMoreSplitsForLifespan;
}

::std::set<::facebook::presto::protocol::cpp2::Lifespan> TaskSource::get_noMoreSplitsForLifespan() && {
  return static_cast<::std::set<::facebook::presto::protocol::cpp2::Lifespan>&&>(__fbthrift_field_noMoreSplitsForLifespan);
}

bool TaskSource::get_noMoreSplits() const {
  return __fbthrift_field_noMoreSplits;
}

bool& TaskSource::set_noMoreSplits(bool noMoreSplits_) {
  noMoreSplits_ref() = noMoreSplits_;
  return __fbthrift_field_noMoreSplits;
}

void swap([[maybe_unused]] TaskSource& a, [[maybe_unused]] TaskSource& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_planNodeId, b.__fbthrift_field_planNodeId);
  swap(a.__fbthrift_field_splits, b.__fbthrift_field_splits);
  swap(a.__fbthrift_field_noMoreSplitsForLifespan, b.__fbthrift_field_noMoreSplitsForLifespan);
  swap(a.__fbthrift_field_noMoreSplits, b.__fbthrift_field_noMoreSplits);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TaskSource::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TaskSource::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TaskSource::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TaskSource::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TaskSource::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TaskSource::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TaskSource::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TaskSource::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskSource,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::PlanNodeId>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskSource,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::facebook::presto::protocol::cpp2::ScheduledSplit>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskSource,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::ScheduledSplit>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::ScheduledSplit>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view ScheduledSplit::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ScheduledSplit>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ScheduledSplit::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ScheduledSplit>::name;
}

ScheduledSplit::ScheduledSplit(const ScheduledSplit&) = default;
ScheduledSplit& ScheduledSplit::operator=(const ScheduledSplit&) = default;
ScheduledSplit::ScheduledSplit([[maybe_unused]] ScheduledSplit&& other) noexcept :
    __fbthrift_field_sequenceId(std::move(other.__fbthrift_field_sequenceId)),
    __fbthrift_field_planNodeId(std::move(other.__fbthrift_field_planNodeId)),
    __fbthrift_field_split(std::move(other.__fbthrift_field_split)),
    __isset(other.__isset) {
}

ScheduledSplit& ScheduledSplit::operator=([[maybe_unused]] ScheduledSplit&& other) noexcept {
    this->__fbthrift_field_sequenceId = std::move(other.__fbthrift_field_sequenceId);
    this->__fbthrift_field_planNodeId = std::move(other.__fbthrift_field_planNodeId);
    this->__fbthrift_field_split = std::move(other.__fbthrift_field_split);
    __isset = other.__isset;
    return *this;
}


ScheduledSplit::ScheduledSplit(apache::thrift::FragileConstructor, ::std::int64_t sequenceId__arg, ::facebook::presto::protocol::cpp2::PlanNodeId planNodeId__arg, ::facebook::presto::protocol::cpp2::SplitWrapper split__arg) :
    __fbthrift_field_sequenceId(std::move(sequenceId__arg)),
    __fbthrift_field_planNodeId(std::move(planNodeId__arg)),
    __fbthrift_field_split(std::move(split__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void ScheduledSplit::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_sequenceId = ::std::int64_t();
  ::apache::thrift::clear(this->__fbthrift_field_planNodeId);
  ::apache::thrift::clear(this->__fbthrift_field_split);
  __isset = {};
}

void ScheduledSplit::__fbthrift_clear_terse_fields() {
}

bool ScheduledSplit::__fbthrift_is_empty() const {
  return false;
}

bool ScheduledSplit::operator==([[maybe_unused]] const ScheduledSplit& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ScheduledSplit::operator<([[maybe_unused]] const ScheduledSplit& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t ScheduledSplit::get_sequenceId() const {
  return __fbthrift_field_sequenceId;
}

::std::int64_t& ScheduledSplit::set_sequenceId(::std::int64_t sequenceId_) {
  sequenceId_ref() = sequenceId_;
  return __fbthrift_field_sequenceId;
}

const ::facebook::presto::protocol::cpp2::PlanNodeId& ScheduledSplit::get_planNodeId() const& {
  return __fbthrift_field_planNodeId;
}

::facebook::presto::protocol::cpp2::PlanNodeId ScheduledSplit::get_planNodeId() && {
  return static_cast<::facebook::presto::protocol::cpp2::PlanNodeId&&>(__fbthrift_field_planNodeId);
}

const ::facebook::presto::protocol::cpp2::SplitWrapper& ScheduledSplit::get_split() const& {
  return __fbthrift_field_split;
}

::facebook::presto::protocol::cpp2::SplitWrapper ScheduledSplit::get_split() && {
  return static_cast<::facebook::presto::protocol::cpp2::SplitWrapper&&>(__fbthrift_field_split);
}

void swap([[maybe_unused]] ScheduledSplit& a, [[maybe_unused]] ScheduledSplit& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_sequenceId, b.__fbthrift_field_sequenceId);
  swap(a.__fbthrift_field_planNodeId, b.__fbthrift_field_planNodeId);
  swap(a.__fbthrift_field_split, b.__fbthrift_field_split);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void ScheduledSplit::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ScheduledSplit::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ScheduledSplit::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ScheduledSplit::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ScheduledSplit::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ScheduledSplit::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ScheduledSplit::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ScheduledSplit::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ScheduledSplit,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::PlanNodeId>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ScheduledSplit,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::SplitWrapper>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TaskStatus>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TaskStatus>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TaskStatus::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TaskStatus>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TaskStatus::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TaskStatus>::name;
}

TaskStatus::TaskStatus(const TaskStatus&) = default;
TaskStatus& TaskStatus::operator=(const TaskStatus&) = default;
TaskStatus::TaskStatus() :
    __fbthrift_field_taskInstanceIdLeastSignificantBits(),
    __fbthrift_field_taskInstanceIdMostSignificantBits(),
    __fbthrift_field_version(),
    __fbthrift_field_state(),
    __fbthrift_field_queuedPartitionedDrivers(),
    __fbthrift_field_runningPartitionedDrivers(),
    __fbthrift_field_outputBufferUtilization(),
    __fbthrift_field_outputBufferOverutilized(),
    __fbthrift_field_physicalWrittenDataSizeInBytes(),
    __fbthrift_field_memoryReservationInBytes(),
    __fbthrift_field_systemMemoryReservationInBytes(),
    __fbthrift_field_fullGcCount(),
    __fbthrift_field_fullGcTimeInMillis(),
    __fbthrift_field_peakNodeTotalMemoryReservationInBytes(),
    __fbthrift_field_totalCpuTimeInNanos(),
    __fbthrift_field_taskAgeInMillis(),
    __fbthrift_field_queuedPartitionedSplitsWeight(),
    __fbthrift_field_runningPartitionedSplitsWeight() {
}


TaskStatus::~TaskStatus() {}

TaskStatus::TaskStatus([[maybe_unused]] TaskStatus&& other) noexcept :
    __fbthrift_field_taskInstanceIdLeastSignificantBits(std::move(other.__fbthrift_field_taskInstanceIdLeastSignificantBits)),
    __fbthrift_field_taskInstanceIdMostSignificantBits(std::move(other.__fbthrift_field_taskInstanceIdMostSignificantBits)),
    __fbthrift_field_version(std::move(other.__fbthrift_field_version)),
    __fbthrift_field_state(std::move(other.__fbthrift_field_state)),
    __fbthrift_field_selfUri(std::move(other.__fbthrift_field_selfUri)),
    __fbthrift_field_completedDriverGroups(std::move(other.__fbthrift_field_completedDriverGroups)),
    __fbthrift_field_failures(std::move(other.__fbthrift_field_failures)),
    __fbthrift_field_queuedPartitionedDrivers(std::move(other.__fbthrift_field_queuedPartitionedDrivers)),
    __fbthrift_field_runningPartitionedDrivers(std::move(other.__fbthrift_field_runningPartitionedDrivers)),
    __fbthrift_field_outputBufferUtilization(std::move(other.__fbthrift_field_outputBufferUtilization)),
    __fbthrift_field_outputBufferOverutilized(std::move(other.__fbthrift_field_outputBufferOverutilized)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes)),
    __fbthrift_field_memoryReservationInBytes(std::move(other.__fbthrift_field_memoryReservationInBytes)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(other.__fbthrift_field_systemMemoryReservationInBytes)),
    __fbthrift_field_fullGcCount(std::move(other.__fbthrift_field_fullGcCount)),
    __fbthrift_field_fullGcTimeInMillis(std::move(other.__fbthrift_field_fullGcTimeInMillis)),
    __fbthrift_field_peakNodeTotalMemoryReservationInBytes(std::move(other.__fbthrift_field_peakNodeTotalMemoryReservationInBytes)),
    __fbthrift_field_totalCpuTimeInNanos(std::move(other.__fbthrift_field_totalCpuTimeInNanos)),
    __fbthrift_field_taskAgeInMillis(std::move(other.__fbthrift_field_taskAgeInMillis)),
    __fbthrift_field_queuedPartitionedSplitsWeight(std::move(other.__fbthrift_field_queuedPartitionedSplitsWeight)),
    __fbthrift_field_runningPartitionedSplitsWeight(std::move(other.__fbthrift_field_runningPartitionedSplitsWeight)),
    __isset(other.__isset) {
}

TaskStatus& TaskStatus::operator=([[maybe_unused]] TaskStatus&& other) noexcept {
    this->__fbthrift_field_taskInstanceIdLeastSignificantBits = std::move(other.__fbthrift_field_taskInstanceIdLeastSignificantBits);
    this->__fbthrift_field_taskInstanceIdMostSignificantBits = std::move(other.__fbthrift_field_taskInstanceIdMostSignificantBits);
    this->__fbthrift_field_version = std::move(other.__fbthrift_field_version);
    this->__fbthrift_field_state = std::move(other.__fbthrift_field_state);
    this->__fbthrift_field_selfUri = std::move(other.__fbthrift_field_selfUri);
    this->__fbthrift_field_completedDriverGroups = std::move(other.__fbthrift_field_completedDriverGroups);
    this->__fbthrift_field_failures = std::move(other.__fbthrift_field_failures);
    this->__fbthrift_field_queuedPartitionedDrivers = std::move(other.__fbthrift_field_queuedPartitionedDrivers);
    this->__fbthrift_field_runningPartitionedDrivers = std::move(other.__fbthrift_field_runningPartitionedDrivers);
    this->__fbthrift_field_outputBufferUtilization = std::move(other.__fbthrift_field_outputBufferUtilization);
    this->__fbthrift_field_outputBufferOverutilized = std::move(other.__fbthrift_field_outputBufferOverutilized);
    this->__fbthrift_field_physicalWrittenDataSizeInBytes = std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes);
    this->__fbthrift_field_memoryReservationInBytes = std::move(other.__fbthrift_field_memoryReservationInBytes);
    this->__fbthrift_field_systemMemoryReservationInBytes = std::move(other.__fbthrift_field_systemMemoryReservationInBytes);
    this->__fbthrift_field_fullGcCount = std::move(other.__fbthrift_field_fullGcCount);
    this->__fbthrift_field_fullGcTimeInMillis = std::move(other.__fbthrift_field_fullGcTimeInMillis);
    this->__fbthrift_field_peakNodeTotalMemoryReservationInBytes = std::move(other.__fbthrift_field_peakNodeTotalMemoryReservationInBytes);
    this->__fbthrift_field_totalCpuTimeInNanos = std::move(other.__fbthrift_field_totalCpuTimeInNanos);
    this->__fbthrift_field_taskAgeInMillis = std::move(other.__fbthrift_field_taskAgeInMillis);
    this->__fbthrift_field_queuedPartitionedSplitsWeight = std::move(other.__fbthrift_field_queuedPartitionedSplitsWeight);
    this->__fbthrift_field_runningPartitionedSplitsWeight = std::move(other.__fbthrift_field_runningPartitionedSplitsWeight);
    __isset = other.__isset;
    return *this;
}


TaskStatus::TaskStatus(apache::thrift::FragileConstructor, ::std::int64_t taskInstanceIdLeastSignificantBits__arg, ::std::int64_t taskInstanceIdMostSignificantBits__arg, ::std::int64_t version__arg, ::facebook::presto::protocol::cpp2::TaskState state__arg, ::std::string selfUri__arg, ::std::set<::facebook::presto::protocol::cpp2::Lifespan> completedDriverGroups__arg, ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> failures__arg, ::std::int32_t queuedPartitionedDrivers__arg, ::std::int32_t runningPartitionedDrivers__arg, double outputBufferUtilization__arg, bool outputBufferOverutilized__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, ::std::int64_t memoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, ::std::int64_t fullGcCount__arg, ::std::int64_t fullGcTimeInMillis__arg, ::std::int64_t peakNodeTotalMemoryReservationInBytes__arg, ::std::int64_t totalCpuTimeInNanos__arg, ::std::int64_t taskAgeInMillis__arg, ::std::int64_t queuedPartitionedSplitsWeight__arg, ::std::int64_t runningPartitionedSplitsWeight__arg) :
    __fbthrift_field_taskInstanceIdLeastSignificantBits(std::move(taskInstanceIdLeastSignificantBits__arg)),
    __fbthrift_field_taskInstanceIdMostSignificantBits(std::move(taskInstanceIdMostSignificantBits__arg)),
    __fbthrift_field_version(std::move(version__arg)),
    __fbthrift_field_state(std::move(state__arg)),
    __fbthrift_field_selfUri(std::move(selfUri__arg)),
    __fbthrift_field_completedDriverGroups(std::move(completedDriverGroups__arg)),
    __fbthrift_field_failures(std::move(failures__arg)),
    __fbthrift_field_queuedPartitionedDrivers(std::move(queuedPartitionedDrivers__arg)),
    __fbthrift_field_runningPartitionedDrivers(std::move(runningPartitionedDrivers__arg)),
    __fbthrift_field_outputBufferUtilization(std::move(outputBufferUtilization__arg)),
    __fbthrift_field_outputBufferOverutilized(std::move(outputBufferOverutilized__arg)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(physicalWrittenDataSizeInBytes__arg)),
    __fbthrift_field_memoryReservationInBytes(std::move(memoryReservationInBytes__arg)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(systemMemoryReservationInBytes__arg)),
    __fbthrift_field_fullGcCount(std::move(fullGcCount__arg)),
    __fbthrift_field_fullGcTimeInMillis(std::move(fullGcTimeInMillis__arg)),
    __fbthrift_field_peakNodeTotalMemoryReservationInBytes(std::move(peakNodeTotalMemoryReservationInBytes__arg)),
    __fbthrift_field_totalCpuTimeInNanos(std::move(totalCpuTimeInNanos__arg)),
    __fbthrift_field_taskAgeInMillis(std::move(taskAgeInMillis__arg)),
    __fbthrift_field_queuedPartitionedSplitsWeight(std::move(queuedPartitionedSplitsWeight__arg)),
    __fbthrift_field_runningPartitionedSplitsWeight(std::move(runningPartitionedSplitsWeight__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
}


void TaskStatus::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_taskInstanceIdLeastSignificantBits = ::std::int64_t();
  this->__fbthrift_field_taskInstanceIdMostSignificantBits = ::std::int64_t();
  this->__fbthrift_field_version = ::std::int64_t();
  this->__fbthrift_field_state = ::facebook::presto::protocol::cpp2::TaskState();
  this->__fbthrift_field_selfUri = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_completedDriverGroups.clear();
  this->__fbthrift_field_failures.clear();
  this->__fbthrift_field_queuedPartitionedDrivers = ::std::int32_t();
  this->__fbthrift_field_runningPartitionedDrivers = ::std::int32_t();
  this->__fbthrift_field_outputBufferUtilization = double();
  this->__fbthrift_field_outputBufferOverutilized = bool();
  this->__fbthrift_field_physicalWrittenDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_memoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_systemMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_fullGcCount = ::std::int64_t();
  this->__fbthrift_field_fullGcTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_peakNodeTotalMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_totalCpuTimeInNanos = ::std::int64_t();
  this->__fbthrift_field_taskAgeInMillis = ::std::int64_t();
  this->__fbthrift_field_queuedPartitionedSplitsWeight = ::std::int64_t();
  this->__fbthrift_field_runningPartitionedSplitsWeight = ::std::int64_t();
  __isset = {};
}

void TaskStatus::__fbthrift_clear_terse_fields() {
}

bool TaskStatus::__fbthrift_is_empty() const {
  return false;
}

bool TaskStatus::operator==([[maybe_unused]] const TaskStatus& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TaskStatus::operator<([[maybe_unused]] const TaskStatus& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t TaskStatus::get_taskInstanceIdLeastSignificantBits() const {
  return __fbthrift_field_taskInstanceIdLeastSignificantBits;
}

::std::int64_t& TaskStatus::set_taskInstanceIdLeastSignificantBits(::std::int64_t taskInstanceIdLeastSignificantBits_) {
  taskInstanceIdLeastSignificantBits_ref() = taskInstanceIdLeastSignificantBits_;
  return __fbthrift_field_taskInstanceIdLeastSignificantBits;
}

::std::int64_t TaskStatus::get_taskInstanceIdMostSignificantBits() const {
  return __fbthrift_field_taskInstanceIdMostSignificantBits;
}

::std::int64_t& TaskStatus::set_taskInstanceIdMostSignificantBits(::std::int64_t taskInstanceIdMostSignificantBits_) {
  taskInstanceIdMostSignificantBits_ref() = taskInstanceIdMostSignificantBits_;
  return __fbthrift_field_taskInstanceIdMostSignificantBits;
}

::std::int64_t TaskStatus::get_version() const {
  return __fbthrift_field_version;
}

::std::int64_t& TaskStatus::set_version(::std::int64_t version_) {
  version_ref() = version_;
  return __fbthrift_field_version;
}

::facebook::presto::protocol::cpp2::TaskState TaskStatus::get_state() const {
  return __fbthrift_field_state;
}

::facebook::presto::protocol::cpp2::TaskState& TaskStatus::set_state(::facebook::presto::protocol::cpp2::TaskState state_) {
  state_ref() = state_;
  return __fbthrift_field_state;
}

const ::std::set<::facebook::presto::protocol::cpp2::Lifespan>& TaskStatus::get_completedDriverGroups() const& {
  return __fbthrift_field_completedDriverGroups;
}

::std::set<::facebook::presto::protocol::cpp2::Lifespan> TaskStatus::get_completedDriverGroups() && {
  return static_cast<::std::set<::facebook::presto::protocol::cpp2::Lifespan>&&>(__fbthrift_field_completedDriverGroups);
}

const ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>& TaskStatus::get_failures() const& {
  return __fbthrift_field_failures;
}

::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> TaskStatus::get_failures() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>&&>(__fbthrift_field_failures);
}

::std::int32_t TaskStatus::get_queuedPartitionedDrivers() const {
  return __fbthrift_field_queuedPartitionedDrivers;
}

::std::int32_t& TaskStatus::set_queuedPartitionedDrivers(::std::int32_t queuedPartitionedDrivers_) {
  queuedPartitionedDrivers_ref() = queuedPartitionedDrivers_;
  return __fbthrift_field_queuedPartitionedDrivers;
}

::std::int32_t TaskStatus::get_runningPartitionedDrivers() const {
  return __fbthrift_field_runningPartitionedDrivers;
}

::std::int32_t& TaskStatus::set_runningPartitionedDrivers(::std::int32_t runningPartitionedDrivers_) {
  runningPartitionedDrivers_ref() = runningPartitionedDrivers_;
  return __fbthrift_field_runningPartitionedDrivers;
}

double TaskStatus::get_outputBufferUtilization() const {
  return __fbthrift_field_outputBufferUtilization;
}

double& TaskStatus::set_outputBufferUtilization(double outputBufferUtilization_) {
  outputBufferUtilization_ref() = outputBufferUtilization_;
  return __fbthrift_field_outputBufferUtilization;
}

bool TaskStatus::get_outputBufferOverutilized() const {
  return __fbthrift_field_outputBufferOverutilized;
}

bool& TaskStatus::set_outputBufferOverutilized(bool outputBufferOverutilized_) {
  outputBufferOverutilized_ref() = outputBufferOverutilized_;
  return __fbthrift_field_outputBufferOverutilized;
}

::std::int64_t TaskStatus::get_physicalWrittenDataSizeInBytes() const {
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

::std::int64_t& TaskStatus::set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_) {
  physicalWrittenDataSizeInBytes_ref() = physicalWrittenDataSizeInBytes_;
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

::std::int64_t TaskStatus::get_memoryReservationInBytes() const {
  return __fbthrift_field_memoryReservationInBytes;
}

::std::int64_t& TaskStatus::set_memoryReservationInBytes(::std::int64_t memoryReservationInBytes_) {
  memoryReservationInBytes_ref() = memoryReservationInBytes_;
  return __fbthrift_field_memoryReservationInBytes;
}

::std::int64_t TaskStatus::get_systemMemoryReservationInBytes() const {
  return __fbthrift_field_systemMemoryReservationInBytes;
}

::std::int64_t& TaskStatus::set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_) {
  systemMemoryReservationInBytes_ref() = systemMemoryReservationInBytes_;
  return __fbthrift_field_systemMemoryReservationInBytes;
}

::std::int64_t TaskStatus::get_fullGcCount() const {
  return __fbthrift_field_fullGcCount;
}

::std::int64_t& TaskStatus::set_fullGcCount(::std::int64_t fullGcCount_) {
  fullGcCount_ref() = fullGcCount_;
  return __fbthrift_field_fullGcCount;
}

::std::int64_t TaskStatus::get_fullGcTimeInMillis() const {
  return __fbthrift_field_fullGcTimeInMillis;
}

::std::int64_t& TaskStatus::set_fullGcTimeInMillis(::std::int64_t fullGcTimeInMillis_) {
  fullGcTimeInMillis_ref() = fullGcTimeInMillis_;
  return __fbthrift_field_fullGcTimeInMillis;
}

::std::int64_t TaskStatus::get_peakNodeTotalMemoryReservationInBytes() const {
  return __fbthrift_field_peakNodeTotalMemoryReservationInBytes;
}

::std::int64_t& TaskStatus::set_peakNodeTotalMemoryReservationInBytes(::std::int64_t peakNodeTotalMemoryReservationInBytes_) {
  peakNodeTotalMemoryReservationInBytes_ref() = peakNodeTotalMemoryReservationInBytes_;
  return __fbthrift_field_peakNodeTotalMemoryReservationInBytes;
}

::std::int64_t TaskStatus::get_totalCpuTimeInNanos() const {
  return __fbthrift_field_totalCpuTimeInNanos;
}

::std::int64_t& TaskStatus::set_totalCpuTimeInNanos(::std::int64_t totalCpuTimeInNanos_) {
  totalCpuTimeInNanos_ref() = totalCpuTimeInNanos_;
  return __fbthrift_field_totalCpuTimeInNanos;
}

::std::int64_t TaskStatus::get_taskAgeInMillis() const {
  return __fbthrift_field_taskAgeInMillis;
}

::std::int64_t& TaskStatus::set_taskAgeInMillis(::std::int64_t taskAgeInMillis_) {
  taskAgeInMillis_ref() = taskAgeInMillis_;
  return __fbthrift_field_taskAgeInMillis;
}

::std::int64_t TaskStatus::get_queuedPartitionedSplitsWeight() const {
  return __fbthrift_field_queuedPartitionedSplitsWeight;
}

::std::int64_t& TaskStatus::set_queuedPartitionedSplitsWeight(::std::int64_t queuedPartitionedSplitsWeight_) {
  queuedPartitionedSplitsWeight_ref() = queuedPartitionedSplitsWeight_;
  return __fbthrift_field_queuedPartitionedSplitsWeight;
}

::std::int64_t TaskStatus::get_runningPartitionedSplitsWeight() const {
  return __fbthrift_field_runningPartitionedSplitsWeight;
}

::std::int64_t& TaskStatus::set_runningPartitionedSplitsWeight(::std::int64_t runningPartitionedSplitsWeight_) {
  runningPartitionedSplitsWeight_ref() = runningPartitionedSplitsWeight_;
  return __fbthrift_field_runningPartitionedSplitsWeight;
}

void swap([[maybe_unused]] TaskStatus& a, [[maybe_unused]] TaskStatus& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_taskInstanceIdLeastSignificantBits, b.__fbthrift_field_taskInstanceIdLeastSignificantBits);
  swap(a.__fbthrift_field_taskInstanceIdMostSignificantBits, b.__fbthrift_field_taskInstanceIdMostSignificantBits);
  swap(a.__fbthrift_field_version, b.__fbthrift_field_version);
  swap(a.__fbthrift_field_state, b.__fbthrift_field_state);
  swap(a.__fbthrift_field_selfUri, b.__fbthrift_field_selfUri);
  swap(a.__fbthrift_field_completedDriverGroups, b.__fbthrift_field_completedDriverGroups);
  swap(a.__fbthrift_field_failures, b.__fbthrift_field_failures);
  swap(a.__fbthrift_field_queuedPartitionedDrivers, b.__fbthrift_field_queuedPartitionedDrivers);
  swap(a.__fbthrift_field_runningPartitionedDrivers, b.__fbthrift_field_runningPartitionedDrivers);
  swap(a.__fbthrift_field_outputBufferUtilization, b.__fbthrift_field_outputBufferUtilization);
  swap(a.__fbthrift_field_outputBufferOverutilized, b.__fbthrift_field_outputBufferOverutilized);
  swap(a.__fbthrift_field_physicalWrittenDataSizeInBytes, b.__fbthrift_field_physicalWrittenDataSizeInBytes);
  swap(a.__fbthrift_field_memoryReservationInBytes, b.__fbthrift_field_memoryReservationInBytes);
  swap(a.__fbthrift_field_systemMemoryReservationInBytes, b.__fbthrift_field_systemMemoryReservationInBytes);
  swap(a.__fbthrift_field_fullGcCount, b.__fbthrift_field_fullGcCount);
  swap(a.__fbthrift_field_fullGcTimeInMillis, b.__fbthrift_field_fullGcTimeInMillis);
  swap(a.__fbthrift_field_peakNodeTotalMemoryReservationInBytes, b.__fbthrift_field_peakNodeTotalMemoryReservationInBytes);
  swap(a.__fbthrift_field_totalCpuTimeInNanos, b.__fbthrift_field_totalCpuTimeInNanos);
  swap(a.__fbthrift_field_taskAgeInMillis, b.__fbthrift_field_taskAgeInMillis);
  swap(a.__fbthrift_field_queuedPartitionedSplitsWeight, b.__fbthrift_field_queuedPartitionedSplitsWeight);
  swap(a.__fbthrift_field_runningPartitionedSplitsWeight, b.__fbthrift_field_runningPartitionedSplitsWeight);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TaskStatus::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TaskStatus::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TaskStatus::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TaskStatus::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TaskStatus::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TaskStatus::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TaskStatus::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TaskStatus::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskStatus,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::facebook::presto::protocol::cpp2::Lifespan>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskStatus,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::ErrorCode>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::ErrorCode>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view ErrorCode::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ErrorCode>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ErrorCode::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ErrorCode>::name;
}

ErrorCode::ErrorCode(const ErrorCode&) = default;
ErrorCode& ErrorCode::operator=(const ErrorCode&) = default;
ErrorCode::ErrorCode() :
    __fbthrift_field_code(),
    __fbthrift_field_type(),
    __fbthrift_field_retriable() {
}


ErrorCode::~ErrorCode() {}

ErrorCode::ErrorCode([[maybe_unused]] ErrorCode&& other) noexcept :
    __fbthrift_field_code(std::move(other.__fbthrift_field_code)),
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __fbthrift_field_type(std::move(other.__fbthrift_field_type)),
    __fbthrift_field_retriable(std::move(other.__fbthrift_field_retriable)),
    __isset(other.__isset) {
}

ErrorCode& ErrorCode::operator=([[maybe_unused]] ErrorCode&& other) noexcept {
    this->__fbthrift_field_code = std::move(other.__fbthrift_field_code);
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    this->__fbthrift_field_type = std::move(other.__fbthrift_field_type);
    this->__fbthrift_field_retriable = std::move(other.__fbthrift_field_retriable);
    __isset = other.__isset;
    return *this;
}


ErrorCode::ErrorCode(apache::thrift::FragileConstructor, ::std::int32_t code__arg, ::std::string name__arg, ::facebook::presto::protocol::cpp2::ErrorType type__arg, bool retriable__arg) :
    __fbthrift_field_code(std::move(code__arg)),
    __fbthrift_field_name(std::move(name__arg)),
    __fbthrift_field_type(std::move(type__arg)),
    __fbthrift_field_retriable(std::move(retriable__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void ErrorCode::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_code = ::std::int32_t();
  this->__fbthrift_field_name = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_type = ::facebook::presto::protocol::cpp2::ErrorType();
  this->__fbthrift_field_retriable = bool();
  __isset = {};
}

void ErrorCode::__fbthrift_clear_terse_fields() {
}

bool ErrorCode::__fbthrift_is_empty() const {
  return false;
}

bool ErrorCode::operator==([[maybe_unused]] const ErrorCode& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ErrorCode::operator<([[maybe_unused]] const ErrorCode& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t ErrorCode::get_code() const {
  return __fbthrift_field_code;
}

::std::int32_t& ErrorCode::set_code(::std::int32_t code_) {
  code_ref() = code_;
  return __fbthrift_field_code;
}

::facebook::presto::protocol::cpp2::ErrorType ErrorCode::get_type() const {
  return __fbthrift_field_type;
}

::facebook::presto::protocol::cpp2::ErrorType& ErrorCode::set_type(::facebook::presto::protocol::cpp2::ErrorType type_) {
  type_ref() = type_;
  return __fbthrift_field_type;
}

bool ErrorCode::get_retriable() const {
  return __fbthrift_field_retriable;
}

bool& ErrorCode::set_retriable(bool retriable_) {
  retriable_ref() = retriable_;
  return __fbthrift_field_retriable;
}

void swap([[maybe_unused]] ErrorCode& a, [[maybe_unused]] ErrorCode& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_code, b.__fbthrift_field_code);
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__fbthrift_field_type, b.__fbthrift_field_type);
  swap(a.__fbthrift_field_retriable, b.__fbthrift_field_retriable);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void ErrorCode::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ErrorCode::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ErrorCode::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ErrorCode::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ErrorCode::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ErrorCode::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ErrorCode::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ErrorCode::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::StageExecutionId>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::StageExecutionId>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view StageExecutionId::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StageExecutionId>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StageExecutionId::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StageExecutionId>::name;
}

StageExecutionId::StageExecutionId(const StageExecutionId&) = default;
StageExecutionId& StageExecutionId::operator=(const StageExecutionId&) = default;
StageExecutionId::StageExecutionId([[maybe_unused]] StageExecutionId&& other) noexcept :
    __fbthrift_field_stageId(std::move(other.__fbthrift_field_stageId)),
    __fbthrift_field_id(std::move(other.__fbthrift_field_id)),
    __isset(other.__isset) {
}

StageExecutionId& StageExecutionId::operator=([[maybe_unused]] StageExecutionId&& other) noexcept {
    this->__fbthrift_field_stageId = std::move(other.__fbthrift_field_stageId);
    this->__fbthrift_field_id = std::move(other.__fbthrift_field_id);
    __isset = other.__isset;
    return *this;
}


StageExecutionId::StageExecutionId(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::StageId stageId__arg, ::std::int32_t id__arg) :
    __fbthrift_field_stageId(std::move(stageId__arg)),
    __fbthrift_field_id(std::move(id__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void StageExecutionId::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_stageId);
  this->__fbthrift_field_id = ::std::int32_t();
  __isset = {};
}

void StageExecutionId::__fbthrift_clear_terse_fields() {
}

bool StageExecutionId::__fbthrift_is_empty() const {
  return false;
}

bool StageExecutionId::operator==([[maybe_unused]] const StageExecutionId& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StageExecutionId::operator<([[maybe_unused]] const StageExecutionId& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::StageId& StageExecutionId::get_stageId() const& {
  return __fbthrift_field_stageId;
}

::facebook::presto::protocol::cpp2::StageId StageExecutionId::get_stageId() && {
  return static_cast<::facebook::presto::protocol::cpp2::StageId&&>(__fbthrift_field_stageId);
}

::std::int32_t StageExecutionId::get_id() const {
  return __fbthrift_field_id;
}

::std::int32_t& StageExecutionId::set_id(::std::int32_t id_) {
  id_ref() = id_;
  return __fbthrift_field_id;
}

void swap([[maybe_unused]] StageExecutionId& a, [[maybe_unused]] StageExecutionId& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_stageId, b.__fbthrift_field_stageId);
  swap(a.__fbthrift_field_id, b.__fbthrift_field_id);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void StageExecutionId::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StageExecutionId::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StageExecutionId::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StageExecutionId::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void StageExecutionId::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StageExecutionId::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StageExecutionId::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StageExecutionId::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StageExecutionId,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::StageId>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::OutputBufferInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::OutputBufferInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view OutputBufferInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OutputBufferInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view OutputBufferInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<OutputBufferInfo>::name;
}

OutputBufferInfo::OutputBufferInfo(const OutputBufferInfo&) = default;
OutputBufferInfo& OutputBufferInfo::operator=(const OutputBufferInfo&) = default;
OutputBufferInfo::OutputBufferInfo() :
    __fbthrift_field_state(),
    __fbthrift_field_canAddBuffers(),
    __fbthrift_field_canAddPages(),
    __fbthrift_field_totalBufferedBytes(),
    __fbthrift_field_totalBufferedPages(),
    __fbthrift_field_totalRowsSent(),
    __fbthrift_field_totalPagesSent() {
}


OutputBufferInfo::~OutputBufferInfo() {}

OutputBufferInfo::OutputBufferInfo([[maybe_unused]] OutputBufferInfo&& other) noexcept :
    __fbthrift_field_type(std::move(other.__fbthrift_field_type)),
    __fbthrift_field_state(std::move(other.__fbthrift_field_state)),
    __fbthrift_field_buffers(std::move(other.__fbthrift_field_buffers)),
    __fbthrift_field_canAddBuffers(std::move(other.__fbthrift_field_canAddBuffers)),
    __fbthrift_field_canAddPages(std::move(other.__fbthrift_field_canAddPages)),
    __fbthrift_field_totalBufferedBytes(std::move(other.__fbthrift_field_totalBufferedBytes)),
    __fbthrift_field_totalBufferedPages(std::move(other.__fbthrift_field_totalBufferedPages)),
    __fbthrift_field_totalRowsSent(std::move(other.__fbthrift_field_totalRowsSent)),
    __fbthrift_field_totalPagesSent(std::move(other.__fbthrift_field_totalPagesSent)),
    __isset(other.__isset) {
}

OutputBufferInfo& OutputBufferInfo::operator=([[maybe_unused]] OutputBufferInfo&& other) noexcept {
    this->__fbthrift_field_type = std::move(other.__fbthrift_field_type);
    this->__fbthrift_field_state = std::move(other.__fbthrift_field_state);
    this->__fbthrift_field_buffers = std::move(other.__fbthrift_field_buffers);
    this->__fbthrift_field_canAddBuffers = std::move(other.__fbthrift_field_canAddBuffers);
    this->__fbthrift_field_canAddPages = std::move(other.__fbthrift_field_canAddPages);
    this->__fbthrift_field_totalBufferedBytes = std::move(other.__fbthrift_field_totalBufferedBytes);
    this->__fbthrift_field_totalBufferedPages = std::move(other.__fbthrift_field_totalBufferedPages);
    this->__fbthrift_field_totalRowsSent = std::move(other.__fbthrift_field_totalRowsSent);
    this->__fbthrift_field_totalPagesSent = std::move(other.__fbthrift_field_totalPagesSent);
    __isset = other.__isset;
    return *this;
}


OutputBufferInfo::OutputBufferInfo(apache::thrift::FragileConstructor, ::std::string type__arg, ::facebook::presto::protocol::cpp2::BufferState state__arg, ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo> buffers__arg, bool canAddBuffers__arg, bool canAddPages__arg, ::std::int64_t totalBufferedBytes__arg, ::std::int64_t totalBufferedPages__arg, ::std::int64_t totalRowsSent__arg, ::std::int64_t totalPagesSent__arg) :
    __fbthrift_field_type(std::move(type__arg)),
    __fbthrift_field_state(std::move(state__arg)),
    __fbthrift_field_buffers(std::move(buffers__arg)),
    __fbthrift_field_canAddBuffers(std::move(canAddBuffers__arg)),
    __fbthrift_field_canAddPages(std::move(canAddPages__arg)),
    __fbthrift_field_totalBufferedBytes(std::move(totalBufferedBytes__arg)),
    __fbthrift_field_totalBufferedPages(std::move(totalBufferedPages__arg)),
    __fbthrift_field_totalRowsSent(std::move(totalRowsSent__arg)),
    __fbthrift_field_totalPagesSent(std::move(totalPagesSent__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}


void OutputBufferInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_type = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_state = ::facebook::presto::protocol::cpp2::BufferState();
  this->__fbthrift_field_buffers.clear();
  this->__fbthrift_field_canAddBuffers = bool();
  this->__fbthrift_field_canAddPages = bool();
  this->__fbthrift_field_totalBufferedBytes = ::std::int64_t();
  this->__fbthrift_field_totalBufferedPages = ::std::int64_t();
  this->__fbthrift_field_totalRowsSent = ::std::int64_t();
  this->__fbthrift_field_totalPagesSent = ::std::int64_t();
  __isset = {};
}

void OutputBufferInfo::__fbthrift_clear_terse_fields() {
}

bool OutputBufferInfo::__fbthrift_is_empty() const {
  return false;
}

bool OutputBufferInfo::operator==([[maybe_unused]] const OutputBufferInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool OutputBufferInfo::operator<([[maybe_unused]] const OutputBufferInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::facebook::presto::protocol::cpp2::BufferState OutputBufferInfo::get_state() const {
  return __fbthrift_field_state;
}

::facebook::presto::protocol::cpp2::BufferState& OutputBufferInfo::set_state(::facebook::presto::protocol::cpp2::BufferState state_) {
  state_ref() = state_;
  return __fbthrift_field_state;
}

const ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>& OutputBufferInfo::get_buffers() const& {
  return __fbthrift_field_buffers;
}

::std::vector<::facebook::presto::protocol::cpp2::BufferInfo> OutputBufferInfo::get_buffers() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>&&>(__fbthrift_field_buffers);
}

bool OutputBufferInfo::get_canAddBuffers() const {
  return __fbthrift_field_canAddBuffers;
}

bool& OutputBufferInfo::set_canAddBuffers(bool canAddBuffers_) {
  canAddBuffers_ref() = canAddBuffers_;
  return __fbthrift_field_canAddBuffers;
}

bool OutputBufferInfo::get_canAddPages() const {
  return __fbthrift_field_canAddPages;
}

bool& OutputBufferInfo::set_canAddPages(bool canAddPages_) {
  canAddPages_ref() = canAddPages_;
  return __fbthrift_field_canAddPages;
}

::std::int64_t OutputBufferInfo::get_totalBufferedBytes() const {
  return __fbthrift_field_totalBufferedBytes;
}

::std::int64_t& OutputBufferInfo::set_totalBufferedBytes(::std::int64_t totalBufferedBytes_) {
  totalBufferedBytes_ref() = totalBufferedBytes_;
  return __fbthrift_field_totalBufferedBytes;
}

::std::int64_t OutputBufferInfo::get_totalBufferedPages() const {
  return __fbthrift_field_totalBufferedPages;
}

::std::int64_t& OutputBufferInfo::set_totalBufferedPages(::std::int64_t totalBufferedPages_) {
  totalBufferedPages_ref() = totalBufferedPages_;
  return __fbthrift_field_totalBufferedPages;
}

::std::int64_t OutputBufferInfo::get_totalRowsSent() const {
  return __fbthrift_field_totalRowsSent;
}

::std::int64_t& OutputBufferInfo::set_totalRowsSent(::std::int64_t totalRowsSent_) {
  totalRowsSent_ref() = totalRowsSent_;
  return __fbthrift_field_totalRowsSent;
}

::std::int64_t OutputBufferInfo::get_totalPagesSent() const {
  return __fbthrift_field_totalPagesSent;
}

::std::int64_t& OutputBufferInfo::set_totalPagesSent(::std::int64_t totalPagesSent_) {
  totalPagesSent_ref() = totalPagesSent_;
  return __fbthrift_field_totalPagesSent;
}

void swap([[maybe_unused]] OutputBufferInfo& a, [[maybe_unused]] OutputBufferInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_type, b.__fbthrift_field_type);
  swap(a.__fbthrift_field_state, b.__fbthrift_field_state);
  swap(a.__fbthrift_field_buffers, b.__fbthrift_field_buffers);
  swap(a.__fbthrift_field_canAddBuffers, b.__fbthrift_field_canAddBuffers);
  swap(a.__fbthrift_field_canAddPages, b.__fbthrift_field_canAddPages);
  swap(a.__fbthrift_field_totalBufferedBytes, b.__fbthrift_field_totalBufferedBytes);
  swap(a.__fbthrift_field_totalBufferedPages, b.__fbthrift_field_totalBufferedPages);
  swap(a.__fbthrift_field_totalRowsSent, b.__fbthrift_field_totalRowsSent);
  swap(a.__fbthrift_field_totalPagesSent, b.__fbthrift_field_totalPagesSent);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void OutputBufferInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OutputBufferInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OutputBufferInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OutputBufferInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OutputBufferInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OutputBufferInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OutputBufferInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OutputBufferInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OutputBufferInfo,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::BufferInfo>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::BufferInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::BufferInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view BufferInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BufferInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view BufferInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<BufferInfo>::name;
}


BufferInfo::BufferInfo(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::OutputBufferId bufferId__arg, bool finished__arg, ::std::int32_t bufferedPages__arg, ::std::int64_t pagesSent__arg, ::facebook::presto::protocol::cpp2::PageBufferInfo pageBufferInfo__arg) :
    __fbthrift_field_bufferId(std::move(bufferId__arg)),
    __fbthrift_field_finished(std::move(finished__arg)),
    __fbthrift_field_bufferedPages(std::move(bufferedPages__arg)),
    __fbthrift_field_pagesSent(std::move(pagesSent__arg)),
    __fbthrift_field_pageBufferInfo(std::move(pageBufferInfo__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
}


void BufferInfo::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_bufferId);
  this->__fbthrift_field_finished = bool();
  this->__fbthrift_field_bufferedPages = ::std::int32_t();
  this->__fbthrift_field_pagesSent = ::std::int64_t();
  ::apache::thrift::clear(this->__fbthrift_field_pageBufferInfo);
  __isset = {};
}

void BufferInfo::__fbthrift_clear_terse_fields() {
}

bool BufferInfo::__fbthrift_is_empty() const {
  return false;
}

bool BufferInfo::operator==([[maybe_unused]] const BufferInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool BufferInfo::operator<([[maybe_unused]] const BufferInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::OutputBufferId& BufferInfo::get_bufferId() const& {
  return __fbthrift_field_bufferId;
}

::facebook::presto::protocol::cpp2::OutputBufferId BufferInfo::get_bufferId() && {
  return static_cast<::facebook::presto::protocol::cpp2::OutputBufferId&&>(__fbthrift_field_bufferId);
}

bool BufferInfo::get_finished() const {
  return __fbthrift_field_finished;
}

bool& BufferInfo::set_finished(bool finished_) {
  finished_ref() = finished_;
  return __fbthrift_field_finished;
}

::std::int32_t BufferInfo::get_bufferedPages() const {
  return __fbthrift_field_bufferedPages;
}

::std::int32_t& BufferInfo::set_bufferedPages(::std::int32_t bufferedPages_) {
  bufferedPages_ref() = bufferedPages_;
  return __fbthrift_field_bufferedPages;
}

::std::int64_t BufferInfo::get_pagesSent() const {
  return __fbthrift_field_pagesSent;
}

::std::int64_t& BufferInfo::set_pagesSent(::std::int64_t pagesSent_) {
  pagesSent_ref() = pagesSent_;
  return __fbthrift_field_pagesSent;
}

const ::facebook::presto::protocol::cpp2::PageBufferInfo& BufferInfo::get_pageBufferInfo() const& {
  return __fbthrift_field_pageBufferInfo;
}

::facebook::presto::protocol::cpp2::PageBufferInfo BufferInfo::get_pageBufferInfo() && {
  return static_cast<::facebook::presto::protocol::cpp2::PageBufferInfo&&>(__fbthrift_field_pageBufferInfo);
}

void swap([[maybe_unused]] BufferInfo& a, [[maybe_unused]] BufferInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bufferId, b.__fbthrift_field_bufferId);
  swap(a.__fbthrift_field_finished, b.__fbthrift_field_finished);
  swap(a.__fbthrift_field_bufferedPages, b.__fbthrift_field_bufferedPages);
  swap(a.__fbthrift_field_pagesSent, b.__fbthrift_field_pagesSent);
  swap(a.__fbthrift_field_pageBufferInfo, b.__fbthrift_field_pageBufferInfo);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void BufferInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BufferInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BufferInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BufferInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BufferInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BufferInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BufferInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BufferInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BufferInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::OutputBufferId>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BufferInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::PageBufferInfo>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TaskStats>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TaskStats>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TaskStats::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TaskStats>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TaskStats::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TaskStats>::name;
}

TaskStats::TaskStats(const TaskStats&) = default;
TaskStats& TaskStats::operator=(const TaskStats&) = default;
TaskStats::TaskStats() :
    __fbthrift_field_createTimeInMillis(),
    __fbthrift_field_firstStartTimeInMillis(),
    __fbthrift_field_lastStartTimeInMillis(),
    __fbthrift_field_lastEndTimeInMillis(),
    __fbthrift_field_endTimeInMillis(),
    __fbthrift_field_elapsedTimeInNanos(),
    __fbthrift_field_queuedTimeInNanos(),
    __fbthrift_field_totalDrivers(),
    __fbthrift_field_queuedDrivers(),
    __fbthrift_field_runningDrivers(),
    __fbthrift_field_blockedDrivers(),
    __fbthrift_field_completedDrivers(),
    __fbthrift_field_cumulativeUserMemory(),
    __fbthrift_field_cumulativeTotalMemory(),
    __fbthrift_field_userMemoryReservationInBytes(),
    __fbthrift_field_revocableMemoryReservationInBytes(),
    __fbthrift_field_systemMemoryReservationInBytes(),
    __fbthrift_field_peakUserMemoryInBytes(),
    __fbthrift_field_peakTotalMemoryInBytes(),
    __fbthrift_field_peakNodeTotalMemoryInBytes(),
    __fbthrift_field_totalScheduledTimeInNanos(),
    __fbthrift_field_totalCpuTimeInNanos(),
    __fbthrift_field_totalBlockedTimeInNanos(),
    __fbthrift_field_fullyBlocked(),
    __fbthrift_field_totalAllocationInBytes(),
    __fbthrift_field_rawInputDataSizeInBytes(),
    __fbthrift_field_rawInputPositions(),
    __fbthrift_field_processedInputDataSizeInBytes(),
    __fbthrift_field_processedInputPositions(),
    __fbthrift_field_outputDataSizeInBytes(),
    __fbthrift_field_outputPositions(),
    __fbthrift_field_physicalWrittenDataSizeInBytes(),
    __fbthrift_field_queuedPartitionedDrivers(),
    __fbthrift_field_queuedPartitionedSplitsWeight(),
    __fbthrift_field_runningPartitionedDrivers(),
    __fbthrift_field_runningPartitionedSplitsWeight(),
    __fbthrift_field_fullGcCount(),
    __fbthrift_field_fullGcTimeInMillis() {
}


TaskStats::~TaskStats() {}

TaskStats::TaskStats([[maybe_unused]] TaskStats&& other) noexcept :
    __fbthrift_field_createTimeInMillis(std::move(other.__fbthrift_field_createTimeInMillis)),
    __fbthrift_field_firstStartTimeInMillis(std::move(other.__fbthrift_field_firstStartTimeInMillis)),
    __fbthrift_field_lastStartTimeInMillis(std::move(other.__fbthrift_field_lastStartTimeInMillis)),
    __fbthrift_field_lastEndTimeInMillis(std::move(other.__fbthrift_field_lastEndTimeInMillis)),
    __fbthrift_field_endTimeInMillis(std::move(other.__fbthrift_field_endTimeInMillis)),
    __fbthrift_field_elapsedTimeInNanos(std::move(other.__fbthrift_field_elapsedTimeInNanos)),
    __fbthrift_field_queuedTimeInNanos(std::move(other.__fbthrift_field_queuedTimeInNanos)),
    __fbthrift_field_totalDrivers(std::move(other.__fbthrift_field_totalDrivers)),
    __fbthrift_field_queuedDrivers(std::move(other.__fbthrift_field_queuedDrivers)),
    __fbthrift_field_runningDrivers(std::move(other.__fbthrift_field_runningDrivers)),
    __fbthrift_field_blockedDrivers(std::move(other.__fbthrift_field_blockedDrivers)),
    __fbthrift_field_completedDrivers(std::move(other.__fbthrift_field_completedDrivers)),
    __fbthrift_field_cumulativeUserMemory(std::move(other.__fbthrift_field_cumulativeUserMemory)),
    __fbthrift_field_cumulativeTotalMemory(std::move(other.__fbthrift_field_cumulativeTotalMemory)),
    __fbthrift_field_userMemoryReservationInBytes(std::move(other.__fbthrift_field_userMemoryReservationInBytes)),
    __fbthrift_field_revocableMemoryReservationInBytes(std::move(other.__fbthrift_field_revocableMemoryReservationInBytes)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(other.__fbthrift_field_systemMemoryReservationInBytes)),
    __fbthrift_field_peakUserMemoryInBytes(std::move(other.__fbthrift_field_peakUserMemoryInBytes)),
    __fbthrift_field_peakTotalMemoryInBytes(std::move(other.__fbthrift_field_peakTotalMemoryInBytes)),
    __fbthrift_field_peakNodeTotalMemoryInBytes(std::move(other.__fbthrift_field_peakNodeTotalMemoryInBytes)),
    __fbthrift_field_totalScheduledTimeInNanos(std::move(other.__fbthrift_field_totalScheduledTimeInNanos)),
    __fbthrift_field_totalCpuTimeInNanos(std::move(other.__fbthrift_field_totalCpuTimeInNanos)),
    __fbthrift_field_totalBlockedTimeInNanos(std::move(other.__fbthrift_field_totalBlockedTimeInNanos)),
    __fbthrift_field_fullyBlocked(std::move(other.__fbthrift_field_fullyBlocked)),
    __fbthrift_field_blockedReasons(std::move(other.__fbthrift_field_blockedReasons)),
    __fbthrift_field_totalAllocationInBytes(std::move(other.__fbthrift_field_totalAllocationInBytes)),
    __fbthrift_field_rawInputDataSizeInBytes(std::move(other.__fbthrift_field_rawInputDataSizeInBytes)),
    __fbthrift_field_rawInputPositions(std::move(other.__fbthrift_field_rawInputPositions)),
    __fbthrift_field_processedInputDataSizeInBytes(std::move(other.__fbthrift_field_processedInputDataSizeInBytes)),
    __fbthrift_field_processedInputPositions(std::move(other.__fbthrift_field_processedInputPositions)),
    __fbthrift_field_outputDataSizeInBytes(std::move(other.__fbthrift_field_outputDataSizeInBytes)),
    __fbthrift_field_outputPositions(std::move(other.__fbthrift_field_outputPositions)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes)),
    __fbthrift_field_pipelines(std::move(other.__fbthrift_field_pipelines)),
    __fbthrift_field_queuedPartitionedDrivers(std::move(other.__fbthrift_field_queuedPartitionedDrivers)),
    __fbthrift_field_queuedPartitionedSplitsWeight(std::move(other.__fbthrift_field_queuedPartitionedSplitsWeight)),
    __fbthrift_field_runningPartitionedDrivers(std::move(other.__fbthrift_field_runningPartitionedDrivers)),
    __fbthrift_field_runningPartitionedSplitsWeight(std::move(other.__fbthrift_field_runningPartitionedSplitsWeight)),
    __fbthrift_field_fullGcCount(std::move(other.__fbthrift_field_fullGcCount)),
    __fbthrift_field_fullGcTimeInMillis(std::move(other.__fbthrift_field_fullGcTimeInMillis)),
    __fbthrift_field_runtimeStats(std::move(other.__fbthrift_field_runtimeStats)),
    __isset(other.__isset) {
}

TaskStats& TaskStats::operator=([[maybe_unused]] TaskStats&& other) noexcept {
    this->__fbthrift_field_createTimeInMillis = std::move(other.__fbthrift_field_createTimeInMillis);
    this->__fbthrift_field_firstStartTimeInMillis = std::move(other.__fbthrift_field_firstStartTimeInMillis);
    this->__fbthrift_field_lastStartTimeInMillis = std::move(other.__fbthrift_field_lastStartTimeInMillis);
    this->__fbthrift_field_lastEndTimeInMillis = std::move(other.__fbthrift_field_lastEndTimeInMillis);
    this->__fbthrift_field_endTimeInMillis = std::move(other.__fbthrift_field_endTimeInMillis);
    this->__fbthrift_field_elapsedTimeInNanos = std::move(other.__fbthrift_field_elapsedTimeInNanos);
    this->__fbthrift_field_queuedTimeInNanos = std::move(other.__fbthrift_field_queuedTimeInNanos);
    this->__fbthrift_field_totalDrivers = std::move(other.__fbthrift_field_totalDrivers);
    this->__fbthrift_field_queuedDrivers = std::move(other.__fbthrift_field_queuedDrivers);
    this->__fbthrift_field_runningDrivers = std::move(other.__fbthrift_field_runningDrivers);
    this->__fbthrift_field_blockedDrivers = std::move(other.__fbthrift_field_blockedDrivers);
    this->__fbthrift_field_completedDrivers = std::move(other.__fbthrift_field_completedDrivers);
    this->__fbthrift_field_cumulativeUserMemory = std::move(other.__fbthrift_field_cumulativeUserMemory);
    this->__fbthrift_field_cumulativeTotalMemory = std::move(other.__fbthrift_field_cumulativeTotalMemory);
    this->__fbthrift_field_userMemoryReservationInBytes = std::move(other.__fbthrift_field_userMemoryReservationInBytes);
    this->__fbthrift_field_revocableMemoryReservationInBytes = std::move(other.__fbthrift_field_revocableMemoryReservationInBytes);
    this->__fbthrift_field_systemMemoryReservationInBytes = std::move(other.__fbthrift_field_systemMemoryReservationInBytes);
    this->__fbthrift_field_peakUserMemoryInBytes = std::move(other.__fbthrift_field_peakUserMemoryInBytes);
    this->__fbthrift_field_peakTotalMemoryInBytes = std::move(other.__fbthrift_field_peakTotalMemoryInBytes);
    this->__fbthrift_field_peakNodeTotalMemoryInBytes = std::move(other.__fbthrift_field_peakNodeTotalMemoryInBytes);
    this->__fbthrift_field_totalScheduledTimeInNanos = std::move(other.__fbthrift_field_totalScheduledTimeInNanos);
    this->__fbthrift_field_totalCpuTimeInNanos = std::move(other.__fbthrift_field_totalCpuTimeInNanos);
    this->__fbthrift_field_totalBlockedTimeInNanos = std::move(other.__fbthrift_field_totalBlockedTimeInNanos);
    this->__fbthrift_field_fullyBlocked = std::move(other.__fbthrift_field_fullyBlocked);
    this->__fbthrift_field_blockedReasons = std::move(other.__fbthrift_field_blockedReasons);
    this->__fbthrift_field_totalAllocationInBytes = std::move(other.__fbthrift_field_totalAllocationInBytes);
    this->__fbthrift_field_rawInputDataSizeInBytes = std::move(other.__fbthrift_field_rawInputDataSizeInBytes);
    this->__fbthrift_field_rawInputPositions = std::move(other.__fbthrift_field_rawInputPositions);
    this->__fbthrift_field_processedInputDataSizeInBytes = std::move(other.__fbthrift_field_processedInputDataSizeInBytes);
    this->__fbthrift_field_processedInputPositions = std::move(other.__fbthrift_field_processedInputPositions);
    this->__fbthrift_field_outputDataSizeInBytes = std::move(other.__fbthrift_field_outputDataSizeInBytes);
    this->__fbthrift_field_outputPositions = std::move(other.__fbthrift_field_outputPositions);
    this->__fbthrift_field_physicalWrittenDataSizeInBytes = std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes);
    this->__fbthrift_field_pipelines = std::move(other.__fbthrift_field_pipelines);
    this->__fbthrift_field_queuedPartitionedDrivers = std::move(other.__fbthrift_field_queuedPartitionedDrivers);
    this->__fbthrift_field_queuedPartitionedSplitsWeight = std::move(other.__fbthrift_field_queuedPartitionedSplitsWeight);
    this->__fbthrift_field_runningPartitionedDrivers = std::move(other.__fbthrift_field_runningPartitionedDrivers);
    this->__fbthrift_field_runningPartitionedSplitsWeight = std::move(other.__fbthrift_field_runningPartitionedSplitsWeight);
    this->__fbthrift_field_fullGcCount = std::move(other.__fbthrift_field_fullGcCount);
    this->__fbthrift_field_fullGcTimeInMillis = std::move(other.__fbthrift_field_fullGcTimeInMillis);
    this->__fbthrift_field_runtimeStats = std::move(other.__fbthrift_field_runtimeStats);
    __isset = other.__isset;
    return *this;
}


TaskStats::TaskStats(apache::thrift::FragileConstructor, ::std::int64_t createTimeInMillis__arg, ::std::int64_t firstStartTimeInMillis__arg, ::std::int64_t lastStartTimeInMillis__arg, ::std::int64_t lastEndTimeInMillis__arg, ::std::int64_t endTimeInMillis__arg, ::std::int64_t elapsedTimeInNanos__arg, ::std::int64_t queuedTimeInNanos__arg, ::std::int32_t totalDrivers__arg, ::std::int32_t queuedDrivers__arg, ::std::int32_t runningDrivers__arg, ::std::int32_t blockedDrivers__arg, ::std::int32_t completedDrivers__arg, double cumulativeUserMemory__arg, double cumulativeTotalMemory__arg, ::std::int64_t userMemoryReservationInBytes__arg, ::std::int64_t revocableMemoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, ::std::int64_t peakUserMemoryInBytes__arg, ::std::int64_t peakTotalMemoryInBytes__arg, ::std::int64_t peakNodeTotalMemoryInBytes__arg, ::std::int64_t totalScheduledTimeInNanos__arg, ::std::int64_t totalCpuTimeInNanos__arg, ::std::int64_t totalBlockedTimeInNanos__arg, bool fullyBlocked__arg, ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> blockedReasons__arg, ::std::int64_t totalAllocationInBytes__arg, ::std::int64_t rawInputDataSizeInBytes__arg, ::std::int64_t rawInputPositions__arg, ::std::int64_t processedInputDataSizeInBytes__arg, ::std::int64_t processedInputPositions__arg, ::std::int64_t outputDataSizeInBytes__arg, ::std::int64_t outputPositions__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats> pipelines__arg, ::std::int32_t queuedPartitionedDrivers__arg, ::std::int64_t queuedPartitionedSplitsWeight__arg, ::std::int32_t runningPartitionedDrivers__arg, ::std::int64_t runningPartitionedSplitsWeight__arg, ::std::int32_t fullGcCount__arg, ::std::int64_t fullGcTimeInMillis__arg, ::facebook::presto::protocol::cpp2::RuntimeStats runtimeStats__arg) :
    __fbthrift_field_createTimeInMillis(std::move(createTimeInMillis__arg)),
    __fbthrift_field_firstStartTimeInMillis(std::move(firstStartTimeInMillis__arg)),
    __fbthrift_field_lastStartTimeInMillis(std::move(lastStartTimeInMillis__arg)),
    __fbthrift_field_lastEndTimeInMillis(std::move(lastEndTimeInMillis__arg)),
    __fbthrift_field_endTimeInMillis(std::move(endTimeInMillis__arg)),
    __fbthrift_field_elapsedTimeInNanos(std::move(elapsedTimeInNanos__arg)),
    __fbthrift_field_queuedTimeInNanos(std::move(queuedTimeInNanos__arg)),
    __fbthrift_field_totalDrivers(std::move(totalDrivers__arg)),
    __fbthrift_field_queuedDrivers(std::move(queuedDrivers__arg)),
    __fbthrift_field_runningDrivers(std::move(runningDrivers__arg)),
    __fbthrift_field_blockedDrivers(std::move(blockedDrivers__arg)),
    __fbthrift_field_completedDrivers(std::move(completedDrivers__arg)),
    __fbthrift_field_cumulativeUserMemory(std::move(cumulativeUserMemory__arg)),
    __fbthrift_field_cumulativeTotalMemory(std::move(cumulativeTotalMemory__arg)),
    __fbthrift_field_userMemoryReservationInBytes(std::move(userMemoryReservationInBytes__arg)),
    __fbthrift_field_revocableMemoryReservationInBytes(std::move(revocableMemoryReservationInBytes__arg)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(systemMemoryReservationInBytes__arg)),
    __fbthrift_field_peakUserMemoryInBytes(std::move(peakUserMemoryInBytes__arg)),
    __fbthrift_field_peakTotalMemoryInBytes(std::move(peakTotalMemoryInBytes__arg)),
    __fbthrift_field_peakNodeTotalMemoryInBytes(std::move(peakNodeTotalMemoryInBytes__arg)),
    __fbthrift_field_totalScheduledTimeInNanos(std::move(totalScheduledTimeInNanos__arg)),
    __fbthrift_field_totalCpuTimeInNanos(std::move(totalCpuTimeInNanos__arg)),
    __fbthrift_field_totalBlockedTimeInNanos(std::move(totalBlockedTimeInNanos__arg)),
    __fbthrift_field_fullyBlocked(std::move(fullyBlocked__arg)),
    __fbthrift_field_blockedReasons(std::move(blockedReasons__arg)),
    __fbthrift_field_totalAllocationInBytes(std::move(totalAllocationInBytes__arg)),
    __fbthrift_field_rawInputDataSizeInBytes(std::move(rawInputDataSizeInBytes__arg)),
    __fbthrift_field_rawInputPositions(std::move(rawInputPositions__arg)),
    __fbthrift_field_processedInputDataSizeInBytes(std::move(processedInputDataSizeInBytes__arg)),
    __fbthrift_field_processedInputPositions(std::move(processedInputPositions__arg)),
    __fbthrift_field_outputDataSizeInBytes(std::move(outputDataSizeInBytes__arg)),
    __fbthrift_field_outputPositions(std::move(outputPositions__arg)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(physicalWrittenDataSizeInBytes__arg)),
    __fbthrift_field_pipelines(std::move(pipelines__arg)),
    __fbthrift_field_queuedPartitionedDrivers(std::move(queuedPartitionedDrivers__arg)),
    __fbthrift_field_queuedPartitionedSplitsWeight(std::move(queuedPartitionedSplitsWeight__arg)),
    __fbthrift_field_runningPartitionedDrivers(std::move(runningPartitionedDrivers__arg)),
    __fbthrift_field_runningPartitionedSplitsWeight(std::move(runningPartitionedSplitsWeight__arg)),
    __fbthrift_field_fullGcCount(std::move(fullGcCount__arg)),
    __fbthrift_field_fullGcTimeInMillis(std::move(fullGcTimeInMillis__arg)),
    __fbthrift_field_runtimeStats(std::move(runtimeStats__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
  __isset.set(folly::index_constant<24>(), true);
  __isset.set(folly::index_constant<25>(), true);
  __isset.set(folly::index_constant<26>(), true);
  __isset.set(folly::index_constant<27>(), true);
  __isset.set(folly::index_constant<28>(), true);
  __isset.set(folly::index_constant<29>(), true);
  __isset.set(folly::index_constant<30>(), true);
  __isset.set(folly::index_constant<31>(), true);
  __isset.set(folly::index_constant<32>(), true);
  __isset.set(folly::index_constant<33>(), true);
  __isset.set(folly::index_constant<34>(), true);
  __isset.set(folly::index_constant<35>(), true);
  __isset.set(folly::index_constant<36>(), true);
  __isset.set(folly::index_constant<37>(), true);
  __isset.set(folly::index_constant<38>(), true);
  __isset.set(folly::index_constant<39>(), true);
  __isset.set(folly::index_constant<40>(), true);
}


void TaskStats::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_createTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_firstStartTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_lastStartTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_lastEndTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_endTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_elapsedTimeInNanos = ::std::int64_t();
  this->__fbthrift_field_queuedTimeInNanos = ::std::int64_t();
  this->__fbthrift_field_totalDrivers = ::std::int32_t();
  this->__fbthrift_field_queuedDrivers = ::std::int32_t();
  this->__fbthrift_field_runningDrivers = ::std::int32_t();
  this->__fbthrift_field_blockedDrivers = ::std::int32_t();
  this->__fbthrift_field_completedDrivers = ::std::int32_t();
  this->__fbthrift_field_cumulativeUserMemory = double();
  this->__fbthrift_field_cumulativeTotalMemory = double();
  this->__fbthrift_field_userMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_revocableMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_systemMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_peakUserMemoryInBytes = ::std::int64_t();
  this->__fbthrift_field_peakTotalMemoryInBytes = ::std::int64_t();
  this->__fbthrift_field_peakNodeTotalMemoryInBytes = ::std::int64_t();
  this->__fbthrift_field_totalScheduledTimeInNanos = ::std::int64_t();
  this->__fbthrift_field_totalCpuTimeInNanos = ::std::int64_t();
  this->__fbthrift_field_totalBlockedTimeInNanos = ::std::int64_t();
  this->__fbthrift_field_fullyBlocked = bool();
  this->__fbthrift_field_blockedReasons.clear();
  this->__fbthrift_field_totalAllocationInBytes = ::std::int64_t();
  this->__fbthrift_field_rawInputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_rawInputPositions = ::std::int64_t();
  this->__fbthrift_field_processedInputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_processedInputPositions = ::std::int64_t();
  this->__fbthrift_field_outputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_outputPositions = ::std::int64_t();
  this->__fbthrift_field_physicalWrittenDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_pipelines.clear();
  this->__fbthrift_field_queuedPartitionedDrivers = ::std::int32_t();
  this->__fbthrift_field_queuedPartitionedSplitsWeight = ::std::int64_t();
  this->__fbthrift_field_runningPartitionedDrivers = ::std::int32_t();
  this->__fbthrift_field_runningPartitionedSplitsWeight = ::std::int64_t();
  this->__fbthrift_field_fullGcCount = ::std::int32_t();
  this->__fbthrift_field_fullGcTimeInMillis = ::std::int64_t();
  ::apache::thrift::clear(this->__fbthrift_field_runtimeStats);
  __isset = {};
}

void TaskStats::__fbthrift_clear_terse_fields() {
}

bool TaskStats::__fbthrift_is_empty() const {
  return false;
}

bool TaskStats::operator==([[maybe_unused]] const TaskStats& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TaskStats::operator<([[maybe_unused]] const TaskStats& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t TaskStats::get_createTimeInMillis() const {
  return __fbthrift_field_createTimeInMillis;
}

::std::int64_t& TaskStats::set_createTimeInMillis(::std::int64_t createTimeInMillis_) {
  createTimeInMillis_ref() = createTimeInMillis_;
  return __fbthrift_field_createTimeInMillis;
}

::std::int64_t TaskStats::get_firstStartTimeInMillis() const {
  return __fbthrift_field_firstStartTimeInMillis;
}

::std::int64_t& TaskStats::set_firstStartTimeInMillis(::std::int64_t firstStartTimeInMillis_) {
  firstStartTimeInMillis_ref() = firstStartTimeInMillis_;
  return __fbthrift_field_firstStartTimeInMillis;
}

::std::int64_t TaskStats::get_lastStartTimeInMillis() const {
  return __fbthrift_field_lastStartTimeInMillis;
}

::std::int64_t& TaskStats::set_lastStartTimeInMillis(::std::int64_t lastStartTimeInMillis_) {
  lastStartTimeInMillis_ref() = lastStartTimeInMillis_;
  return __fbthrift_field_lastStartTimeInMillis;
}

::std::int64_t TaskStats::get_lastEndTimeInMillis() const {
  return __fbthrift_field_lastEndTimeInMillis;
}

::std::int64_t& TaskStats::set_lastEndTimeInMillis(::std::int64_t lastEndTimeInMillis_) {
  lastEndTimeInMillis_ref() = lastEndTimeInMillis_;
  return __fbthrift_field_lastEndTimeInMillis;
}

::std::int64_t TaskStats::get_endTimeInMillis() const {
  return __fbthrift_field_endTimeInMillis;
}

::std::int64_t& TaskStats::set_endTimeInMillis(::std::int64_t endTimeInMillis_) {
  endTimeInMillis_ref() = endTimeInMillis_;
  return __fbthrift_field_endTimeInMillis;
}

::std::int64_t TaskStats::get_elapsedTimeInNanos() const {
  return __fbthrift_field_elapsedTimeInNanos;
}

::std::int64_t& TaskStats::set_elapsedTimeInNanos(::std::int64_t elapsedTimeInNanos_) {
  elapsedTimeInNanos_ref() = elapsedTimeInNanos_;
  return __fbthrift_field_elapsedTimeInNanos;
}

::std::int64_t TaskStats::get_queuedTimeInNanos() const {
  return __fbthrift_field_queuedTimeInNanos;
}

::std::int64_t& TaskStats::set_queuedTimeInNanos(::std::int64_t queuedTimeInNanos_) {
  queuedTimeInNanos_ref() = queuedTimeInNanos_;
  return __fbthrift_field_queuedTimeInNanos;
}

::std::int32_t TaskStats::get_totalDrivers() const {
  return __fbthrift_field_totalDrivers;
}

::std::int32_t& TaskStats::set_totalDrivers(::std::int32_t totalDrivers_) {
  totalDrivers_ref() = totalDrivers_;
  return __fbthrift_field_totalDrivers;
}

::std::int32_t TaskStats::get_queuedDrivers() const {
  return __fbthrift_field_queuedDrivers;
}

::std::int32_t& TaskStats::set_queuedDrivers(::std::int32_t queuedDrivers_) {
  queuedDrivers_ref() = queuedDrivers_;
  return __fbthrift_field_queuedDrivers;
}

::std::int32_t TaskStats::get_runningDrivers() const {
  return __fbthrift_field_runningDrivers;
}

::std::int32_t& TaskStats::set_runningDrivers(::std::int32_t runningDrivers_) {
  runningDrivers_ref() = runningDrivers_;
  return __fbthrift_field_runningDrivers;
}

::std::int32_t TaskStats::get_blockedDrivers() const {
  return __fbthrift_field_blockedDrivers;
}

::std::int32_t& TaskStats::set_blockedDrivers(::std::int32_t blockedDrivers_) {
  blockedDrivers_ref() = blockedDrivers_;
  return __fbthrift_field_blockedDrivers;
}

::std::int32_t TaskStats::get_completedDrivers() const {
  return __fbthrift_field_completedDrivers;
}

::std::int32_t& TaskStats::set_completedDrivers(::std::int32_t completedDrivers_) {
  completedDrivers_ref() = completedDrivers_;
  return __fbthrift_field_completedDrivers;
}

double TaskStats::get_cumulativeUserMemory() const {
  return __fbthrift_field_cumulativeUserMemory;
}

double& TaskStats::set_cumulativeUserMemory(double cumulativeUserMemory_) {
  cumulativeUserMemory_ref() = cumulativeUserMemory_;
  return __fbthrift_field_cumulativeUserMemory;
}

double TaskStats::get_cumulativeTotalMemory() const {
  return __fbthrift_field_cumulativeTotalMemory;
}

double& TaskStats::set_cumulativeTotalMemory(double cumulativeTotalMemory_) {
  cumulativeTotalMemory_ref() = cumulativeTotalMemory_;
  return __fbthrift_field_cumulativeTotalMemory;
}

::std::int64_t TaskStats::get_userMemoryReservationInBytes() const {
  return __fbthrift_field_userMemoryReservationInBytes;
}

::std::int64_t& TaskStats::set_userMemoryReservationInBytes(::std::int64_t userMemoryReservationInBytes_) {
  userMemoryReservationInBytes_ref() = userMemoryReservationInBytes_;
  return __fbthrift_field_userMemoryReservationInBytes;
}

::std::int64_t TaskStats::get_revocableMemoryReservationInBytes() const {
  return __fbthrift_field_revocableMemoryReservationInBytes;
}

::std::int64_t& TaskStats::set_revocableMemoryReservationInBytes(::std::int64_t revocableMemoryReservationInBytes_) {
  revocableMemoryReservationInBytes_ref() = revocableMemoryReservationInBytes_;
  return __fbthrift_field_revocableMemoryReservationInBytes;
}

::std::int64_t TaskStats::get_systemMemoryReservationInBytes() const {
  return __fbthrift_field_systemMemoryReservationInBytes;
}

::std::int64_t& TaskStats::set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_) {
  systemMemoryReservationInBytes_ref() = systemMemoryReservationInBytes_;
  return __fbthrift_field_systemMemoryReservationInBytes;
}

::std::int64_t TaskStats::get_peakUserMemoryInBytes() const {
  return __fbthrift_field_peakUserMemoryInBytes;
}

::std::int64_t& TaskStats::set_peakUserMemoryInBytes(::std::int64_t peakUserMemoryInBytes_) {
  peakUserMemoryInBytes_ref() = peakUserMemoryInBytes_;
  return __fbthrift_field_peakUserMemoryInBytes;
}

::std::int64_t TaskStats::get_peakTotalMemoryInBytes() const {
  return __fbthrift_field_peakTotalMemoryInBytes;
}

::std::int64_t& TaskStats::set_peakTotalMemoryInBytes(::std::int64_t peakTotalMemoryInBytes_) {
  peakTotalMemoryInBytes_ref() = peakTotalMemoryInBytes_;
  return __fbthrift_field_peakTotalMemoryInBytes;
}

::std::int64_t TaskStats::get_peakNodeTotalMemoryInBytes() const {
  return __fbthrift_field_peakNodeTotalMemoryInBytes;
}

::std::int64_t& TaskStats::set_peakNodeTotalMemoryInBytes(::std::int64_t peakNodeTotalMemoryInBytes_) {
  peakNodeTotalMemoryInBytes_ref() = peakNodeTotalMemoryInBytes_;
  return __fbthrift_field_peakNodeTotalMemoryInBytes;
}

::std::int64_t TaskStats::get_totalScheduledTimeInNanos() const {
  return __fbthrift_field_totalScheduledTimeInNanos;
}

::std::int64_t& TaskStats::set_totalScheduledTimeInNanos(::std::int64_t totalScheduledTimeInNanos_) {
  totalScheduledTimeInNanos_ref() = totalScheduledTimeInNanos_;
  return __fbthrift_field_totalScheduledTimeInNanos;
}

::std::int64_t TaskStats::get_totalCpuTimeInNanos() const {
  return __fbthrift_field_totalCpuTimeInNanos;
}

::std::int64_t& TaskStats::set_totalCpuTimeInNanos(::std::int64_t totalCpuTimeInNanos_) {
  totalCpuTimeInNanos_ref() = totalCpuTimeInNanos_;
  return __fbthrift_field_totalCpuTimeInNanos;
}

::std::int64_t TaskStats::get_totalBlockedTimeInNanos() const {
  return __fbthrift_field_totalBlockedTimeInNanos;
}

::std::int64_t& TaskStats::set_totalBlockedTimeInNanos(::std::int64_t totalBlockedTimeInNanos_) {
  totalBlockedTimeInNanos_ref() = totalBlockedTimeInNanos_;
  return __fbthrift_field_totalBlockedTimeInNanos;
}

bool TaskStats::get_fullyBlocked() const {
  return __fbthrift_field_fullyBlocked;
}

bool& TaskStats::set_fullyBlocked(bool fullyBlocked_) {
  fullyBlocked_ref() = fullyBlocked_;
  return __fbthrift_field_fullyBlocked;
}

const ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>& TaskStats::get_blockedReasons() const& {
  return __fbthrift_field_blockedReasons;
}

::std::set<::facebook::presto::protocol::cpp2::BlockedReason> TaskStats::get_blockedReasons() && {
  return static_cast<::std::set<::facebook::presto::protocol::cpp2::BlockedReason>&&>(__fbthrift_field_blockedReasons);
}

::std::int64_t TaskStats::get_totalAllocationInBytes() const {
  return __fbthrift_field_totalAllocationInBytes;
}

::std::int64_t& TaskStats::set_totalAllocationInBytes(::std::int64_t totalAllocationInBytes_) {
  totalAllocationInBytes_ref() = totalAllocationInBytes_;
  return __fbthrift_field_totalAllocationInBytes;
}

::std::int64_t TaskStats::get_rawInputDataSizeInBytes() const {
  return __fbthrift_field_rawInputDataSizeInBytes;
}

::std::int64_t& TaskStats::set_rawInputDataSizeInBytes(::std::int64_t rawInputDataSizeInBytes_) {
  rawInputDataSizeInBytes_ref() = rawInputDataSizeInBytes_;
  return __fbthrift_field_rawInputDataSizeInBytes;
}

::std::int64_t TaskStats::get_rawInputPositions() const {
  return __fbthrift_field_rawInputPositions;
}

::std::int64_t& TaskStats::set_rawInputPositions(::std::int64_t rawInputPositions_) {
  rawInputPositions_ref() = rawInputPositions_;
  return __fbthrift_field_rawInputPositions;
}

::std::int64_t TaskStats::get_processedInputDataSizeInBytes() const {
  return __fbthrift_field_processedInputDataSizeInBytes;
}

::std::int64_t& TaskStats::set_processedInputDataSizeInBytes(::std::int64_t processedInputDataSizeInBytes_) {
  processedInputDataSizeInBytes_ref() = processedInputDataSizeInBytes_;
  return __fbthrift_field_processedInputDataSizeInBytes;
}

::std::int64_t TaskStats::get_processedInputPositions() const {
  return __fbthrift_field_processedInputPositions;
}

::std::int64_t& TaskStats::set_processedInputPositions(::std::int64_t processedInputPositions_) {
  processedInputPositions_ref() = processedInputPositions_;
  return __fbthrift_field_processedInputPositions;
}

::std::int64_t TaskStats::get_outputDataSizeInBytes() const {
  return __fbthrift_field_outputDataSizeInBytes;
}

::std::int64_t& TaskStats::set_outputDataSizeInBytes(::std::int64_t outputDataSizeInBytes_) {
  outputDataSizeInBytes_ref() = outputDataSizeInBytes_;
  return __fbthrift_field_outputDataSizeInBytes;
}

::std::int64_t TaskStats::get_outputPositions() const {
  return __fbthrift_field_outputPositions;
}

::std::int64_t& TaskStats::set_outputPositions(::std::int64_t outputPositions_) {
  outputPositions_ref() = outputPositions_;
  return __fbthrift_field_outputPositions;
}

::std::int64_t TaskStats::get_physicalWrittenDataSizeInBytes() const {
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

::std::int64_t& TaskStats::set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_) {
  physicalWrittenDataSizeInBytes_ref() = physicalWrittenDataSizeInBytes_;
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

const ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>& TaskStats::get_pipelines() const& {
  return __fbthrift_field_pipelines;
}

::std::vector<::facebook::presto::protocol::cpp2::PipelineStats> TaskStats::get_pipelines() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>&&>(__fbthrift_field_pipelines);
}

::std::int32_t TaskStats::get_queuedPartitionedDrivers() const {
  return __fbthrift_field_queuedPartitionedDrivers;
}

::std::int32_t& TaskStats::set_queuedPartitionedDrivers(::std::int32_t queuedPartitionedDrivers_) {
  queuedPartitionedDrivers_ref() = queuedPartitionedDrivers_;
  return __fbthrift_field_queuedPartitionedDrivers;
}

::std::int64_t TaskStats::get_queuedPartitionedSplitsWeight() const {
  return __fbthrift_field_queuedPartitionedSplitsWeight;
}

::std::int64_t& TaskStats::set_queuedPartitionedSplitsWeight(::std::int64_t queuedPartitionedSplitsWeight_) {
  queuedPartitionedSplitsWeight_ref() = queuedPartitionedSplitsWeight_;
  return __fbthrift_field_queuedPartitionedSplitsWeight;
}

::std::int32_t TaskStats::get_runningPartitionedDrivers() const {
  return __fbthrift_field_runningPartitionedDrivers;
}

::std::int32_t& TaskStats::set_runningPartitionedDrivers(::std::int32_t runningPartitionedDrivers_) {
  runningPartitionedDrivers_ref() = runningPartitionedDrivers_;
  return __fbthrift_field_runningPartitionedDrivers;
}

::std::int64_t TaskStats::get_runningPartitionedSplitsWeight() const {
  return __fbthrift_field_runningPartitionedSplitsWeight;
}

::std::int64_t& TaskStats::set_runningPartitionedSplitsWeight(::std::int64_t runningPartitionedSplitsWeight_) {
  runningPartitionedSplitsWeight_ref() = runningPartitionedSplitsWeight_;
  return __fbthrift_field_runningPartitionedSplitsWeight;
}

::std::int32_t TaskStats::get_fullGcCount() const {
  return __fbthrift_field_fullGcCount;
}

::std::int32_t& TaskStats::set_fullGcCount(::std::int32_t fullGcCount_) {
  fullGcCount_ref() = fullGcCount_;
  return __fbthrift_field_fullGcCount;
}

::std::int64_t TaskStats::get_fullGcTimeInMillis() const {
  return __fbthrift_field_fullGcTimeInMillis;
}

::std::int64_t& TaskStats::set_fullGcTimeInMillis(::std::int64_t fullGcTimeInMillis_) {
  fullGcTimeInMillis_ref() = fullGcTimeInMillis_;
  return __fbthrift_field_fullGcTimeInMillis;
}

const ::facebook::presto::protocol::cpp2::RuntimeStats& TaskStats::get_runtimeStats() const& {
  return __fbthrift_field_runtimeStats;
}

::facebook::presto::protocol::cpp2::RuntimeStats TaskStats::get_runtimeStats() && {
  return static_cast<::facebook::presto::protocol::cpp2::RuntimeStats&&>(__fbthrift_field_runtimeStats);
}

void swap([[maybe_unused]] TaskStats& a, [[maybe_unused]] TaskStats& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_createTimeInMillis, b.__fbthrift_field_createTimeInMillis);
  swap(a.__fbthrift_field_firstStartTimeInMillis, b.__fbthrift_field_firstStartTimeInMillis);
  swap(a.__fbthrift_field_lastStartTimeInMillis, b.__fbthrift_field_lastStartTimeInMillis);
  swap(a.__fbthrift_field_lastEndTimeInMillis, b.__fbthrift_field_lastEndTimeInMillis);
  swap(a.__fbthrift_field_endTimeInMillis, b.__fbthrift_field_endTimeInMillis);
  swap(a.__fbthrift_field_elapsedTimeInNanos, b.__fbthrift_field_elapsedTimeInNanos);
  swap(a.__fbthrift_field_queuedTimeInNanos, b.__fbthrift_field_queuedTimeInNanos);
  swap(a.__fbthrift_field_totalDrivers, b.__fbthrift_field_totalDrivers);
  swap(a.__fbthrift_field_queuedDrivers, b.__fbthrift_field_queuedDrivers);
  swap(a.__fbthrift_field_runningDrivers, b.__fbthrift_field_runningDrivers);
  swap(a.__fbthrift_field_blockedDrivers, b.__fbthrift_field_blockedDrivers);
  swap(a.__fbthrift_field_completedDrivers, b.__fbthrift_field_completedDrivers);
  swap(a.__fbthrift_field_cumulativeUserMemory, b.__fbthrift_field_cumulativeUserMemory);
  swap(a.__fbthrift_field_cumulativeTotalMemory, b.__fbthrift_field_cumulativeTotalMemory);
  swap(a.__fbthrift_field_userMemoryReservationInBytes, b.__fbthrift_field_userMemoryReservationInBytes);
  swap(a.__fbthrift_field_revocableMemoryReservationInBytes, b.__fbthrift_field_revocableMemoryReservationInBytes);
  swap(a.__fbthrift_field_systemMemoryReservationInBytes, b.__fbthrift_field_systemMemoryReservationInBytes);
  swap(a.__fbthrift_field_peakUserMemoryInBytes, b.__fbthrift_field_peakUserMemoryInBytes);
  swap(a.__fbthrift_field_peakTotalMemoryInBytes, b.__fbthrift_field_peakTotalMemoryInBytes);
  swap(a.__fbthrift_field_peakNodeTotalMemoryInBytes, b.__fbthrift_field_peakNodeTotalMemoryInBytes);
  swap(a.__fbthrift_field_totalScheduledTimeInNanos, b.__fbthrift_field_totalScheduledTimeInNanos);
  swap(a.__fbthrift_field_totalCpuTimeInNanos, b.__fbthrift_field_totalCpuTimeInNanos);
  swap(a.__fbthrift_field_totalBlockedTimeInNanos, b.__fbthrift_field_totalBlockedTimeInNanos);
  swap(a.__fbthrift_field_fullyBlocked, b.__fbthrift_field_fullyBlocked);
  swap(a.__fbthrift_field_blockedReasons, b.__fbthrift_field_blockedReasons);
  swap(a.__fbthrift_field_totalAllocationInBytes, b.__fbthrift_field_totalAllocationInBytes);
  swap(a.__fbthrift_field_rawInputDataSizeInBytes, b.__fbthrift_field_rawInputDataSizeInBytes);
  swap(a.__fbthrift_field_rawInputPositions, b.__fbthrift_field_rawInputPositions);
  swap(a.__fbthrift_field_processedInputDataSizeInBytes, b.__fbthrift_field_processedInputDataSizeInBytes);
  swap(a.__fbthrift_field_processedInputPositions, b.__fbthrift_field_processedInputPositions);
  swap(a.__fbthrift_field_outputDataSizeInBytes, b.__fbthrift_field_outputDataSizeInBytes);
  swap(a.__fbthrift_field_outputPositions, b.__fbthrift_field_outputPositions);
  swap(a.__fbthrift_field_physicalWrittenDataSizeInBytes, b.__fbthrift_field_physicalWrittenDataSizeInBytes);
  swap(a.__fbthrift_field_pipelines, b.__fbthrift_field_pipelines);
  swap(a.__fbthrift_field_queuedPartitionedDrivers, b.__fbthrift_field_queuedPartitionedDrivers);
  swap(a.__fbthrift_field_queuedPartitionedSplitsWeight, b.__fbthrift_field_queuedPartitionedSplitsWeight);
  swap(a.__fbthrift_field_runningPartitionedDrivers, b.__fbthrift_field_runningPartitionedDrivers);
  swap(a.__fbthrift_field_runningPartitionedSplitsWeight, b.__fbthrift_field_runningPartitionedSplitsWeight);
  swap(a.__fbthrift_field_fullGcCount, b.__fbthrift_field_fullGcCount);
  swap(a.__fbthrift_field_fullGcTimeInMillis, b.__fbthrift_field_fullGcTimeInMillis);
  swap(a.__fbthrift_field_runtimeStats, b.__fbthrift_field_runtimeStats);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TaskStats::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TaskStats::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TaskStats::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TaskStats::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TaskStats::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TaskStats::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TaskStats::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TaskStats::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskStats,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::PipelineStats>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskStats,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::RuntimeStats>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::PipelineStats>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::PipelineStats>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view PipelineStats::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<PipelineStats>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view PipelineStats::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<PipelineStats>::name;
}

PipelineStats::PipelineStats(const PipelineStats&) = default;
PipelineStats& PipelineStats::operator=(const PipelineStats&) = default;
PipelineStats::PipelineStats() :
    __fbthrift_field_pipelineId(),
    __fbthrift_field_firstStartTimeInMillis(),
    __fbthrift_field_lastStartTimeInMillis(),
    __fbthrift_field_lastEndTimeInMillis(),
    __fbthrift_field_inputPipeline(),
    __fbthrift_field_outputPipeline(),
    __fbthrift_field_totalDrivers(),
    __fbthrift_field_queuedDrivers(),
    __fbthrift_field_queuedPartitionedDrivers(),
    __fbthrift_field_queuedPartitionedSplitsWeight(),
    __fbthrift_field_runningDrivers(),
    __fbthrift_field_runningPartitionedDrivers(),
    __fbthrift_field_runningPartitionedSplitsWeight(),
    __fbthrift_field_blockedDrivers(),
    __fbthrift_field_completedDrivers(),
    __fbthrift_field_userMemoryReservationInBytes(),
    __fbthrift_field_revocableMemoryReservationInBytes(),
    __fbthrift_field_systemMemoryReservationInBytes(),
    __fbthrift_field_totalScheduledTimeInNanos(),
    __fbthrift_field_totalCpuTimeInNanos(),
    __fbthrift_field_totalBlockedTimeInNanos(),
    __fbthrift_field_fullyBlocked(),
    __fbthrift_field_totalAllocationInBytes(),
    __fbthrift_field_rawInputDataSizeInBytes(),
    __fbthrift_field_rawInputPositions(),
    __fbthrift_field_processedInputDataSizeInBytes(),
    __fbthrift_field_processedInputPositions(),
    __fbthrift_field_outputDataSizeInBytes(),
    __fbthrift_field_outputPositions(),
    __fbthrift_field_physicalWrittenDataSizeInBytes() {
}


PipelineStats::~PipelineStats() {}

PipelineStats::PipelineStats([[maybe_unused]] PipelineStats&& other) noexcept :
    __fbthrift_field_pipelineId(std::move(other.__fbthrift_field_pipelineId)),
    __fbthrift_field_firstStartTimeInMillis(std::move(other.__fbthrift_field_firstStartTimeInMillis)),
    __fbthrift_field_lastStartTimeInMillis(std::move(other.__fbthrift_field_lastStartTimeInMillis)),
    __fbthrift_field_lastEndTimeInMillis(std::move(other.__fbthrift_field_lastEndTimeInMillis)),
    __fbthrift_field_inputPipeline(std::move(other.__fbthrift_field_inputPipeline)),
    __fbthrift_field_outputPipeline(std::move(other.__fbthrift_field_outputPipeline)),
    __fbthrift_field_totalDrivers(std::move(other.__fbthrift_field_totalDrivers)),
    __fbthrift_field_queuedDrivers(std::move(other.__fbthrift_field_queuedDrivers)),
    __fbthrift_field_queuedPartitionedDrivers(std::move(other.__fbthrift_field_queuedPartitionedDrivers)),
    __fbthrift_field_queuedPartitionedSplitsWeight(std::move(other.__fbthrift_field_queuedPartitionedSplitsWeight)),
    __fbthrift_field_runningDrivers(std::move(other.__fbthrift_field_runningDrivers)),
    __fbthrift_field_runningPartitionedDrivers(std::move(other.__fbthrift_field_runningPartitionedDrivers)),
    __fbthrift_field_runningPartitionedSplitsWeight(std::move(other.__fbthrift_field_runningPartitionedSplitsWeight)),
    __fbthrift_field_blockedDrivers(std::move(other.__fbthrift_field_blockedDrivers)),
    __fbthrift_field_completedDrivers(std::move(other.__fbthrift_field_completedDrivers)),
    __fbthrift_field_userMemoryReservationInBytes(std::move(other.__fbthrift_field_userMemoryReservationInBytes)),
    __fbthrift_field_revocableMemoryReservationInBytes(std::move(other.__fbthrift_field_revocableMemoryReservationInBytes)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(other.__fbthrift_field_systemMemoryReservationInBytes)),
    __fbthrift_field_queuedTime(std::move(other.__fbthrift_field_queuedTime)),
    __fbthrift_field_elapsedTime(std::move(other.__fbthrift_field_elapsedTime)),
    __fbthrift_field_totalScheduledTimeInNanos(std::move(other.__fbthrift_field_totalScheduledTimeInNanos)),
    __fbthrift_field_totalCpuTimeInNanos(std::move(other.__fbthrift_field_totalCpuTimeInNanos)),
    __fbthrift_field_totalBlockedTimeInNanos(std::move(other.__fbthrift_field_totalBlockedTimeInNanos)),
    __fbthrift_field_fullyBlocked(std::move(other.__fbthrift_field_fullyBlocked)),
    __fbthrift_field_blockedReasons(std::move(other.__fbthrift_field_blockedReasons)),
    __fbthrift_field_totalAllocationInBytes(std::move(other.__fbthrift_field_totalAllocationInBytes)),
    __fbthrift_field_rawInputDataSizeInBytes(std::move(other.__fbthrift_field_rawInputDataSizeInBytes)),
    __fbthrift_field_rawInputPositions(std::move(other.__fbthrift_field_rawInputPositions)),
    __fbthrift_field_processedInputDataSizeInBytes(std::move(other.__fbthrift_field_processedInputDataSizeInBytes)),
    __fbthrift_field_processedInputPositions(std::move(other.__fbthrift_field_processedInputPositions)),
    __fbthrift_field_outputDataSizeInBytes(std::move(other.__fbthrift_field_outputDataSizeInBytes)),
    __fbthrift_field_outputPositions(std::move(other.__fbthrift_field_outputPositions)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes)),
    __fbthrift_field_operatorSummaries(std::move(other.__fbthrift_field_operatorSummaries)),
    __fbthrift_field_drivers(std::move(other.__fbthrift_field_drivers)),
    __isset(other.__isset) {
}

PipelineStats& PipelineStats::operator=([[maybe_unused]] PipelineStats&& other) noexcept {
    this->__fbthrift_field_pipelineId = std::move(other.__fbthrift_field_pipelineId);
    this->__fbthrift_field_firstStartTimeInMillis = std::move(other.__fbthrift_field_firstStartTimeInMillis);
    this->__fbthrift_field_lastStartTimeInMillis = std::move(other.__fbthrift_field_lastStartTimeInMillis);
    this->__fbthrift_field_lastEndTimeInMillis = std::move(other.__fbthrift_field_lastEndTimeInMillis);
    this->__fbthrift_field_inputPipeline = std::move(other.__fbthrift_field_inputPipeline);
    this->__fbthrift_field_outputPipeline = std::move(other.__fbthrift_field_outputPipeline);
    this->__fbthrift_field_totalDrivers = std::move(other.__fbthrift_field_totalDrivers);
    this->__fbthrift_field_queuedDrivers = std::move(other.__fbthrift_field_queuedDrivers);
    this->__fbthrift_field_queuedPartitionedDrivers = std::move(other.__fbthrift_field_queuedPartitionedDrivers);
    this->__fbthrift_field_queuedPartitionedSplitsWeight = std::move(other.__fbthrift_field_queuedPartitionedSplitsWeight);
    this->__fbthrift_field_runningDrivers = std::move(other.__fbthrift_field_runningDrivers);
    this->__fbthrift_field_runningPartitionedDrivers = std::move(other.__fbthrift_field_runningPartitionedDrivers);
    this->__fbthrift_field_runningPartitionedSplitsWeight = std::move(other.__fbthrift_field_runningPartitionedSplitsWeight);
    this->__fbthrift_field_blockedDrivers = std::move(other.__fbthrift_field_blockedDrivers);
    this->__fbthrift_field_completedDrivers = std::move(other.__fbthrift_field_completedDrivers);
    this->__fbthrift_field_userMemoryReservationInBytes = std::move(other.__fbthrift_field_userMemoryReservationInBytes);
    this->__fbthrift_field_revocableMemoryReservationInBytes = std::move(other.__fbthrift_field_revocableMemoryReservationInBytes);
    this->__fbthrift_field_systemMemoryReservationInBytes = std::move(other.__fbthrift_field_systemMemoryReservationInBytes);
    this->__fbthrift_field_queuedTime = std::move(other.__fbthrift_field_queuedTime);
    this->__fbthrift_field_elapsedTime = std::move(other.__fbthrift_field_elapsedTime);
    this->__fbthrift_field_totalScheduledTimeInNanos = std::move(other.__fbthrift_field_totalScheduledTimeInNanos);
    this->__fbthrift_field_totalCpuTimeInNanos = std::move(other.__fbthrift_field_totalCpuTimeInNanos);
    this->__fbthrift_field_totalBlockedTimeInNanos = std::move(other.__fbthrift_field_totalBlockedTimeInNanos);
    this->__fbthrift_field_fullyBlocked = std::move(other.__fbthrift_field_fullyBlocked);
    this->__fbthrift_field_blockedReasons = std::move(other.__fbthrift_field_blockedReasons);
    this->__fbthrift_field_totalAllocationInBytes = std::move(other.__fbthrift_field_totalAllocationInBytes);
    this->__fbthrift_field_rawInputDataSizeInBytes = std::move(other.__fbthrift_field_rawInputDataSizeInBytes);
    this->__fbthrift_field_rawInputPositions = std::move(other.__fbthrift_field_rawInputPositions);
    this->__fbthrift_field_processedInputDataSizeInBytes = std::move(other.__fbthrift_field_processedInputDataSizeInBytes);
    this->__fbthrift_field_processedInputPositions = std::move(other.__fbthrift_field_processedInputPositions);
    this->__fbthrift_field_outputDataSizeInBytes = std::move(other.__fbthrift_field_outputDataSizeInBytes);
    this->__fbthrift_field_outputPositions = std::move(other.__fbthrift_field_outputPositions);
    this->__fbthrift_field_physicalWrittenDataSizeInBytes = std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes);
    this->__fbthrift_field_operatorSummaries = std::move(other.__fbthrift_field_operatorSummaries);
    this->__fbthrift_field_drivers = std::move(other.__fbthrift_field_drivers);
    __isset = other.__isset;
    return *this;
}


PipelineStats::PipelineStats(apache::thrift::FragileConstructor, ::std::int32_t pipelineId__arg, ::std::int64_t firstStartTimeInMillis__arg, ::std::int64_t lastStartTimeInMillis__arg, ::std::int64_t lastEndTimeInMillis__arg, bool inputPipeline__arg, bool outputPipeline__arg, ::std::int32_t totalDrivers__arg, ::std::int32_t queuedDrivers__arg, ::std::int32_t queuedPartitionedDrivers__arg, ::std::int64_t queuedPartitionedSplitsWeight__arg, ::std::int32_t runningDrivers__arg, ::std::int32_t runningPartitionedDrivers__arg, ::std::int64_t runningPartitionedSplitsWeight__arg, ::std::int32_t blockedDrivers__arg, ::std::int32_t completedDrivers__arg, ::std::int64_t userMemoryReservationInBytes__arg, ::std::int64_t revocableMemoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, ::facebook::presto::protocol::cpp2::DistributionSnapshot queuedTime__arg, ::facebook::presto::protocol::cpp2::DistributionSnapshot elapsedTime__arg, ::std::int64_t totalScheduledTimeInNanos__arg, ::std::int64_t totalCpuTimeInNanos__arg, ::std::int64_t totalBlockedTimeInNanos__arg, bool fullyBlocked__arg, ::std::set<::facebook::presto::protocol::cpp2::BlockedReason> blockedReasons__arg, ::std::int64_t totalAllocationInBytes__arg, ::std::int64_t rawInputDataSizeInBytes__arg, ::std::int64_t rawInputPositions__arg, ::std::int64_t processedInputDataSizeInBytes__arg, ::std::int64_t processedInputPositions__arg, ::std::int64_t outputDataSizeInBytes__arg, ::std::int64_t outputPositions__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> operatorSummaries__arg, ::std::vector<::facebook::presto::protocol::cpp2::DriverStats> drivers__arg) :
    __fbthrift_field_pipelineId(std::move(pipelineId__arg)),
    __fbthrift_field_firstStartTimeInMillis(std::move(firstStartTimeInMillis__arg)),
    __fbthrift_field_lastStartTimeInMillis(std::move(lastStartTimeInMillis__arg)),
    __fbthrift_field_lastEndTimeInMillis(std::move(lastEndTimeInMillis__arg)),
    __fbthrift_field_inputPipeline(std::move(inputPipeline__arg)),
    __fbthrift_field_outputPipeline(std::move(outputPipeline__arg)),
    __fbthrift_field_totalDrivers(std::move(totalDrivers__arg)),
    __fbthrift_field_queuedDrivers(std::move(queuedDrivers__arg)),
    __fbthrift_field_queuedPartitionedDrivers(std::move(queuedPartitionedDrivers__arg)),
    __fbthrift_field_queuedPartitionedSplitsWeight(std::move(queuedPartitionedSplitsWeight__arg)),
    __fbthrift_field_runningDrivers(std::move(runningDrivers__arg)),
    __fbthrift_field_runningPartitionedDrivers(std::move(runningPartitionedDrivers__arg)),
    __fbthrift_field_runningPartitionedSplitsWeight(std::move(runningPartitionedSplitsWeight__arg)),
    __fbthrift_field_blockedDrivers(std::move(blockedDrivers__arg)),
    __fbthrift_field_completedDrivers(std::move(completedDrivers__arg)),
    __fbthrift_field_userMemoryReservationInBytes(std::move(userMemoryReservationInBytes__arg)),
    __fbthrift_field_revocableMemoryReservationInBytes(std::move(revocableMemoryReservationInBytes__arg)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(systemMemoryReservationInBytes__arg)),
    __fbthrift_field_queuedTime(std::move(queuedTime__arg)),
    __fbthrift_field_elapsedTime(std::move(elapsedTime__arg)),
    __fbthrift_field_totalScheduledTimeInNanos(std::move(totalScheduledTimeInNanos__arg)),
    __fbthrift_field_totalCpuTimeInNanos(std::move(totalCpuTimeInNanos__arg)),
    __fbthrift_field_totalBlockedTimeInNanos(std::move(totalBlockedTimeInNanos__arg)),
    __fbthrift_field_fullyBlocked(std::move(fullyBlocked__arg)),
    __fbthrift_field_blockedReasons(std::move(blockedReasons__arg)),
    __fbthrift_field_totalAllocationInBytes(std::move(totalAllocationInBytes__arg)),
    __fbthrift_field_rawInputDataSizeInBytes(std::move(rawInputDataSizeInBytes__arg)),
    __fbthrift_field_rawInputPositions(std::move(rawInputPositions__arg)),
    __fbthrift_field_processedInputDataSizeInBytes(std::move(processedInputDataSizeInBytes__arg)),
    __fbthrift_field_processedInputPositions(std::move(processedInputPositions__arg)),
    __fbthrift_field_outputDataSizeInBytes(std::move(outputDataSizeInBytes__arg)),
    __fbthrift_field_outputPositions(std::move(outputPositions__arg)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(physicalWrittenDataSizeInBytes__arg)),
    __fbthrift_field_operatorSummaries(std::move(operatorSummaries__arg)),
    __fbthrift_field_drivers(std::move(drivers__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
  __isset.set(folly::index_constant<24>(), true);
  __isset.set(folly::index_constant<25>(), true);
  __isset.set(folly::index_constant<26>(), true);
  __isset.set(folly::index_constant<27>(), true);
  __isset.set(folly::index_constant<28>(), true);
  __isset.set(folly::index_constant<29>(), true);
  __isset.set(folly::index_constant<30>(), true);
  __isset.set(folly::index_constant<31>(), true);
  __isset.set(folly::index_constant<32>(), true);
  __isset.set(folly::index_constant<33>(), true);
  __isset.set(folly::index_constant<34>(), true);
}


void PipelineStats::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_pipelineId = ::std::int32_t();
  this->__fbthrift_field_firstStartTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_lastStartTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_lastEndTimeInMillis = ::std::int64_t();
  this->__fbthrift_field_inputPipeline = bool();
  this->__fbthrift_field_outputPipeline = bool();
  this->__fbthrift_field_totalDrivers = ::std::int32_t();
  this->__fbthrift_field_queuedDrivers = ::std::int32_t();
  this->__fbthrift_field_queuedPartitionedDrivers = ::std::int32_t();
  this->__fbthrift_field_queuedPartitionedSplitsWeight = ::std::int64_t();
  this->__fbthrift_field_runningDrivers = ::std::int32_t();
  this->__fbthrift_field_runningPartitionedDrivers = ::std::int32_t();
  this->__fbthrift_field_runningPartitionedSplitsWeight = ::std::int64_t();
  this->__fbthrift_field_blockedDrivers = ::std::int32_t();
  this->__fbthrift_field_completedDrivers = ::std::int32_t();
  this->__fbthrift_field_userMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_revocableMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_systemMemoryReservationInBytes = ::std::int64_t();
  ::apache::thrift::clear(this->__fbthrift_field_queuedTime);
  ::apache::thrift::clear(this->__fbthrift_field_elapsedTime);
  this->__fbthrift_field_totalScheduledTimeInNanos = ::std::int64_t();
  this->__fbthrift_field_totalCpuTimeInNanos = ::std::int64_t();
  this->__fbthrift_field_totalBlockedTimeInNanos = ::std::int64_t();
  this->__fbthrift_field_fullyBlocked = bool();
  this->__fbthrift_field_blockedReasons.clear();
  this->__fbthrift_field_totalAllocationInBytes = ::std::int64_t();
  this->__fbthrift_field_rawInputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_rawInputPositions = ::std::int64_t();
  this->__fbthrift_field_processedInputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_processedInputPositions = ::std::int64_t();
  this->__fbthrift_field_outputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_outputPositions = ::std::int64_t();
  this->__fbthrift_field_physicalWrittenDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_operatorSummaries.clear();
  this->__fbthrift_field_drivers.clear();
  __isset = {};
}

void PipelineStats::__fbthrift_clear_terse_fields() {
}

bool PipelineStats::__fbthrift_is_empty() const {
  return false;
}

bool PipelineStats::operator==([[maybe_unused]] const PipelineStats& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool PipelineStats::operator<([[maybe_unused]] const PipelineStats& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t PipelineStats::get_pipelineId() const {
  return __fbthrift_field_pipelineId;
}

::std::int32_t& PipelineStats::set_pipelineId(::std::int32_t pipelineId_) {
  pipelineId_ref() = pipelineId_;
  return __fbthrift_field_pipelineId;
}

::std::int64_t PipelineStats::get_firstStartTimeInMillis() const {
  return __fbthrift_field_firstStartTimeInMillis;
}

::std::int64_t& PipelineStats::set_firstStartTimeInMillis(::std::int64_t firstStartTimeInMillis_) {
  firstStartTimeInMillis_ref() = firstStartTimeInMillis_;
  return __fbthrift_field_firstStartTimeInMillis;
}

::std::int64_t PipelineStats::get_lastStartTimeInMillis() const {
  return __fbthrift_field_lastStartTimeInMillis;
}

::std::int64_t& PipelineStats::set_lastStartTimeInMillis(::std::int64_t lastStartTimeInMillis_) {
  lastStartTimeInMillis_ref() = lastStartTimeInMillis_;
  return __fbthrift_field_lastStartTimeInMillis;
}

::std::int64_t PipelineStats::get_lastEndTimeInMillis() const {
  return __fbthrift_field_lastEndTimeInMillis;
}

::std::int64_t& PipelineStats::set_lastEndTimeInMillis(::std::int64_t lastEndTimeInMillis_) {
  lastEndTimeInMillis_ref() = lastEndTimeInMillis_;
  return __fbthrift_field_lastEndTimeInMillis;
}

bool PipelineStats::get_inputPipeline() const {
  return __fbthrift_field_inputPipeline;
}

bool& PipelineStats::set_inputPipeline(bool inputPipeline_) {
  inputPipeline_ref() = inputPipeline_;
  return __fbthrift_field_inputPipeline;
}

bool PipelineStats::get_outputPipeline() const {
  return __fbthrift_field_outputPipeline;
}

bool& PipelineStats::set_outputPipeline(bool outputPipeline_) {
  outputPipeline_ref() = outputPipeline_;
  return __fbthrift_field_outputPipeline;
}

::std::int32_t PipelineStats::get_totalDrivers() const {
  return __fbthrift_field_totalDrivers;
}

::std::int32_t& PipelineStats::set_totalDrivers(::std::int32_t totalDrivers_) {
  totalDrivers_ref() = totalDrivers_;
  return __fbthrift_field_totalDrivers;
}

::std::int32_t PipelineStats::get_queuedDrivers() const {
  return __fbthrift_field_queuedDrivers;
}

::std::int32_t& PipelineStats::set_queuedDrivers(::std::int32_t queuedDrivers_) {
  queuedDrivers_ref() = queuedDrivers_;
  return __fbthrift_field_queuedDrivers;
}

::std::int32_t PipelineStats::get_queuedPartitionedDrivers() const {
  return __fbthrift_field_queuedPartitionedDrivers;
}

::std::int32_t& PipelineStats::set_queuedPartitionedDrivers(::std::int32_t queuedPartitionedDrivers_) {
  queuedPartitionedDrivers_ref() = queuedPartitionedDrivers_;
  return __fbthrift_field_queuedPartitionedDrivers;
}

::std::int64_t PipelineStats::get_queuedPartitionedSplitsWeight() const {
  return __fbthrift_field_queuedPartitionedSplitsWeight;
}

::std::int64_t& PipelineStats::set_queuedPartitionedSplitsWeight(::std::int64_t queuedPartitionedSplitsWeight_) {
  queuedPartitionedSplitsWeight_ref() = queuedPartitionedSplitsWeight_;
  return __fbthrift_field_queuedPartitionedSplitsWeight;
}

::std::int32_t PipelineStats::get_runningDrivers() const {
  return __fbthrift_field_runningDrivers;
}

::std::int32_t& PipelineStats::set_runningDrivers(::std::int32_t runningDrivers_) {
  runningDrivers_ref() = runningDrivers_;
  return __fbthrift_field_runningDrivers;
}

::std::int32_t PipelineStats::get_runningPartitionedDrivers() const {
  return __fbthrift_field_runningPartitionedDrivers;
}

::std::int32_t& PipelineStats::set_runningPartitionedDrivers(::std::int32_t runningPartitionedDrivers_) {
  runningPartitionedDrivers_ref() = runningPartitionedDrivers_;
  return __fbthrift_field_runningPartitionedDrivers;
}

::std::int64_t PipelineStats::get_runningPartitionedSplitsWeight() const {
  return __fbthrift_field_runningPartitionedSplitsWeight;
}

::std::int64_t& PipelineStats::set_runningPartitionedSplitsWeight(::std::int64_t runningPartitionedSplitsWeight_) {
  runningPartitionedSplitsWeight_ref() = runningPartitionedSplitsWeight_;
  return __fbthrift_field_runningPartitionedSplitsWeight;
}

::std::int32_t PipelineStats::get_blockedDrivers() const {
  return __fbthrift_field_blockedDrivers;
}

::std::int32_t& PipelineStats::set_blockedDrivers(::std::int32_t blockedDrivers_) {
  blockedDrivers_ref() = blockedDrivers_;
  return __fbthrift_field_blockedDrivers;
}

::std::int32_t PipelineStats::get_completedDrivers() const {
  return __fbthrift_field_completedDrivers;
}

::std::int32_t& PipelineStats::set_completedDrivers(::std::int32_t completedDrivers_) {
  completedDrivers_ref() = completedDrivers_;
  return __fbthrift_field_completedDrivers;
}

::std::int64_t PipelineStats::get_userMemoryReservationInBytes() const {
  return __fbthrift_field_userMemoryReservationInBytes;
}

::std::int64_t& PipelineStats::set_userMemoryReservationInBytes(::std::int64_t userMemoryReservationInBytes_) {
  userMemoryReservationInBytes_ref() = userMemoryReservationInBytes_;
  return __fbthrift_field_userMemoryReservationInBytes;
}

::std::int64_t PipelineStats::get_revocableMemoryReservationInBytes() const {
  return __fbthrift_field_revocableMemoryReservationInBytes;
}

::std::int64_t& PipelineStats::set_revocableMemoryReservationInBytes(::std::int64_t revocableMemoryReservationInBytes_) {
  revocableMemoryReservationInBytes_ref() = revocableMemoryReservationInBytes_;
  return __fbthrift_field_revocableMemoryReservationInBytes;
}

::std::int64_t PipelineStats::get_systemMemoryReservationInBytes() const {
  return __fbthrift_field_systemMemoryReservationInBytes;
}

::std::int64_t& PipelineStats::set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_) {
  systemMemoryReservationInBytes_ref() = systemMemoryReservationInBytes_;
  return __fbthrift_field_systemMemoryReservationInBytes;
}

const ::facebook::presto::protocol::cpp2::DistributionSnapshot& PipelineStats::get_queuedTime() const& {
  return __fbthrift_field_queuedTime;
}

::facebook::presto::protocol::cpp2::DistributionSnapshot PipelineStats::get_queuedTime() && {
  return static_cast<::facebook::presto::protocol::cpp2::DistributionSnapshot&&>(__fbthrift_field_queuedTime);
}

const ::facebook::presto::protocol::cpp2::DistributionSnapshot& PipelineStats::get_elapsedTime() const& {
  return __fbthrift_field_elapsedTime;
}

::facebook::presto::protocol::cpp2::DistributionSnapshot PipelineStats::get_elapsedTime() && {
  return static_cast<::facebook::presto::protocol::cpp2::DistributionSnapshot&&>(__fbthrift_field_elapsedTime);
}

::std::int64_t PipelineStats::get_totalScheduledTimeInNanos() const {
  return __fbthrift_field_totalScheduledTimeInNanos;
}

::std::int64_t& PipelineStats::set_totalScheduledTimeInNanos(::std::int64_t totalScheduledTimeInNanos_) {
  totalScheduledTimeInNanos_ref() = totalScheduledTimeInNanos_;
  return __fbthrift_field_totalScheduledTimeInNanos;
}

::std::int64_t PipelineStats::get_totalCpuTimeInNanos() const {
  return __fbthrift_field_totalCpuTimeInNanos;
}

::std::int64_t& PipelineStats::set_totalCpuTimeInNanos(::std::int64_t totalCpuTimeInNanos_) {
  totalCpuTimeInNanos_ref() = totalCpuTimeInNanos_;
  return __fbthrift_field_totalCpuTimeInNanos;
}

::std::int64_t PipelineStats::get_totalBlockedTimeInNanos() const {
  return __fbthrift_field_totalBlockedTimeInNanos;
}

::std::int64_t& PipelineStats::set_totalBlockedTimeInNanos(::std::int64_t totalBlockedTimeInNanos_) {
  totalBlockedTimeInNanos_ref() = totalBlockedTimeInNanos_;
  return __fbthrift_field_totalBlockedTimeInNanos;
}

bool PipelineStats::get_fullyBlocked() const {
  return __fbthrift_field_fullyBlocked;
}

bool& PipelineStats::set_fullyBlocked(bool fullyBlocked_) {
  fullyBlocked_ref() = fullyBlocked_;
  return __fbthrift_field_fullyBlocked;
}

const ::std::set<::facebook::presto::protocol::cpp2::BlockedReason>& PipelineStats::get_blockedReasons() const& {
  return __fbthrift_field_blockedReasons;
}

::std::set<::facebook::presto::protocol::cpp2::BlockedReason> PipelineStats::get_blockedReasons() && {
  return static_cast<::std::set<::facebook::presto::protocol::cpp2::BlockedReason>&&>(__fbthrift_field_blockedReasons);
}

::std::int64_t PipelineStats::get_totalAllocationInBytes() const {
  return __fbthrift_field_totalAllocationInBytes;
}

::std::int64_t& PipelineStats::set_totalAllocationInBytes(::std::int64_t totalAllocationInBytes_) {
  totalAllocationInBytes_ref() = totalAllocationInBytes_;
  return __fbthrift_field_totalAllocationInBytes;
}

::std::int64_t PipelineStats::get_rawInputDataSizeInBytes() const {
  return __fbthrift_field_rawInputDataSizeInBytes;
}

::std::int64_t& PipelineStats::set_rawInputDataSizeInBytes(::std::int64_t rawInputDataSizeInBytes_) {
  rawInputDataSizeInBytes_ref() = rawInputDataSizeInBytes_;
  return __fbthrift_field_rawInputDataSizeInBytes;
}

::std::int64_t PipelineStats::get_rawInputPositions() const {
  return __fbthrift_field_rawInputPositions;
}

::std::int64_t& PipelineStats::set_rawInputPositions(::std::int64_t rawInputPositions_) {
  rawInputPositions_ref() = rawInputPositions_;
  return __fbthrift_field_rawInputPositions;
}

::std::int64_t PipelineStats::get_processedInputDataSizeInBytes() const {
  return __fbthrift_field_processedInputDataSizeInBytes;
}

::std::int64_t& PipelineStats::set_processedInputDataSizeInBytes(::std::int64_t processedInputDataSizeInBytes_) {
  processedInputDataSizeInBytes_ref() = processedInputDataSizeInBytes_;
  return __fbthrift_field_processedInputDataSizeInBytes;
}

::std::int64_t PipelineStats::get_processedInputPositions() const {
  return __fbthrift_field_processedInputPositions;
}

::std::int64_t& PipelineStats::set_processedInputPositions(::std::int64_t processedInputPositions_) {
  processedInputPositions_ref() = processedInputPositions_;
  return __fbthrift_field_processedInputPositions;
}

::std::int64_t PipelineStats::get_outputDataSizeInBytes() const {
  return __fbthrift_field_outputDataSizeInBytes;
}

::std::int64_t& PipelineStats::set_outputDataSizeInBytes(::std::int64_t outputDataSizeInBytes_) {
  outputDataSizeInBytes_ref() = outputDataSizeInBytes_;
  return __fbthrift_field_outputDataSizeInBytes;
}

::std::int64_t PipelineStats::get_outputPositions() const {
  return __fbthrift_field_outputPositions;
}

::std::int64_t& PipelineStats::set_outputPositions(::std::int64_t outputPositions_) {
  outputPositions_ref() = outputPositions_;
  return __fbthrift_field_outputPositions;
}

::std::int64_t PipelineStats::get_physicalWrittenDataSizeInBytes() const {
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

::std::int64_t& PipelineStats::set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_) {
  physicalWrittenDataSizeInBytes_ref() = physicalWrittenDataSizeInBytes_;
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

const ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>& PipelineStats::get_operatorSummaries() const& {
  return __fbthrift_field_operatorSummaries;
}

::std::vector<::facebook::presto::protocol::cpp2::OperatorStats> PipelineStats::get_operatorSummaries() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>&&>(__fbthrift_field_operatorSummaries);
}

const ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>& PipelineStats::get_drivers() const& {
  return __fbthrift_field_drivers;
}

::std::vector<::facebook::presto::protocol::cpp2::DriverStats> PipelineStats::get_drivers() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::DriverStats>&&>(__fbthrift_field_drivers);
}

void swap([[maybe_unused]] PipelineStats& a, [[maybe_unused]] PipelineStats& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_pipelineId, b.__fbthrift_field_pipelineId);
  swap(a.__fbthrift_field_firstStartTimeInMillis, b.__fbthrift_field_firstStartTimeInMillis);
  swap(a.__fbthrift_field_lastStartTimeInMillis, b.__fbthrift_field_lastStartTimeInMillis);
  swap(a.__fbthrift_field_lastEndTimeInMillis, b.__fbthrift_field_lastEndTimeInMillis);
  swap(a.__fbthrift_field_inputPipeline, b.__fbthrift_field_inputPipeline);
  swap(a.__fbthrift_field_outputPipeline, b.__fbthrift_field_outputPipeline);
  swap(a.__fbthrift_field_totalDrivers, b.__fbthrift_field_totalDrivers);
  swap(a.__fbthrift_field_queuedDrivers, b.__fbthrift_field_queuedDrivers);
  swap(a.__fbthrift_field_queuedPartitionedDrivers, b.__fbthrift_field_queuedPartitionedDrivers);
  swap(a.__fbthrift_field_queuedPartitionedSplitsWeight, b.__fbthrift_field_queuedPartitionedSplitsWeight);
  swap(a.__fbthrift_field_runningDrivers, b.__fbthrift_field_runningDrivers);
  swap(a.__fbthrift_field_runningPartitionedDrivers, b.__fbthrift_field_runningPartitionedDrivers);
  swap(a.__fbthrift_field_runningPartitionedSplitsWeight, b.__fbthrift_field_runningPartitionedSplitsWeight);
  swap(a.__fbthrift_field_blockedDrivers, b.__fbthrift_field_blockedDrivers);
  swap(a.__fbthrift_field_completedDrivers, b.__fbthrift_field_completedDrivers);
  swap(a.__fbthrift_field_userMemoryReservationInBytes, b.__fbthrift_field_userMemoryReservationInBytes);
  swap(a.__fbthrift_field_revocableMemoryReservationInBytes, b.__fbthrift_field_revocableMemoryReservationInBytes);
  swap(a.__fbthrift_field_systemMemoryReservationInBytes, b.__fbthrift_field_systemMemoryReservationInBytes);
  swap(a.__fbthrift_field_queuedTime, b.__fbthrift_field_queuedTime);
  swap(a.__fbthrift_field_elapsedTime, b.__fbthrift_field_elapsedTime);
  swap(a.__fbthrift_field_totalScheduledTimeInNanos, b.__fbthrift_field_totalScheduledTimeInNanos);
  swap(a.__fbthrift_field_totalCpuTimeInNanos, b.__fbthrift_field_totalCpuTimeInNanos);
  swap(a.__fbthrift_field_totalBlockedTimeInNanos, b.__fbthrift_field_totalBlockedTimeInNanos);
  swap(a.__fbthrift_field_fullyBlocked, b.__fbthrift_field_fullyBlocked);
  swap(a.__fbthrift_field_blockedReasons, b.__fbthrift_field_blockedReasons);
  swap(a.__fbthrift_field_totalAllocationInBytes, b.__fbthrift_field_totalAllocationInBytes);
  swap(a.__fbthrift_field_rawInputDataSizeInBytes, b.__fbthrift_field_rawInputDataSizeInBytes);
  swap(a.__fbthrift_field_rawInputPositions, b.__fbthrift_field_rawInputPositions);
  swap(a.__fbthrift_field_processedInputDataSizeInBytes, b.__fbthrift_field_processedInputDataSizeInBytes);
  swap(a.__fbthrift_field_processedInputPositions, b.__fbthrift_field_processedInputPositions);
  swap(a.__fbthrift_field_outputDataSizeInBytes, b.__fbthrift_field_outputDataSizeInBytes);
  swap(a.__fbthrift_field_outputPositions, b.__fbthrift_field_outputPositions);
  swap(a.__fbthrift_field_physicalWrittenDataSizeInBytes, b.__fbthrift_field_physicalWrittenDataSizeInBytes);
  swap(a.__fbthrift_field_operatorSummaries, b.__fbthrift_field_operatorSummaries);
  swap(a.__fbthrift_field_drivers, b.__fbthrift_field_drivers);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void PipelineStats::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t PipelineStats::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t PipelineStats::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t PipelineStats::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void PipelineStats::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t PipelineStats::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t PipelineStats::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t PipelineStats::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        PipelineStats,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::DistributionSnapshot>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        PipelineStats,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::DistributionSnapshot>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        PipelineStats,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::OperatorStats>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        PipelineStats,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::DriverStats>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::RuntimeMetric>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::RuntimeMetric>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view RuntimeMetric::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RuntimeMetric>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view RuntimeMetric::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RuntimeMetric>::name;
}

RuntimeMetric::RuntimeMetric(const RuntimeMetric&) = default;
RuntimeMetric& RuntimeMetric::operator=(const RuntimeMetric&) = default;
RuntimeMetric::RuntimeMetric() :
    __fbthrift_field_sum(),
    __fbthrift_field_count(),
    __fbthrift_field_max(),
    __fbthrift_field_min(),
    __fbthrift_field_unit() {
}


RuntimeMetric::~RuntimeMetric() {}

RuntimeMetric::RuntimeMetric([[maybe_unused]] RuntimeMetric&& other) noexcept :
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __fbthrift_field_sum(std::move(other.__fbthrift_field_sum)),
    __fbthrift_field_count(std::move(other.__fbthrift_field_count)),
    __fbthrift_field_max(std::move(other.__fbthrift_field_max)),
    __fbthrift_field_min(std::move(other.__fbthrift_field_min)),
    __fbthrift_field_unit(std::move(other.__fbthrift_field_unit)),
    __isset(other.__isset) {
}

RuntimeMetric& RuntimeMetric::operator=([[maybe_unused]] RuntimeMetric&& other) noexcept {
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    this->__fbthrift_field_sum = std::move(other.__fbthrift_field_sum);
    this->__fbthrift_field_count = std::move(other.__fbthrift_field_count);
    this->__fbthrift_field_max = std::move(other.__fbthrift_field_max);
    this->__fbthrift_field_min = std::move(other.__fbthrift_field_min);
    this->__fbthrift_field_unit = std::move(other.__fbthrift_field_unit);
    __isset = other.__isset;
    return *this;
}


RuntimeMetric::RuntimeMetric(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::int64_t sum__arg, ::std::int64_t count__arg, ::std::int64_t max__arg, ::std::int64_t min__arg, ::facebook::presto::protocol::cpp2::RuntimeUnit unit__arg) :
    __fbthrift_field_name(std::move(name__arg)),
    __fbthrift_field_sum(std::move(sum__arg)),
    __fbthrift_field_count(std::move(count__arg)),
    __fbthrift_field_max(std::move(max__arg)),
    __fbthrift_field_min(std::move(min__arg)),
    __fbthrift_field_unit(std::move(unit__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}


void RuntimeMetric::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_name = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_sum = ::std::int64_t();
  this->__fbthrift_field_count = ::std::int64_t();
  this->__fbthrift_field_max = ::std::int64_t();
  this->__fbthrift_field_min = ::std::int64_t();
  this->__fbthrift_field_unit = ::facebook::presto::protocol::cpp2::RuntimeUnit();
  __isset = {};
}

void RuntimeMetric::__fbthrift_clear_terse_fields() {
}

bool RuntimeMetric::__fbthrift_is_empty() const {
  return false;
}

bool RuntimeMetric::operator==([[maybe_unused]] const RuntimeMetric& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RuntimeMetric::operator<([[maybe_unused]] const RuntimeMetric& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t RuntimeMetric::get_sum() const {
  return __fbthrift_field_sum;
}

::std::int64_t& RuntimeMetric::set_sum(::std::int64_t sum_) {
  sum_ref() = sum_;
  return __fbthrift_field_sum;
}

::std::int64_t RuntimeMetric::get_count() const {
  return __fbthrift_field_count;
}

::std::int64_t& RuntimeMetric::set_count(::std::int64_t count_) {
  count_ref() = count_;
  return __fbthrift_field_count;
}

::std::int64_t RuntimeMetric::get_max() const {
  return __fbthrift_field_max;
}

::std::int64_t& RuntimeMetric::set_max(::std::int64_t max_) {
  max_ref() = max_;
  return __fbthrift_field_max;
}

::std::int64_t RuntimeMetric::get_min() const {
  return __fbthrift_field_min;
}

::std::int64_t& RuntimeMetric::set_min(::std::int64_t min_) {
  min_ref() = min_;
  return __fbthrift_field_min;
}

::facebook::presto::protocol::cpp2::RuntimeUnit RuntimeMetric::get_unit() const {
  return __fbthrift_field_unit;
}

::facebook::presto::protocol::cpp2::RuntimeUnit& RuntimeMetric::set_unit(::facebook::presto::protocol::cpp2::RuntimeUnit unit_) {
  unit_ref() = unit_;
  return __fbthrift_field_unit;
}

void swap([[maybe_unused]] RuntimeMetric& a, [[maybe_unused]] RuntimeMetric& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__fbthrift_field_sum, b.__fbthrift_field_sum);
  swap(a.__fbthrift_field_count, b.__fbthrift_field_count);
  swap(a.__fbthrift_field_max, b.__fbthrift_field_max);
  swap(a.__fbthrift_field_min, b.__fbthrift_field_min);
  swap(a.__fbthrift_field_unit, b.__fbthrift_field_unit);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void RuntimeMetric::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RuntimeMetric::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RuntimeMetric::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RuntimeMetric::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RuntimeMetric::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RuntimeMetric::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RuntimeMetric::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RuntimeMetric::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::JoinOperatorInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::JoinOperatorInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view JoinOperatorInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<JoinOperatorInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view JoinOperatorInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<JoinOperatorInfo>::name;
}

JoinOperatorInfo::JoinOperatorInfo(const JoinOperatorInfo&) = default;
JoinOperatorInfo& JoinOperatorInfo::operator=(const JoinOperatorInfo&) = default;
JoinOperatorInfo::JoinOperatorInfo() :
    __fbthrift_field_joinType(),
    __fbthrift_field_lookupSourcePositions() {
}


JoinOperatorInfo::~JoinOperatorInfo() {}

JoinOperatorInfo::JoinOperatorInfo([[maybe_unused]] JoinOperatorInfo&& other) noexcept :
    __fbthrift_field_joinType(std::move(other.__fbthrift_field_joinType)),
    __fbthrift_field_logHistogramProbes(std::move(other.__fbthrift_field_logHistogramProbes)),
    __fbthrift_field_logHistogramOutput(std::move(other.__fbthrift_field_logHistogramOutput)),
    __fbthrift_field_lookupSourcePositions(std::move(other.__fbthrift_field_lookupSourcePositions)),
    __isset(other.__isset) {
}

JoinOperatorInfo& JoinOperatorInfo::operator=([[maybe_unused]] JoinOperatorInfo&& other) noexcept {
    this->__fbthrift_field_joinType = std::move(other.__fbthrift_field_joinType);
    this->__fbthrift_field_logHistogramProbes = std::move(other.__fbthrift_field_logHistogramProbes);
    this->__fbthrift_field_logHistogramOutput = std::move(other.__fbthrift_field_logHistogramOutput);
    this->__fbthrift_field_lookupSourcePositions = std::move(other.__fbthrift_field_lookupSourcePositions);
    __isset = other.__isset;
    return *this;
}


JoinOperatorInfo::JoinOperatorInfo(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::JoinType joinType__arg, ::std::vector<::std::int64_t> logHistogramProbes__arg, ::std::vector<::std::int64_t> logHistogramOutput__arg, ::std::int64_t lookupSourcePositions__arg) :
    __fbthrift_field_joinType(std::move(joinType__arg)),
    __fbthrift_field_logHistogramProbes(std::move(logHistogramProbes__arg)),
    __fbthrift_field_logHistogramOutput(std::move(logHistogramOutput__arg)),
    __fbthrift_field_lookupSourcePositions(std::move(lookupSourcePositions__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void JoinOperatorInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_joinType = ::facebook::presto::protocol::cpp2::JoinType();
  this->__fbthrift_field_logHistogramProbes.clear();
  this->__fbthrift_field_logHistogramOutput.clear();
  this->__fbthrift_field_lookupSourcePositions = ::std::int64_t();
  __isset = {};
}

void JoinOperatorInfo::__fbthrift_clear_terse_fields() {
}

bool JoinOperatorInfo::__fbthrift_is_empty() const {
  return false;
}

bool JoinOperatorInfo::operator==([[maybe_unused]] const JoinOperatorInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool JoinOperatorInfo::operator<([[maybe_unused]] const JoinOperatorInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::facebook::presto::protocol::cpp2::JoinType JoinOperatorInfo::get_joinType() const {
  return __fbthrift_field_joinType;
}

::facebook::presto::protocol::cpp2::JoinType& JoinOperatorInfo::set_joinType(::facebook::presto::protocol::cpp2::JoinType joinType_) {
  joinType_ref() = joinType_;
  return __fbthrift_field_joinType;
}

const ::std::vector<::std::int64_t>& JoinOperatorInfo::get_logHistogramProbes() const& {
  return __fbthrift_field_logHistogramProbes;
}

::std::vector<::std::int64_t> JoinOperatorInfo::get_logHistogramProbes() && {
  return static_cast<::std::vector<::std::int64_t>&&>(__fbthrift_field_logHistogramProbes);
}

const ::std::vector<::std::int64_t>& JoinOperatorInfo::get_logHistogramOutput() const& {
  return __fbthrift_field_logHistogramOutput;
}

::std::vector<::std::int64_t> JoinOperatorInfo::get_logHistogramOutput() && {
  return static_cast<::std::vector<::std::int64_t>&&>(__fbthrift_field_logHistogramOutput);
}

const ::std::int64_t* JoinOperatorInfo::get_lookupSourcePositions() const& {
  return lookupSourcePositions_ref().has_value() ? std::addressof(__fbthrift_field_lookupSourcePositions) : nullptr;
}

::std::int64_t* JoinOperatorInfo::get_lookupSourcePositions() & {
  return lookupSourcePositions_ref().has_value() ? std::addressof(__fbthrift_field_lookupSourcePositions) : nullptr;
}

::std::int64_t& JoinOperatorInfo::set_lookupSourcePositions(::std::int64_t lookupSourcePositions_) {
  lookupSourcePositions_ref() = lookupSourcePositions_;
  return __fbthrift_field_lookupSourcePositions;
}

void swap([[maybe_unused]] JoinOperatorInfo& a, [[maybe_unused]] JoinOperatorInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_joinType, b.__fbthrift_field_joinType);
  swap(a.__fbthrift_field_logHistogramProbes, b.__fbthrift_field_logHistogramProbes);
  swap(a.__fbthrift_field_logHistogramOutput, b.__fbthrift_field_logHistogramOutput);
  swap(a.__fbthrift_field_lookupSourcePositions, b.__fbthrift_field_lookupSourcePositions);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void JoinOperatorInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t JoinOperatorInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t JoinOperatorInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t JoinOperatorInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void JoinOperatorInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t JoinOperatorInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t JoinOperatorInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t JoinOperatorInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::SessionRepresentation>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::SessionRepresentation>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view SessionRepresentation::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SessionRepresentation>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SessionRepresentation::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SessionRepresentation>::name;
}

SessionRepresentation::SessionRepresentation(const SessionRepresentation&) = default;
SessionRepresentation& SessionRepresentation::operator=(const SessionRepresentation&) = default;
SessionRepresentation::SessionRepresentation() :
    __fbthrift_field_clientTransactionSupport(),
    __fbthrift_field_startTime() {
}


SessionRepresentation::~SessionRepresentation() {}

SessionRepresentation::SessionRepresentation([[maybe_unused]] SessionRepresentation&& other) noexcept :
    __fbthrift_field_queryId(std::move(other.__fbthrift_field_queryId)),
    __fbthrift_field_transactionId(std::move(other.__fbthrift_field_transactionId)),
    __fbthrift_field_clientTransactionSupport(std::move(other.__fbthrift_field_clientTransactionSupport)),
    __fbthrift_field_user(std::move(other.__fbthrift_field_user)),
    __fbthrift_field_principal(std::move(other.__fbthrift_field_principal)),
    __fbthrift_field_source(std::move(other.__fbthrift_field_source)),
    __fbthrift_field_catalog(std::move(other.__fbthrift_field_catalog)),
    __fbthrift_field_schema(std::move(other.__fbthrift_field_schema)),
    __fbthrift_field_traceToken(std::move(other.__fbthrift_field_traceToken)),
    __fbthrift_field_timeZoneKey(std::move(other.__fbthrift_field_timeZoneKey)),
    __fbthrift_field_locale(std::move(other.__fbthrift_field_locale)),
    __fbthrift_field_remoteUserAddress(std::move(other.__fbthrift_field_remoteUserAddress)),
    __fbthrift_field_userAgent(std::move(other.__fbthrift_field_userAgent)),
    __fbthrift_field_clientInfo(std::move(other.__fbthrift_field_clientInfo)),
    __fbthrift_field_clientTags(std::move(other.__fbthrift_field_clientTags)),
    __fbthrift_field_resourceEstimates(std::move(other.__fbthrift_field_resourceEstimates)),
    __fbthrift_field_startTime(std::move(other.__fbthrift_field_startTime)),
    __fbthrift_field_systemProperties(std::move(other.__fbthrift_field_systemProperties)),
    __fbthrift_field_catalogProperties(std::move(other.__fbthrift_field_catalogProperties)),
    __fbthrift_field_unprocessedCatalogProperties(std::move(other.__fbthrift_field_unprocessedCatalogProperties)),
    __fbthrift_field_roles(std::move(other.__fbthrift_field_roles)),
    __fbthrift_field_preparedStatements(std::move(other.__fbthrift_field_preparedStatements)),
    __fbthrift_field_sessionFunctions(std::move(other.__fbthrift_field_sessionFunctions)),
    __isset(other.__isset) {
}

SessionRepresentation& SessionRepresentation::operator=([[maybe_unused]] SessionRepresentation&& other) noexcept {
    this->__fbthrift_field_queryId = std::move(other.__fbthrift_field_queryId);
    this->__fbthrift_field_transactionId = std::move(other.__fbthrift_field_transactionId);
    this->__fbthrift_field_clientTransactionSupport = std::move(other.__fbthrift_field_clientTransactionSupport);
    this->__fbthrift_field_user = std::move(other.__fbthrift_field_user);
    this->__fbthrift_field_principal = std::move(other.__fbthrift_field_principal);
    this->__fbthrift_field_source = std::move(other.__fbthrift_field_source);
    this->__fbthrift_field_catalog = std::move(other.__fbthrift_field_catalog);
    this->__fbthrift_field_schema = std::move(other.__fbthrift_field_schema);
    this->__fbthrift_field_traceToken = std::move(other.__fbthrift_field_traceToken);
    this->__fbthrift_field_timeZoneKey = std::move(other.__fbthrift_field_timeZoneKey);
    this->__fbthrift_field_locale = std::move(other.__fbthrift_field_locale);
    this->__fbthrift_field_remoteUserAddress = std::move(other.__fbthrift_field_remoteUserAddress);
    this->__fbthrift_field_userAgent = std::move(other.__fbthrift_field_userAgent);
    this->__fbthrift_field_clientInfo = std::move(other.__fbthrift_field_clientInfo);
    this->__fbthrift_field_clientTags = std::move(other.__fbthrift_field_clientTags);
    this->__fbthrift_field_resourceEstimates = std::move(other.__fbthrift_field_resourceEstimates);
    this->__fbthrift_field_startTime = std::move(other.__fbthrift_field_startTime);
    this->__fbthrift_field_systemProperties = std::move(other.__fbthrift_field_systemProperties);
    this->__fbthrift_field_catalogProperties = std::move(other.__fbthrift_field_catalogProperties);
    this->__fbthrift_field_unprocessedCatalogProperties = std::move(other.__fbthrift_field_unprocessedCatalogProperties);
    this->__fbthrift_field_roles = std::move(other.__fbthrift_field_roles);
    this->__fbthrift_field_preparedStatements = std::move(other.__fbthrift_field_preparedStatements);
    this->__fbthrift_field_sessionFunctions = std::move(other.__fbthrift_field_sessionFunctions);
    __isset = other.__isset;
    return *this;
}


SessionRepresentation::SessionRepresentation(apache::thrift::FragileConstructor, ::std::string queryId__arg, ::facebook::presto::protocol::cpp2::TransactionId transactionId__arg, bool clientTransactionSupport__arg, ::std::string user__arg, ::std::string principal__arg, ::std::string source__arg, ::std::string catalog__arg, ::std::string schema__arg, ::std::string traceToken__arg, ::facebook::presto::protocol::cpp2::TimeZoneKey timeZoneKey__arg, ::std::string locale__arg, ::std::string remoteUserAddress__arg, ::std::string userAgent__arg, ::std::string clientInfo__arg, ::std::set<::std::string> clientTags__arg, ::facebook::presto::protocol::cpp2::ResourceEstimates resourceEstimates__arg, ::std::int64_t startTime__arg, ::std::map<::std::string, ::std::string> systemProperties__arg, ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>> catalogProperties__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::string>> unprocessedCatalogProperties__arg, ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole> roles__arg, ::std::map<::std::string, ::std::string> preparedStatements__arg, ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction> sessionFunctions__arg) :
    __fbthrift_field_queryId(std::move(queryId__arg)),
    __fbthrift_field_transactionId(std::move(transactionId__arg)),
    __fbthrift_field_clientTransactionSupport(std::move(clientTransactionSupport__arg)),
    __fbthrift_field_user(std::move(user__arg)),
    __fbthrift_field_principal(std::move(principal__arg)),
    __fbthrift_field_source(std::move(source__arg)),
    __fbthrift_field_catalog(std::move(catalog__arg)),
    __fbthrift_field_schema(std::move(schema__arg)),
    __fbthrift_field_traceToken(std::move(traceToken__arg)),
    __fbthrift_field_timeZoneKey(std::move(timeZoneKey__arg)),
    __fbthrift_field_locale(std::move(locale__arg)),
    __fbthrift_field_remoteUserAddress(std::move(remoteUserAddress__arg)),
    __fbthrift_field_userAgent(std::move(userAgent__arg)),
    __fbthrift_field_clientInfo(std::move(clientInfo__arg)),
    __fbthrift_field_clientTags(std::move(clientTags__arg)),
    __fbthrift_field_resourceEstimates(std::move(resourceEstimates__arg)),
    __fbthrift_field_startTime(std::move(startTime__arg)),
    __fbthrift_field_systemProperties(std::move(systemProperties__arg)),
    __fbthrift_field_catalogProperties(std::move(catalogProperties__arg)),
    __fbthrift_field_unprocessedCatalogProperties(std::move(unprocessedCatalogProperties__arg)),
    __fbthrift_field_roles(std::move(roles__arg)),
    __fbthrift_field_preparedStatements(std::move(preparedStatements__arg)),
    __fbthrift_field_sessionFunctions(std::move(sessionFunctions__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
}


void SessionRepresentation::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_queryId = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_transactionId);
  this->__fbthrift_field_clientTransactionSupport = bool();
  this->__fbthrift_field_user = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_principal = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_source = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_catalog = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_schema = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_traceToken = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_timeZoneKey);
  this->__fbthrift_field_locale = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_remoteUserAddress = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_userAgent = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_clientInfo = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_clientTags.clear();
  ::apache::thrift::clear(this->__fbthrift_field_resourceEstimates);
  this->__fbthrift_field_startTime = ::std::int64_t();
  this->__fbthrift_field_systemProperties.clear();
  this->__fbthrift_field_catalogProperties.clear();
  this->__fbthrift_field_unprocessedCatalogProperties.clear();
  this->__fbthrift_field_roles.clear();
  this->__fbthrift_field_preparedStatements.clear();
  this->__fbthrift_field_sessionFunctions.clear();
  __isset = {};
}

void SessionRepresentation::__fbthrift_clear_terse_fields() {
}

bool SessionRepresentation::__fbthrift_is_empty() const {
  return false;
}

bool SessionRepresentation::operator==([[maybe_unused]] const SessionRepresentation& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SessionRepresentation::operator<([[maybe_unused]] const SessionRepresentation& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::TransactionId* SessionRepresentation::get_transactionId() const& {
  return transactionId_ref().has_value() ? std::addressof(__fbthrift_field_transactionId) : nullptr;
}

::facebook::presto::protocol::cpp2::TransactionId* SessionRepresentation::get_transactionId() & {
  return transactionId_ref().has_value() ? std::addressof(__fbthrift_field_transactionId) : nullptr;
}

bool SessionRepresentation::get_clientTransactionSupport() const {
  return __fbthrift_field_clientTransactionSupport;
}

bool& SessionRepresentation::set_clientTransactionSupport(bool clientTransactionSupport_) {
  clientTransactionSupport_ref() = clientTransactionSupport_;
  return __fbthrift_field_clientTransactionSupport;
}

const ::std::string* SessionRepresentation::get_principal() const& {
  return principal_ref().has_value() ? std::addressof(__fbthrift_field_principal) : nullptr;
}

::std::string* SessionRepresentation::get_principal() & {
  return principal_ref().has_value() ? std::addressof(__fbthrift_field_principal) : nullptr;
}

const ::std::string* SessionRepresentation::get_source() const& {
  return source_ref().has_value() ? std::addressof(__fbthrift_field_source) : nullptr;
}

::std::string* SessionRepresentation::get_source() & {
  return source_ref().has_value() ? std::addressof(__fbthrift_field_source) : nullptr;
}

const ::std::string* SessionRepresentation::get_catalog() const& {
  return catalog_ref().has_value() ? std::addressof(__fbthrift_field_catalog) : nullptr;
}

::std::string* SessionRepresentation::get_catalog() & {
  return catalog_ref().has_value() ? std::addressof(__fbthrift_field_catalog) : nullptr;
}

const ::std::string* SessionRepresentation::get_schema() const& {
  return schema_ref().has_value() ? std::addressof(__fbthrift_field_schema) : nullptr;
}

::std::string* SessionRepresentation::get_schema() & {
  return schema_ref().has_value() ? std::addressof(__fbthrift_field_schema) : nullptr;
}

const ::std::string* SessionRepresentation::get_traceToken() const& {
  return traceToken_ref().has_value() ? std::addressof(__fbthrift_field_traceToken) : nullptr;
}

::std::string* SessionRepresentation::get_traceToken() & {
  return traceToken_ref().has_value() ? std::addressof(__fbthrift_field_traceToken) : nullptr;
}

const ::facebook::presto::protocol::cpp2::TimeZoneKey& SessionRepresentation::get_timeZoneKey() const& {
  return __fbthrift_field_timeZoneKey;
}

::facebook::presto::protocol::cpp2::TimeZoneKey SessionRepresentation::get_timeZoneKey() && {
  return static_cast<::facebook::presto::protocol::cpp2::TimeZoneKey&&>(__fbthrift_field_timeZoneKey);
}

const ::std::string* SessionRepresentation::get_remoteUserAddress() const& {
  return remoteUserAddress_ref().has_value() ? std::addressof(__fbthrift_field_remoteUserAddress) : nullptr;
}

::std::string* SessionRepresentation::get_remoteUserAddress() & {
  return remoteUserAddress_ref().has_value() ? std::addressof(__fbthrift_field_remoteUserAddress) : nullptr;
}

const ::std::string* SessionRepresentation::get_userAgent() const& {
  return userAgent_ref().has_value() ? std::addressof(__fbthrift_field_userAgent) : nullptr;
}

::std::string* SessionRepresentation::get_userAgent() & {
  return userAgent_ref().has_value() ? std::addressof(__fbthrift_field_userAgent) : nullptr;
}

const ::std::string* SessionRepresentation::get_clientInfo() const& {
  return clientInfo_ref().has_value() ? std::addressof(__fbthrift_field_clientInfo) : nullptr;
}

::std::string* SessionRepresentation::get_clientInfo() & {
  return clientInfo_ref().has_value() ? std::addressof(__fbthrift_field_clientInfo) : nullptr;
}

const ::std::set<::std::string>& SessionRepresentation::get_clientTags() const& {
  return __fbthrift_field_clientTags;
}

::std::set<::std::string> SessionRepresentation::get_clientTags() && {
  return static_cast<::std::set<::std::string>&&>(__fbthrift_field_clientTags);
}

const ::facebook::presto::protocol::cpp2::ResourceEstimates& SessionRepresentation::get_resourceEstimates() const& {
  return __fbthrift_field_resourceEstimates;
}

::facebook::presto::protocol::cpp2::ResourceEstimates SessionRepresentation::get_resourceEstimates() && {
  return static_cast<::facebook::presto::protocol::cpp2::ResourceEstimates&&>(__fbthrift_field_resourceEstimates);
}

::std::int64_t SessionRepresentation::get_startTime() const {
  return __fbthrift_field_startTime;
}

::std::int64_t& SessionRepresentation::set_startTime(::std::int64_t startTime_) {
  startTime_ref() = startTime_;
  return __fbthrift_field_startTime;
}

const ::std::map<::std::string, ::std::string>& SessionRepresentation::get_systemProperties() const& {
  return __fbthrift_field_systemProperties;
}

::std::map<::std::string, ::std::string> SessionRepresentation::get_systemProperties() && {
  return static_cast<::std::map<::std::string, ::std::string>&&>(__fbthrift_field_systemProperties);
}

const ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>& SessionRepresentation::get_catalogProperties() const& {
  return __fbthrift_field_catalogProperties;
}

::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>> SessionRepresentation::get_catalogProperties() && {
  return static_cast<::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>&&>(__fbthrift_field_catalogProperties);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::string>>& SessionRepresentation::get_unprocessedCatalogProperties() const& {
  return __fbthrift_field_unprocessedCatalogProperties;
}

::std::map<::std::string, ::std::map<::std::string, ::std::string>> SessionRepresentation::get_unprocessedCatalogProperties() && {
  return static_cast<::std::map<::std::string, ::std::map<::std::string, ::std::string>>&&>(__fbthrift_field_unprocessedCatalogProperties);
}

const ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>& SessionRepresentation::get_roles() const& {
  return __fbthrift_field_roles;
}

::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole> SessionRepresentation::get_roles() && {
  return static_cast<::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>&&>(__fbthrift_field_roles);
}

const ::std::map<::std::string, ::std::string>& SessionRepresentation::get_preparedStatements() const& {
  return __fbthrift_field_preparedStatements;
}

::std::map<::std::string, ::std::string> SessionRepresentation::get_preparedStatements() && {
  return static_cast<::std::map<::std::string, ::std::string>&&>(__fbthrift_field_preparedStatements);
}

const ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>& SessionRepresentation::get_sessionFunctions() const& {
  return __fbthrift_field_sessionFunctions;
}

::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction> SessionRepresentation::get_sessionFunctions() && {
  return static_cast<::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>&&>(__fbthrift_field_sessionFunctions);
}

void swap([[maybe_unused]] SessionRepresentation& a, [[maybe_unused]] SessionRepresentation& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_queryId, b.__fbthrift_field_queryId);
  swap(a.__fbthrift_field_transactionId, b.__fbthrift_field_transactionId);
  swap(a.__fbthrift_field_clientTransactionSupport, b.__fbthrift_field_clientTransactionSupport);
  swap(a.__fbthrift_field_user, b.__fbthrift_field_user);
  swap(a.__fbthrift_field_principal, b.__fbthrift_field_principal);
  swap(a.__fbthrift_field_source, b.__fbthrift_field_source);
  swap(a.__fbthrift_field_catalog, b.__fbthrift_field_catalog);
  swap(a.__fbthrift_field_schema, b.__fbthrift_field_schema);
  swap(a.__fbthrift_field_traceToken, b.__fbthrift_field_traceToken);
  swap(a.__fbthrift_field_timeZoneKey, b.__fbthrift_field_timeZoneKey);
  swap(a.__fbthrift_field_locale, b.__fbthrift_field_locale);
  swap(a.__fbthrift_field_remoteUserAddress, b.__fbthrift_field_remoteUserAddress);
  swap(a.__fbthrift_field_userAgent, b.__fbthrift_field_userAgent);
  swap(a.__fbthrift_field_clientInfo, b.__fbthrift_field_clientInfo);
  swap(a.__fbthrift_field_clientTags, b.__fbthrift_field_clientTags);
  swap(a.__fbthrift_field_resourceEstimates, b.__fbthrift_field_resourceEstimates);
  swap(a.__fbthrift_field_startTime, b.__fbthrift_field_startTime);
  swap(a.__fbthrift_field_systemProperties, b.__fbthrift_field_systemProperties);
  swap(a.__fbthrift_field_catalogProperties, b.__fbthrift_field_catalogProperties);
  swap(a.__fbthrift_field_unprocessedCatalogProperties, b.__fbthrift_field_unprocessedCatalogProperties);
  swap(a.__fbthrift_field_roles, b.__fbthrift_field_roles);
  swap(a.__fbthrift_field_preparedStatements, b.__fbthrift_field_preparedStatements);
  swap(a.__fbthrift_field_sessionFunctions, b.__fbthrift_field_sessionFunctions);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void SessionRepresentation::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SessionRepresentation::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SessionRepresentation::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SessionRepresentation::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SessionRepresentation::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SessionRepresentation::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SessionRepresentation::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SessionRepresentation::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SessionRepresentation,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TransactionId>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SessionRepresentation,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TimeZoneKey>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SessionRepresentation,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::ResourceEstimates>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SessionRepresentation,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>>,
        ::std::map<::facebook::presto::protocol::cpp2::ConnectorId, ::std::map<::std::string, ::std::string>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SessionRepresentation,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::facebook::presto::protocol::cpp2::SelectedRole>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SessionRepresentation,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>,
        ::std::map<::facebook::presto::protocol::cpp2::SqlFunctionId, ::facebook::presto::protocol::cpp2::SqlInvokedFunction>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::SelectedRole>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::SelectedRole>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view SelectedRole::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SelectedRole>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SelectedRole::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SelectedRole>::name;
}

SelectedRole::SelectedRole(const SelectedRole&) = default;
SelectedRole& SelectedRole::operator=(const SelectedRole&) = default;
SelectedRole::SelectedRole() :
    __fbthrift_field_type() {
}


SelectedRole::~SelectedRole() {}

SelectedRole::SelectedRole([[maybe_unused]] SelectedRole&& other) noexcept :
    __fbthrift_field_type(std::move(other.__fbthrift_field_type)),
    __fbthrift_field_role(std::move(other.__fbthrift_field_role)),
    __isset(other.__isset) {
}

SelectedRole& SelectedRole::operator=([[maybe_unused]] SelectedRole&& other) noexcept {
    this->__fbthrift_field_type = std::move(other.__fbthrift_field_type);
    this->__fbthrift_field_role = std::move(other.__fbthrift_field_role);
    __isset = other.__isset;
    return *this;
}


SelectedRole::SelectedRole(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::Type type__arg, ::std::string role__arg) :
    __fbthrift_field_type(std::move(type__arg)),
    __fbthrift_field_role(std::move(role__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void SelectedRole::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_type = ::facebook::presto::protocol::cpp2::Type();
  this->__fbthrift_field_role = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void SelectedRole::__fbthrift_clear_terse_fields() {
}

bool SelectedRole::__fbthrift_is_empty() const {
  return false;
}

bool SelectedRole::operator==([[maybe_unused]] const SelectedRole& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SelectedRole::operator<([[maybe_unused]] const SelectedRole& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::facebook::presto::protocol::cpp2::Type SelectedRole::get_type() const {
  return __fbthrift_field_type;
}

::facebook::presto::protocol::cpp2::Type& SelectedRole::set_type(::facebook::presto::protocol::cpp2::Type type_) {
  type_ref() = type_;
  return __fbthrift_field_type;
}

const ::std::string* SelectedRole::get_role() const& {
  return role_ref().has_value() ? std::addressof(__fbthrift_field_role) : nullptr;
}

::std::string* SelectedRole::get_role() & {
  return role_ref().has_value() ? std::addressof(__fbthrift_field_role) : nullptr;
}

void swap([[maybe_unused]] SelectedRole& a, [[maybe_unused]] SelectedRole& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_type, b.__fbthrift_field_type);
  swap(a.__fbthrift_field_role, b.__fbthrift_field_role);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void SelectedRole::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SelectedRole::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SelectedRole::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SelectedRole::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SelectedRole::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SelectedRole::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SelectedRole::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SelectedRole::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif


} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::Parameter>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::Parameter>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view Parameter::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Parameter>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Parameter::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Parameter>::name;
}

Parameter::Parameter(const Parameter&) = default;
Parameter& Parameter::operator=(const Parameter&) = default;
Parameter::Parameter() {
}


Parameter::~Parameter() {}

Parameter::Parameter([[maybe_unused]] Parameter&& other) noexcept :
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __fbthrift_field_type(std::move(other.__fbthrift_field_type)),
    __isset(other.__isset) {
}

Parameter& Parameter::operator=([[maybe_unused]] Parameter&& other) noexcept {
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    this->__fbthrift_field_type = std::move(other.__fbthrift_field_type);
    __isset = other.__isset;
    return *this;
}


Parameter::Parameter(apache::thrift::FragileConstructor, ::std::string name__arg, ::facebook::presto::protocol::cpp2::TypeSignature type__arg) :
    __fbthrift_field_name(std::move(name__arg)),
    __fbthrift_field_type(std::move(type__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void Parameter::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_name = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_type);
  __isset = {};
}

void Parameter::__fbthrift_clear_terse_fields() {
}

bool Parameter::__fbthrift_is_empty() const {
  return false;
}

bool Parameter::operator==([[maybe_unused]] const Parameter& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Parameter::operator<([[maybe_unused]] const Parameter& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::TypeSignature& Parameter::get_type() const& {
  return __fbthrift_field_type;
}

::facebook::presto::protocol::cpp2::TypeSignature Parameter::get_type() && {
  return static_cast<::facebook::presto::protocol::cpp2::TypeSignature&&>(__fbthrift_field_type);
}

void swap([[maybe_unused]] Parameter& a, [[maybe_unused]] Parameter& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__fbthrift_field_type, b.__fbthrift_field_type);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void Parameter::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Parameter::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Parameter::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Parameter::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Parameter::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Parameter::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Parameter::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Parameter::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Parameter,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TypeSignature>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::RoutineCharacteristics>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::RoutineCharacteristics>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view RoutineCharacteristics::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RoutineCharacteristics>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view RoutineCharacteristics::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RoutineCharacteristics>::name;
}

RoutineCharacteristics::RoutineCharacteristics(const RoutineCharacteristics&) = default;
RoutineCharacteristics& RoutineCharacteristics::operator=(const RoutineCharacteristics&) = default;
RoutineCharacteristics::RoutineCharacteristics([[maybe_unused]] RoutineCharacteristics&& other) noexcept :
    __fbthrift_field_language(std::move(other.__fbthrift_field_language)),
    __fbthrift_field_determinism(std::move(other.__fbthrift_field_determinism)),
    __fbthrift_field_nullCallClause(std::move(other.__fbthrift_field_nullCallClause)),
    __isset(other.__isset) {
}

RoutineCharacteristics& RoutineCharacteristics::operator=([[maybe_unused]] RoutineCharacteristics&& other) noexcept {
    this->__fbthrift_field_language = std::move(other.__fbthrift_field_language);
    this->__fbthrift_field_determinism = std::move(other.__fbthrift_field_determinism);
    this->__fbthrift_field_nullCallClause = std::move(other.__fbthrift_field_nullCallClause);
    __isset = other.__isset;
    return *this;
}


RoutineCharacteristics::RoutineCharacteristics(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::Language language__arg, ::facebook::presto::protocol::cpp2::Determinism determinism__arg, ::facebook::presto::protocol::cpp2::NullCallClause nullCallClause__arg) :
    __fbthrift_field_language(std::move(language__arg)),
    __fbthrift_field_determinism(std::move(determinism__arg)),
    __fbthrift_field_nullCallClause(std::move(nullCallClause__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void RoutineCharacteristics::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_language);
  this->__fbthrift_field_determinism = ::facebook::presto::protocol::cpp2::Determinism();
  this->__fbthrift_field_nullCallClause = ::facebook::presto::protocol::cpp2::NullCallClause();
  __isset = {};
}

void RoutineCharacteristics::__fbthrift_clear_terse_fields() {
}

bool RoutineCharacteristics::__fbthrift_is_empty() const {
  return false;
}

bool RoutineCharacteristics::operator==([[maybe_unused]] const RoutineCharacteristics& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RoutineCharacteristics::operator<([[maybe_unused]] const RoutineCharacteristics& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::Language& RoutineCharacteristics::get_language() const& {
  return __fbthrift_field_language;
}

::facebook::presto::protocol::cpp2::Language RoutineCharacteristics::get_language() && {
  return static_cast<::facebook::presto::protocol::cpp2::Language&&>(__fbthrift_field_language);
}

::facebook::presto::protocol::cpp2::Determinism RoutineCharacteristics::get_determinism() const {
  return __fbthrift_field_determinism;
}

::facebook::presto::protocol::cpp2::Determinism& RoutineCharacteristics::set_determinism(::facebook::presto::protocol::cpp2::Determinism determinism_) {
  determinism_ref() = determinism_;
  return __fbthrift_field_determinism;
}

::facebook::presto::protocol::cpp2::NullCallClause RoutineCharacteristics::get_nullCallClause() const {
  return __fbthrift_field_nullCallClause;
}

::facebook::presto::protocol::cpp2::NullCallClause& RoutineCharacteristics::set_nullCallClause(::facebook::presto::protocol::cpp2::NullCallClause nullCallClause_) {
  nullCallClause_ref() = nullCallClause_;
  return __fbthrift_field_nullCallClause;
}

void swap([[maybe_unused]] RoutineCharacteristics& a, [[maybe_unused]] RoutineCharacteristics& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_language, b.__fbthrift_field_language);
  swap(a.__fbthrift_field_determinism, b.__fbthrift_field_determinism);
  swap(a.__fbthrift_field_nullCallClause, b.__fbthrift_field_nullCallClause);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void RoutineCharacteristics::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RoutineCharacteristics::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RoutineCharacteristics::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RoutineCharacteristics::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RoutineCharacteristics::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RoutineCharacteristics::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RoutineCharacteristics::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RoutineCharacteristics::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RoutineCharacteristics,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::Language>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::Signature>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::Signature>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view Signature::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Signature>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Signature::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Signature>::name;
}

Signature::Signature(const Signature&) = default;
Signature& Signature::operator=(const Signature&) = default;
Signature::Signature() :
    __fbthrift_field_kind(),
    __fbthrift_field_variableArity() {
}


Signature::~Signature() {}

Signature::Signature([[maybe_unused]] Signature&& other) noexcept :
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __fbthrift_field_kind(std::move(other.__fbthrift_field_kind)),
    __fbthrift_field_returnType(std::move(other.__fbthrift_field_returnType)),
    __fbthrift_field_argumentTypes(std::move(other.__fbthrift_field_argumentTypes)),
    __fbthrift_field_variableArity(std::move(other.__fbthrift_field_variableArity)),
    __fbthrift_field_typeVariableConstraints(std::move(other.__fbthrift_field_typeVariableConstraints)),
    __fbthrift_field_longVariableConstraints(std::move(other.__fbthrift_field_longVariableConstraints)),
    __isset(other.__isset) {
}

Signature& Signature::operator=([[maybe_unused]] Signature&& other) noexcept {
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    this->__fbthrift_field_kind = std::move(other.__fbthrift_field_kind);
    this->__fbthrift_field_returnType = std::move(other.__fbthrift_field_returnType);
    this->__fbthrift_field_argumentTypes = std::move(other.__fbthrift_field_argumentTypes);
    this->__fbthrift_field_variableArity = std::move(other.__fbthrift_field_variableArity);
    this->__fbthrift_field_typeVariableConstraints = std::move(other.__fbthrift_field_typeVariableConstraints);
    this->__fbthrift_field_longVariableConstraints = std::move(other.__fbthrift_field_longVariableConstraints);
    __isset = other.__isset;
    return *this;
}


Signature::Signature(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::QualifiedObjectName name__arg, ::facebook::presto::protocol::cpp2::FunctionKind kind__arg, ::facebook::presto::protocol::cpp2::TypeSignature returnType__arg, ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature> argumentTypes__arg, bool variableArity__arg, ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint> typeVariableConstraints__arg, ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint> longVariableConstraints__arg) :
    __fbthrift_field_name(std::move(name__arg)),
    __fbthrift_field_kind(std::move(kind__arg)),
    __fbthrift_field_returnType(std::move(returnType__arg)),
    __fbthrift_field_argumentTypes(std::move(argumentTypes__arg)),
    __fbthrift_field_variableArity(std::move(variableArity__arg)),
    __fbthrift_field_typeVariableConstraints(std::move(typeVariableConstraints__arg)),
    __fbthrift_field_longVariableConstraints(std::move(longVariableConstraints__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void Signature::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_name);
  this->__fbthrift_field_kind = ::facebook::presto::protocol::cpp2::FunctionKind();
  ::apache::thrift::clear(this->__fbthrift_field_returnType);
  this->__fbthrift_field_argumentTypes.clear();
  this->__fbthrift_field_variableArity = bool();
  this->__fbthrift_field_typeVariableConstraints.clear();
  this->__fbthrift_field_longVariableConstraints.clear();
  __isset = {};
}

void Signature::__fbthrift_clear_terse_fields() {
}

bool Signature::__fbthrift_is_empty() const {
  return false;
}

bool Signature::operator==([[maybe_unused]] const Signature& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Signature::operator<([[maybe_unused]] const Signature& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::QualifiedObjectName& Signature::get_name() const& {
  return __fbthrift_field_name;
}

::facebook::presto::protocol::cpp2::QualifiedObjectName Signature::get_name() && {
  return static_cast<::facebook::presto::protocol::cpp2::QualifiedObjectName&&>(__fbthrift_field_name);
}

::facebook::presto::protocol::cpp2::FunctionKind Signature::get_kind() const {
  return __fbthrift_field_kind;
}

::facebook::presto::protocol::cpp2::FunctionKind& Signature::set_kind(::facebook::presto::protocol::cpp2::FunctionKind kind_) {
  kind_ref() = kind_;
  return __fbthrift_field_kind;
}

const ::facebook::presto::protocol::cpp2::TypeSignature& Signature::get_returnType() const& {
  return __fbthrift_field_returnType;
}

::facebook::presto::protocol::cpp2::TypeSignature Signature::get_returnType() && {
  return static_cast<::facebook::presto::protocol::cpp2::TypeSignature&&>(__fbthrift_field_returnType);
}

const ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>& Signature::get_argumentTypes() const& {
  return __fbthrift_field_argumentTypes;
}

::std::vector<::facebook::presto::protocol::cpp2::TypeSignature> Signature::get_argumentTypes() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>&&>(__fbthrift_field_argumentTypes);
}

bool Signature::get_variableArity() const {
  return __fbthrift_field_variableArity;
}

bool& Signature::set_variableArity(bool variableArity_) {
  variableArity_ref() = variableArity_;
  return __fbthrift_field_variableArity;
}

const ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>& Signature::get_typeVariableConstraints() const& {
  return __fbthrift_field_typeVariableConstraints;
}

::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint> Signature::get_typeVariableConstraints() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>&&>(__fbthrift_field_typeVariableConstraints);
}

const ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>& Signature::get_longVariableConstraints() const& {
  return __fbthrift_field_longVariableConstraints;
}

::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint> Signature::get_longVariableConstraints() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>&&>(__fbthrift_field_longVariableConstraints);
}

void swap([[maybe_unused]] Signature& a, [[maybe_unused]] Signature& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__fbthrift_field_kind, b.__fbthrift_field_kind);
  swap(a.__fbthrift_field_returnType, b.__fbthrift_field_returnType);
  swap(a.__fbthrift_field_argumentTypes, b.__fbthrift_field_argumentTypes);
  swap(a.__fbthrift_field_variableArity, b.__fbthrift_field_variableArity);
  swap(a.__fbthrift_field_typeVariableConstraints, b.__fbthrift_field_typeVariableConstraints);
  swap(a.__fbthrift_field_longVariableConstraints, b.__fbthrift_field_longVariableConstraints);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void Signature::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Signature::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Signature::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Signature::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Signature::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Signature::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Signature::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Signature::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Signature,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::QualifiedObjectName>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Signature,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TypeSignature>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Signature,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::TypeSignature>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Signature,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::TypeVariableConstraint>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Signature,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::LongVariableConstraint>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::OutputBuffers>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::OutputBuffers>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view OutputBuffers::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OutputBuffers>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view OutputBuffers::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<OutputBuffers>::name;
}

OutputBuffers::OutputBuffers(const OutputBuffers&) = default;
OutputBuffers& OutputBuffers::operator=(const OutputBuffers&) = default;
OutputBuffers::OutputBuffers() :
    __fbthrift_field_type(),
    __fbthrift_field_version(),
    __fbthrift_field_noMoreBufferIds() {
}


OutputBuffers::~OutputBuffers() {}

OutputBuffers::OutputBuffers([[maybe_unused]] OutputBuffers&& other) noexcept :
    __fbthrift_field_type(std::move(other.__fbthrift_field_type)),
    __fbthrift_field_version(std::move(other.__fbthrift_field_version)),
    __fbthrift_field_noMoreBufferIds(std::move(other.__fbthrift_field_noMoreBufferIds)),
    __fbthrift_field_buffers(std::move(other.__fbthrift_field_buffers)),
    __isset(other.__isset) {
}

OutputBuffers& OutputBuffers::operator=([[maybe_unused]] OutputBuffers&& other) noexcept {
    this->__fbthrift_field_type = std::move(other.__fbthrift_field_type);
    this->__fbthrift_field_version = std::move(other.__fbthrift_field_version);
    this->__fbthrift_field_noMoreBufferIds = std::move(other.__fbthrift_field_noMoreBufferIds);
    this->__fbthrift_field_buffers = std::move(other.__fbthrift_field_buffers);
    __isset = other.__isset;
    return *this;
}


OutputBuffers::OutputBuffers(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::BufferType type__arg, ::std::int64_t version__arg, bool noMoreBufferIds__arg, ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t> buffers__arg) :
    __fbthrift_field_type(std::move(type__arg)),
    __fbthrift_field_version(std::move(version__arg)),
    __fbthrift_field_noMoreBufferIds(std::move(noMoreBufferIds__arg)),
    __fbthrift_field_buffers(std::move(buffers__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void OutputBuffers::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_type = ::facebook::presto::protocol::cpp2::BufferType();
  this->__fbthrift_field_version = ::std::int64_t();
  this->__fbthrift_field_noMoreBufferIds = bool();
  this->__fbthrift_field_buffers.clear();
  __isset = {};
}

void OutputBuffers::__fbthrift_clear_terse_fields() {
}

bool OutputBuffers::__fbthrift_is_empty() const {
  return false;
}

bool OutputBuffers::operator==([[maybe_unused]] const OutputBuffers& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool OutputBuffers::operator<([[maybe_unused]] const OutputBuffers& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::facebook::presto::protocol::cpp2::BufferType OutputBuffers::get_type() const {
  return __fbthrift_field_type;
}

::facebook::presto::protocol::cpp2::BufferType& OutputBuffers::set_type(::facebook::presto::protocol::cpp2::BufferType type_) {
  type_ref() = type_;
  return __fbthrift_field_type;
}

::std::int64_t OutputBuffers::get_version() const {
  return __fbthrift_field_version;
}

::std::int64_t& OutputBuffers::set_version(::std::int64_t version_) {
  version_ref() = version_;
  return __fbthrift_field_version;
}

bool OutputBuffers::get_noMoreBufferIds() const {
  return __fbthrift_field_noMoreBufferIds;
}

bool& OutputBuffers::set_noMoreBufferIds(bool noMoreBufferIds_) {
  noMoreBufferIds_ref() = noMoreBufferIds_;
  return __fbthrift_field_noMoreBufferIds;
}

const ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>& OutputBuffers::get_buffers() const& {
  return __fbthrift_field_buffers;
}

::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t> OutputBuffers::get_buffers() && {
  return static_cast<::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>&&>(__fbthrift_field_buffers);
}

void swap([[maybe_unused]] OutputBuffers& a, [[maybe_unused]] OutputBuffers& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_type, b.__fbthrift_field_type);
  swap(a.__fbthrift_field_version, b.__fbthrift_field_version);
  swap(a.__fbthrift_field_noMoreBufferIds, b.__fbthrift_field_noMoreBufferIds);
  swap(a.__fbthrift_field_buffers, b.__fbthrift_field_buffers);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void OutputBuffers::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OutputBuffers::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OutputBuffers::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OutputBuffers::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OutputBuffers::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OutputBuffers::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OutputBuffers::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OutputBuffers::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OutputBuffers,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>,
        ::std::map<::facebook::presto::protocol::cpp2::OutputBufferId, ::std::int32_t>>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TaskUpdateRequest>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TaskUpdateRequest>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TaskUpdateRequest::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TaskUpdateRequest>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TaskUpdateRequest::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TaskUpdateRequest>::name;
}

TaskUpdateRequest::TaskUpdateRequest(const TaskUpdateRequest&) = default;
TaskUpdateRequest& TaskUpdateRequest::operator=(const TaskUpdateRequest&) = default;
TaskUpdateRequest::TaskUpdateRequest() {
}


TaskUpdateRequest::~TaskUpdateRequest() {}

TaskUpdateRequest::TaskUpdateRequest([[maybe_unused]] TaskUpdateRequest&& other) noexcept :
    __fbthrift_field_session(std::move(other.__fbthrift_field_session)),
    __fbthrift_field_extraCredentials(std::move(other.__fbthrift_field_extraCredentials)),
    __fbthrift_field_fragment(std::move(other.__fbthrift_field_fragment)),
    __fbthrift_field_sources(std::move(other.__fbthrift_field_sources)),
    __fbthrift_field_outputIds(std::move(other.__fbthrift_field_outputIds)),
    __fbthrift_field_tableWriteInfo(std::move(other.__fbthrift_field_tableWriteInfo)),
    __isset(other.__isset) {
}

TaskUpdateRequest& TaskUpdateRequest::operator=([[maybe_unused]] TaskUpdateRequest&& other) noexcept {
    this->__fbthrift_field_session = std::move(other.__fbthrift_field_session);
    this->__fbthrift_field_extraCredentials = std::move(other.__fbthrift_field_extraCredentials);
    this->__fbthrift_field_fragment = std::move(other.__fbthrift_field_fragment);
    this->__fbthrift_field_sources = std::move(other.__fbthrift_field_sources);
    this->__fbthrift_field_outputIds = std::move(other.__fbthrift_field_outputIds);
    this->__fbthrift_field_tableWriteInfo = std::move(other.__fbthrift_field_tableWriteInfo);
    __isset = other.__isset;
    return *this;
}


TaskUpdateRequest::TaskUpdateRequest(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::SessionRepresentation session__arg, ::std::map<::std::string, ::std::string> extraCredentials__arg, ::std::string fragment__arg, ::std::vector<::facebook::presto::protocol::cpp2::TaskSource> sources__arg, ::facebook::presto::protocol::cpp2::OutputBuffers outputIds__arg, ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper tableWriteInfo__arg) :
    __fbthrift_field_session(std::move(session__arg)),
    __fbthrift_field_extraCredentials(std::move(extraCredentials__arg)),
    __fbthrift_field_fragment(std::move(fragment__arg)),
    __fbthrift_field_sources(std::move(sources__arg)),
    __fbthrift_field_outputIds(std::move(outputIds__arg)),
    __fbthrift_field_tableWriteInfo(std::move(tableWriteInfo__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}


void TaskUpdateRequest::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_session);
  this->__fbthrift_field_extraCredentials.clear();
  this->__fbthrift_field_fragment = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_sources.clear();
  ::apache::thrift::clear(this->__fbthrift_field_outputIds);
  ::apache::thrift::clear(this->__fbthrift_field_tableWriteInfo);
  __isset = {};
}

void TaskUpdateRequest::__fbthrift_clear_terse_fields() {
}

bool TaskUpdateRequest::__fbthrift_is_empty() const {
  return false;
}

bool TaskUpdateRequest::operator==([[maybe_unused]] const TaskUpdateRequest& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TaskUpdateRequest::operator<([[maybe_unused]] const TaskUpdateRequest& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::SessionRepresentation& TaskUpdateRequest::get_session() const& {
  return __fbthrift_field_session;
}

::facebook::presto::protocol::cpp2::SessionRepresentation TaskUpdateRequest::get_session() && {
  return static_cast<::facebook::presto::protocol::cpp2::SessionRepresentation&&>(__fbthrift_field_session);
}

const ::std::map<::std::string, ::std::string>& TaskUpdateRequest::get_extraCredentials() const& {
  return __fbthrift_field_extraCredentials;
}

::std::map<::std::string, ::std::string> TaskUpdateRequest::get_extraCredentials() && {
  return static_cast<::std::map<::std::string, ::std::string>&&>(__fbthrift_field_extraCredentials);
}

const ::std::string* TaskUpdateRequest::get_fragment() const& {
  return fragment_ref().has_value() ? std::addressof(__fbthrift_field_fragment) : nullptr;
}

::std::string* TaskUpdateRequest::get_fragment() & {
  return fragment_ref().has_value() ? std::addressof(__fbthrift_field_fragment) : nullptr;
}

const ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>& TaskUpdateRequest::get_sources() const& {
  return __fbthrift_field_sources;
}

::std::vector<::facebook::presto::protocol::cpp2::TaskSource> TaskUpdateRequest::get_sources() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::TaskSource>&&>(__fbthrift_field_sources);
}

const ::facebook::presto::protocol::cpp2::OutputBuffers& TaskUpdateRequest::get_outputIds() const& {
  return __fbthrift_field_outputIds;
}

::facebook::presto::protocol::cpp2::OutputBuffers TaskUpdateRequest::get_outputIds() && {
  return static_cast<::facebook::presto::protocol::cpp2::OutputBuffers&&>(__fbthrift_field_outputIds);
}

const ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper* TaskUpdateRequest::get_tableWriteInfo() const& {
  return tableWriteInfo_ref().has_value() ? std::addressof(__fbthrift_field_tableWriteInfo) : nullptr;
}

::facebook::presto::protocol::cpp2::TableWriteInfoWrapper* TaskUpdateRequest::get_tableWriteInfo() & {
  return tableWriteInfo_ref().has_value() ? std::addressof(__fbthrift_field_tableWriteInfo) : nullptr;
}

void swap([[maybe_unused]] TaskUpdateRequest& a, [[maybe_unused]] TaskUpdateRequest& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_session, b.__fbthrift_field_session);
  swap(a.__fbthrift_field_extraCredentials, b.__fbthrift_field_extraCredentials);
  swap(a.__fbthrift_field_fragment, b.__fbthrift_field_fragment);
  swap(a.__fbthrift_field_sources, b.__fbthrift_field_sources);
  swap(a.__fbthrift_field_outputIds, b.__fbthrift_field_outputIds);
  swap(a.__fbthrift_field_tableWriteInfo, b.__fbthrift_field_tableWriteInfo);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TaskUpdateRequest::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TaskUpdateRequest::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TaskUpdateRequest::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TaskUpdateRequest::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TaskUpdateRequest::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TaskUpdateRequest::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TaskUpdateRequest::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TaskUpdateRequest::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskUpdateRequest,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::SessionRepresentation>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskUpdateRequest,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::TaskSource>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskUpdateRequest,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::OutputBuffers>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskUpdateRequest,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TableWriteInfoWrapper>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view ExecutionFailureInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ExecutionFailureInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ExecutionFailureInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ExecutionFailureInfo>::name;
}

ExecutionFailureInfo::ExecutionFailureInfo(const ExecutionFailureInfo&) = default;
ExecutionFailureInfo& ExecutionFailureInfo::operator=(const ExecutionFailureInfo&) = default;
ExecutionFailureInfo::ExecutionFailureInfo() :
    __fbthrift_field_errorCause() {
}


ExecutionFailureInfo::~ExecutionFailureInfo() {}

ExecutionFailureInfo::ExecutionFailureInfo([[maybe_unused]] ExecutionFailureInfo&& other) noexcept :
    __fbthrift_field_type(std::move(other.__fbthrift_field_type)),
    __fbthrift_field_message(std::move(other.__fbthrift_field_message)),
    __fbthrift_field_cause(std::move(other.__fbthrift_field_cause)),
    __fbthrift_field_suppressed(std::move(other.__fbthrift_field_suppressed)),
    __fbthrift_field_stack(std::move(other.__fbthrift_field_stack)),
    __fbthrift_field_errorLocation(std::move(other.__fbthrift_field_errorLocation)),
    __fbthrift_field_errorCode(std::move(other.__fbthrift_field_errorCode)),
    __fbthrift_field_remoteHost(std::move(other.__fbthrift_field_remoteHost)),
    __fbthrift_field_errorCause(std::move(other.__fbthrift_field_errorCause)),
    __isset(other.__isset) {
}

ExecutionFailureInfo& ExecutionFailureInfo::operator=([[maybe_unused]] ExecutionFailureInfo&& other) noexcept {
    this->__fbthrift_field_type = std::move(other.__fbthrift_field_type);
    this->__fbthrift_field_message = std::move(other.__fbthrift_field_message);
    this->__fbthrift_field_cause = std::move(other.__fbthrift_field_cause);
    this->__fbthrift_field_suppressed = std::move(other.__fbthrift_field_suppressed);
    this->__fbthrift_field_stack = std::move(other.__fbthrift_field_stack);
    this->__fbthrift_field_errorLocation = std::move(other.__fbthrift_field_errorLocation);
    this->__fbthrift_field_errorCode = std::move(other.__fbthrift_field_errorCode);
    this->__fbthrift_field_remoteHost = std::move(other.__fbthrift_field_remoteHost);
    this->__fbthrift_field_errorCause = std::move(other.__fbthrift_field_errorCause);
    __isset = other.__isset;
    return *this;
}


ExecutionFailureInfo::ExecutionFailureInfo(apache::thrift::FragileConstructor, ::std::string type__arg, ::std::string message__arg, ::std::shared_ptr<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> cause__arg, ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> suppressed__arg, ::std::vector<::std::string> stack__arg, ::facebook::presto::protocol::cpp2::ErrorLocation errorLocation__arg, ::facebook::presto::protocol::cpp2::ErrorCode errorCode__arg, ::facebook::presto::protocol::cpp2::HostAddress remoteHost__arg, ::facebook::presto::protocol::cpp2::ErrorCause errorCause__arg) :
    __fbthrift_field_type(std::move(type__arg)),
    __fbthrift_field_message(std::move(message__arg)),
    __fbthrift_field_cause(std::move(cause__arg)),
    __fbthrift_field_suppressed(std::move(suppressed__arg)),
    __fbthrift_field_stack(std::move(stack__arg)),
    __fbthrift_field_errorLocation(std::move(errorLocation__arg)),
    __fbthrift_field_errorCode(std::move(errorCode__arg)),
    __fbthrift_field_remoteHost(std::move(remoteHost__arg)),
    __fbthrift_field_errorCause(std::move(errorCause__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
}


void ExecutionFailureInfo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_type = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_message = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_cause.reset();
  this->__fbthrift_field_suppressed.clear();
  this->__fbthrift_field_stack.clear();
  ::apache::thrift::clear(this->__fbthrift_field_errorLocation);
  ::apache::thrift::clear(this->__fbthrift_field_errorCode);
  ::apache::thrift::clear(this->__fbthrift_field_remoteHost);
  this->__fbthrift_field_errorCause = ::facebook::presto::protocol::cpp2::ErrorCause();
  __isset = {};
}

void ExecutionFailureInfo::__fbthrift_clear_terse_fields() {
}

bool ExecutionFailureInfo::__fbthrift_is_empty() const {
  return false;
}

bool ExecutionFailureInfo::operator==([[maybe_unused]] const ExecutionFailureInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ExecutionFailureInfo::operator<([[maybe_unused]] const ExecutionFailureInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>& ExecutionFailureInfo::get_suppressed() const& {
  return __fbthrift_field_suppressed;
}

::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> ExecutionFailureInfo::get_suppressed() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>&&>(__fbthrift_field_suppressed);
}

const ::std::vector<::std::string>& ExecutionFailureInfo::get_stack() const& {
  return __fbthrift_field_stack;
}

::std::vector<::std::string> ExecutionFailureInfo::get_stack() && {
  return static_cast<::std::vector<::std::string>&&>(__fbthrift_field_stack);
}

const ::facebook::presto::protocol::cpp2::ErrorLocation& ExecutionFailureInfo::get_errorLocation() const& {
  return __fbthrift_field_errorLocation;
}

::facebook::presto::protocol::cpp2::ErrorLocation ExecutionFailureInfo::get_errorLocation() && {
  return static_cast<::facebook::presto::protocol::cpp2::ErrorLocation&&>(__fbthrift_field_errorLocation);
}

const ::facebook::presto::protocol::cpp2::ErrorCode& ExecutionFailureInfo::get_errorCode() const& {
  return __fbthrift_field_errorCode;
}

::facebook::presto::protocol::cpp2::ErrorCode ExecutionFailureInfo::get_errorCode() && {
  return static_cast<::facebook::presto::protocol::cpp2::ErrorCode&&>(__fbthrift_field_errorCode);
}

const ::facebook::presto::protocol::cpp2::HostAddress& ExecutionFailureInfo::get_remoteHost() const& {
  return __fbthrift_field_remoteHost;
}

::facebook::presto::protocol::cpp2::HostAddress ExecutionFailureInfo::get_remoteHost() && {
  return static_cast<::facebook::presto::protocol::cpp2::HostAddress&&>(__fbthrift_field_remoteHost);
}

::facebook::presto::protocol::cpp2::ErrorCause ExecutionFailureInfo::get_errorCause() const {
  return __fbthrift_field_errorCause;
}

::facebook::presto::protocol::cpp2::ErrorCause& ExecutionFailureInfo::set_errorCause(::facebook::presto::protocol::cpp2::ErrorCause errorCause_) {
  errorCause_ref() = errorCause_;
  return __fbthrift_field_errorCause;
}

void swap([[maybe_unused]] ExecutionFailureInfo& a, [[maybe_unused]] ExecutionFailureInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_type, b.__fbthrift_field_type);
  swap(a.__fbthrift_field_message, b.__fbthrift_field_message);
  swap(a.__fbthrift_field_cause, b.__fbthrift_field_cause);
  swap(a.__fbthrift_field_suppressed, b.__fbthrift_field_suppressed);
  swap(a.__fbthrift_field_stack, b.__fbthrift_field_stack);
  swap(a.__fbthrift_field_errorLocation, b.__fbthrift_field_errorLocation);
  swap(a.__fbthrift_field_errorCode, b.__fbthrift_field_errorCode);
  swap(a.__fbthrift_field_remoteHost, b.__fbthrift_field_remoteHost);
  swap(a.__fbthrift_field_errorCause, b.__fbthrift_field_errorCause);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void ExecutionFailureInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ExecutionFailureInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ExecutionFailureInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ExecutionFailureInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ExecutionFailureInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ExecutionFailureInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ExecutionFailureInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ExecutionFailureInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ExecutionFailureInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::ExecutionFailureInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ExecutionFailureInfo,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::ExecutionFailureInfo>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ExecutionFailureInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::ErrorLocation>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ExecutionFailureInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::ErrorCode>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ExecutionFailureInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::HostAddress>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TaskId>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TaskId>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TaskId::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TaskId>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TaskId::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TaskId>::name;
}

TaskId::TaskId(const TaskId&) = default;
TaskId& TaskId::operator=(const TaskId&) = default;
TaskId::TaskId([[maybe_unused]] TaskId&& other) noexcept :
    __fbthrift_field_stageExecutionId(std::move(other.__fbthrift_field_stageExecutionId)),
    __fbthrift_field_id(std::move(other.__fbthrift_field_id)),
    __fbthrift_field_attemptNumber(std::move(other.__fbthrift_field_attemptNumber)),
    __isset(other.__isset) {
}

TaskId& TaskId::operator=([[maybe_unused]] TaskId&& other) noexcept {
    this->__fbthrift_field_stageExecutionId = std::move(other.__fbthrift_field_stageExecutionId);
    this->__fbthrift_field_id = std::move(other.__fbthrift_field_id);
    this->__fbthrift_field_attemptNumber = std::move(other.__fbthrift_field_attemptNumber);
    __isset = other.__isset;
    return *this;
}


TaskId::TaskId(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::StageExecutionId stageExecutionId__arg, ::std::int32_t id__arg, ::std::int32_t attemptNumber__arg) :
    __fbthrift_field_stageExecutionId(std::move(stageExecutionId__arg)),
    __fbthrift_field_id(std::move(id__arg)),
    __fbthrift_field_attemptNumber(std::move(attemptNumber__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void TaskId::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_stageExecutionId);
  this->__fbthrift_field_id = ::std::int32_t();
  this->__fbthrift_field_attemptNumber = ::std::int32_t();
  __isset = {};
}

void TaskId::__fbthrift_clear_terse_fields() {
}

bool TaskId::__fbthrift_is_empty() const {
  return false;
}

bool TaskId::operator==([[maybe_unused]] const TaskId& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TaskId::operator<([[maybe_unused]] const TaskId& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::StageExecutionId& TaskId::get_stageExecutionId() const& {
  return __fbthrift_field_stageExecutionId;
}

::facebook::presto::protocol::cpp2::StageExecutionId TaskId::get_stageExecutionId() && {
  return static_cast<::facebook::presto::protocol::cpp2::StageExecutionId&&>(__fbthrift_field_stageExecutionId);
}

::std::int32_t TaskId::get_id() const {
  return __fbthrift_field_id;
}

::std::int32_t& TaskId::set_id(::std::int32_t id_) {
  id_ref() = id_;
  return __fbthrift_field_id;
}

::std::int32_t TaskId::get_attemptNumber() const {
  return __fbthrift_field_attemptNumber;
}

::std::int32_t& TaskId::set_attemptNumber(::std::int32_t attemptNumber_) {
  attemptNumber_ref() = attemptNumber_;
  return __fbthrift_field_attemptNumber;
}

void swap([[maybe_unused]] TaskId& a, [[maybe_unused]] TaskId& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_stageExecutionId, b.__fbthrift_field_stageExecutionId);
  swap(a.__fbthrift_field_id, b.__fbthrift_field_id);
  swap(a.__fbthrift_field_attemptNumber, b.__fbthrift_field_attemptNumber);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TaskId::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TaskId::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TaskId::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TaskId::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TaskId::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TaskId::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TaskId::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TaskId::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskId,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::StageExecutionId>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::OperatorInfoUnion>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::OperatorInfoUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

folly::Range<::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type const*> const TEnumTraits<::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type>::values = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type>::names = folly::range(TEnumDataStorage<::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type>::names);

bool TEnumTraits<::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::presto::protocol::cpp2::OperatorInfoUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace facebook::presto::protocol::cpp2 {

std::string_view OperatorInfoUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OperatorInfoUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view OperatorInfoUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<OperatorInfoUnion>::name;
}

void OperatorInfoUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::exchangeClientStatus:
      ::std::destroy_at(::std::addressof(value_.exchangeClientStatus));
      break;
    case Type::localExchangeBufferInfo:
      ::std::destroy_at(::std::addressof(value_.localExchangeBufferInfo));
      break;
    case Type::tableFinishInfo:
      ::std::destroy_at(::std::addressof(value_.tableFinishInfo));
      break;
    case Type::splitOperatorInfo:
      ::std::destroy_at(::std::addressof(value_.splitOperatorInfo));
      break;
    case Type::hashCollisionsInfo:
      ::std::destroy_at(::std::addressof(value_.hashCollisionsInfo));
      break;
    case Type::partitionedOutputInfo:
      ::std::destroy_at(::std::addressof(value_.partitionedOutputInfo));
      break;
    case Type::joinOperatorInfo:
      ::std::destroy_at(::std::addressof(value_.joinOperatorInfo));
      break;
    case Type::windowInfo:
      ::std::destroy_at(::std::addressof(value_.windowInfo));
      break;
    case Type::tableWriterInfo:
      ::std::destroy_at(::std::addressof(value_.tableWriterInfo));
      break;
    case Type::tableWriterMergeInfo:
      ::std::destroy_at(::std::addressof(value_.tableWriterMergeInfo));
      break;
    default:
      assert(false);
      break;
  }
}

void OperatorInfoUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  type_ = folly::to_underlying(Type::__EMPTY__);
}

  OperatorInfoUnion::~OperatorInfoUnion() {
    __fbthrift_destruct();
  }

bool OperatorInfoUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  OperatorInfoUnion::OperatorInfoUnion(const OperatorInfoUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::exchangeClientStatus:
        set_exchangeClientStatus(rhs.value_.exchangeClientStatus);
        break;
      case Type::localExchangeBufferInfo:
        set_localExchangeBufferInfo(rhs.value_.localExchangeBufferInfo);
        break;
      case Type::tableFinishInfo:
        set_tableFinishInfo(rhs.value_.tableFinishInfo);
        break;
      case Type::splitOperatorInfo:
        set_splitOperatorInfo(rhs.value_.splitOperatorInfo);
        break;
      case Type::hashCollisionsInfo:
        set_hashCollisionsInfo(rhs.value_.hashCollisionsInfo);
        break;
      case Type::partitionedOutputInfo:
        set_partitionedOutputInfo(rhs.value_.partitionedOutputInfo);
        break;
      case Type::joinOperatorInfo:
        set_joinOperatorInfo(rhs.value_.joinOperatorInfo);
        break;
      case Type::windowInfo:
        set_windowInfo(rhs.value_.windowInfo);
        break;
      case Type::tableWriterInfo:
        set_tableWriterInfo(rhs.value_.tableWriterInfo);
        break;
      case Type::tableWriterMergeInfo:
        set_tableWriterMergeInfo(rhs.value_.tableWriterMergeInfo);
        break;
      default:
        assert(false);
    }
  }

    OperatorInfoUnion&OperatorInfoUnion::operator=(const OperatorInfoUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::exchangeClientStatus:
        set_exchangeClientStatus(rhs.value_.exchangeClientStatus);
        break;
      case Type::localExchangeBufferInfo:
        set_localExchangeBufferInfo(rhs.value_.localExchangeBufferInfo);
        break;
      case Type::tableFinishInfo:
        set_tableFinishInfo(rhs.value_.tableFinishInfo);
        break;
      case Type::splitOperatorInfo:
        set_splitOperatorInfo(rhs.value_.splitOperatorInfo);
        break;
      case Type::hashCollisionsInfo:
        set_hashCollisionsInfo(rhs.value_.hashCollisionsInfo);
        break;
      case Type::partitionedOutputInfo:
        set_partitionedOutputInfo(rhs.value_.partitionedOutputInfo);
        break;
      case Type::joinOperatorInfo:
        set_joinOperatorInfo(rhs.value_.joinOperatorInfo);
        break;
      case Type::windowInfo:
        set_windowInfo(rhs.value_.windowInfo);
        break;
      case Type::tableWriterInfo:
        set_tableWriterInfo(rhs.value_.tableWriterInfo);
        break;
      case Type::tableWriterMergeInfo:
        set_tableWriterMergeInfo(rhs.value_.tableWriterMergeInfo);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool OperatorInfoUnion::operator==(const OperatorInfoUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool OperatorInfoUnion::operator<([[maybe_unused]] const OperatorInfoUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(OperatorInfoUnion& a, OperatorInfoUnion& b) {
  OperatorInfoUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void OperatorInfoUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OperatorInfoUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OperatorInfoUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OperatorInfoUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OperatorInfoUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OperatorInfoUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OperatorInfoUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OperatorInfoUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::ExchangeClientStatus>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TableFinishInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::SplitOperatorInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::HashCollisionsInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::PartitionedOutputInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::JoinOperatorInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::WindowInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TableWriterInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorInfoUnion,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TableWriterMergeInfo>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::SqlInvokedFunction>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::SqlInvokedFunction>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view SqlInvokedFunction::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SqlInvokedFunction>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SqlInvokedFunction::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SqlInvokedFunction>::name;
}

SqlInvokedFunction::SqlInvokedFunction(const SqlInvokedFunction&) = default;
SqlInvokedFunction& SqlInvokedFunction::operator=(const SqlInvokedFunction&) = default;
SqlInvokedFunction::SqlInvokedFunction() :
    __fbthrift_field_variableArity() {
}


SqlInvokedFunction::~SqlInvokedFunction() {}

SqlInvokedFunction::SqlInvokedFunction([[maybe_unused]] SqlInvokedFunction&& other) noexcept :
    __fbthrift_field_parameters(std::move(other.__fbthrift_field_parameters)),
    __fbthrift_field_description(std::move(other.__fbthrift_field_description)),
    __fbthrift_field_routineCharacteristics(std::move(other.__fbthrift_field_routineCharacteristics)),
    __fbthrift_field_body(std::move(other.__fbthrift_field_body)),
    __fbthrift_field_variableArity(std::move(other.__fbthrift_field_variableArity)),
    __fbthrift_field_signature(std::move(other.__fbthrift_field_signature)),
    __fbthrift_field_functionId(std::move(other.__fbthrift_field_functionId)),
    __isset(other.__isset) {
}

SqlInvokedFunction& SqlInvokedFunction::operator=([[maybe_unused]] SqlInvokedFunction&& other) noexcept {
    this->__fbthrift_field_parameters = std::move(other.__fbthrift_field_parameters);
    this->__fbthrift_field_description = std::move(other.__fbthrift_field_description);
    this->__fbthrift_field_routineCharacteristics = std::move(other.__fbthrift_field_routineCharacteristics);
    this->__fbthrift_field_body = std::move(other.__fbthrift_field_body);
    this->__fbthrift_field_variableArity = std::move(other.__fbthrift_field_variableArity);
    this->__fbthrift_field_signature = std::move(other.__fbthrift_field_signature);
    this->__fbthrift_field_functionId = std::move(other.__fbthrift_field_functionId);
    __isset = other.__isset;
    return *this;
}


SqlInvokedFunction::SqlInvokedFunction(apache::thrift::FragileConstructor, ::std::vector<::facebook::presto::protocol::cpp2::Parameter> parameters__arg, ::std::string description__arg, ::facebook::presto::protocol::cpp2::RoutineCharacteristics routineCharacteristics__arg, ::std::string body__arg, bool variableArity__arg, ::facebook::presto::protocol::cpp2::Signature signature__arg, ::facebook::presto::protocol::cpp2::SqlFunctionId functionId__arg) :
    __fbthrift_field_parameters(std::move(parameters__arg)),
    __fbthrift_field_description(std::move(description__arg)),
    __fbthrift_field_routineCharacteristics(std::move(routineCharacteristics__arg)),
    __fbthrift_field_body(std::move(body__arg)),
    __fbthrift_field_variableArity(std::move(variableArity__arg)),
    __fbthrift_field_signature(std::move(signature__arg)),
    __fbthrift_field_functionId(std::move(functionId__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void SqlInvokedFunction::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_parameters.clear();
  this->__fbthrift_field_description = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_routineCharacteristics);
  this->__fbthrift_field_body = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_variableArity = bool();
  ::apache::thrift::clear(this->__fbthrift_field_signature);
  ::apache::thrift::clear(this->__fbthrift_field_functionId);
  __isset = {};
}

void SqlInvokedFunction::__fbthrift_clear_terse_fields() {
}

bool SqlInvokedFunction::__fbthrift_is_empty() const {
  return false;
}

bool SqlInvokedFunction::operator==([[maybe_unused]] const SqlInvokedFunction& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SqlInvokedFunction::operator<([[maybe_unused]] const SqlInvokedFunction& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::vector<::facebook::presto::protocol::cpp2::Parameter>& SqlInvokedFunction::get_parameters() const& {
  return __fbthrift_field_parameters;
}

::std::vector<::facebook::presto::protocol::cpp2::Parameter> SqlInvokedFunction::get_parameters() && {
  return static_cast<::std::vector<::facebook::presto::protocol::cpp2::Parameter>&&>(__fbthrift_field_parameters);
}

const ::facebook::presto::protocol::cpp2::RoutineCharacteristics& SqlInvokedFunction::get_routineCharacteristics() const& {
  return __fbthrift_field_routineCharacteristics;
}

::facebook::presto::protocol::cpp2::RoutineCharacteristics SqlInvokedFunction::get_routineCharacteristics() && {
  return static_cast<::facebook::presto::protocol::cpp2::RoutineCharacteristics&&>(__fbthrift_field_routineCharacteristics);
}

bool SqlInvokedFunction::get_variableArity() const {
  return __fbthrift_field_variableArity;
}

bool& SqlInvokedFunction::set_variableArity(bool variableArity_) {
  variableArity_ref() = variableArity_;
  return __fbthrift_field_variableArity;
}

const ::facebook::presto::protocol::cpp2::Signature& SqlInvokedFunction::get_signature() const& {
  return __fbthrift_field_signature;
}

::facebook::presto::protocol::cpp2::Signature SqlInvokedFunction::get_signature() && {
  return static_cast<::facebook::presto::protocol::cpp2::Signature&&>(__fbthrift_field_signature);
}

const ::facebook::presto::protocol::cpp2::SqlFunctionId& SqlInvokedFunction::get_functionId() const& {
  return __fbthrift_field_functionId;
}

::facebook::presto::protocol::cpp2::SqlFunctionId SqlInvokedFunction::get_functionId() && {
  return static_cast<::facebook::presto::protocol::cpp2::SqlFunctionId&&>(__fbthrift_field_functionId);
}

void swap([[maybe_unused]] SqlInvokedFunction& a, [[maybe_unused]] SqlInvokedFunction& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_parameters, b.__fbthrift_field_parameters);
  swap(a.__fbthrift_field_description, b.__fbthrift_field_description);
  swap(a.__fbthrift_field_routineCharacteristics, b.__fbthrift_field_routineCharacteristics);
  swap(a.__fbthrift_field_body, b.__fbthrift_field_body);
  swap(a.__fbthrift_field_variableArity, b.__fbthrift_field_variableArity);
  swap(a.__fbthrift_field_signature, b.__fbthrift_field_signature);
  swap(a.__fbthrift_field_functionId, b.__fbthrift_field_functionId);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void SqlInvokedFunction::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SqlInvokedFunction::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SqlInvokedFunction::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SqlInvokedFunction::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SqlInvokedFunction::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SqlInvokedFunction::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SqlInvokedFunction::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SqlInvokedFunction::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SqlInvokedFunction,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::presto::protocol::cpp2::Parameter>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SqlInvokedFunction,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::RoutineCharacteristics>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SqlInvokedFunction,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::Signature>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        SqlInvokedFunction,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::SqlFunctionId>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::TaskInfo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::TaskInfo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view TaskInfo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TaskInfo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TaskInfo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TaskInfo>::name;
}

TaskInfo::TaskInfo(const TaskInfo&) = default;
TaskInfo& TaskInfo::operator=(const TaskInfo&) = default;
TaskInfo::TaskInfo() :
    __fbthrift_field_lastHeartbeatInMillis(),
    __fbthrift_field_needsPlan() {
}


TaskInfo::~TaskInfo() {}

TaskInfo::TaskInfo([[maybe_unused]] TaskInfo&& other) noexcept :
    __fbthrift_field_taskId(std::move(other.__fbthrift_field_taskId)),
    __fbthrift_field_taskStatus(std::move(other.__fbthrift_field_taskStatus)),
    __fbthrift_field_lastHeartbeatInMillis(std::move(other.__fbthrift_field_lastHeartbeatInMillis)),
    __fbthrift_field_outputBuffers(std::move(other.__fbthrift_field_outputBuffers)),
    __fbthrift_field_noMoreSplits(std::move(other.__fbthrift_field_noMoreSplits)),
    __fbthrift_field_stats(std::move(other.__fbthrift_field_stats)),
    __fbthrift_field_needsPlan(std::move(other.__fbthrift_field_needsPlan)),
    __fbthrift_field_metadataUpdates(std::move(other.__fbthrift_field_metadataUpdates)),
    __fbthrift_field_nodeId(std::move(other.__fbthrift_field_nodeId)),
    __isset(other.__isset) {
}

TaskInfo& TaskInfo::operator=([[maybe_unused]] TaskInfo&& other) noexcept {
    this->__fbthrift_field_taskId = std::move(other.__fbthrift_field_taskId);
    this->__fbthrift_field_taskStatus = std::move(other.__fbthrift_field_taskStatus);
    this->__fbthrift_field_lastHeartbeatInMillis = std::move(other.__fbthrift_field_lastHeartbeatInMillis);
    this->__fbthrift_field_outputBuffers = std::move(other.__fbthrift_field_outputBuffers);
    this->__fbthrift_field_noMoreSplits = std::move(other.__fbthrift_field_noMoreSplits);
    this->__fbthrift_field_stats = std::move(other.__fbthrift_field_stats);
    this->__fbthrift_field_needsPlan = std::move(other.__fbthrift_field_needsPlan);
    this->__fbthrift_field_metadataUpdates = std::move(other.__fbthrift_field_metadataUpdates);
    this->__fbthrift_field_nodeId = std::move(other.__fbthrift_field_nodeId);
    __isset = other.__isset;
    return *this;
}


TaskInfo::TaskInfo(apache::thrift::FragileConstructor, ::facebook::presto::protocol::cpp2::TaskId taskId__arg, ::facebook::presto::protocol::cpp2::TaskStatus taskStatus__arg, ::std::int64_t lastHeartbeatInMillis__arg, ::facebook::presto::protocol::cpp2::OutputBufferInfo outputBuffers__arg, ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> noMoreSplits__arg, ::facebook::presto::protocol::cpp2::TaskStats stats__arg, bool needsPlan__arg, ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper metadataUpdates__arg, ::std::string nodeId__arg) :
    __fbthrift_field_taskId(std::move(taskId__arg)),
    __fbthrift_field_taskStatus(std::move(taskStatus__arg)),
    __fbthrift_field_lastHeartbeatInMillis(std::move(lastHeartbeatInMillis__arg)),
    __fbthrift_field_outputBuffers(std::move(outputBuffers__arg)),
    __fbthrift_field_noMoreSplits(std::move(noMoreSplits__arg)),
    __fbthrift_field_stats(std::move(stats__arg)),
    __fbthrift_field_needsPlan(std::move(needsPlan__arg)),
    __fbthrift_field_metadataUpdates(std::move(metadataUpdates__arg)),
    __fbthrift_field_nodeId(std::move(nodeId__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}


void TaskInfo::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_taskId);
  ::apache::thrift::clear(this->__fbthrift_field_taskStatus);
  this->__fbthrift_field_lastHeartbeatInMillis = ::std::int64_t();
  ::apache::thrift::clear(this->__fbthrift_field_outputBuffers);
  this->__fbthrift_field_noMoreSplits.clear();
  ::apache::thrift::clear(this->__fbthrift_field_stats);
  this->__fbthrift_field_needsPlan = bool();
  ::apache::thrift::clear(this->__fbthrift_field_metadataUpdates);
  this->__fbthrift_field_nodeId = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void TaskInfo::__fbthrift_clear_terse_fields() {
}

bool TaskInfo::__fbthrift_is_empty() const {
  return false;
}

bool TaskInfo::operator==([[maybe_unused]] const TaskInfo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TaskInfo::operator<([[maybe_unused]] const TaskInfo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::facebook::presto::protocol::cpp2::TaskId& TaskInfo::get_taskId() const& {
  return __fbthrift_field_taskId;
}

::facebook::presto::protocol::cpp2::TaskId TaskInfo::get_taskId() && {
  return static_cast<::facebook::presto::protocol::cpp2::TaskId&&>(__fbthrift_field_taskId);
}

const ::facebook::presto::protocol::cpp2::TaskStatus& TaskInfo::get_taskStatus() const& {
  return __fbthrift_field_taskStatus;
}

::facebook::presto::protocol::cpp2::TaskStatus TaskInfo::get_taskStatus() && {
  return static_cast<::facebook::presto::protocol::cpp2::TaskStatus&&>(__fbthrift_field_taskStatus);
}

::std::int64_t TaskInfo::get_lastHeartbeatInMillis() const {
  return __fbthrift_field_lastHeartbeatInMillis;
}

::std::int64_t& TaskInfo::set_lastHeartbeatInMillis(::std::int64_t lastHeartbeatInMillis_) {
  lastHeartbeatInMillis_ref() = lastHeartbeatInMillis_;
  return __fbthrift_field_lastHeartbeatInMillis;
}

const ::facebook::presto::protocol::cpp2::OutputBufferInfo& TaskInfo::get_outputBuffers() const& {
  return __fbthrift_field_outputBuffers;
}

::facebook::presto::protocol::cpp2::OutputBufferInfo TaskInfo::get_outputBuffers() && {
  return static_cast<::facebook::presto::protocol::cpp2::OutputBufferInfo&&>(__fbthrift_field_outputBuffers);
}

const ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>& TaskInfo::get_noMoreSplits() const& {
  return __fbthrift_field_noMoreSplits;
}

::std::set<::facebook::presto::protocol::cpp2::PlanNodeId> TaskInfo::get_noMoreSplits() && {
  return static_cast<::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>&&>(__fbthrift_field_noMoreSplits);
}

const ::facebook::presto::protocol::cpp2::TaskStats& TaskInfo::get_stats() const& {
  return __fbthrift_field_stats;
}

::facebook::presto::protocol::cpp2::TaskStats TaskInfo::get_stats() && {
  return static_cast<::facebook::presto::protocol::cpp2::TaskStats&&>(__fbthrift_field_stats);
}

bool TaskInfo::get_needsPlan() const {
  return __fbthrift_field_needsPlan;
}

bool& TaskInfo::set_needsPlan(bool needsPlan_) {
  needsPlan_ref() = needsPlan_;
  return __fbthrift_field_needsPlan;
}

const ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper& TaskInfo::get_metadataUpdates() const& {
  return __fbthrift_field_metadataUpdates;
}

::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper TaskInfo::get_metadataUpdates() && {
  return static_cast<::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper&&>(__fbthrift_field_metadataUpdates);
}

void swap([[maybe_unused]] TaskInfo& a, [[maybe_unused]] TaskInfo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_taskId, b.__fbthrift_field_taskId);
  swap(a.__fbthrift_field_taskStatus, b.__fbthrift_field_taskStatus);
  swap(a.__fbthrift_field_lastHeartbeatInMillis, b.__fbthrift_field_lastHeartbeatInMillis);
  swap(a.__fbthrift_field_outputBuffers, b.__fbthrift_field_outputBuffers);
  swap(a.__fbthrift_field_noMoreSplits, b.__fbthrift_field_noMoreSplits);
  swap(a.__fbthrift_field_stats, b.__fbthrift_field_stats);
  swap(a.__fbthrift_field_needsPlan, b.__fbthrift_field_needsPlan);
  swap(a.__fbthrift_field_metadataUpdates, b.__fbthrift_field_metadataUpdates);
  swap(a.__fbthrift_field_nodeId, b.__fbthrift_field_nodeId);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void TaskInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TaskInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TaskInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TaskInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TaskInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TaskInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TaskInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TaskInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TaskId>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TaskStatus>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::OutputBufferInfo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskInfo,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::facebook::presto::protocol::cpp2::PlanNodeId>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::TaskStats>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TaskInfo,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::presto::protocol::cpp2::OperatorStats>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::presto::protocol::cpp2::OperatorStats>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook::presto::protocol::cpp2 {

std::string_view OperatorStats::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OperatorStats>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view OperatorStats::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<OperatorStats>::name;
}

OperatorStats::OperatorStats(const OperatorStats&) = default;
OperatorStats& OperatorStats::operator=(const OperatorStats&) = default;
OperatorStats::OperatorStats() :
    __fbthrift_field_stageId(),
    __fbthrift_field_stageExecutionId(),
    __fbthrift_field_pipelineId(),
    __fbthrift_field_operatorId(),
    __fbthrift_field_totalDrivers(),
    __fbthrift_field_addInputCalls(),
    __fbthrift_field_addInputWall(),
    __fbthrift_field_addInputCpu(),
    __fbthrift_field_addInputAllocationInBytes(),
    __fbthrift_field_rawInputDataSizeInBytes(),
    __fbthrift_field_rawInputPositions(),
    __fbthrift_field_inputDataSizeInBytes(),
    __fbthrift_field_inputPositions(),
    __fbthrift_field_sumSquaredInputPositions(),
    __fbthrift_field_getOutputCalls(),
    __fbthrift_field_getOutputWall(),
    __fbthrift_field_getOutputCpu(),
    __fbthrift_field_getOutputAllocationInBytes(),
    __fbthrift_field_outputDataSizeInBytes(),
    __fbthrift_field_outputPositions(),
    __fbthrift_field_physicalWrittenDataSizeInBytes(),
    __fbthrift_field_additionalCpu(),
    __fbthrift_field_blockedWall(),
    __fbthrift_field_finishCalls(),
    __fbthrift_field_finishWall(),
    __fbthrift_field_finishCpu(),
    __fbthrift_field_finishAllocationInBytes(),
    __fbthrift_field_userMemoryReservationInBytes(),
    __fbthrift_field_revocableMemoryReservationInBytes(),
    __fbthrift_field_systemMemoryReservationInBytes(),
    __fbthrift_field_peakUserMemoryReservationInBytes(),
    __fbthrift_field_peakSystemMemoryReservationInBytes(),
    __fbthrift_field_peakTotalMemoryReservationInBytes(),
    __fbthrift_field_spilledDataSizeInBytes(),
    __fbthrift_field_blockedReason(),
    __fbthrift_field_nullJoinBuildKeyCount(),
    __fbthrift_field_joinBuildKeyCount(),
    __fbthrift_field_nullJoinProbeKeyCount(),
    __fbthrift_field_joinProbeKeyCount(),
    __fbthrift_field_isBlockedCalls(),
    __fbthrift_field_isBlockedWall(),
    __fbthrift_field_isBlockedCpu(),
    __fbthrift_field_isBlockedAllocationInBytes() {
}


OperatorStats::~OperatorStats() {}

OperatorStats::OperatorStats([[maybe_unused]] OperatorStats&& other) noexcept :
    __fbthrift_field_stageId(std::move(other.__fbthrift_field_stageId)),
    __fbthrift_field_stageExecutionId(std::move(other.__fbthrift_field_stageExecutionId)),
    __fbthrift_field_pipelineId(std::move(other.__fbthrift_field_pipelineId)),
    __fbthrift_field_operatorId(std::move(other.__fbthrift_field_operatorId)),
    __fbthrift_field_planNodeId(std::move(other.__fbthrift_field_planNodeId)),
    __fbthrift_field_operatorType(std::move(other.__fbthrift_field_operatorType)),
    __fbthrift_field_totalDrivers(std::move(other.__fbthrift_field_totalDrivers)),
    __fbthrift_field_addInputCalls(std::move(other.__fbthrift_field_addInputCalls)),
    __fbthrift_field_addInputWall(std::move(other.__fbthrift_field_addInputWall)),
    __fbthrift_field_addInputCpu(std::move(other.__fbthrift_field_addInputCpu)),
    __fbthrift_field_addInputAllocationInBytes(std::move(other.__fbthrift_field_addInputAllocationInBytes)),
    __fbthrift_field_rawInputDataSizeInBytes(std::move(other.__fbthrift_field_rawInputDataSizeInBytes)),
    __fbthrift_field_rawInputPositions(std::move(other.__fbthrift_field_rawInputPositions)),
    __fbthrift_field_inputDataSizeInBytes(std::move(other.__fbthrift_field_inputDataSizeInBytes)),
    __fbthrift_field_inputPositions(std::move(other.__fbthrift_field_inputPositions)),
    __fbthrift_field_sumSquaredInputPositions(std::move(other.__fbthrift_field_sumSquaredInputPositions)),
    __fbthrift_field_getOutputCalls(std::move(other.__fbthrift_field_getOutputCalls)),
    __fbthrift_field_getOutputWall(std::move(other.__fbthrift_field_getOutputWall)),
    __fbthrift_field_getOutputCpu(std::move(other.__fbthrift_field_getOutputCpu)),
    __fbthrift_field_getOutputAllocationInBytes(std::move(other.__fbthrift_field_getOutputAllocationInBytes)),
    __fbthrift_field_outputDataSizeInBytes(std::move(other.__fbthrift_field_outputDataSizeInBytes)),
    __fbthrift_field_outputPositions(std::move(other.__fbthrift_field_outputPositions)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes)),
    __fbthrift_field_additionalCpu(std::move(other.__fbthrift_field_additionalCpu)),
    __fbthrift_field_blockedWall(std::move(other.__fbthrift_field_blockedWall)),
    __fbthrift_field_finishCalls(std::move(other.__fbthrift_field_finishCalls)),
    __fbthrift_field_finishWall(std::move(other.__fbthrift_field_finishWall)),
    __fbthrift_field_finishCpu(std::move(other.__fbthrift_field_finishCpu)),
    __fbthrift_field_finishAllocationInBytes(std::move(other.__fbthrift_field_finishAllocationInBytes)),
    __fbthrift_field_userMemoryReservationInBytes(std::move(other.__fbthrift_field_userMemoryReservationInBytes)),
    __fbthrift_field_revocableMemoryReservationInBytes(std::move(other.__fbthrift_field_revocableMemoryReservationInBytes)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(other.__fbthrift_field_systemMemoryReservationInBytes)),
    __fbthrift_field_peakUserMemoryReservationInBytes(std::move(other.__fbthrift_field_peakUserMemoryReservationInBytes)),
    __fbthrift_field_peakSystemMemoryReservationInBytes(std::move(other.__fbthrift_field_peakSystemMemoryReservationInBytes)),
    __fbthrift_field_peakTotalMemoryReservationInBytes(std::move(other.__fbthrift_field_peakTotalMemoryReservationInBytes)),
    __fbthrift_field_spilledDataSizeInBytes(std::move(other.__fbthrift_field_spilledDataSizeInBytes)),
    __fbthrift_field_runtimeStats(std::move(other.__fbthrift_field_runtimeStats)),
    __fbthrift_field_blockedReason(std::move(other.__fbthrift_field_blockedReason)),
    __fbthrift_field_infoUnion(std::move(other.__fbthrift_field_infoUnion)),
    __fbthrift_field_nullJoinBuildKeyCount(std::move(other.__fbthrift_field_nullJoinBuildKeyCount)),
    __fbthrift_field_joinBuildKeyCount(std::move(other.__fbthrift_field_joinBuildKeyCount)),
    __fbthrift_field_nullJoinProbeKeyCount(std::move(other.__fbthrift_field_nullJoinProbeKeyCount)),
    __fbthrift_field_joinProbeKeyCount(std::move(other.__fbthrift_field_joinProbeKeyCount)),
    __fbthrift_field_dynamicFilterStats(std::move(other.__fbthrift_field_dynamicFilterStats)),
    __fbthrift_field_isBlockedCalls(std::move(other.__fbthrift_field_isBlockedCalls)),
    __fbthrift_field_isBlockedWall(std::move(other.__fbthrift_field_isBlockedWall)),
    __fbthrift_field_isBlockedCpu(std::move(other.__fbthrift_field_isBlockedCpu)),
    __fbthrift_field_isBlockedAllocationInBytes(std::move(other.__fbthrift_field_isBlockedAllocationInBytes)),
    __isset(other.__isset) {
}

OperatorStats& OperatorStats::operator=([[maybe_unused]] OperatorStats&& other) noexcept {
    this->__fbthrift_field_stageId = std::move(other.__fbthrift_field_stageId);
    this->__fbthrift_field_stageExecutionId = std::move(other.__fbthrift_field_stageExecutionId);
    this->__fbthrift_field_pipelineId = std::move(other.__fbthrift_field_pipelineId);
    this->__fbthrift_field_operatorId = std::move(other.__fbthrift_field_operatorId);
    this->__fbthrift_field_planNodeId = std::move(other.__fbthrift_field_planNodeId);
    this->__fbthrift_field_operatorType = std::move(other.__fbthrift_field_operatorType);
    this->__fbthrift_field_totalDrivers = std::move(other.__fbthrift_field_totalDrivers);
    this->__fbthrift_field_addInputCalls = std::move(other.__fbthrift_field_addInputCalls);
    this->__fbthrift_field_addInputWall = std::move(other.__fbthrift_field_addInputWall);
    this->__fbthrift_field_addInputCpu = std::move(other.__fbthrift_field_addInputCpu);
    this->__fbthrift_field_addInputAllocationInBytes = std::move(other.__fbthrift_field_addInputAllocationInBytes);
    this->__fbthrift_field_rawInputDataSizeInBytes = std::move(other.__fbthrift_field_rawInputDataSizeInBytes);
    this->__fbthrift_field_rawInputPositions = std::move(other.__fbthrift_field_rawInputPositions);
    this->__fbthrift_field_inputDataSizeInBytes = std::move(other.__fbthrift_field_inputDataSizeInBytes);
    this->__fbthrift_field_inputPositions = std::move(other.__fbthrift_field_inputPositions);
    this->__fbthrift_field_sumSquaredInputPositions = std::move(other.__fbthrift_field_sumSquaredInputPositions);
    this->__fbthrift_field_getOutputCalls = std::move(other.__fbthrift_field_getOutputCalls);
    this->__fbthrift_field_getOutputWall = std::move(other.__fbthrift_field_getOutputWall);
    this->__fbthrift_field_getOutputCpu = std::move(other.__fbthrift_field_getOutputCpu);
    this->__fbthrift_field_getOutputAllocationInBytes = std::move(other.__fbthrift_field_getOutputAllocationInBytes);
    this->__fbthrift_field_outputDataSizeInBytes = std::move(other.__fbthrift_field_outputDataSizeInBytes);
    this->__fbthrift_field_outputPositions = std::move(other.__fbthrift_field_outputPositions);
    this->__fbthrift_field_physicalWrittenDataSizeInBytes = std::move(other.__fbthrift_field_physicalWrittenDataSizeInBytes);
    this->__fbthrift_field_additionalCpu = std::move(other.__fbthrift_field_additionalCpu);
    this->__fbthrift_field_blockedWall = std::move(other.__fbthrift_field_blockedWall);
    this->__fbthrift_field_finishCalls = std::move(other.__fbthrift_field_finishCalls);
    this->__fbthrift_field_finishWall = std::move(other.__fbthrift_field_finishWall);
    this->__fbthrift_field_finishCpu = std::move(other.__fbthrift_field_finishCpu);
    this->__fbthrift_field_finishAllocationInBytes = std::move(other.__fbthrift_field_finishAllocationInBytes);
    this->__fbthrift_field_userMemoryReservationInBytes = std::move(other.__fbthrift_field_userMemoryReservationInBytes);
    this->__fbthrift_field_revocableMemoryReservationInBytes = std::move(other.__fbthrift_field_revocableMemoryReservationInBytes);
    this->__fbthrift_field_systemMemoryReservationInBytes = std::move(other.__fbthrift_field_systemMemoryReservationInBytes);
    this->__fbthrift_field_peakUserMemoryReservationInBytes = std::move(other.__fbthrift_field_peakUserMemoryReservationInBytes);
    this->__fbthrift_field_peakSystemMemoryReservationInBytes = std::move(other.__fbthrift_field_peakSystemMemoryReservationInBytes);
    this->__fbthrift_field_peakTotalMemoryReservationInBytes = std::move(other.__fbthrift_field_peakTotalMemoryReservationInBytes);
    this->__fbthrift_field_spilledDataSizeInBytes = std::move(other.__fbthrift_field_spilledDataSizeInBytes);
    this->__fbthrift_field_runtimeStats = std::move(other.__fbthrift_field_runtimeStats);
    this->__fbthrift_field_blockedReason = std::move(other.__fbthrift_field_blockedReason);
    this->__fbthrift_field_infoUnion = std::move(other.__fbthrift_field_infoUnion);
    this->__fbthrift_field_nullJoinBuildKeyCount = std::move(other.__fbthrift_field_nullJoinBuildKeyCount);
    this->__fbthrift_field_joinBuildKeyCount = std::move(other.__fbthrift_field_joinBuildKeyCount);
    this->__fbthrift_field_nullJoinProbeKeyCount = std::move(other.__fbthrift_field_nullJoinProbeKeyCount);
    this->__fbthrift_field_joinProbeKeyCount = std::move(other.__fbthrift_field_joinProbeKeyCount);
    this->__fbthrift_field_dynamicFilterStats = std::move(other.__fbthrift_field_dynamicFilterStats);
    this->__fbthrift_field_isBlockedCalls = std::move(other.__fbthrift_field_isBlockedCalls);
    this->__fbthrift_field_isBlockedWall = std::move(other.__fbthrift_field_isBlockedWall);
    this->__fbthrift_field_isBlockedCpu = std::move(other.__fbthrift_field_isBlockedCpu);
    this->__fbthrift_field_isBlockedAllocationInBytes = std::move(other.__fbthrift_field_isBlockedAllocationInBytes);
    __isset = other.__isset;
    return *this;
}


OperatorStats::OperatorStats(apache::thrift::FragileConstructor, ::std::int32_t stageId__arg, ::std::int32_t stageExecutionId__arg, ::std::int32_t pipelineId__arg, ::std::int32_t operatorId__arg, ::facebook::presto::protocol::cpp2::PlanNodeId planNodeId__arg, ::std::string operatorType__arg, ::std::int64_t totalDrivers__arg, ::std::int64_t addInputCalls__arg, double addInputWall__arg, double addInputCpu__arg, ::std::int64_t addInputAllocationInBytes__arg, ::std::int64_t rawInputDataSizeInBytes__arg, ::std::int64_t rawInputPositions__arg, ::std::int64_t inputDataSizeInBytes__arg, ::std::int64_t inputPositions__arg, double sumSquaredInputPositions__arg, ::std::int64_t getOutputCalls__arg, double getOutputWall__arg, double getOutputCpu__arg, ::std::int64_t getOutputAllocationInBytes__arg, ::std::int64_t outputDataSizeInBytes__arg, ::std::int64_t outputPositions__arg, ::std::int64_t physicalWrittenDataSizeInBytes__arg, double additionalCpu__arg, double blockedWall__arg, ::std::int64_t finishCalls__arg, double finishWall__arg, double finishCpu__arg, ::std::int64_t finishAllocationInBytes__arg, ::std::int64_t userMemoryReservationInBytes__arg, ::std::int64_t revocableMemoryReservationInBytes__arg, ::std::int64_t systemMemoryReservationInBytes__arg, ::std::int64_t peakUserMemoryReservationInBytes__arg, ::std::int64_t peakSystemMemoryReservationInBytes__arg, ::std::int64_t peakTotalMemoryReservationInBytes__arg, ::std::int64_t spilledDataSizeInBytes__arg, ::facebook::presto::protocol::cpp2::RuntimeStats runtimeStats__arg, ::facebook::presto::protocol::cpp2::BlockedReason blockedReason__arg, ::facebook::presto::protocol::cpp2::OperatorInfoUnion infoUnion__arg, ::std::int64_t nullJoinBuildKeyCount__arg, ::std::int64_t joinBuildKeyCount__arg, ::std::int64_t nullJoinProbeKeyCount__arg, ::std::int64_t joinProbeKeyCount__arg, ::facebook::presto::protocol::cpp2::DynamicFilterStats dynamicFilterStats__arg, ::std::int64_t isBlockedCalls__arg, double isBlockedWall__arg, double isBlockedCpu__arg, ::std::int64_t isBlockedAllocationInBytes__arg) :
    __fbthrift_field_stageId(std::move(stageId__arg)),
    __fbthrift_field_stageExecutionId(std::move(stageExecutionId__arg)),
    __fbthrift_field_pipelineId(std::move(pipelineId__arg)),
    __fbthrift_field_operatorId(std::move(operatorId__arg)),
    __fbthrift_field_planNodeId(std::move(planNodeId__arg)),
    __fbthrift_field_operatorType(std::move(operatorType__arg)),
    __fbthrift_field_totalDrivers(std::move(totalDrivers__arg)),
    __fbthrift_field_addInputCalls(std::move(addInputCalls__arg)),
    __fbthrift_field_addInputWall(std::move(addInputWall__arg)),
    __fbthrift_field_addInputCpu(std::move(addInputCpu__arg)),
    __fbthrift_field_addInputAllocationInBytes(std::move(addInputAllocationInBytes__arg)),
    __fbthrift_field_rawInputDataSizeInBytes(std::move(rawInputDataSizeInBytes__arg)),
    __fbthrift_field_rawInputPositions(std::move(rawInputPositions__arg)),
    __fbthrift_field_inputDataSizeInBytes(std::move(inputDataSizeInBytes__arg)),
    __fbthrift_field_inputPositions(std::move(inputPositions__arg)),
    __fbthrift_field_sumSquaredInputPositions(std::move(sumSquaredInputPositions__arg)),
    __fbthrift_field_getOutputCalls(std::move(getOutputCalls__arg)),
    __fbthrift_field_getOutputWall(std::move(getOutputWall__arg)),
    __fbthrift_field_getOutputCpu(std::move(getOutputCpu__arg)),
    __fbthrift_field_getOutputAllocationInBytes(std::move(getOutputAllocationInBytes__arg)),
    __fbthrift_field_outputDataSizeInBytes(std::move(outputDataSizeInBytes__arg)),
    __fbthrift_field_outputPositions(std::move(outputPositions__arg)),
    __fbthrift_field_physicalWrittenDataSizeInBytes(std::move(physicalWrittenDataSizeInBytes__arg)),
    __fbthrift_field_additionalCpu(std::move(additionalCpu__arg)),
    __fbthrift_field_blockedWall(std::move(blockedWall__arg)),
    __fbthrift_field_finishCalls(std::move(finishCalls__arg)),
    __fbthrift_field_finishWall(std::move(finishWall__arg)),
    __fbthrift_field_finishCpu(std::move(finishCpu__arg)),
    __fbthrift_field_finishAllocationInBytes(std::move(finishAllocationInBytes__arg)),
    __fbthrift_field_userMemoryReservationInBytes(std::move(userMemoryReservationInBytes__arg)),
    __fbthrift_field_revocableMemoryReservationInBytes(std::move(revocableMemoryReservationInBytes__arg)),
    __fbthrift_field_systemMemoryReservationInBytes(std::move(systemMemoryReservationInBytes__arg)),
    __fbthrift_field_peakUserMemoryReservationInBytes(std::move(peakUserMemoryReservationInBytes__arg)),
    __fbthrift_field_peakSystemMemoryReservationInBytes(std::move(peakSystemMemoryReservationInBytes__arg)),
    __fbthrift_field_peakTotalMemoryReservationInBytes(std::move(peakTotalMemoryReservationInBytes__arg)),
    __fbthrift_field_spilledDataSizeInBytes(std::move(spilledDataSizeInBytes__arg)),
    __fbthrift_field_runtimeStats(std::move(runtimeStats__arg)),
    __fbthrift_field_blockedReason(std::move(blockedReason__arg)),
    __fbthrift_field_infoUnion(std::move(infoUnion__arg)),
    __fbthrift_field_nullJoinBuildKeyCount(std::move(nullJoinBuildKeyCount__arg)),
    __fbthrift_field_joinBuildKeyCount(std::move(joinBuildKeyCount__arg)),
    __fbthrift_field_nullJoinProbeKeyCount(std::move(nullJoinProbeKeyCount__arg)),
    __fbthrift_field_joinProbeKeyCount(std::move(joinProbeKeyCount__arg)),
    __fbthrift_field_dynamicFilterStats(std::move(dynamicFilterStats__arg)),
    __fbthrift_field_isBlockedCalls(std::move(isBlockedCalls__arg)),
    __fbthrift_field_isBlockedWall(std::move(isBlockedWall__arg)),
    __fbthrift_field_isBlockedCpu(std::move(isBlockedCpu__arg)),
    __fbthrift_field_isBlockedAllocationInBytes(std::move(isBlockedAllocationInBytes__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
  __isset.set(folly::index_constant<24>(), true);
  __isset.set(folly::index_constant<25>(), true);
  __isset.set(folly::index_constant<26>(), true);
  __isset.set(folly::index_constant<27>(), true);
  __isset.set(folly::index_constant<28>(), true);
  __isset.set(folly::index_constant<29>(), true);
  __isset.set(folly::index_constant<30>(), true);
  __isset.set(folly::index_constant<31>(), true);
  __isset.set(folly::index_constant<32>(), true);
  __isset.set(folly::index_constant<33>(), true);
  __isset.set(folly::index_constant<34>(), true);
  __isset.set(folly::index_constant<35>(), true);
  __isset.set(folly::index_constant<36>(), true);
  __isset.set(folly::index_constant<37>(), true);
  __isset.set(folly::index_constant<38>(), true);
  __isset.set(folly::index_constant<39>(), true);
  __isset.set(folly::index_constant<40>(), true);
  __isset.set(folly::index_constant<41>(), true);
  __isset.set(folly::index_constant<42>(), true);
  __isset.set(folly::index_constant<43>(), true);
  __isset.set(folly::index_constant<44>(), true);
  __isset.set(folly::index_constant<45>(), true);
  __isset.set(folly::index_constant<46>(), true);
  __isset.set(folly::index_constant<47>(), true);
}


void OperatorStats::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_stageId = ::std::int32_t();
  this->__fbthrift_field_stageExecutionId = ::std::int32_t();
  this->__fbthrift_field_pipelineId = ::std::int32_t();
  this->__fbthrift_field_operatorId = ::std::int32_t();
  ::apache::thrift::clear(this->__fbthrift_field_planNodeId);
  this->__fbthrift_field_operatorType = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_totalDrivers = ::std::int64_t();
  this->__fbthrift_field_addInputCalls = ::std::int64_t();
  this->__fbthrift_field_addInputWall = double();
  this->__fbthrift_field_addInputCpu = double();
  this->__fbthrift_field_addInputAllocationInBytes = ::std::int64_t();
  this->__fbthrift_field_rawInputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_rawInputPositions = ::std::int64_t();
  this->__fbthrift_field_inputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_inputPositions = ::std::int64_t();
  this->__fbthrift_field_sumSquaredInputPositions = double();
  this->__fbthrift_field_getOutputCalls = ::std::int64_t();
  this->__fbthrift_field_getOutputWall = double();
  this->__fbthrift_field_getOutputCpu = double();
  this->__fbthrift_field_getOutputAllocationInBytes = ::std::int64_t();
  this->__fbthrift_field_outputDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_outputPositions = ::std::int64_t();
  this->__fbthrift_field_physicalWrittenDataSizeInBytes = ::std::int64_t();
  this->__fbthrift_field_additionalCpu = double();
  this->__fbthrift_field_blockedWall = double();
  this->__fbthrift_field_finishCalls = ::std::int64_t();
  this->__fbthrift_field_finishWall = double();
  this->__fbthrift_field_finishCpu = double();
  this->__fbthrift_field_finishAllocationInBytes = ::std::int64_t();
  this->__fbthrift_field_userMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_revocableMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_systemMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_peakUserMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_peakSystemMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_peakTotalMemoryReservationInBytes = ::std::int64_t();
  this->__fbthrift_field_spilledDataSizeInBytes = ::std::int64_t();
  ::apache::thrift::clear(this->__fbthrift_field_runtimeStats);
  this->__fbthrift_field_blockedReason = ::facebook::presto::protocol::cpp2::BlockedReason();
  ::apache::thrift::clear(this->__fbthrift_field_infoUnion);
  this->__fbthrift_field_nullJoinBuildKeyCount = ::std::int64_t();
  this->__fbthrift_field_joinBuildKeyCount = ::std::int64_t();
  this->__fbthrift_field_nullJoinProbeKeyCount = ::std::int64_t();
  this->__fbthrift_field_joinProbeKeyCount = ::std::int64_t();
  ::apache::thrift::clear(this->__fbthrift_field_dynamicFilterStats);
  this->__fbthrift_field_isBlockedCalls = ::std::int64_t();
  this->__fbthrift_field_isBlockedWall = double();
  this->__fbthrift_field_isBlockedCpu = double();
  this->__fbthrift_field_isBlockedAllocationInBytes = ::std::int64_t();
  __isset = {};
}

void OperatorStats::__fbthrift_clear_terse_fields() {
}

bool OperatorStats::__fbthrift_is_empty() const {
  return false;
}

bool OperatorStats::operator==([[maybe_unused]] const OperatorStats& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool OperatorStats::operator<([[maybe_unused]] const OperatorStats& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t OperatorStats::get_stageId() const {
  return __fbthrift_field_stageId;
}

::std::int32_t& OperatorStats::set_stageId(::std::int32_t stageId_) {
  stageId_ref() = stageId_;
  return __fbthrift_field_stageId;
}

::std::int32_t OperatorStats::get_stageExecutionId() const {
  return __fbthrift_field_stageExecutionId;
}

::std::int32_t& OperatorStats::set_stageExecutionId(::std::int32_t stageExecutionId_) {
  stageExecutionId_ref() = stageExecutionId_;
  return __fbthrift_field_stageExecutionId;
}

::std::int32_t OperatorStats::get_pipelineId() const {
  return __fbthrift_field_pipelineId;
}

::std::int32_t& OperatorStats::set_pipelineId(::std::int32_t pipelineId_) {
  pipelineId_ref() = pipelineId_;
  return __fbthrift_field_pipelineId;
}

::std::int32_t OperatorStats::get_operatorId() const {
  return __fbthrift_field_operatorId;
}

::std::int32_t& OperatorStats::set_operatorId(::std::int32_t operatorId_) {
  operatorId_ref() = operatorId_;
  return __fbthrift_field_operatorId;
}

const ::facebook::presto::protocol::cpp2::PlanNodeId& OperatorStats::get_planNodeId() const& {
  return __fbthrift_field_planNodeId;
}

::facebook::presto::protocol::cpp2::PlanNodeId OperatorStats::get_planNodeId() && {
  return static_cast<::facebook::presto::protocol::cpp2::PlanNodeId&&>(__fbthrift_field_planNodeId);
}

::std::int64_t OperatorStats::get_totalDrivers() const {
  return __fbthrift_field_totalDrivers;
}

::std::int64_t& OperatorStats::set_totalDrivers(::std::int64_t totalDrivers_) {
  totalDrivers_ref() = totalDrivers_;
  return __fbthrift_field_totalDrivers;
}

::std::int64_t OperatorStats::get_addInputCalls() const {
  return __fbthrift_field_addInputCalls;
}

::std::int64_t& OperatorStats::set_addInputCalls(::std::int64_t addInputCalls_) {
  addInputCalls_ref() = addInputCalls_;
  return __fbthrift_field_addInputCalls;
}

double OperatorStats::get_addInputWall() const {
  return __fbthrift_field_addInputWall;
}

double& OperatorStats::set_addInputWall(double addInputWall_) {
  addInputWall_ref() = addInputWall_;
  return __fbthrift_field_addInputWall;
}

double OperatorStats::get_addInputCpu() const {
  return __fbthrift_field_addInputCpu;
}

double& OperatorStats::set_addInputCpu(double addInputCpu_) {
  addInputCpu_ref() = addInputCpu_;
  return __fbthrift_field_addInputCpu;
}

::std::int64_t OperatorStats::get_addInputAllocationInBytes() const {
  return __fbthrift_field_addInputAllocationInBytes;
}

::std::int64_t& OperatorStats::set_addInputAllocationInBytes(::std::int64_t addInputAllocationInBytes_) {
  addInputAllocationInBytes_ref() = addInputAllocationInBytes_;
  return __fbthrift_field_addInputAllocationInBytes;
}

::std::int64_t OperatorStats::get_rawInputDataSizeInBytes() const {
  return __fbthrift_field_rawInputDataSizeInBytes;
}

::std::int64_t& OperatorStats::set_rawInputDataSizeInBytes(::std::int64_t rawInputDataSizeInBytes_) {
  rawInputDataSizeInBytes_ref() = rawInputDataSizeInBytes_;
  return __fbthrift_field_rawInputDataSizeInBytes;
}

::std::int64_t OperatorStats::get_rawInputPositions() const {
  return __fbthrift_field_rawInputPositions;
}

::std::int64_t& OperatorStats::set_rawInputPositions(::std::int64_t rawInputPositions_) {
  rawInputPositions_ref() = rawInputPositions_;
  return __fbthrift_field_rawInputPositions;
}

::std::int64_t OperatorStats::get_inputDataSizeInBytes() const {
  return __fbthrift_field_inputDataSizeInBytes;
}

::std::int64_t& OperatorStats::set_inputDataSizeInBytes(::std::int64_t inputDataSizeInBytes_) {
  inputDataSizeInBytes_ref() = inputDataSizeInBytes_;
  return __fbthrift_field_inputDataSizeInBytes;
}

::std::int64_t OperatorStats::get_inputPositions() const {
  return __fbthrift_field_inputPositions;
}

::std::int64_t& OperatorStats::set_inputPositions(::std::int64_t inputPositions_) {
  inputPositions_ref() = inputPositions_;
  return __fbthrift_field_inputPositions;
}

double OperatorStats::get_sumSquaredInputPositions() const {
  return __fbthrift_field_sumSquaredInputPositions;
}

double& OperatorStats::set_sumSquaredInputPositions(double sumSquaredInputPositions_) {
  sumSquaredInputPositions_ref() = sumSquaredInputPositions_;
  return __fbthrift_field_sumSquaredInputPositions;
}

::std::int64_t OperatorStats::get_getOutputCalls() const {
  return __fbthrift_field_getOutputCalls;
}

::std::int64_t& OperatorStats::set_getOutputCalls(::std::int64_t getOutputCalls_) {
  getOutputCalls_ref() = getOutputCalls_;
  return __fbthrift_field_getOutputCalls;
}

double OperatorStats::get_getOutputWall() const {
  return __fbthrift_field_getOutputWall;
}

double& OperatorStats::set_getOutputWall(double getOutputWall_) {
  getOutputWall_ref() = getOutputWall_;
  return __fbthrift_field_getOutputWall;
}

double OperatorStats::get_getOutputCpu() const {
  return __fbthrift_field_getOutputCpu;
}

double& OperatorStats::set_getOutputCpu(double getOutputCpu_) {
  getOutputCpu_ref() = getOutputCpu_;
  return __fbthrift_field_getOutputCpu;
}

::std::int64_t OperatorStats::get_getOutputAllocationInBytes() const {
  return __fbthrift_field_getOutputAllocationInBytes;
}

::std::int64_t& OperatorStats::set_getOutputAllocationInBytes(::std::int64_t getOutputAllocationInBytes_) {
  getOutputAllocationInBytes_ref() = getOutputAllocationInBytes_;
  return __fbthrift_field_getOutputAllocationInBytes;
}

::std::int64_t OperatorStats::get_outputDataSizeInBytes() const {
  return __fbthrift_field_outputDataSizeInBytes;
}

::std::int64_t& OperatorStats::set_outputDataSizeInBytes(::std::int64_t outputDataSizeInBytes_) {
  outputDataSizeInBytes_ref() = outputDataSizeInBytes_;
  return __fbthrift_field_outputDataSizeInBytes;
}

::std::int64_t OperatorStats::get_outputPositions() const {
  return __fbthrift_field_outputPositions;
}

::std::int64_t& OperatorStats::set_outputPositions(::std::int64_t outputPositions_) {
  outputPositions_ref() = outputPositions_;
  return __fbthrift_field_outputPositions;
}

::std::int64_t OperatorStats::get_physicalWrittenDataSizeInBytes() const {
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

::std::int64_t& OperatorStats::set_physicalWrittenDataSizeInBytes(::std::int64_t physicalWrittenDataSizeInBytes_) {
  physicalWrittenDataSizeInBytes_ref() = physicalWrittenDataSizeInBytes_;
  return __fbthrift_field_physicalWrittenDataSizeInBytes;
}

double OperatorStats::get_additionalCpu() const {
  return __fbthrift_field_additionalCpu;
}

double& OperatorStats::set_additionalCpu(double additionalCpu_) {
  additionalCpu_ref() = additionalCpu_;
  return __fbthrift_field_additionalCpu;
}

double OperatorStats::get_blockedWall() const {
  return __fbthrift_field_blockedWall;
}

double& OperatorStats::set_blockedWall(double blockedWall_) {
  blockedWall_ref() = blockedWall_;
  return __fbthrift_field_blockedWall;
}

::std::int64_t OperatorStats::get_finishCalls() const {
  return __fbthrift_field_finishCalls;
}

::std::int64_t& OperatorStats::set_finishCalls(::std::int64_t finishCalls_) {
  finishCalls_ref() = finishCalls_;
  return __fbthrift_field_finishCalls;
}

double OperatorStats::get_finishWall() const {
  return __fbthrift_field_finishWall;
}

double& OperatorStats::set_finishWall(double finishWall_) {
  finishWall_ref() = finishWall_;
  return __fbthrift_field_finishWall;
}

double OperatorStats::get_finishCpu() const {
  return __fbthrift_field_finishCpu;
}

double& OperatorStats::set_finishCpu(double finishCpu_) {
  finishCpu_ref() = finishCpu_;
  return __fbthrift_field_finishCpu;
}

::std::int64_t OperatorStats::get_finishAllocationInBytes() const {
  return __fbthrift_field_finishAllocationInBytes;
}

::std::int64_t& OperatorStats::set_finishAllocationInBytes(::std::int64_t finishAllocationInBytes_) {
  finishAllocationInBytes_ref() = finishAllocationInBytes_;
  return __fbthrift_field_finishAllocationInBytes;
}

::std::int64_t OperatorStats::get_userMemoryReservationInBytes() const {
  return __fbthrift_field_userMemoryReservationInBytes;
}

::std::int64_t& OperatorStats::set_userMemoryReservationInBytes(::std::int64_t userMemoryReservationInBytes_) {
  userMemoryReservationInBytes_ref() = userMemoryReservationInBytes_;
  return __fbthrift_field_userMemoryReservationInBytes;
}

::std::int64_t OperatorStats::get_revocableMemoryReservationInBytes() const {
  return __fbthrift_field_revocableMemoryReservationInBytes;
}

::std::int64_t& OperatorStats::set_revocableMemoryReservationInBytes(::std::int64_t revocableMemoryReservationInBytes_) {
  revocableMemoryReservationInBytes_ref() = revocableMemoryReservationInBytes_;
  return __fbthrift_field_revocableMemoryReservationInBytes;
}

::std::int64_t OperatorStats::get_systemMemoryReservationInBytes() const {
  return __fbthrift_field_systemMemoryReservationInBytes;
}

::std::int64_t& OperatorStats::set_systemMemoryReservationInBytes(::std::int64_t systemMemoryReservationInBytes_) {
  systemMemoryReservationInBytes_ref() = systemMemoryReservationInBytes_;
  return __fbthrift_field_systemMemoryReservationInBytes;
}

::std::int64_t OperatorStats::get_peakUserMemoryReservationInBytes() const {
  return __fbthrift_field_peakUserMemoryReservationInBytes;
}

::std::int64_t& OperatorStats::set_peakUserMemoryReservationInBytes(::std::int64_t peakUserMemoryReservationInBytes_) {
  peakUserMemoryReservationInBytes_ref() = peakUserMemoryReservationInBytes_;
  return __fbthrift_field_peakUserMemoryReservationInBytes;
}

::std::int64_t OperatorStats::get_peakSystemMemoryReservationInBytes() const {
  return __fbthrift_field_peakSystemMemoryReservationInBytes;
}

::std::int64_t& OperatorStats::set_peakSystemMemoryReservationInBytes(::std::int64_t peakSystemMemoryReservationInBytes_) {
  peakSystemMemoryReservationInBytes_ref() = peakSystemMemoryReservationInBytes_;
  return __fbthrift_field_peakSystemMemoryReservationInBytes;
}

::std::int64_t OperatorStats::get_peakTotalMemoryReservationInBytes() const {
  return __fbthrift_field_peakTotalMemoryReservationInBytes;
}

::std::int64_t& OperatorStats::set_peakTotalMemoryReservationInBytes(::std::int64_t peakTotalMemoryReservationInBytes_) {
  peakTotalMemoryReservationInBytes_ref() = peakTotalMemoryReservationInBytes_;
  return __fbthrift_field_peakTotalMemoryReservationInBytes;
}

::std::int64_t OperatorStats::get_spilledDataSizeInBytes() const {
  return __fbthrift_field_spilledDataSizeInBytes;
}

::std::int64_t& OperatorStats::set_spilledDataSizeInBytes(::std::int64_t spilledDataSizeInBytes_) {
  spilledDataSizeInBytes_ref() = spilledDataSizeInBytes_;
  return __fbthrift_field_spilledDataSizeInBytes;
}

const ::facebook::presto::protocol::cpp2::RuntimeStats& OperatorStats::get_runtimeStats() const& {
  return __fbthrift_field_runtimeStats;
}

::facebook::presto::protocol::cpp2::RuntimeStats OperatorStats::get_runtimeStats() && {
  return static_cast<::facebook::presto::protocol::cpp2::RuntimeStats&&>(__fbthrift_field_runtimeStats);
}

const ::facebook::presto::protocol::cpp2::BlockedReason* OperatorStats::get_blockedReason() const& {
  return blockedReason_ref().has_value() ? std::addressof(__fbthrift_field_blockedReason) : nullptr;
}

::facebook::presto::protocol::cpp2::BlockedReason* OperatorStats::get_blockedReason() & {
  return blockedReason_ref().has_value() ? std::addressof(__fbthrift_field_blockedReason) : nullptr;
}

::facebook::presto::protocol::cpp2::BlockedReason& OperatorStats::set_blockedReason(::facebook::presto::protocol::cpp2::BlockedReason blockedReason_) {
  blockedReason_ref() = blockedReason_;
  return __fbthrift_field_blockedReason;
}

const ::facebook::presto::protocol::cpp2::OperatorInfoUnion& OperatorStats::get_infoUnion() const& {
  return __fbthrift_field_infoUnion;
}

::facebook::presto::protocol::cpp2::OperatorInfoUnion OperatorStats::get_infoUnion() && {
  return static_cast<::facebook::presto::protocol::cpp2::OperatorInfoUnion&&>(__fbthrift_field_infoUnion);
}

::std::int64_t OperatorStats::get_nullJoinBuildKeyCount() const {
  return __fbthrift_field_nullJoinBuildKeyCount;
}

::std::int64_t& OperatorStats::set_nullJoinBuildKeyCount(::std::int64_t nullJoinBuildKeyCount_) {
  nullJoinBuildKeyCount_ref() = nullJoinBuildKeyCount_;
  return __fbthrift_field_nullJoinBuildKeyCount;
}

::std::int64_t OperatorStats::get_joinBuildKeyCount() const {
  return __fbthrift_field_joinBuildKeyCount;
}

::std::int64_t& OperatorStats::set_joinBuildKeyCount(::std::int64_t joinBuildKeyCount_) {
  joinBuildKeyCount_ref() = joinBuildKeyCount_;
  return __fbthrift_field_joinBuildKeyCount;
}

::std::int64_t OperatorStats::get_nullJoinProbeKeyCount() const {
  return __fbthrift_field_nullJoinProbeKeyCount;
}

::std::int64_t& OperatorStats::set_nullJoinProbeKeyCount(::std::int64_t nullJoinProbeKeyCount_) {
  nullJoinProbeKeyCount_ref() = nullJoinProbeKeyCount_;
  return __fbthrift_field_nullJoinProbeKeyCount;
}

::std::int64_t OperatorStats::get_joinProbeKeyCount() const {
  return __fbthrift_field_joinProbeKeyCount;
}

::std::int64_t& OperatorStats::set_joinProbeKeyCount(::std::int64_t joinProbeKeyCount_) {
  joinProbeKeyCount_ref() = joinProbeKeyCount_;
  return __fbthrift_field_joinProbeKeyCount;
}

const ::facebook::presto::protocol::cpp2::DynamicFilterStats& OperatorStats::get_dynamicFilterStats() const& {
  return __fbthrift_field_dynamicFilterStats;
}

::facebook::presto::protocol::cpp2::DynamicFilterStats OperatorStats::get_dynamicFilterStats() && {
  return static_cast<::facebook::presto::protocol::cpp2::DynamicFilterStats&&>(__fbthrift_field_dynamicFilterStats);
}

::std::int64_t OperatorStats::get_isBlockedCalls() const {
  return __fbthrift_field_isBlockedCalls;
}

::std::int64_t& OperatorStats::set_isBlockedCalls(::std::int64_t isBlockedCalls_) {
  isBlockedCalls_ref() = isBlockedCalls_;
  return __fbthrift_field_isBlockedCalls;
}

double OperatorStats::get_isBlockedWall() const {
  return __fbthrift_field_isBlockedWall;
}

double& OperatorStats::set_isBlockedWall(double isBlockedWall_) {
  isBlockedWall_ref() = isBlockedWall_;
  return __fbthrift_field_isBlockedWall;
}

double OperatorStats::get_isBlockedCpu() const {
  return __fbthrift_field_isBlockedCpu;
}

double& OperatorStats::set_isBlockedCpu(double isBlockedCpu_) {
  isBlockedCpu_ref() = isBlockedCpu_;
  return __fbthrift_field_isBlockedCpu;
}

::std::int64_t OperatorStats::get_isBlockedAllocationInBytes() const {
  return __fbthrift_field_isBlockedAllocationInBytes;
}

::std::int64_t& OperatorStats::set_isBlockedAllocationInBytes(::std::int64_t isBlockedAllocationInBytes_) {
  isBlockedAllocationInBytes_ref() = isBlockedAllocationInBytes_;
  return __fbthrift_field_isBlockedAllocationInBytes;
}

void swap([[maybe_unused]] OperatorStats& a, [[maybe_unused]] OperatorStats& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_stageId, b.__fbthrift_field_stageId);
  swap(a.__fbthrift_field_stageExecutionId, b.__fbthrift_field_stageExecutionId);
  swap(a.__fbthrift_field_pipelineId, b.__fbthrift_field_pipelineId);
  swap(a.__fbthrift_field_operatorId, b.__fbthrift_field_operatorId);
  swap(a.__fbthrift_field_planNodeId, b.__fbthrift_field_planNodeId);
  swap(a.__fbthrift_field_operatorType, b.__fbthrift_field_operatorType);
  swap(a.__fbthrift_field_totalDrivers, b.__fbthrift_field_totalDrivers);
  swap(a.__fbthrift_field_addInputCalls, b.__fbthrift_field_addInputCalls);
  swap(a.__fbthrift_field_addInputWall, b.__fbthrift_field_addInputWall);
  swap(a.__fbthrift_field_addInputCpu, b.__fbthrift_field_addInputCpu);
  swap(a.__fbthrift_field_addInputAllocationInBytes, b.__fbthrift_field_addInputAllocationInBytes);
  swap(a.__fbthrift_field_rawInputDataSizeInBytes, b.__fbthrift_field_rawInputDataSizeInBytes);
  swap(a.__fbthrift_field_rawInputPositions, b.__fbthrift_field_rawInputPositions);
  swap(a.__fbthrift_field_inputDataSizeInBytes, b.__fbthrift_field_inputDataSizeInBytes);
  swap(a.__fbthrift_field_inputPositions, b.__fbthrift_field_inputPositions);
  swap(a.__fbthrift_field_sumSquaredInputPositions, b.__fbthrift_field_sumSquaredInputPositions);
  swap(a.__fbthrift_field_getOutputCalls, b.__fbthrift_field_getOutputCalls);
  swap(a.__fbthrift_field_getOutputWall, b.__fbthrift_field_getOutputWall);
  swap(a.__fbthrift_field_getOutputCpu, b.__fbthrift_field_getOutputCpu);
  swap(a.__fbthrift_field_getOutputAllocationInBytes, b.__fbthrift_field_getOutputAllocationInBytes);
  swap(a.__fbthrift_field_outputDataSizeInBytes, b.__fbthrift_field_outputDataSizeInBytes);
  swap(a.__fbthrift_field_outputPositions, b.__fbthrift_field_outputPositions);
  swap(a.__fbthrift_field_physicalWrittenDataSizeInBytes, b.__fbthrift_field_physicalWrittenDataSizeInBytes);
  swap(a.__fbthrift_field_additionalCpu, b.__fbthrift_field_additionalCpu);
  swap(a.__fbthrift_field_blockedWall, b.__fbthrift_field_blockedWall);
  swap(a.__fbthrift_field_finishCalls, b.__fbthrift_field_finishCalls);
  swap(a.__fbthrift_field_finishWall, b.__fbthrift_field_finishWall);
  swap(a.__fbthrift_field_finishCpu, b.__fbthrift_field_finishCpu);
  swap(a.__fbthrift_field_finishAllocationInBytes, b.__fbthrift_field_finishAllocationInBytes);
  swap(a.__fbthrift_field_userMemoryReservationInBytes, b.__fbthrift_field_userMemoryReservationInBytes);
  swap(a.__fbthrift_field_revocableMemoryReservationInBytes, b.__fbthrift_field_revocableMemoryReservationInBytes);
  swap(a.__fbthrift_field_systemMemoryReservationInBytes, b.__fbthrift_field_systemMemoryReservationInBytes);
  swap(a.__fbthrift_field_peakUserMemoryReservationInBytes, b.__fbthrift_field_peakUserMemoryReservationInBytes);
  swap(a.__fbthrift_field_peakSystemMemoryReservationInBytes, b.__fbthrift_field_peakSystemMemoryReservationInBytes);
  swap(a.__fbthrift_field_peakTotalMemoryReservationInBytes, b.__fbthrift_field_peakTotalMemoryReservationInBytes);
  swap(a.__fbthrift_field_spilledDataSizeInBytes, b.__fbthrift_field_spilledDataSizeInBytes);
  swap(a.__fbthrift_field_runtimeStats, b.__fbthrift_field_runtimeStats);
  swap(a.__fbthrift_field_blockedReason, b.__fbthrift_field_blockedReason);
  swap(a.__fbthrift_field_infoUnion, b.__fbthrift_field_infoUnion);
  swap(a.__fbthrift_field_nullJoinBuildKeyCount, b.__fbthrift_field_nullJoinBuildKeyCount);
  swap(a.__fbthrift_field_joinBuildKeyCount, b.__fbthrift_field_joinBuildKeyCount);
  swap(a.__fbthrift_field_nullJoinProbeKeyCount, b.__fbthrift_field_nullJoinProbeKeyCount);
  swap(a.__fbthrift_field_joinProbeKeyCount, b.__fbthrift_field_joinProbeKeyCount);
  swap(a.__fbthrift_field_dynamicFilterStats, b.__fbthrift_field_dynamicFilterStats);
  swap(a.__fbthrift_field_isBlockedCalls, b.__fbthrift_field_isBlockedCalls);
  swap(a.__fbthrift_field_isBlockedWall, b.__fbthrift_field_isBlockedWall);
  swap(a.__fbthrift_field_isBlockedCpu, b.__fbthrift_field_isBlockedCpu);
  swap(a.__fbthrift_field_isBlockedAllocationInBytes, b.__fbthrift_field_isBlockedAllocationInBytes);
  swap(a.__isset, b.__isset);
}

#ifndef __FBTHRIFT_INSTANTIATE_COMPACT_BINARY_PROTOCOL_IN_SEPARATE_TU
template void OperatorStats::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OperatorStats::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OperatorStats::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OperatorStats::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OperatorStats::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OperatorStats::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OperatorStats::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OperatorStats::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
#endif

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorStats,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::PlanNodeId>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorStats,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::RuntimeStats>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorStats,
        ::apache::thrift::type_class::variant,
        ::facebook::presto::protocol::cpp2::OperatorInfoUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OperatorStats,
        ::apache::thrift::type_class::structure,
        ::facebook::presto::protocol::cpp2::DynamicFilterStats>,
    "inconsistent use of json option");

} // namespace facebook::presto::protocol::cpp2

namespace facebook::presto::protocol::cpp2 { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace facebook::presto::protocol::cpp2
namespace apache::thrift::detail::annotation {
}
