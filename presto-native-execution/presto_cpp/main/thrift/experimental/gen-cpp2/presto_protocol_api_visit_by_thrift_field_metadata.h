/**
 * Autogenerated by Thrift for presto_protocol_api.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated  
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "presto_protocol_api_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::SplitWrapper> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).split_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::SplitWrapper");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TableWriteInfoWrapper> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).tableWriteInfo_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TableWriteInfoWrapper");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).metadataUpdates_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::MetadataUpdatesWrapper");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::Lifespan> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).grouped_ref());
    case 2:
      return f(1, static_cast<T&&>(t).groupId_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::Lifespan");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::ErrorLocation> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).lineNumber_ref());
    case 2:
      return f(1, static_cast<T&&>(t).columnNumber_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::ErrorLocation");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::HostAddress> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).host_ref());
    case 2:
      return f(1, static_cast<T&&>(t).port_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::HostAddress");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::StageId> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).queryId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).id_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::StageId");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::OutputBufferId> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).id_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::OutputBufferId");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::PageBufferInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).partition_ref());
    case 2:
      return f(1, static_cast<T&&>(t).bufferedPages_ref());
    case 3:
      return f(2, static_cast<T&&>(t).bufferedBytes_ref());
    case 4:
      return f(3, static_cast<T&&>(t).rowsAdded_ref());
    case 5:
      return f(4, static_cast<T&&>(t).pagesAdded_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::PageBufferInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::PlanNodeId> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).id_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::PlanNodeId");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::DistributionSnapshot> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).maxError_ref());
    case 2:
      return f(1, static_cast<T&&>(t).count_ref());
    case 3:
      return f(2, static_cast<T&&>(t).total_ref());
    case 4:
      return f(3, static_cast<T&&>(t).p01_ref());
    case 5:
      return f(4, static_cast<T&&>(t).p05_ref());
    case 6:
      return f(5, static_cast<T&&>(t).p10_ref());
    case 7:
      return f(6, static_cast<T&&>(t).p25_ref());
    case 8:
      return f(7, static_cast<T&&>(t).p50_ref());
    case 9:
      return f(8, static_cast<T&&>(t).p75_ref());
    case 10:
      return f(9, static_cast<T&&>(t).p90_ref());
    case 11:
      return f(10, static_cast<T&&>(t).p95_ref());
    case 12:
      return f(11, static_cast<T&&>(t).p99_ref());
    case 13:
      return f(12, static_cast<T&&>(t).min_ref());
    case 14:
      return f(13, static_cast<T&&>(t).max_ref());
    case 15:
      return f(14, static_cast<T&&>(t).avg_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::DistributionSnapshot");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::RuntimeStats> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).metrics_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::RuntimeStats");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::ExchangeClientStatus> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).bufferedBytes_ref());
    case 2:
      return f(1, static_cast<T&&>(t).maxBufferedBytes_ref());
    case 3:
      return f(2, static_cast<T&&>(t).averageBytesPerRequest_ref());
    case 4:
      return f(3, static_cast<T&&>(t).successfulRequestsCount_ref());
    case 5:
      return f(4, static_cast<T&&>(t).bufferedPages_ref());
    case 6:
      return f(5, static_cast<T&&>(t).noMoreLocations_ref());
    case 7:
      return f(6, static_cast<T&&>(t).pageBufferClientStatuses_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::ExchangeClientStatus");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::PageBufferClientStatus> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).uri_ref());
    case 2:
      return f(1, static_cast<T&&>(t).state_ref());
    case 3:
      return f(2, static_cast<T&&>(t).lastUpdate_ref());
    case 4:
      return f(3, static_cast<T&&>(t).rowsReceived_ref());
    case 5:
      return f(4, static_cast<T&&>(t).pagesReceived_ref());
    case 6:
      return f(5, static_cast<T&&>(t).rowsRejected_ref());
    case 7:
      return f(6, static_cast<T&&>(t).pagesRejected_ref());
    case 8:
      return f(7, static_cast<T&&>(t).requestsScheduled_ref());
    case 9:
      return f(8, static_cast<T&&>(t).requestsCompleted_ref());
    case 10:
      return f(9, static_cast<T&&>(t).requestsFailed_ref());
    case 11:
      return f(10, static_cast<T&&>(t).httpRequestState_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::PageBufferClientStatus");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).bufferedBytes_ref());
    case 2:
      return f(1, static_cast<T&&>(t).bufferedPages_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::LocalExchangeBufferInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TableFinishInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).serializedConnectorOutputMetadata_ref());
    case 2:
      return f(1, static_cast<T&&>(t).jsonLengthLimitExceeded_ref());
    case 3:
      return f(2, static_cast<T&&>(t).statisticsWallTime_ref());
    case 4:
      return f(3, static_cast<T&&>(t).statisticsCpuTime_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TableFinishInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::SplitOperatorInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).splitInfoMap_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::SplitOperatorInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::HashCollisionsInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).weightedSumSquaredHashCollisions_ref());
    case 2:
      return f(1, static_cast<T&&>(t).weightedHashCollisions_ref());
    case 3:
      return f(2, static_cast<T&&>(t).weightedExpectedHashCollisions_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::HashCollisionsInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::PartitionedOutputInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).rowsAdded_ref());
    case 2:
      return f(1, static_cast<T&&>(t).pagesAdded_ref());
    case 3:
      return f(2, static_cast<T&&>(t).outputBufferPeakMemoryUsage_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::PartitionedOutputInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::WindowInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).windowInfos_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::WindowInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::DriverWindowInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).sumSquaredDifferencesPositionsOfIndex_ref());
    case 2:
      return f(1, static_cast<T&&>(t).sumSquaredDifferencesSizeOfIndex_ref());
    case 3:
      return f(2, static_cast<T&&>(t).sumSquaredDifferencesSizeInPartition_ref());
    case 4:
      return f(3, static_cast<T&&>(t).totalPartitionsCount_ref());
    case 5:
      return f(4, static_cast<T&&>(t).totalRowsCount_ref());
    case 6:
      return f(5, static_cast<T&&>(t).numberOfIndexes_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::DriverWindowInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TableWriterInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).pageSinkPeakMemoryUsage_ref());
    case 2:
      return f(1, static_cast<T&&>(t).statisticsWallTime_ref());
    case 3:
      return f(2, static_cast<T&&>(t).statisticsCpuTime_ref());
    case 4:
      return f(3, static_cast<T&&>(t).validationCpuTime_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TableWriterInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TableWriterMergeInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).statisticsWallTime_ref());
    case 2:
      return f(1, static_cast<T&&>(t).statisticsCpuTime_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TableWriterMergeInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::DynamicFilterStats> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).producerNodeIds_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::DynamicFilterStats");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::DriverStats> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).lifespan_ref());
    case 2:
      return f(1, static_cast<T&&>(t).createTimeInMillis_ref());
    case 3:
      return f(2, static_cast<T&&>(t).startTimeInMillis_ref());
    case 4:
      return f(3, static_cast<T&&>(t).endTimeInMillis_ref());
    case 5:
      return f(4, static_cast<T&&>(t).queuedTime_ref());
    case 6:
      return f(5, static_cast<T&&>(t).elapsedTime_ref());
    case 7:
      return f(6, static_cast<T&&>(t).userMemoryReservationInBytes_ref());
    case 8:
      return f(7, static_cast<T&&>(t).revocableMemoryReservationInBytes_ref());
    case 9:
      return f(8, static_cast<T&&>(t).systemMemoryReservationInBytes_ref());
    case 10:
      return f(9, static_cast<T&&>(t).totalScheduledTime_ref());
    case 11:
      return f(10, static_cast<T&&>(t).totalCpuTime_ref());
    case 12:
      return f(11, static_cast<T&&>(t).totalBlockedTime_ref());
    case 13:
      return f(12, static_cast<T&&>(t).fullyBlocked_ref());
    case 14:
      return f(13, static_cast<T&&>(t).blockedReasons_ref());
    case 15:
      return f(14, static_cast<T&&>(t).totalAllocationInBytes_ref());
    case 16:
      return f(15, static_cast<T&&>(t).rawInputDataSizeInBytes_ref());
    case 17:
      return f(16, static_cast<T&&>(t).rawInputReadTime_ref());
    case 18:
      return f(17, static_cast<T&&>(t).rawInputPositions_ref());
    case 19:
      return f(18, static_cast<T&&>(t).processedInputDataSizeInBytes_ref());
    case 20:
      return f(19, static_cast<T&&>(t).processedInputPositions_ref());
    case 21:
      return f(20, static_cast<T&&>(t).outputDataSizeInBytes_ref());
    case 22:
      return f(21, static_cast<T&&>(t).outputPositions_ref());
    case 23:
      return f(22, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref());
    case 24:
      return f(23, static_cast<T&&>(t).operatorStats_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::DriverStats");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TransactionId> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).uuid_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TransactionId");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TimeZoneKey> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).id_ref());
    case 2:
      return f(1, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TimeZoneKey");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::ResourceEstimates> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).executionTime_ref());
    case 2:
      return f(1, static_cast<T&&>(t).cpuTime_ref());
    case 3:
      return f(2, static_cast<T&&>(t).peakMemory_ref());
    case 4:
      return f(3, static_cast<T&&>(t).peakTaskMemory_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::ResourceEstimates");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::ConnectorId> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).catalogName_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::ConnectorId");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::SqlFunctionId> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).signature_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::SqlFunctionId");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TypeSignature> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).signature_ref());
    case 2:
      return f(1, static_cast<T&&>(t).ignore_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TypeSignature");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::Language> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).language_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::Language");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::QualifiedObjectName> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).catalogName_ref());
    case 2:
      return f(1, static_cast<T&&>(t).schemaName_ref());
    case 3:
      return f(2, static_cast<T&&>(t).objectName_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::QualifiedObjectName");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TypeVariableConstraint> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).name_ref());
    case 2:
      return f(1, static_cast<T&&>(t).comparableRequired_ref());
    case 3:
      return f(2, static_cast<T&&>(t).orderableRequired_ref());
    case 4:
      return f(3, static_cast<T&&>(t).variadicBound_ref());
    case 5:
      return f(4, static_cast<T&&>(t).nonDecimalNumericRequired_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TypeVariableConstraint");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::LongVariableConstraint> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).name_ref());
    case 2:
      return f(1, static_cast<T&&>(t).expression_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::LongVariableConstraint");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TaskSource> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).planNodeId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).splits_ref());
    case 3:
      return f(2, static_cast<T&&>(t).noMoreSplitsForLifespan_ref());
    case 4:
      return f(3, static_cast<T&&>(t).noMoreSplits_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TaskSource");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::ScheduledSplit> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).sequenceId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).planNodeId_ref());
    case 3:
      return f(2, static_cast<T&&>(t).split_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::ScheduledSplit");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TaskStatus> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).taskInstanceIdLeastSignificantBits_ref());
    case 2:
      return f(1, static_cast<T&&>(t).taskInstanceIdMostSignificantBits_ref());
    case 3:
      return f(2, static_cast<T&&>(t).version_ref());
    case 4:
      return f(3, static_cast<T&&>(t).state_ref());
    case 5:
      return f(4, static_cast<T&&>(t).selfUri_ref());
    case 6:
      return f(5, static_cast<T&&>(t).completedDriverGroups_ref());
    case 7:
      return f(6, static_cast<T&&>(t).failures_ref());
    case 8:
      return f(7, static_cast<T&&>(t).queuedPartitionedDrivers_ref());
    case 9:
      return f(8, static_cast<T&&>(t).runningPartitionedDrivers_ref());
    case 10:
      return f(9, static_cast<T&&>(t).outputBufferUtilization_ref());
    case 11:
      return f(10, static_cast<T&&>(t).outputBufferOverutilized_ref());
    case 12:
      return f(11, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref());
    case 13:
      return f(12, static_cast<T&&>(t).memoryReservationInBytes_ref());
    case 14:
      return f(13, static_cast<T&&>(t).systemMemoryReservationInBytes_ref());
    case 15:
      return f(14, static_cast<T&&>(t).fullGcCount_ref());
    case 16:
      return f(15, static_cast<T&&>(t).fullGcTimeInMillis_ref());
    case 17:
      return f(16, static_cast<T&&>(t).peakNodeTotalMemoryReservationInBytes_ref());
    case 18:
      return f(17, static_cast<T&&>(t).totalCpuTimeInNanos_ref());
    case 19:
      return f(18, static_cast<T&&>(t).taskAgeInMillis_ref());
    case 20:
      return f(19, static_cast<T&&>(t).queuedPartitionedSplitsWeight_ref());
    case 21:
      return f(20, static_cast<T&&>(t).runningPartitionedSplitsWeight_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TaskStatus");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::ErrorCode> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).code_ref());
    case 2:
      return f(1, static_cast<T&&>(t).name_ref());
    case 3:
      return f(2, static_cast<T&&>(t).type_ref());
    case 4:
      return f(3, static_cast<T&&>(t).retriable_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::ErrorCode");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::StageExecutionId> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).stageId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).id_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::StageExecutionId");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::OutputBufferInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).type_ref());
    case 2:
      return f(1, static_cast<T&&>(t).state_ref());
    case 3:
      return f(2, static_cast<T&&>(t).buffers_ref());
    case 4:
      return f(3, static_cast<T&&>(t).canAddBuffers_ref());
    case 5:
      return f(4, static_cast<T&&>(t).canAddPages_ref());
    case 6:
      return f(5, static_cast<T&&>(t).totalBufferedBytes_ref());
    case 7:
      return f(6, static_cast<T&&>(t).totalBufferedPages_ref());
    case 8:
      return f(7, static_cast<T&&>(t).totalRowsSent_ref());
    case 9:
      return f(8, static_cast<T&&>(t).totalPagesSent_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::OutputBufferInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::BufferInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).bufferId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).finished_ref());
    case 3:
      return f(2, static_cast<T&&>(t).bufferedPages_ref());
    case 4:
      return f(3, static_cast<T&&>(t).pagesSent_ref());
    case 5:
      return f(4, static_cast<T&&>(t).pageBufferInfo_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::BufferInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TaskStats> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).createTimeInMillis_ref());
    case 2:
      return f(1, static_cast<T&&>(t).firstStartTimeInMillis_ref());
    case 3:
      return f(2, static_cast<T&&>(t).lastStartTimeInMillis_ref());
    case 4:
      return f(3, static_cast<T&&>(t).lastEndTimeInMillis_ref());
    case 5:
      return f(4, static_cast<T&&>(t).endTimeInMillis_ref());
    case 6:
      return f(5, static_cast<T&&>(t).elapsedTimeInNanos_ref());
    case 7:
      return f(6, static_cast<T&&>(t).queuedTimeInNanos_ref());
    case 8:
      return f(7, static_cast<T&&>(t).totalDrivers_ref());
    case 9:
      return f(8, static_cast<T&&>(t).queuedDrivers_ref());
    case 10:
      return f(9, static_cast<T&&>(t).runningDrivers_ref());
    case 11:
      return f(10, static_cast<T&&>(t).blockedDrivers_ref());
    case 12:
      return f(11, static_cast<T&&>(t).completedDrivers_ref());
    case 13:
      return f(12, static_cast<T&&>(t).cumulativeUserMemory_ref());
    case 14:
      return f(13, static_cast<T&&>(t).cumulativeTotalMemory_ref());
    case 15:
      return f(14, static_cast<T&&>(t).userMemoryReservationInBytes_ref());
    case 16:
      return f(15, static_cast<T&&>(t).revocableMemoryReservationInBytes_ref());
    case 17:
      return f(16, static_cast<T&&>(t).systemMemoryReservationInBytes_ref());
    case 18:
      return f(17, static_cast<T&&>(t).peakUserMemoryInBytes_ref());
    case 19:
      return f(18, static_cast<T&&>(t).peakTotalMemoryInBytes_ref());
    case 20:
      return f(19, static_cast<T&&>(t).peakNodeTotalMemoryInBytes_ref());
    case 21:
      return f(20, static_cast<T&&>(t).totalScheduledTimeInNanos_ref());
    case 22:
      return f(21, static_cast<T&&>(t).totalCpuTimeInNanos_ref());
    case 23:
      return f(22, static_cast<T&&>(t).totalBlockedTimeInNanos_ref());
    case 24:
      return f(23, static_cast<T&&>(t).fullyBlocked_ref());
    case 25:
      return f(24, static_cast<T&&>(t).blockedReasons_ref());
    case 26:
      return f(25, static_cast<T&&>(t).totalAllocationInBytes_ref());
    case 27:
      return f(26, static_cast<T&&>(t).rawInputDataSizeInBytes_ref());
    case 28:
      return f(27, static_cast<T&&>(t).rawInputPositions_ref());
    case 29:
      return f(28, static_cast<T&&>(t).processedInputDataSizeInBytes_ref());
    case 30:
      return f(29, static_cast<T&&>(t).processedInputPositions_ref());
    case 31:
      return f(30, static_cast<T&&>(t).outputDataSizeInBytes_ref());
    case 32:
      return f(31, static_cast<T&&>(t).outputPositions_ref());
    case 33:
      return f(32, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref());
    case 34:
      return f(33, static_cast<T&&>(t).pipelines_ref());
    case 35:
      return f(34, static_cast<T&&>(t).queuedPartitionedDrivers_ref());
    case 36:
      return f(35, static_cast<T&&>(t).queuedPartitionedSplitsWeight_ref());
    case 37:
      return f(36, static_cast<T&&>(t).runningPartitionedDrivers_ref());
    case 38:
      return f(37, static_cast<T&&>(t).runningPartitionedSplitsWeight_ref());
    case 39:
      return f(38, static_cast<T&&>(t).fullGcCount_ref());
    case 40:
      return f(39, static_cast<T&&>(t).fullGcTimeInMillis_ref());
    case 41:
      return f(40, static_cast<T&&>(t).runtimeStats_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TaskStats");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::PipelineStats> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).pipelineId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).firstStartTimeInMillis_ref());
    case 3:
      return f(2, static_cast<T&&>(t).lastStartTimeInMillis_ref());
    case 4:
      return f(3, static_cast<T&&>(t).lastEndTimeInMillis_ref());
    case 5:
      return f(4, static_cast<T&&>(t).inputPipeline_ref());
    case 6:
      return f(5, static_cast<T&&>(t).outputPipeline_ref());
    case 7:
      return f(6, static_cast<T&&>(t).totalDrivers_ref());
    case 8:
      return f(7, static_cast<T&&>(t).queuedDrivers_ref());
    case 9:
      return f(8, static_cast<T&&>(t).queuedPartitionedDrivers_ref());
    case 10:
      return f(9, static_cast<T&&>(t).queuedPartitionedSplitsWeight_ref());
    case 11:
      return f(10, static_cast<T&&>(t).runningDrivers_ref());
    case 12:
      return f(11, static_cast<T&&>(t).runningPartitionedDrivers_ref());
    case 13:
      return f(12, static_cast<T&&>(t).runningPartitionedSplitsWeight_ref());
    case 14:
      return f(13, static_cast<T&&>(t).blockedDrivers_ref());
    case 15:
      return f(14, static_cast<T&&>(t).completedDrivers_ref());
    case 16:
      return f(15, static_cast<T&&>(t).userMemoryReservationInBytes_ref());
    case 17:
      return f(16, static_cast<T&&>(t).revocableMemoryReservationInBytes_ref());
    case 18:
      return f(17, static_cast<T&&>(t).systemMemoryReservationInBytes_ref());
    case 19:
      return f(18, static_cast<T&&>(t).queuedTime_ref());
    case 20:
      return f(19, static_cast<T&&>(t).elapsedTime_ref());
    case 21:
      return f(20, static_cast<T&&>(t).totalScheduledTimeInNanos_ref());
    case 22:
      return f(21, static_cast<T&&>(t).totalCpuTimeInNanos_ref());
    case 23:
      return f(22, static_cast<T&&>(t).totalBlockedTimeInNanos_ref());
    case 24:
      return f(23, static_cast<T&&>(t).fullyBlocked_ref());
    case 25:
      return f(24, static_cast<T&&>(t).blockedReasons_ref());
    case 26:
      return f(25, static_cast<T&&>(t).totalAllocationInBytes_ref());
    case 27:
      return f(26, static_cast<T&&>(t).rawInputDataSizeInBytes_ref());
    case 28:
      return f(27, static_cast<T&&>(t).rawInputPositions_ref());
    case 29:
      return f(28, static_cast<T&&>(t).processedInputDataSizeInBytes_ref());
    case 30:
      return f(29, static_cast<T&&>(t).processedInputPositions_ref());
    case 31:
      return f(30, static_cast<T&&>(t).outputDataSizeInBytes_ref());
    case 32:
      return f(31, static_cast<T&&>(t).outputPositions_ref());
    case 33:
      return f(32, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref());
    case 34:
      return f(33, static_cast<T&&>(t).operatorSummaries_ref());
    case 35:
      return f(34, static_cast<T&&>(t).drivers_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::PipelineStats");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::RuntimeMetric> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).name_ref());
    case 2:
      return f(1, static_cast<T&&>(t).sum_ref());
    case 3:
      return f(2, static_cast<T&&>(t).count_ref());
    case 4:
      return f(3, static_cast<T&&>(t).max_ref());
    case 5:
      return f(4, static_cast<T&&>(t).min_ref());
    case 6:
      return f(5, static_cast<T&&>(t).unit_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::RuntimeMetric");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::JoinOperatorInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).joinType_ref());
    case 2:
      return f(1, static_cast<T&&>(t).logHistogramProbes_ref());
    case 3:
      return f(2, static_cast<T&&>(t).logHistogramOutput_ref());
    case 4:
      return f(3, static_cast<T&&>(t).lookupSourcePositions_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::JoinOperatorInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::SessionRepresentation> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).queryId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).transactionId_ref());
    case 3:
      return f(2, static_cast<T&&>(t).clientTransactionSupport_ref());
    case 4:
      return f(3, static_cast<T&&>(t).user_ref());
    case 5:
      return f(4, static_cast<T&&>(t).principal_ref());
    case 6:
      return f(5, static_cast<T&&>(t).source_ref());
    case 7:
      return f(6, static_cast<T&&>(t).catalog_ref());
    case 8:
      return f(7, static_cast<T&&>(t).schema_ref());
    case 9:
      return f(8, static_cast<T&&>(t).traceToken_ref());
    case 10:
      return f(9, static_cast<T&&>(t).timeZoneKey_ref());
    case 11:
      return f(10, static_cast<T&&>(t).locale_ref());
    case 12:
      return f(11, static_cast<T&&>(t).remoteUserAddress_ref());
    case 13:
      return f(12, static_cast<T&&>(t).userAgent_ref());
    case 14:
      return f(13, static_cast<T&&>(t).clientInfo_ref());
    case 15:
      return f(14, static_cast<T&&>(t).clientTags_ref());
    case 16:
      return f(15, static_cast<T&&>(t).resourceEstimates_ref());
    case 17:
      return f(16, static_cast<T&&>(t).startTime_ref());
    case 18:
      return f(17, static_cast<T&&>(t).systemProperties_ref());
    case 19:
      return f(18, static_cast<T&&>(t).catalogProperties_ref());
    case 20:
      return f(19, static_cast<T&&>(t).unprocessedCatalogProperties_ref());
    case 21:
      return f(20, static_cast<T&&>(t).roles_ref());
    case 22:
      return f(21, static_cast<T&&>(t).preparedStatements_ref());
    case 23:
      return f(22, static_cast<T&&>(t).sessionFunctions_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::SessionRepresentation");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::SelectedRole> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).type_ref());
    case 2:
      return f(1, static_cast<T&&>(t).role_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::SelectedRole");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::Parameter> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).name_ref());
    case 2:
      return f(1, static_cast<T&&>(t).type_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::Parameter");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::RoutineCharacteristics> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).language_ref());
    case 2:
      return f(1, static_cast<T&&>(t).determinism_ref());
    case 3:
      return f(2, static_cast<T&&>(t).nullCallClause_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::RoutineCharacteristics");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::Signature> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).name_ref());
    case 2:
      return f(1, static_cast<T&&>(t).kind_ref());
    case 3:
      return f(2, static_cast<T&&>(t).returnType_ref());
    case 4:
      return f(3, static_cast<T&&>(t).argumentTypes_ref());
    case 5:
      return f(4, static_cast<T&&>(t).variableArity_ref());
    case 6:
      return f(5, static_cast<T&&>(t).typeVariableConstraints_ref());
    case 7:
      return f(6, static_cast<T&&>(t).longVariableConstraints_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::Signature");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::OutputBuffers> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).type_ref());
    case 2:
      return f(1, static_cast<T&&>(t).version_ref());
    case 3:
      return f(2, static_cast<T&&>(t).noMoreBufferIds_ref());
    case 4:
      return f(3, static_cast<T&&>(t).buffers_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::OutputBuffers");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TaskUpdateRequest> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).session_ref());
    case 2:
      return f(1, static_cast<T&&>(t).extraCredentials_ref());
    case 3:
      return f(2, static_cast<T&&>(t).fragment_ref());
    case 4:
      return f(3, static_cast<T&&>(t).sources_ref());
    case 5:
      return f(4, static_cast<T&&>(t).outputIds_ref());
    case 6:
      return f(5, static_cast<T&&>(t).tableWriteInfo_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TaskUpdateRequest");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::ExecutionFailureInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).type_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).cause_ref());
    case 4:
      return f(3, static_cast<T&&>(t).suppressed_ref());
    case 5:
      return f(4, static_cast<T&&>(t).stack_ref());
    case 6:
      return f(5, static_cast<T&&>(t).errorLocation_ref());
    case 7:
      return f(6, static_cast<T&&>(t).errorCode_ref());
    case 8:
      return f(7, static_cast<T&&>(t).remoteHost_ref());
    case 9:
      return f(8, static_cast<T&&>(t).errorCause_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::ExecutionFailureInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TaskId> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).stageExecutionId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).id_ref());
    case 3:
      return f(2, static_cast<T&&>(t).attemptNumber_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TaskId");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::OperatorInfoUnion> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).exchangeClientStatus_ref());
    case 2:
      return f(1, static_cast<T&&>(t).localExchangeBufferInfo_ref());
    case 3:
      return f(2, static_cast<T&&>(t).tableFinishInfo_ref());
    case 4:
      return f(3, static_cast<T&&>(t).splitOperatorInfo_ref());
    case 5:
      return f(4, static_cast<T&&>(t).hashCollisionsInfo_ref());
    case 6:
      return f(5, static_cast<T&&>(t).partitionedOutputInfo_ref());
    case 7:
      return f(6, static_cast<T&&>(t).joinOperatorInfo_ref());
    case 8:
      return f(7, static_cast<T&&>(t).windowInfo_ref());
    case 9:
      return f(8, static_cast<T&&>(t).tableWriterInfo_ref());
    case 10:
      return f(9, static_cast<T&&>(t).tableWriterMergeInfo_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::OperatorInfoUnion");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::SqlInvokedFunction> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).parameters_ref());
    case 2:
      return f(1, static_cast<T&&>(t).description_ref());
    case 3:
      return f(2, static_cast<T&&>(t).routineCharacteristics_ref());
    case 4:
      return f(3, static_cast<T&&>(t).body_ref());
    case 5:
      return f(4, static_cast<T&&>(t).variableArity_ref());
    case 6:
      return f(5, static_cast<T&&>(t).signature_ref());
    case 7:
      return f(6, static_cast<T&&>(t).functionId_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::SqlInvokedFunction");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::TaskInfo> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).taskId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).taskStatus_ref());
    case 3:
      return f(2, static_cast<T&&>(t).lastHeartbeatInMillis_ref());
    case 4:
      return f(3, static_cast<T&&>(t).outputBuffers_ref());
    case 5:
      return f(4, static_cast<T&&>(t).noMoreSplits_ref());
    case 6:
      return f(5, static_cast<T&&>(t).stats_ref());
    case 7:
      return f(6, static_cast<T&&>(t).needsPlan_ref());
    case 8:
      return f(7, static_cast<T&&>(t).metadataUpdates_ref());
    case 9:
      return f(8, static_cast<T&&>(t).nodeId_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::TaskInfo");
    }
  }
};

template <>
struct VisitByFieldId<::facebook::presto::protocol::cpp2::OperatorStats> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).stageId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).stageExecutionId_ref());
    case 3:
      return f(2, static_cast<T&&>(t).pipelineId_ref());
    case 4:
      return f(3, static_cast<T&&>(t).operatorId_ref());
    case 5:
      return f(4, static_cast<T&&>(t).planNodeId_ref());
    case 6:
      return f(5, static_cast<T&&>(t).operatorType_ref());
    case 7:
      return f(6, static_cast<T&&>(t).totalDrivers_ref());
    case 8:
      return f(7, static_cast<T&&>(t).addInputCalls_ref());
    case 9:
      return f(8, static_cast<T&&>(t).addInputWall_ref());
    case 10:
      return f(9, static_cast<T&&>(t).addInputCpu_ref());
    case 11:
      return f(10, static_cast<T&&>(t).addInputAllocationInBytes_ref());
    case 12:
      return f(11, static_cast<T&&>(t).rawInputDataSizeInBytes_ref());
    case 13:
      return f(12, static_cast<T&&>(t).rawInputPositions_ref());
    case 14:
      return f(13, static_cast<T&&>(t).inputDataSizeInBytes_ref());
    case 15:
      return f(14, static_cast<T&&>(t).inputPositions_ref());
    case 16:
      return f(15, static_cast<T&&>(t).sumSquaredInputPositions_ref());
    case 17:
      return f(16, static_cast<T&&>(t).getOutputCalls_ref());
    case 18:
      return f(17, static_cast<T&&>(t).getOutputWall_ref());
    case 19:
      return f(18, static_cast<T&&>(t).getOutputCpu_ref());
    case 20:
      return f(19, static_cast<T&&>(t).getOutputAllocationInBytes_ref());
    case 21:
      return f(20, static_cast<T&&>(t).outputDataSizeInBytes_ref());
    case 22:
      return f(21, static_cast<T&&>(t).outputPositions_ref());
    case 23:
      return f(22, static_cast<T&&>(t).physicalWrittenDataSizeInBytes_ref());
    case 24:
      return f(23, static_cast<T&&>(t).additionalCpu_ref());
    case 25:
      return f(24, static_cast<T&&>(t).blockedWall_ref());
    case 26:
      return f(25, static_cast<T&&>(t).finishCalls_ref());
    case 27:
      return f(26, static_cast<T&&>(t).finishWall_ref());
    case 28:
      return f(27, static_cast<T&&>(t).finishCpu_ref());
    case 29:
      return f(28, static_cast<T&&>(t).finishAllocationInBytes_ref());
    case 30:
      return f(29, static_cast<T&&>(t).userMemoryReservationInBytes_ref());
    case 31:
      return f(30, static_cast<T&&>(t).revocableMemoryReservationInBytes_ref());
    case 32:
      return f(31, static_cast<T&&>(t).systemMemoryReservationInBytes_ref());
    case 33:
      return f(32, static_cast<T&&>(t).peakUserMemoryReservationInBytes_ref());
    case 34:
      return f(33, static_cast<T&&>(t).peakSystemMemoryReservationInBytes_ref());
    case 35:
      return f(34, static_cast<T&&>(t).peakTotalMemoryReservationInBytes_ref());
    case 36:
      return f(35, static_cast<T&&>(t).spilledDataSizeInBytes_ref());
    case 37:
      return f(36, static_cast<T&&>(t).runtimeStats_ref());
    case 38:
      return f(37, static_cast<T&&>(t).blockedReason_ref());
    case 39:
      return f(38, static_cast<T&&>(t).infoUnion_ref());
    case 40:
      return f(39, static_cast<T&&>(t).nullJoinBuildKeyCount_ref());
    case 41:
      return f(40, static_cast<T&&>(t).joinBuildKeyCount_ref());
    case 42:
      return f(41, static_cast<T&&>(t).nullJoinProbeKeyCount_ref());
    case 43:
      return f(42, static_cast<T&&>(t).joinProbeKeyCount_ref());
    case 44:
      return f(43, static_cast<T&&>(t).dynamicFilterStats_ref());
    case 45:
      return f(44, static_cast<T&&>(t).isBlockedCalls_ref());
    case 46:
      return f(45, static_cast<T&&>(t).isBlockedWall_ref());
    case 47:
      return f(46, static_cast<T&&>(t).isBlockedCpu_ref());
    case 48:
      return f(47, static_cast<T&&>(t).isBlockedAllocationInBytes_ref());
    default:
      throwInvalidThriftId(fieldId, "::facebook::presto::protocol::cpp2::OperatorStats");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
