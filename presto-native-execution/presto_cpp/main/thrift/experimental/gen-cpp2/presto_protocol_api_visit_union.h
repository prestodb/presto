/**
 * Autogenerated by Thrift for presto_protocol_api.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated  
 */
#pragma once

#include "presto_protocol_api_metadata.h"
#include <thrift/lib/cpp2/visitation/visit_union.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitUnion<::facebook::presto::protocol::cpp2::OperatorInfoUnion> {

  template <typename F, typename T>
  decltype(auto) operator()([[maybe_unused]] F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::exchangeClientStatus:
      return f(0, *static_cast<T&&>(t).exchangeClientStatus_ref());
    case Union::Type::localExchangeBufferInfo:
      return f(1, *static_cast<T&&>(t).localExchangeBufferInfo_ref());
    case Union::Type::tableFinishInfo:
      return f(2, *static_cast<T&&>(t).tableFinishInfo_ref());
    case Union::Type::splitOperatorInfo:
      return f(3, *static_cast<T&&>(t).splitOperatorInfo_ref());
    case Union::Type::hashCollisionsInfo:
      return f(4, *static_cast<T&&>(t).hashCollisionsInfo_ref());
    case Union::Type::partitionedOutputInfo:
      return f(5, *static_cast<T&&>(t).partitionedOutputInfo_ref());
    case Union::Type::joinOperatorInfo:
      return f(6, *static_cast<T&&>(t).joinOperatorInfo_ref());
    case Union::Type::windowInfo:
      return f(7, *static_cast<T&&>(t).windowInfo_ref());
    case Union::Type::tableWriterInfo:
      return f(8, *static_cast<T&&>(t).tableWriterInfo_ref());
    case Union::Type::tableWriterMergeInfo:
      return f(9, *static_cast<T&&>(t).tableWriterMergeInfo_ref());
    case Union::Type::__EMPTY__:
      return decltype(f(0, *static_cast<T&&>(t).exchangeClientStatus_ref()))();
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
