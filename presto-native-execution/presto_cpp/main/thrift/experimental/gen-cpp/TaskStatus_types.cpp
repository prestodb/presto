/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TaskStatus_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace protocol {


ThriftTaskStatus::~ThriftTaskStatus() noexcept {
}

ThriftTaskStatus::ThriftTaskStatus() noexcept
   : taskInstanceIdLeastSignificantBits(0),
     taskInstanceIdMostSignificantBits(0),
     version(0),
     state(static_cast< ::protocol::ThriftTaskState::type>(0)),
     self(),
     queuedPartitionedDrivers(0),
     runningPartitionedDrivers(0),
     outputBufferUtilization(0),
     outputBufferOverutilized(0),
     physicalWrittenDataSizeInBytes(0),
     memoryReservationInBytes(0),
     systemMemoryReservationInBytes(0),
     peakNodeTotalMemoryReservationInBytes(0),
     fullGcCount(0),
     fullGcTimeInMillis(0),
     totalCpuTimeInNanos(0),
     taskAgeInMillis(0),
     queuedPartitionedSplitsWeight(0),
     runningPartitionedSplitsWeight(0) {
}

void ThriftTaskStatus::__set_taskInstanceIdLeastSignificantBits(const int64_t val) {
  this->taskInstanceIdLeastSignificantBits = val;
}

void ThriftTaskStatus::__set_taskInstanceIdMostSignificantBits(const int64_t val) {
  this->taskInstanceIdMostSignificantBits = val;
}

void ThriftTaskStatus::__set_version(const int64_t val) {
  this->version = val;
}

void ThriftTaskStatus::__set_state(const  ::protocol::ThriftTaskState::type val) {
  this->state = val;
}

void ThriftTaskStatus::__set_self(const std::string& val) {
  this->self = val;
}

void ThriftTaskStatus::__set_completedDriverGroups(const std::set< ::protocol::ThriftLifespan> & val) {
  this->completedDriverGroups = val;
}

void ThriftTaskStatus::__set_failures(const std::vector< ::protocol::ThriftExecutionFailureInfo> & val) {
  this->failures = val;
}

void ThriftTaskStatus::__set_queuedPartitionedDrivers(const int32_t val) {
  this->queuedPartitionedDrivers = val;
}

void ThriftTaskStatus::__set_runningPartitionedDrivers(const int32_t val) {
  this->runningPartitionedDrivers = val;
}

void ThriftTaskStatus::__set_outputBufferUtilization(const double val) {
  this->outputBufferUtilization = val;
}

void ThriftTaskStatus::__set_outputBufferOverutilized(const bool val) {
  this->outputBufferOverutilized = val;
}

void ThriftTaskStatus::__set_physicalWrittenDataSizeInBytes(const int64_t val) {
  this->physicalWrittenDataSizeInBytes = val;
}

void ThriftTaskStatus::__set_memoryReservationInBytes(const int64_t val) {
  this->memoryReservationInBytes = val;
}

void ThriftTaskStatus::__set_systemMemoryReservationInBytes(const int64_t val) {
  this->systemMemoryReservationInBytes = val;
}

void ThriftTaskStatus::__set_peakNodeTotalMemoryReservationInBytes(const int64_t val) {
  this->peakNodeTotalMemoryReservationInBytes = val;
}

void ThriftTaskStatus::__set_fullGcCount(const int64_t val) {
  this->fullGcCount = val;
}

void ThriftTaskStatus::__set_fullGcTimeInMillis(const int64_t val) {
  this->fullGcTimeInMillis = val;
}

void ThriftTaskStatus::__set_totalCpuTimeInNanos(const int64_t val) {
  this->totalCpuTimeInNanos = val;
}

void ThriftTaskStatus::__set_taskAgeInMillis(const int64_t val) {
  this->taskAgeInMillis = val;
}

void ThriftTaskStatus::__set_queuedPartitionedSplitsWeight(const int64_t val) {
  this->queuedPartitionedSplitsWeight = val;
}

void ThriftTaskStatus::__set_runningPartitionedSplitsWeight(const int64_t val) {
  this->runningPartitionedSplitsWeight = val;
}
std::ostream& operator<<(std::ostream& out, const ThriftTaskStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ThriftTaskStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->taskInstanceIdLeastSignificantBits);
          this->__isset.taskInstanceIdLeastSignificantBits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->taskInstanceIdMostSignificantBits);
          this->__isset.taskInstanceIdMostSignificantBits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->state = static_cast< ::protocol::ThriftTaskState::type>(ecast0);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->self);
          this->__isset.self = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->completedDriverGroups.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readSetBegin(_etype4, _size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
               ::protocol::ThriftLifespan _elem6;
              xfer += _elem6.read(iprot);
              this->completedDriverGroups.insert(_elem6);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.completedDriverGroups = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->failures.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->failures.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->failures[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queuedPartitionedDrivers);
          this->__isset.queuedPartitionedDrivers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runningPartitionedDrivers);
          this->__isset.runningPartitionedDrivers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->outputBufferUtilization);
          this->__isset.outputBufferUtilization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputBufferOverutilized);
          this->__isset.outputBufferOverutilized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->physicalWrittenDataSizeInBytes);
          this->__isset.physicalWrittenDataSizeInBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->memoryReservationInBytes);
          this->__isset.memoryReservationInBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->systemMemoryReservationInBytes);
          this->__isset.systemMemoryReservationInBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peakNodeTotalMemoryReservationInBytes);
          this->__isset.peakNodeTotalMemoryReservationInBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fullGcCount);
          this->__isset.fullGcCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fullGcTimeInMillis);
          this->__isset.fullGcTimeInMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalCpuTimeInNanos);
          this->__isset.totalCpuTimeInNanos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->taskAgeInMillis);
          this->__isset.taskAgeInMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queuedPartitionedSplitsWeight);
          this->__isset.queuedPartitionedSplitsWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->runningPartitionedSplitsWeight);
          this->__isset.runningPartitionedSplitsWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftTaskStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftTaskStatus");

  xfer += oprot->writeFieldBegin("taskInstanceIdLeastSignificantBits", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->taskInstanceIdLeastSignificantBits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskInstanceIdMostSignificantBits", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->taskInstanceIdMostSignificantBits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(static_cast<int32_t>(this->state));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("self", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->self);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("completedDriverGroups", ::apache::thrift::protocol::T_SET, 6);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->completedDriverGroups.size()));
    std::set< ::protocol::ThriftLifespan> ::const_iterator _iter12;
    for (_iter12 = this->completedDriverGroups.begin(); _iter12 != this->completedDriverGroups.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failures", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->failures.size()));
    std::vector< ::protocol::ThriftExecutionFailureInfo> ::const_iterator _iter13;
    for (_iter13 = this->failures.begin(); _iter13 != this->failures.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queuedPartitionedDrivers", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->queuedPartitionedDrivers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runningPartitionedDrivers", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->runningPartitionedDrivers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("outputBufferUtilization", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->outputBufferUtilization);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("outputBufferOverutilized", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->outputBufferOverutilized);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physicalWrittenDataSizeInBytes", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->physicalWrittenDataSizeInBytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memoryReservationInBytes", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->memoryReservationInBytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("systemMemoryReservationInBytes", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->systemMemoryReservationInBytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("peakNodeTotalMemoryReservationInBytes", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->peakNodeTotalMemoryReservationInBytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fullGcCount", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->fullGcCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fullGcTimeInMillis", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->fullGcTimeInMillis);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalCpuTimeInNanos", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->totalCpuTimeInNanos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskAgeInMillis", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->taskAgeInMillis);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queuedPartitionedSplitsWeight", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->queuedPartitionedSplitsWeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runningPartitionedSplitsWeight", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->runningPartitionedSplitsWeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftTaskStatus &a, ThriftTaskStatus &b) {
  using ::std::swap;
  swap(a.taskInstanceIdLeastSignificantBits, b.taskInstanceIdLeastSignificantBits);
  swap(a.taskInstanceIdMostSignificantBits, b.taskInstanceIdMostSignificantBits);
  swap(a.version, b.version);
  swap(a.state, b.state);
  swap(a.self, b.self);
  swap(a.completedDriverGroups, b.completedDriverGroups);
  swap(a.failures, b.failures);
  swap(a.queuedPartitionedDrivers, b.queuedPartitionedDrivers);
  swap(a.runningPartitionedDrivers, b.runningPartitionedDrivers);
  swap(a.outputBufferUtilization, b.outputBufferUtilization);
  swap(a.outputBufferOverutilized, b.outputBufferOverutilized);
  swap(a.physicalWrittenDataSizeInBytes, b.physicalWrittenDataSizeInBytes);
  swap(a.memoryReservationInBytes, b.memoryReservationInBytes);
  swap(a.systemMemoryReservationInBytes, b.systemMemoryReservationInBytes);
  swap(a.peakNodeTotalMemoryReservationInBytes, b.peakNodeTotalMemoryReservationInBytes);
  swap(a.fullGcCount, b.fullGcCount);
  swap(a.fullGcTimeInMillis, b.fullGcTimeInMillis);
  swap(a.totalCpuTimeInNanos, b.totalCpuTimeInNanos);
  swap(a.taskAgeInMillis, b.taskAgeInMillis);
  swap(a.queuedPartitionedSplitsWeight, b.queuedPartitionedSplitsWeight);
  swap(a.runningPartitionedSplitsWeight, b.runningPartitionedSplitsWeight);
  swap(a.__isset, b.__isset);
}

bool ThriftTaskStatus::operator==(const ThriftTaskStatus & rhs) const
{
  if (!(taskInstanceIdLeastSignificantBits == rhs.taskInstanceIdLeastSignificantBits))
    return false;
  if (!(taskInstanceIdMostSignificantBits == rhs.taskInstanceIdMostSignificantBits))
    return false;
  if (!(version == rhs.version))
    return false;
  if (!(state == rhs.state))
    return false;
  if (!(self == rhs.self))
    return false;
  if (!(completedDriverGroups == rhs.completedDriverGroups))
    return false;
  if (!(failures == rhs.failures))
    return false;
  if (!(queuedPartitionedDrivers == rhs.queuedPartitionedDrivers))
    return false;
  if (!(runningPartitionedDrivers == rhs.runningPartitionedDrivers))
    return false;
  if (!(outputBufferUtilization == rhs.outputBufferUtilization))
    return false;
  if (!(outputBufferOverutilized == rhs.outputBufferOverutilized))
    return false;
  if (!(physicalWrittenDataSizeInBytes == rhs.physicalWrittenDataSizeInBytes))
    return false;
  if (!(memoryReservationInBytes == rhs.memoryReservationInBytes))
    return false;
  if (!(systemMemoryReservationInBytes == rhs.systemMemoryReservationInBytes))
    return false;
  if (!(peakNodeTotalMemoryReservationInBytes == rhs.peakNodeTotalMemoryReservationInBytes))
    return false;
  if (!(fullGcCount == rhs.fullGcCount))
    return false;
  if (!(fullGcTimeInMillis == rhs.fullGcTimeInMillis))
    return false;
  if (!(totalCpuTimeInNanos == rhs.totalCpuTimeInNanos))
    return false;
  if (!(taskAgeInMillis == rhs.taskAgeInMillis))
    return false;
  if (!(queuedPartitionedSplitsWeight == rhs.queuedPartitionedSplitsWeight))
    return false;
  if (!(runningPartitionedSplitsWeight == rhs.runningPartitionedSplitsWeight))
    return false;
  return true;
}

ThriftTaskStatus::ThriftTaskStatus(const ThriftTaskStatus& other14) {
  taskInstanceIdLeastSignificantBits = other14.taskInstanceIdLeastSignificantBits;
  taskInstanceIdMostSignificantBits = other14.taskInstanceIdMostSignificantBits;
  version = other14.version;
  state = other14.state;
  self = other14.self;
  completedDriverGroups = other14.completedDriverGroups;
  failures = other14.failures;
  queuedPartitionedDrivers = other14.queuedPartitionedDrivers;
  runningPartitionedDrivers = other14.runningPartitionedDrivers;
  outputBufferUtilization = other14.outputBufferUtilization;
  outputBufferOverutilized = other14.outputBufferOverutilized;
  physicalWrittenDataSizeInBytes = other14.physicalWrittenDataSizeInBytes;
  memoryReservationInBytes = other14.memoryReservationInBytes;
  systemMemoryReservationInBytes = other14.systemMemoryReservationInBytes;
  peakNodeTotalMemoryReservationInBytes = other14.peakNodeTotalMemoryReservationInBytes;
  fullGcCount = other14.fullGcCount;
  fullGcTimeInMillis = other14.fullGcTimeInMillis;
  totalCpuTimeInNanos = other14.totalCpuTimeInNanos;
  taskAgeInMillis = other14.taskAgeInMillis;
  queuedPartitionedSplitsWeight = other14.queuedPartitionedSplitsWeight;
  runningPartitionedSplitsWeight = other14.runningPartitionedSplitsWeight;
  __isset = other14.__isset;
}
ThriftTaskStatus& ThriftTaskStatus::operator=(const ThriftTaskStatus& other15) {
  taskInstanceIdLeastSignificantBits = other15.taskInstanceIdLeastSignificantBits;
  taskInstanceIdMostSignificantBits = other15.taskInstanceIdMostSignificantBits;
  version = other15.version;
  state = other15.state;
  self = other15.self;
  completedDriverGroups = other15.completedDriverGroups;
  failures = other15.failures;
  queuedPartitionedDrivers = other15.queuedPartitionedDrivers;
  runningPartitionedDrivers = other15.runningPartitionedDrivers;
  outputBufferUtilization = other15.outputBufferUtilization;
  outputBufferOverutilized = other15.outputBufferOverutilized;
  physicalWrittenDataSizeInBytes = other15.physicalWrittenDataSizeInBytes;
  memoryReservationInBytes = other15.memoryReservationInBytes;
  systemMemoryReservationInBytes = other15.systemMemoryReservationInBytes;
  peakNodeTotalMemoryReservationInBytes = other15.peakNodeTotalMemoryReservationInBytes;
  fullGcCount = other15.fullGcCount;
  fullGcTimeInMillis = other15.fullGcTimeInMillis;
  totalCpuTimeInNanos = other15.totalCpuTimeInNanos;
  taskAgeInMillis = other15.taskAgeInMillis;
  queuedPartitionedSplitsWeight = other15.queuedPartitionedSplitsWeight;
  runningPartitionedSplitsWeight = other15.runningPartitionedSplitsWeight;
  __isset = other15.__isset;
  return *this;
}
void ThriftTaskStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftTaskStatus(";
  out << "taskInstanceIdLeastSignificantBits=" << to_string(taskInstanceIdLeastSignificantBits);
  out << ", " << "taskInstanceIdMostSignificantBits=" << to_string(taskInstanceIdMostSignificantBits);
  out << ", " << "version=" << to_string(version);
  out << ", " << "state=" << to_string(state);
  out << ", " << "self=" << to_string(self);
  out << ", " << "completedDriverGroups=" << to_string(completedDriverGroups);
  out << ", " << "failures=" << to_string(failures);
  out << ", " << "queuedPartitionedDrivers=" << to_string(queuedPartitionedDrivers);
  out << ", " << "runningPartitionedDrivers=" << to_string(runningPartitionedDrivers);
  out << ", " << "outputBufferUtilization=" << to_string(outputBufferUtilization);
  out << ", " << "outputBufferOverutilized=" << to_string(outputBufferOverutilized);
  out << ", " << "physicalWrittenDataSizeInBytes=" << to_string(physicalWrittenDataSizeInBytes);
  out << ", " << "memoryReservationInBytes=" << to_string(memoryReservationInBytes);
  out << ", " << "systemMemoryReservationInBytes=" << to_string(systemMemoryReservationInBytes);
  out << ", " << "peakNodeTotalMemoryReservationInBytes=" << to_string(peakNodeTotalMemoryReservationInBytes);
  out << ", " << "fullGcCount=" << to_string(fullGcCount);
  out << ", " << "fullGcTimeInMillis=" << to_string(fullGcTimeInMillis);
  out << ", " << "totalCpuTimeInNanos=" << to_string(totalCpuTimeInNanos);
  out << ", " << "taskAgeInMillis=" << to_string(taskAgeInMillis);
  out << ", " << "queuedPartitionedSplitsWeight=" << to_string(queuedPartitionedSplitsWeight);
  out << ", " << "runningPartitionedSplitsWeight=" << to_string(runningPartitionedSplitsWeight);
  out << ")";
}

} // namespace
