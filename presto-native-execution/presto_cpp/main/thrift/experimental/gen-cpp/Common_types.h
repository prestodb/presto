/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Common_TYPES_H
#define Common_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace protocol {

struct ThriftTaskState {
  enum type {
    PLANNED = 0,
    RUNNING = 1,
    FINISHED = 2,
    CANCELED = 3,
    ABORTED = 4,
    FAILED = 5
  };
};

extern const std::map<int, const char*> _ThriftTaskState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ThriftTaskState::type& val);

std::string to_string(const ThriftTaskState::type& val);

struct ThriftErrorCause {
  enum type {
    UNKNOWN = 0,
    LOW_PARTITION_COUNT = 1,
    EXCEEDS_BROADCAST_MEMORY_LIMIT = 2
  };
};

extern const std::map<int, const char*> _ThriftErrorCause_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ThriftErrorCause::type& val);

std::string to_string(const ThriftErrorCause::type& val);

struct ThriftBufferType {
  enum type {
    BROADCAST = 0,
    PARTITIONED = 1,
    ARBITRARY = 2
  };
};

extern const std::map<int, const char*> _ThriftBufferType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ThriftBufferType::type& val);

std::string to_string(const ThriftBufferType::type& val);

struct ThriftErrorType {
  enum type {
    USER_ERROR = 0,
    INTERNAL_ERROR = 1,
    INSUFFICIENT_RESOURCES = 2,
    EXTERNAL = 3
  };
};

extern const std::map<int, const char*> _ThriftErrorType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ThriftErrorType::type& val);

std::string to_string(const ThriftErrorType::type& val);

struct ThriftSelectedRoleType {
  enum type {
    ROLE = 1,
    ALL = 2,
    NONE = 3
  };
};

extern const std::map<int, const char*> _ThriftSelectedRoleType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ThriftSelectedRoleType::type& val);

std::string to_string(const ThriftSelectedRoleType::type& val);

class ThriftSelectedRole;

class ThriftOutputBufferId;

class ThriftOutputBuffers;

class ThriftErrorCode;

class ThriftErrorLocation;

class ThriftHostAddress;

class ThriftExecutionFailureInfo;

class ThriftPlanNodeId;

class ThriftLifespan;

class ThriftScheduledSplit;

class ThriftSplit;

class ThriftTaskSource;

class ThriftTableWriteInfo;

class ThriftResourceEstimates;

class ThriftTransactionId;

class ThriftTimeZoneKey;

typedef struct _ThriftSelectedRole__isset {
  _ThriftSelectedRole__isset() : type(false), role(false) {}
  bool type :1;
  bool role :1;
} _ThriftSelectedRole__isset;

class ThriftSelectedRole : public virtual ::apache::thrift::TBase {
 public:

  ThriftSelectedRole(const ThriftSelectedRole&);
  ThriftSelectedRole& operator=(const ThriftSelectedRole&);
  ThriftSelectedRole() noexcept;

  virtual ~ThriftSelectedRole() noexcept;
  /**
   * 
   * @see ThriftSelectedRoleType
   */
  ThriftSelectedRoleType::type type;
  std::string role;

  _ThriftSelectedRole__isset __isset;

  void __set_type(const ThriftSelectedRoleType::type val);

  void __set_role(const std::string& val);

  bool operator == (const ThriftSelectedRole & rhs) const;
  bool operator != (const ThriftSelectedRole &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSelectedRole & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftSelectedRole &a, ThriftSelectedRole &b);

std::ostream& operator<<(std::ostream& out, const ThriftSelectedRole& obj);


class ThriftOutputBufferId : public virtual ::apache::thrift::TBase {
 public:

  ThriftOutputBufferId(const ThriftOutputBufferId&) noexcept;
  ThriftOutputBufferId& operator=(const ThriftOutputBufferId&) noexcept;
  ThriftOutputBufferId() noexcept;

  virtual ~ThriftOutputBufferId() noexcept;
  int32_t id;

  void __set_id(const int32_t val);

  bool operator == (const ThriftOutputBufferId & rhs) const;
  bool operator != (const ThriftOutputBufferId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftOutputBufferId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftOutputBufferId &a, ThriftOutputBufferId &b);

std::ostream& operator<<(std::ostream& out, const ThriftOutputBufferId& obj);

typedef struct _ThriftOutputBuffers__isset {
  _ThriftOutputBuffers__isset() : type(false), noMoreBufferIds(false), version(false), buffers(false), totalBufferCount(false), totalPartitionCount(false) {}
  bool type :1;
  bool noMoreBufferIds :1;
  bool version :1;
  bool buffers :1;
  bool totalBufferCount :1;
  bool totalPartitionCount :1;
} _ThriftOutputBuffers__isset;

class ThriftOutputBuffers : public virtual ::apache::thrift::TBase {
 public:

  ThriftOutputBuffers(const ThriftOutputBuffers&);
  ThriftOutputBuffers& operator=(const ThriftOutputBuffers&);
  ThriftOutputBuffers() noexcept;

  virtual ~ThriftOutputBuffers() noexcept;
  /**
   * 
   * @see ThriftBufferType
   */
  ThriftBufferType::type type;
  bool noMoreBufferIds;
  int64_t version;
  std::map<ThriftOutputBufferId, std::string>  buffers;
  int32_t totalBufferCount;
  int32_t totalPartitionCount;

  _ThriftOutputBuffers__isset __isset;

  void __set_type(const ThriftBufferType::type val);

  void __set_noMoreBufferIds(const bool val);

  void __set_version(const int64_t val);

  void __set_buffers(const std::map<ThriftOutputBufferId, std::string> & val);

  void __set_totalBufferCount(const int32_t val);

  void __set_totalPartitionCount(const int32_t val);

  bool operator == (const ThriftOutputBuffers & rhs) const;
  bool operator != (const ThriftOutputBuffers &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftOutputBuffers & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftOutputBuffers &a, ThriftOutputBuffers &b);

std::ostream& operator<<(std::ostream& out, const ThriftOutputBuffers& obj);

typedef struct _ThriftErrorCode__isset {
  _ThriftErrorCode__isset() : code(false), name(false), type(false), retriable(false) {}
  bool code :1;
  bool name :1;
  bool type :1;
  bool retriable :1;
} _ThriftErrorCode__isset;

class ThriftErrorCode : public virtual ::apache::thrift::TBase {
 public:

  ThriftErrorCode(const ThriftErrorCode&);
  ThriftErrorCode& operator=(const ThriftErrorCode&);
  ThriftErrorCode() noexcept;

  virtual ~ThriftErrorCode() noexcept;
  int32_t code;
  std::string name;
  /**
   * 
   * @see ThriftErrorType
   */
  ThriftErrorType::type type;
  bool retriable;

  _ThriftErrorCode__isset __isset;

  void __set_code(const int32_t val);

  void __set_name(const std::string& val);

  void __set_type(const ThriftErrorType::type val);

  void __set_retriable(const bool val);

  bool operator == (const ThriftErrorCode & rhs) const;
  bool operator != (const ThriftErrorCode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftErrorCode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftErrorCode &a, ThriftErrorCode &b);

std::ostream& operator<<(std::ostream& out, const ThriftErrorCode& obj);

typedef struct _ThriftErrorLocation__isset {
  _ThriftErrorLocation__isset() : lineNumber(false), columnNumber(false) {}
  bool lineNumber :1;
  bool columnNumber :1;
} _ThriftErrorLocation__isset;

class ThriftErrorLocation : public virtual ::apache::thrift::TBase {
 public:

  ThriftErrorLocation(const ThriftErrorLocation&) noexcept;
  ThriftErrorLocation& operator=(const ThriftErrorLocation&) noexcept;
  ThriftErrorLocation() noexcept;

  virtual ~ThriftErrorLocation() noexcept;
  int32_t lineNumber;
  int32_t columnNumber;

  _ThriftErrorLocation__isset __isset;

  void __set_lineNumber(const int32_t val);

  void __set_columnNumber(const int32_t val);

  bool operator == (const ThriftErrorLocation & rhs) const;
  bool operator != (const ThriftErrorLocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftErrorLocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftErrorLocation &a, ThriftErrorLocation &b);

std::ostream& operator<<(std::ostream& out, const ThriftErrorLocation& obj);

typedef struct _ThriftHostAddress__isset {
  _ThriftHostAddress__isset() : host(false), port(false) {}
  bool host :1;
  bool port :1;
} _ThriftHostAddress__isset;

class ThriftHostAddress : public virtual ::apache::thrift::TBase {
 public:

  ThriftHostAddress(const ThriftHostAddress&);
  ThriftHostAddress& operator=(const ThriftHostAddress&);
  ThriftHostAddress() noexcept;

  virtual ~ThriftHostAddress() noexcept;
  std::string host;
  int32_t port;

  _ThriftHostAddress__isset __isset;

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const ThriftHostAddress & rhs) const;
  bool operator != (const ThriftHostAddress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHostAddress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftHostAddress &a, ThriftHostAddress &b);

std::ostream& operator<<(std::ostream& out, const ThriftHostAddress& obj);

typedef struct _ThriftExecutionFailureInfo__isset {
  _ThriftExecutionFailureInfo__isset() : type(false), message(false), cause(false), suppressed(false), stack(false), errorLocation(false), errorCode(false), remoteHost(false), errorCause(false) {}
  bool type :1;
  bool message :1;
  bool cause :1;
  bool suppressed :1;
  bool stack :1;
  bool errorLocation :1;
  bool errorCode :1;
  bool remoteHost :1;
  bool errorCause :1;
} _ThriftExecutionFailureInfo__isset;

class ThriftExecutionFailureInfo : public virtual ::apache::thrift::TBase {
 public:

  ThriftExecutionFailureInfo(const ThriftExecutionFailureInfo&);
  ThriftExecutionFailureInfo& operator=(const ThriftExecutionFailureInfo&);
  ThriftExecutionFailureInfo() noexcept;

  virtual ~ThriftExecutionFailureInfo() noexcept;
  std::string type;
  std::string message;
  ThriftExecutionFailureInfo cause;
  std::vector<ThriftExecutionFailureInfo>  suppressed;
  std::vector<std::string>  stack;
  ThriftErrorLocation errorLocation;
  ThriftErrorCode errorCode;
  ThriftHostAddress remoteHost;
  /**
   * 
   * @see ThriftErrorCause
   */
  ThriftErrorCause::type errorCause;

  _ThriftExecutionFailureInfo__isset __isset;

  void __set_type(const std::string& val);

  void __set_message(const std::string& val);

  void __set_cause(const ThriftExecutionFailureInfo& val);

  void __set_suppressed(const std::vector<ThriftExecutionFailureInfo> & val);

  void __set_stack(const std::vector<std::string> & val);

  void __set_errorLocation(const ThriftErrorLocation& val);

  void __set_errorCode(const ThriftErrorCode& val);

  void __set_remoteHost(const ThriftHostAddress& val);

  void __set_errorCause(const ThriftErrorCause::type val);

  bool operator == (const ThriftExecutionFailureInfo & rhs) const;
  bool operator != (const ThriftExecutionFailureInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftExecutionFailureInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftExecutionFailureInfo &a, ThriftExecutionFailureInfo &b);

std::ostream& operator<<(std::ostream& out, const ThriftExecutionFailureInfo& obj);

typedef struct _ThriftPlanNodeId__isset {
  _ThriftPlanNodeId__isset() : id(false) {}
  bool id :1;
} _ThriftPlanNodeId__isset;

class ThriftPlanNodeId : public virtual ::apache::thrift::TBase {
 public:

  ThriftPlanNodeId(const ThriftPlanNodeId&);
  ThriftPlanNodeId& operator=(const ThriftPlanNodeId&);
  ThriftPlanNodeId() noexcept;

  virtual ~ThriftPlanNodeId() noexcept;
  std::string id;

  _ThriftPlanNodeId__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const ThriftPlanNodeId & rhs) const;
  bool operator != (const ThriftPlanNodeId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftPlanNodeId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftPlanNodeId &a, ThriftPlanNodeId &b);

std::ostream& operator<<(std::ostream& out, const ThriftPlanNodeId& obj);

typedef struct _ThriftLifespan__isset {
  _ThriftLifespan__isset() : grouped(false), groupId(false) {}
  bool grouped :1;
  bool groupId :1;
} _ThriftLifespan__isset;

class ThriftLifespan : public virtual ::apache::thrift::TBase {
 public:

  ThriftLifespan(const ThriftLifespan&) noexcept;
  ThriftLifespan& operator=(const ThriftLifespan&) noexcept;
  ThriftLifespan() noexcept;

  virtual ~ThriftLifespan() noexcept;
  bool grouped;
  int32_t groupId;

  _ThriftLifespan__isset __isset;

  void __set_grouped(const bool val);

  void __set_groupId(const int32_t val);

  bool operator == (const ThriftLifespan & rhs) const;
  bool operator != (const ThriftLifespan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftLifespan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftLifespan &a, ThriftLifespan &b);

std::ostream& operator<<(std::ostream& out, const ThriftLifespan& obj);

typedef struct _ThriftScheduledSplit__isset {
  _ThriftScheduledSplit__isset() : sequenceId(false), split(false), lifespan(false) {}
  bool sequenceId :1;
  bool split :1;
  bool lifespan :1;
} _ThriftScheduledSplit__isset;

class ThriftScheduledSplit : public virtual ::apache::thrift::TBase {
 public:

  ThriftScheduledSplit(const ThriftScheduledSplit&);
  ThriftScheduledSplit& operator=(const ThriftScheduledSplit&);
  ThriftScheduledSplit() noexcept;

  virtual ~ThriftScheduledSplit() noexcept;
  int64_t sequenceId;
  ThriftSplit split;
  ThriftLifespan lifespan;

  _ThriftScheduledSplit__isset __isset;

  void __set_sequenceId(const int64_t val);

  void __set_split(const ThriftSplit& val);

  void __set_lifespan(const ThriftLifespan& val);

  bool operator == (const ThriftScheduledSplit & rhs) const;
  bool operator != (const ThriftScheduledSplit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftScheduledSplit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftScheduledSplit &a, ThriftScheduledSplit &b);

std::ostream& operator<<(std::ostream& out, const ThriftScheduledSplit& obj);

typedef struct _ThriftSplit__isset {
  _ThriftSplit__isset() : connectorId(false), connectorSplit(false), remoteSplit(false), splitWeight(false) {}
  bool connectorId :1;
  bool connectorSplit :1;
  bool remoteSplit :1;
  bool splitWeight :1;
} _ThriftSplit__isset;

class ThriftSplit : public virtual ::apache::thrift::TBase {
 public:

  ThriftSplit(const ThriftSplit&);
  ThriftSplit& operator=(const ThriftSplit&);
  ThriftSplit() noexcept;

  virtual ~ThriftSplit() noexcept;
  std::string connectorId;
  std::string connectorSplit;
  bool remoteSplit;
  double splitWeight;

  _ThriftSplit__isset __isset;

  void __set_connectorId(const std::string& val);

  void __set_connectorSplit(const std::string& val);

  void __set_remoteSplit(const bool val);

  void __set_splitWeight(const double val);

  bool operator == (const ThriftSplit & rhs) const;
  bool operator != (const ThriftSplit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSplit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftSplit &a, ThriftSplit &b);

std::ostream& operator<<(std::ostream& out, const ThriftSplit& obj);

typedef struct _ThriftTaskSource__isset {
  _ThriftTaskSource__isset() : planNodeId(false), splits(false), noMoreSplits(false) {}
  bool planNodeId :1;
  bool splits :1;
  bool noMoreSplits :1;
} _ThriftTaskSource__isset;

class ThriftTaskSource : public virtual ::apache::thrift::TBase {
 public:

  ThriftTaskSource(const ThriftTaskSource&);
  ThriftTaskSource& operator=(const ThriftTaskSource&);
  ThriftTaskSource() noexcept;

  virtual ~ThriftTaskSource() noexcept;
  ThriftPlanNodeId planNodeId;
  std::vector<ThriftScheduledSplit>  splits;
  bool noMoreSplits;

  _ThriftTaskSource__isset __isset;

  void __set_planNodeId(const ThriftPlanNodeId& val);

  void __set_splits(const std::vector<ThriftScheduledSplit> & val);

  void __set_noMoreSplits(const bool val);

  bool operator == (const ThriftTaskSource & rhs) const;
  bool operator != (const ThriftTaskSource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftTaskSource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftTaskSource &a, ThriftTaskSource &b);

std::ostream& operator<<(std::ostream& out, const ThriftTaskSource& obj);

typedef struct _ThriftTableWriteInfo__isset {
  _ThriftTableWriteInfo__isset() : catalogName(false), schemaName(false), tableName(false), writtenByQuery(false) {}
  bool catalogName :1;
  bool schemaName :1;
  bool tableName :1;
  bool writtenByQuery :1;
} _ThriftTableWriteInfo__isset;

class ThriftTableWriteInfo : public virtual ::apache::thrift::TBase {
 public:

  ThriftTableWriteInfo(const ThriftTableWriteInfo&);
  ThriftTableWriteInfo& operator=(const ThriftTableWriteInfo&);
  ThriftTableWriteInfo() noexcept;

  virtual ~ThriftTableWriteInfo() noexcept;
  std::string catalogName;
  std::string schemaName;
  std::string tableName;
  bool writtenByQuery;

  _ThriftTableWriteInfo__isset __isset;

  void __set_catalogName(const std::string& val);

  void __set_schemaName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_writtenByQuery(const bool val);

  bool operator == (const ThriftTableWriteInfo & rhs) const;
  bool operator != (const ThriftTableWriteInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftTableWriteInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftTableWriteInfo &a, ThriftTableWriteInfo &b);

std::ostream& operator<<(std::ostream& out, const ThriftTableWriteInfo& obj);

typedef struct _ThriftResourceEstimates__isset {
  _ThriftResourceEstimates__isset() : executionTimeInMillis(false), cpuTimeInNanos(false), peakMemoryInBytes(false), peakTaskMemoryInBytes(false) {}
  bool executionTimeInMillis :1;
  bool cpuTimeInNanos :1;
  bool peakMemoryInBytes :1;
  bool peakTaskMemoryInBytes :1;
} _ThriftResourceEstimates__isset;

class ThriftResourceEstimates : public virtual ::apache::thrift::TBase {
 public:

  ThriftResourceEstimates(const ThriftResourceEstimates&) noexcept;
  ThriftResourceEstimates& operator=(const ThriftResourceEstimates&) noexcept;
  ThriftResourceEstimates() noexcept;

  virtual ~ThriftResourceEstimates() noexcept;
  int64_t executionTimeInMillis;
  int64_t cpuTimeInNanos;
  int64_t peakMemoryInBytes;
  int64_t peakTaskMemoryInBytes;

  _ThriftResourceEstimates__isset __isset;

  void __set_executionTimeInMillis(const int64_t val);

  void __set_cpuTimeInNanos(const int64_t val);

  void __set_peakMemoryInBytes(const int64_t val);

  void __set_peakTaskMemoryInBytes(const int64_t val);

  bool operator == (const ThriftResourceEstimates & rhs) const;
  bool operator != (const ThriftResourceEstimates &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftResourceEstimates & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftResourceEstimates &a, ThriftResourceEstimates &b);

std::ostream& operator<<(std::ostream& out, const ThriftResourceEstimates& obj);

typedef struct _ThriftTransactionId__isset {
  _ThriftTransactionId__isset() : mostSignificantBits(false), leastSignificantBits(false), stringRepresentation(false) {}
  bool mostSignificantBits :1;
  bool leastSignificantBits :1;
  bool stringRepresentation :1;
} _ThriftTransactionId__isset;

class ThriftTransactionId : public virtual ::apache::thrift::TBase {
 public:

  ThriftTransactionId(const ThriftTransactionId&);
  ThriftTransactionId& operator=(const ThriftTransactionId&);
  ThriftTransactionId() noexcept;

  virtual ~ThriftTransactionId() noexcept;
  int64_t mostSignificantBits;
  int64_t leastSignificantBits;
  std::string stringRepresentation;

  _ThriftTransactionId__isset __isset;

  void __set_mostSignificantBits(const int64_t val);

  void __set_leastSignificantBits(const int64_t val);

  void __set_stringRepresentation(const std::string& val);

  bool operator == (const ThriftTransactionId & rhs) const;
  bool operator != (const ThriftTransactionId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftTransactionId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftTransactionId &a, ThriftTransactionId &b);

std::ostream& operator<<(std::ostream& out, const ThriftTransactionId& obj);

typedef struct _ThriftTimeZoneKey__isset {
  _ThriftTimeZoneKey__isset() : key(false), id(false) {}
  bool key :1;
  bool id :1;
} _ThriftTimeZoneKey__isset;

class ThriftTimeZoneKey : public virtual ::apache::thrift::TBase {
 public:

  ThriftTimeZoneKey(const ThriftTimeZoneKey&);
  ThriftTimeZoneKey& operator=(const ThriftTimeZoneKey&);
  ThriftTimeZoneKey() noexcept;

  virtual ~ThriftTimeZoneKey() noexcept;
  int16_t key;
  std::string id;

  _ThriftTimeZoneKey__isset __isset;

  void __set_key(const int16_t val);

  void __set_id(const std::string& val);

  bool operator == (const ThriftTimeZoneKey & rhs) const;
  bool operator != (const ThriftTimeZoneKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftTimeZoneKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftTimeZoneKey &a, ThriftTimeZoneKey &b);

std::ostream& operator<<(std::ostream& out, const ThriftTimeZoneKey& obj);

} // namespace

#endif
