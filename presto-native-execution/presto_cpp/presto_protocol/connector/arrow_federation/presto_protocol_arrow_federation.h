// DO NOT EDIT : This file is generated by chevron
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once

// This file is generated DO NOT EDIT @generated

#include <cstdint>
#include <map>
#include <regex>
#include <string>

#include <folly/base64.h>
#include "presto_cpp/external/json/nlohmann/json.hpp"
#include "presto_cpp/presto_protocol/core/presto_protocol_core.h"

namespace facebook::presto::protocol::arrow_federation {

struct ArrowFederationSplit : public ConnectorSplit {
  String splitBytes = {};
};

void to_json(json& j, const ArrowFederationSplit& p) {
  j["@type"] = "arrow-federation";
  auto split = folly::base64Decode(p.splitBytes);
  j = json::parse(split);
}

void from_json(const json& j, ArrowFederationSplit& p) {
  p._type = j["@type"];
  auto bytes = folly::base64Encode(j.dump());
  p.splitBytes = bytes;
}
} // namespace facebook::presto::protocol::arrow_federation

namespace facebook::presto::protocol::arrow_federation {
struct ArrowFederationTransactionHandle : public ConnectorTransactionHandle {
  String uuid = {};
};

void to_json(json& j, const ArrowFederationTransactionHandle& p) {
  j = json::object();
  j["@type"] = "arrow-federation";
  to_json_key(
      j, "uuid", p.uuid, "ArrowFederationTransactionHandle", "UUID", "uuid");
};
void from_json(const json& j, ArrowFederationTransactionHandle& p) {
  p._type = j["@type"];
  from_json_key(
      j, "uuid", p.uuid, "ArrowFederationTransactionHandle", "UUID", "uuid");
};
} // namespace facebook::presto::protocol::arrow_federation

namespace facebook::presto::protocol::arrow_federation {

struct ArrowFederationTableHandle : public ConnectorTableHandle {
  String connectorId = {};
};

void to_json(json& j, const ArrowFederationTableHandle& p) {
  j = json::object();
  j["@type"] = "arrow-federation";
  to_json_key(
      j,
      "connectorId",
      p.connectorId,
      "ArrowFederationTableHandle",
      "ConnectorId",
      "connectorId");
}

void from_json(const json& j, ArrowFederationTableHandle& p) {
  p._type = j["@type"];
  from_json_key(
      j,
      "connectorId",
      p.connectorId,
      "ArrowFederationTableHandle",
      "ConnectorId",
      "connectorId");
}
} // namespace facebook::presto::protocol::arrow_federation

namespace facebook::presto::protocol::arrow_federation {

struct ArrowFederationColumnHandle : public ColumnHandle {
  String columnHandleBytes = {};
  String columnName = {};
};

void to_json(json& j, const ArrowFederationColumnHandle& p) {
  j["@type"] = "arrow-federation";
  to_json_key(
      j,
      "columnName",
      p.columnName,
      "ArrowFederationTableHandle",
      "ColumnName",
      "columnName");
  auto columnHandle = folly::base64Decode(p.columnHandleBytes);
  j = json::parse(columnHandle);
}

void from_json(const json& j, ArrowFederationColumnHandle& p) {
  p._type = j["@type"];
  from_json_key(
      j,
      "columnName",
      p.columnName,
      "ArrowFederationTableHandle",
      "ColumnName",
      "columnName");
  p.columnHandleBytes = folly::base64Encode(j.dump());
}
} // namespace facebook::presto::protocol::arrow_federation

namespace facebook::presto::protocol::arrow_federation {

struct ArrowFederationTableLayoutHandle : public ConnectorTableLayoutHandle {};

void to_json(json& j, const ArrowFederationTableLayoutHandle& p) {
  j = json::object();
  j["@type"] = "arrow-federation";
}

void from_json(const json& j, ArrowFederationTableLayoutHandle& p) {
  p._type = j["@type"];
}
} // namespace facebook::presto::protocol::arrow_federation
namespace facebook::presto::protocol::arrow_federation {
struct JdbcTypeHandle {
  int jdbcType = {};
  String jdbcTypeName = {};
  int columnSize = {};
  int decimalDigits = {};
};
void to_json(json& j, const JdbcTypeHandle& p);
void from_json(const json& j, JdbcTypeHandle& p);
} // namespace facebook::presto::protocol::arrow_federation
namespace facebook::presto::protocol::arrow_federation {
struct JdbcColumnHandle : public ColumnHandle {
  String connectorId = {};
  String columnName = {};
  JdbcTypeHandle jdbcTypeHandle = {};
  Type columnType = {};
  bool nullable = {};
  std::shared_ptr<String> comment = {};

  JdbcColumnHandle() noexcept;
};
void to_json(json& j, const JdbcColumnHandle& p);
void from_json(const json& j, JdbcColumnHandle& p);
} // namespace facebook::presto::protocol::arrow_federation
namespace facebook::presto::protocol::arrow_federation {
struct JdbcExpression {
  String translatedString = {};
  List<ConstantExpression> boundConstantValues = {};
};
void to_json(json& j, const JdbcExpression& p);
void from_json(const json& j, JdbcExpression& p);
} // namespace facebook::presto::protocol::arrow_federation
