// DO NOT EDIT : This file is generated by chevron
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// presto_protocol.prolog.cpp
//

// This file is generated DO NOT EDIT @generated

#include "presto_cpp/presto_protocol/connector/arrow_federation/presto_protocol_arrow_federation.h"
#include <iostream>
using namespace std::string_literals;

namespace facebook::presto::protocol::arrow_federation {

void to_json(json& j, const JdbcTypeHandle& p) {
  j = json::object();
  to_json_key(j, "jdbcType", p.jdbcType, "JdbcTypeHandle", "int", "jdbcType");
  to_json_key(
      j,
      "jdbcTypeName",
      p.jdbcTypeName,
      "JdbcTypeHandle",
      "String",
      "jdbcTypeName");
  to_json_key(
      j, "columnSize", p.columnSize, "JdbcTypeHandle", "int", "columnSize");
  to_json_key(
      j,
      "decimalDigits",
      p.decimalDigits,
      "JdbcTypeHandle",
      "int",
      "decimalDigits");
}

void from_json(const json& j, JdbcTypeHandle& p) {
  from_json_key(j, "jdbcType", p.jdbcType, "JdbcTypeHandle", "int", "jdbcType");
  from_json_key(
      j,
      "jdbcTypeName",
      p.jdbcTypeName,
      "JdbcTypeHandle",
      "String",
      "jdbcTypeName");
  from_json_key(
      j, "columnSize", p.columnSize, "JdbcTypeHandle", "int", "columnSize");
  from_json_key(
      j,
      "decimalDigits",
      p.decimalDigits,
      "JdbcTypeHandle",
      "int",
      "decimalDigits");
}
} // namespace facebook::presto::protocol::arrow_federation
namespace facebook::presto::protocol::arrow_federation {
JdbcColumnHandle::JdbcColumnHandle() noexcept {
  _type = "arrow-federation";
}

void to_json(json& j, const JdbcColumnHandle& p) {
  j = json::object();
  j["@type"] = "arrow-federation";
  to_json_key(
      j,
      "connectorId",
      p.connectorId,
      "JdbcColumnHandle",
      "String",
      "connectorId");
  to_json_key(
      j,
      "columnName",
      p.columnName,
      "JdbcColumnHandle",
      "String",
      "columnName");
  to_json_key(
      j,
      "jdbcTypeHandle",
      p.jdbcTypeHandle,
      "JdbcColumnHandle",
      "JdbcTypeHandle",
      "jdbcTypeHandle");
  to_json_key(
      j, "columnType", p.columnType, "JdbcColumnHandle", "Type", "columnType");
  to_json_key(
      j, "nullable", p.nullable, "JdbcColumnHandle", "bool", "nullable");
  to_json_key(j, "comment", p.comment, "JdbcColumnHandle", "String", "comment");
}

void from_json(const json& j, JdbcColumnHandle& p) {
  p._type = j["@type"];
  from_json_key(
      j,
      "connectorId",
      p.connectorId,
      "JdbcColumnHandle",
      "String",
      "connectorId");
  from_json_key(
      j,
      "columnName",
      p.columnName,
      "JdbcColumnHandle",
      "String",
      "columnName");
  from_json_key(
      j,
      "jdbcTypeHandle",
      p.jdbcTypeHandle,
      "JdbcColumnHandle",
      "JdbcTypeHandle",
      "jdbcTypeHandle");
  from_json_key(
      j, "columnType", p.columnType, "JdbcColumnHandle", "Type", "columnType");
  from_json_key(
      j, "nullable", p.nullable, "JdbcColumnHandle", "bool", "nullable");
  from_json_key(
      j, "comment", p.comment, "JdbcColumnHandle", "String", "comment");
}
} // namespace facebook::presto::protocol::arrow_federation
namespace facebook::presto::protocol::arrow_federation {

void to_json(json& j, const JdbcExpression& p) {
  j = json::object();
  to_json_key(
      j,
      "translatedString",
      p.translatedString,
      "JdbcExpression",
      "String",
      "translatedString");
  to_json_key(
      j,
      "boundConstantValues",
      p.boundConstantValues,
      "JdbcExpression",
      "List<ConstantExpression>",
      "boundConstantValues");
}

void from_json(const json& j, JdbcExpression& p) {
  from_json_key(
      j,
      "translatedString",
      p.translatedString,
      "JdbcExpression",
      "String",
      "translatedString");
  from_json_key(
      j,
      "boundConstantValues",
      p.boundConstantValues,
      "JdbcExpression",
      "List<ConstantExpression>",
      "boundConstantValues");
}
} // namespace facebook::presto::protocol::arrow_federation
