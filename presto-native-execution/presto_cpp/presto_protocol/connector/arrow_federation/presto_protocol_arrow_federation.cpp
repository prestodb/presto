// DO NOT EDIT : This file is generated by chevron
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// presto_protocol.prolog.cpp
//

// This file is generated DO NOT EDIT @generated

#include <iostream>

#include "presto_cpp/presto_protocol/connector/arrow_federation/presto_protocol_arrow_federation.h"
using namespace std::string_literals;

// ArrowFederationTransactionHandle is special since
// the corresponding class in Java is an enum.

namespace facebook::presto::protocol::arrow_federation {

void to_json(json& j, const ArrowFederationTransactionHandle& p) {
  j = json::array();
  j.push_back(p._type);
  j.push_back(p.instance);
}

void from_json(const json& j, ArrowFederationTransactionHandle& p) {
  j[0].get_to(p._type);
  j[1].get_to(p.instance);
}
} // namespace facebook::presto::protocol::arrow_federation
namespace facebook::presto::protocol::arrow_federation {
ArrowSplit::ArrowSplit() noexcept {
  _type = "arrow-federation";
}

void to_json(json& j, const ArrowSplit& p) {
  j = json::object();
  j["@type"] = "arrow-federation";
  to_json_key(
      j, "schemaName", p.schemaName, "ArrowSplit", "String", "schemaName");
  to_json_key(j, "tableName", p.tableName, "ArrowSplit", "String", "tableName");
  to_json_key(
      j,
      "flightEndpointBytes",
      p.flightEndpointBytes,
      "ArrowSplit",
      "String",
      "flightEndpointBytes");
}

void from_json(const json& j, ArrowSplit& p) {
  p._type = j["@type"];
  from_json_key(
      j, "schemaName", p.schemaName, "ArrowSplit", "String", "schemaName");
  from_json_key(
      j, "tableName", p.tableName, "ArrowSplit", "String", "tableName");
  from_json_key(
      j,
      "flightEndpointBytes",
      p.flightEndpointBytes,
      "ArrowSplit",
      "String",
      "flightEndpointBytes");
}
} // namespace facebook::presto::protocol::arrow_federation
namespace facebook::presto::protocol::arrow_federation {
ArrowTableHandle::ArrowTableHandle() noexcept {
  _type = "arrow-federation";
}

void to_json(json& j, const ArrowTableHandle& p) {
  j = json::object();
  j["@type"] = "arrow-federation";
  to_json_key(j, "schema", p.schema, "ArrowTableHandle", "String", "schema");
  to_json_key(j, "table", p.table, "ArrowTableHandle", "String", "table");
}

void from_json(const json& j, ArrowTableHandle& p) {
  p._type = j["@type"];
  from_json_key(j, "schema", p.schema, "ArrowTableHandle", "String", "schema");
  from_json_key(j, "table", p.table, "ArrowTableHandle", "String", "table");
}
} // namespace facebook::presto::protocol::arrow_federation
namespace facebook::presto::protocol::arrow_federation {
void to_json(json& j, const std::shared_ptr<ColumnHandle>& p) {
  if (p == nullptr) {
    return;
  }
  String type = p->_type;

  if (type == "arrow-federation") {
    j = *std::static_pointer_cast<ArrowFederationColumnHandle>(p);
    return;
  }

  throw TypeError(type + " no abstract type ColumnHandle ");
}

void from_json(const json& j, std::shared_ptr<ColumnHandle>& p) {
  String type;
  try {
    type = p->getSubclassKey(j);
  } catch (json::parse_error& e) {
    throw ParseError(std::string(e.what()) + " ColumnHandle  ColumnHandle");
  }

  if (type == "arrow-federation") {
    std::shared_ptr<ArrowFederationColumnHandle> k =
        std::make_shared<ArrowFederationColumnHandle>();
    j.get_to(*k);
    p = std::static_pointer_cast<ColumnHandle>(k);
    return;
  }

  throw TypeError(type + " no abstract type ColumnHandle ");
}
} // namespace facebook::presto::protocol::arrow_federation
namespace facebook::presto::protocol::arrow_federation {
ArrowTableLayoutHandle::ArrowTableLayoutHandle() noexcept {
  _type = "arrow-federation";
}

void to_json(json& j, const ArrowTableLayoutHandle& p) {
  j = json::object();
  j["@type"] = "arrow-federation";
  to_json_key(
      j,
      "table",
      p.table,
      "ArrowTableLayoutHandle",
      "ArrowTableHandle",
      "table");
  to_json_key(
      j,
      "columnHandles",
      p.columnHandles,
      "ArrowTableLayoutHandle",
      "List<ArrowColumnHandle>",
      "columnHandles");
  to_json_key(
      j,
      "tupleDomain",
      p.tupleDomain,
      "ArrowTableLayoutHandle",
      "TupleDomain<std::shared_ptr<ColumnHandle>>",
      "tupleDomain");
}

void from_json(const json& j, ArrowTableLayoutHandle& p) {
  p._type = j["@type"];
  from_json_key(
      j,
      "table",
      p.table,
      "ArrowTableLayoutHandle",
      "ArrowTableHandle",
      "table");
  from_json_key(
      j,
      "columnHandles",
      p.columnHandles,
      "ArrowTableLayoutHandle",
      "List<ArrowColumnHandle>",
      "columnHandles");
  from_json_key(
      j,
      "tupleDomain",
      p.tupleDomain,
      "ArrowTableLayoutHandle",
      "TupleDomain<std::shared_ptr<ColumnHandle>>",
      "tupleDomain");
}
} // namespace facebook::presto::protocol::arrow_federation
