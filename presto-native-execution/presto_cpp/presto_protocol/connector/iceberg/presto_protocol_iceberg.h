// DO NOT EDIT : This file is generated by chevron
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once

// This file is generated DO NOT EDIT @generated

#include <cstdint>
#include <map>
#include <string>

#include "presto_cpp/external/json/nlohmann/json.hpp"
#include "presto_cpp/presto_protocol/connector/hive/presto_protocol_hive.h"

namespace facebook::presto::protocol::iceberg {
enum class ChangelogOperation { INSERT, DELETE, UPDATE_BEFORE, UPDATE_AFTER };
extern void to_json(json& j, const ChangelogOperation& e);
extern void from_json(const json& j, ChangelogOperation& e);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
enum class TypeCategory { PRIMITIVE, STRUCT, ARRAY, MAP };
extern void to_json(json& j, const TypeCategory& e);
extern void from_json(const json& j, TypeCategory& e);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
struct ColumnIdentity {
  int id = {};
  String name = {};
  TypeCategory typeCategory = {};
  List<ColumnIdentity> children = {};
};
void to_json(json& j, const ColumnIdentity& p);
void from_json(const json& j, ColumnIdentity& p);
} // namespace facebook::presto::protocol::iceberg
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// IcebergColumnHandle is special since it needs an implementation of
// operator<().

namespace facebook::presto::protocol::iceberg {

struct IcebergColumnHandle : public ColumnHandle {
  ColumnIdentity columnIdentity = {};
  Type type = {};
  std::shared_ptr<String> comment = {};
  hive::ColumnType columnType = {};
  List<Subfield> requiredSubfields = {};

  IcebergColumnHandle() noexcept;

  bool operator<(const ColumnHandle& o) const override {
    return columnIdentity.name <
        dynamic_cast<const IcebergColumnHandle&>(o).columnIdentity.name;
  }
};

void to_json(json& j, const IcebergColumnHandle& p);
void from_json(const json& j, IcebergColumnHandle& p);

} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
struct ChangelogSplitInfo {
  ChangelogOperation operation = {};
  int64_t ordinal = {};
  int64_t snapshotId = {};
  List<IcebergColumnHandle> icebergColumns = {};
};
void to_json(json& j, const ChangelogSplitInfo& p);
void from_json(const json& j, ChangelogSplitInfo& p);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
enum class FileContent { DATA, POSITION_DELETES, EQUALITY_DELETES };
extern void to_json(json& j, const FileContent& e);
extern void from_json(const json& j, FileContent& e);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
enum class FileFormat { ORC, PARQUET, AVRO, METADATA };
extern void to_json(json& j, const FileFormat& e);
extern void from_json(const json& j, FileFormat& e);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
struct DeleteFile {
  FileContent content = {};
  String path = {};
  FileFormat format = {};
  int64_t recordCount = {};
  int64_t fileSizeInBytes = {};
  List<Integer> equalityFieldIds = {};
  Map<Integer, String> lowerBounds = {};
  Map<Integer, String> upperBounds = {};
};
void to_json(json& j, const DeleteFile& p);
void from_json(const json& j, DeleteFile& p);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
enum class IcebergTableType {
  DATA,
  HISTORY,
  SNAPSHOTS,
  MANIFESTS,
  PARTITIONS,
  FILES,
  REFS,
  PROPERTIES,
  CHANGELOG,
  EQUALITY_DELETES,
  DATA_WITHOUT_EQUALITY_DELETES
};
extern void to_json(json& j, const IcebergTableType& e);
extern void from_json(const json& j, IcebergTableType& e);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
struct IcebergTableName {
  String tableName = {};
  IcebergTableType tableType = {};
  std::shared_ptr<Long> snapshotId = {};
  std::shared_ptr<Long> changelogEndSnapshot = {};
};
void to_json(json& j, const IcebergTableName& p);
void from_json(const json& j, IcebergTableName& p);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
struct PrestoIcebergNestedField {
  bool optional = {};
  int id = {};
  String name = {};
  Type prestoType = {};
  std::shared_ptr<String> doc = {};
};
void to_json(json& j, const PrestoIcebergNestedField& p);
void from_json(const json& j, PrestoIcebergNestedField& p);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
struct PrestoIcebergSchema {
  int schemaId = {};
  List<PrestoIcebergNestedField> columns = {};
  Map<String, Integer> columnNameToIdMapping = {};
  Map<String, Integer> aliases = {};
  List<Integer> identifierFieldIds = {};
};
void to_json(json& j, const PrestoIcebergSchema& p);
void from_json(const json& j, PrestoIcebergSchema& p);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
struct PrestoIcebergPartitionSpec {
  int specId = {};
  PrestoIcebergSchema schema = {};
  List<String> fields = {};
};
void to_json(json& j, const PrestoIcebergPartitionSpec& p);
void from_json(const json& j, PrestoIcebergPartitionSpec& p);
} // namespace facebook::presto::protocol::iceberg
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// IcebergInsertTableHandle is special since it needs an usage of
// hive::.

namespace facebook::presto::protocol::iceberg {
struct IcebergInsertTableHandle : public ConnectorInsertTableHandle {
  String schemaName = {};
  IcebergTableName tableName = {};
  PrestoIcebergSchema schema = {};
  PrestoIcebergPartitionSpec partitionSpec = {};
  List<IcebergColumnHandle> inputColumns = {};
  String outputPath = {};
  FileFormat fileFormat = {};
  hive::HiveCompressionCodec compressionCodec = {};
  Map<String, String> storageProperties = {};

  IcebergInsertTableHandle() noexcept;
};
void to_json(json& j, const IcebergInsertTableHandle& p);
void from_json(const json& j, IcebergInsertTableHandle& p);
} // namespace facebook::presto::protocol::iceberg
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// IcebergInsertTableHandle is special since it needs an usage of
// hive::.

namespace facebook::presto::protocol::iceberg {
struct IcebergOutputTableHandle : public ConnectorOutputTableHandle {
  String schemaName = {};
  IcebergTableName tableName = {};
  PrestoIcebergSchema schema = {};
  PrestoIcebergPartitionSpec partitionSpec = {};
  List<IcebergColumnHandle> inputColumns = {};
  String outputPath = {};
  FileFormat fileFormat = {};
  hive::HiveCompressionCodec compressionCodec = {};
  Map<String, String> storageProperties = {};

  IcebergOutputTableHandle() noexcept;
};
void to_json(json& j, const IcebergOutputTableHandle& p);
void from_json(const json& j, IcebergOutputTableHandle& p);
} // namespace facebook::presto::protocol::iceberg
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// IcebergSplit is special since it needs an usage of
// hive::.

namespace facebook::presto::protocol::iceberg {
struct IcebergSplit : public ConnectorSplit {
  String path = {};
  int64_t start = {};
  int64_t length = {};
  FileFormat fileFormat = {};
  List<HostAddress> addresses = {};
  Map<Integer, hive::HivePartitionKey> partitionKeys = {};
  String partitionSpecAsJson = {};
  std::shared_ptr<String> partitionDataJson = {};
  NodeSelectionStrategy nodeSelectionStrategy = {};
  SplitWeight splitWeight = {};
  List<DeleteFile> deletes = {};
  std::shared_ptr<ChangelogSplitInfo> changelogSplitInfo = {};
  int64_t dataSequenceNumber = {};

  IcebergSplit() noexcept;
};
void to_json(json& j, const IcebergSplit& p);
void from_json(const json& j, IcebergSplit& p);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
struct IcebergTableHandle : public ConnectorTableHandle {
  String schemaName = {};
  IcebergTableName icebergTableName = {};
  bool snapshotSpecified = {};
  std::shared_ptr<String> outputPath = {};
  std::shared_ptr<Map<String, String>> storageProperties = {};
  std::shared_ptr<String> tableSchemaJson = {};
  std::shared_ptr<List<Integer>> partitionFieldIds = {};
  std::shared_ptr<List<Integer>> equalityFieldIds = {};

  IcebergTableHandle() noexcept;
};
void to_json(json& j, const IcebergTableHandle& p);
void from_json(const json& j, IcebergTableHandle& p);
} // namespace facebook::presto::protocol::iceberg
namespace facebook::presto::protocol::iceberg {
struct IcebergTableLayoutHandle : public ConnectorTableLayoutHandle {
  List<IcebergColumnHandle> partitionColumns = {};
  List<Column> dataColumns = {};
  TupleDomain<Subfield> domainPredicate = {};
  std::shared_ptr<RowExpression> remainingPredicate = {};
  Map<String, IcebergColumnHandle> predicateColumns = {};
  std::shared_ptr<List<IcebergColumnHandle>> requestedColumns = {};
  bool pushdownFilterEnabled = {};
  TupleDomain<std::shared_ptr<ColumnHandle>> partitionColumnPredicate = {};
  IcebergTableHandle table = {};

  IcebergTableLayoutHandle() noexcept;
};
void to_json(json& j, const IcebergTableLayoutHandle& p);
void from_json(const json& j, IcebergTableLayoutHandle& p);
} // namespace facebook::presto::protocol::iceberg
