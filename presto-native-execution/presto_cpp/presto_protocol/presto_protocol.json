[
  {
    "comment": "// This file is generated DO NOT EDIT @generated"
  },
  {
    "class_name": "ColumnType",
    "enum": true,
    "elements": [
      {
        "element": "PARTITION_KEY",
        "_N": 1
      },
      {
        "element": "REGULAR",
        "_N": 2
      },
      {
        "element": "SYNTHESIZED",
        "_N": 3
      },
      {
        "element": "AGGREGATED",
        "_N": 4,
        "_last": true
      }
    ]
  },
  {
    "class_name": "SourceLocation",
    "struct": true,
    "fields": [
      {
        "field_type": "int",
        "field_name": "line",
        "field_text": "int",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "column",
        "field_text": "int",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "RowExpression",
    "field_name": "rowExpression",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "CallExpression",
        "name": "callExpression",
        "key": "call",
        "_N": 1
      },
      {
        "type": "ConstantExpression",
        "name": "constantExpression",
        "key": "constant",
        "_N": 2
      },
      {
        "type": "SpecialFormExpression",
        "name": "specialFormExpression",
        "key": "special",
        "_N": 3
      },
      {
        "type": "LambdaDefinitionExpression",
        "name": "lambdaDefinitionExpression",
        "key": "lambda",
        "_N": 4
      },
      {
        "type": "VariableReferenceExpression",
        "name": "variableReferenceExpression",
        "key": "variable",
        "_N": 5,
        "_last": true
      }
    ],
    "fields": [
      {
        "field_type": "std::shared_ptr<SourceLocation>",
        "field_name": "sourceLocation",
        "field_text": "std::shared_ptr<SourceLocation>",
        "_N": 1,
        "field_local": true,
        "last": true
      }
    ]
  },
  {
    "class_name": "FunctionHandle",
    "field_name": "functionHandle",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "BuiltInFunctionHandle",
        "name": "builtInFunctionHandle",
        "key": "$static",
        "_N": 1,
        "_last": true
      }
    ],
    "fields": []
  },
  {
    "class_name": "CallExpression",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<SourceLocation>",
        "field_name": "sourceLocation",
        "field_text": "SourceLocation",
        "optional": true,
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "String",
        "field_name": "displayName",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "FunctionHandle",
        "field_name": "functionHandle",
        "field_text": "FunctionHandle",
        "_N": 3,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "Type",
        "field_name": "returnType",
        "field_text": "Type",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "List<RowExpression>",
        "field_name": "arguments",
        "field_text": "List<std::shared_ptr<RowExpression>>",
        "_N": 5,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "RowExpression",
    "json_key": "call"
  },
  {
    "class_name": "VariableReferenceExpression",
    "hinc": "namespace facebook::presto::protocol {\n\nstruct VariableReferenceExpression : RowExpression {\n  String name;\n  Type type; // dependency\n\n  VariableReferenceExpression() noexcept;\n  explicit VariableReferenceExpression(const String& str) {\n    _type = \"variable\";\n\n    std::vector<std::string, std::allocator<std::string>> parts;\n\n    folly::split(\"<\", str, parts);\n    name = parts[0];\n    type = parts[1].substr(0, parts[1].length() - 1);\n  }\n\n  bool operator<(const VariableReferenceExpression& o) const {\n    if (name == o.name) {\n      return type < o.type;\n    }\n\n    return name < o.name;\n  }\n};\n\nvoid to_json(json& j, const VariableReferenceExpression& p);\nvoid from_json(const json& j, VariableReferenceExpression& p);\n\nstd::string json_map_key(\n    const facebook::presto::protocol::VariableReferenceExpression& p);\n\n} // namespace facebook::presto::protocol",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<SourceLocation>",
        "field_name": "sourceLocation",
        "field_text": "SourceLocation",
        "optional": true,
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "String",
        "field_name": "name",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Type",
        "field_name": "type",
        "field_text": "Type",
        "_N": 3,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "RowExpression",
    "json_key": "variable"
  },
  {
    "class_name": "SortOrder",
    "enum": true,
    "elements": [
      {
        "element": "ASC_NULLS_FIRST",
        "_N": 1
      },
      {
        "element": "ASC_NULLS_LAST",
        "_N": 2
      },
      {
        "element": "DESC_NULLS_FIRST",
        "_N": 3
      },
      {
        "element": "DESC_NULLS_LAST",
        "_N": 4,
        "_last": true
      }
    ]
  },
  {
    "class_name": "Ordering",
    "struct": true,
    "fields": [
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "variable",
        "field_text": "VariableReferenceExpression",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "SortOrder",
        "field_name": "sortOrder",
        "field_text": "SortOrder",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "OrderingScheme",
    "struct": true,
    "fields": [
      {
        "field_type": "List<Ordering>",
        "field_name": "orderBy",
        "field_text": "List<Ordering>",
        "_N": 1,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Aggregation",
    "struct": true,
    "fields": [
      {
        "field_type": "CallExpression",
        "field_name": "call",
        "field_text": "CallExpression",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<RowExpression>",
        "field_name": "filter",
        "field_text": "std::shared_ptr<RowExpression>",
        "optional": true,
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<OrderingScheme>",
        "field_name": "orderBy",
        "field_text": "OrderingScheme",
        "optional": true,
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "distinct",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "mask",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "FunctionHandle",
        "field_name": "functionHandle",
        "field_text": "FunctionHandle",
        "_N": 6,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "List<RowExpression>",
        "field_name": "arguments",
        "field_text": "List<std::shared_ptr<RowExpression>>",
        "_N": 7,
        "field_local": true,
        "last": true
      }
    ]
  },
  {
    "class_name": "HiveColumnHandle",
    "hinc": "namespace facebook::presto::protocol {\n\nstruct HiveColumnHandle : public ColumnHandle {\n  String name = {};\n  HiveType hiveType = {};\n  TypeSignature typeSignature = {};\n  int hiveColumnIndex = {};\n  ColumnType columnType = {};\n  std::shared_ptr<String> comment = {};\n  List<Subfield> requiredSubfields = {};\n  std::shared_ptr<Aggregation> partialAggregation = {};\n\n  HiveColumnHandle() noexcept;\n\n  bool operator<(const ColumnHandle& o) const override {\n    return name < dynamic_cast<const HiveColumnHandle&>(o).name;\n  }\n};\n\nvoid to_json(json& j, const HiveColumnHandle& p);\nvoid from_json(const json& j, HiveColumnHandle& p);\n\n} // namespace facebook::presto::protocol",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "name",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "HiveType",
        "field_name": "hiveType",
        "field_text": "HiveType",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "TypeSignature",
        "field_name": "typeSignature",
        "field_text": "TypeSignature",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "hiveColumnIndex",
        "field_text": "int",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "ColumnType",
        "field_name": "columnType",
        "field_text": "ColumnType",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "comment",
        "field_text": "String",
        "optional": true,
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "List<Subfield>",
        "field_name": "requiredSubfields",
        "field_text": "List<Subfield>",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "Optional<Aggregation>",
        "field_name": "partialAggregation",
        "field_text": "Aggregation",
        "optional": true,
        "_N": 8,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ColumnHandle",
    "json_key": "hive"
  },
  {
    "class_name": "SchemaTableName",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "schema",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "table",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ColumnHandle",
    "field_name": "columnHandle",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "comparable": true,
    "subclasses": [
      {
        "type": "HiveColumnHandle",
        "name": "hiveColumnHandle",
        "key": "hive",
        "_N": 1,
        "_last": true
      }
    ],
    "fields": [],
    "cinc": "namespace facebook::presto::protocol {\nvoid to_json(json& j, const std::shared_ptr<ColumnHandle>& p) {\n  if (p == nullptr) {\n    return;\n  }\n  String type = p->_type;\n\n  if (getConnectorKey(type) == \"hive\") {\n    j = *std::static_pointer_cast<HiveColumnHandle>(p);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ColumnHandle \");\n}\n\nvoid from_json(const json& j, std::shared_ptr<ColumnHandle>& p) {\n  String type;\n  try {\n    type = p->getSubclassKey(j);\n  } catch (json::parse_error& e) {\n    throw ParseError(std::string(e.what()) + \" ColumnHandle  ColumnHandle\");\n  }\n\n  if (getConnectorKey(type) == \"hive\") {\n    std::shared_ptr<HiveColumnHandle> k = std::make_shared<HiveColumnHandle>();\n    j.get_to(*k);\n    p = std::static_pointer_cast<ColumnHandle>(k);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ColumnHandle \");\n}\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "Column",
    "hinc": "namespace facebook::presto::protocol {\n\nstruct Column {\n  String name;\n  String type;\n\n  Column() = default;\n  explicit Column(const String& str) {\n    name = str;\n  }\n};\n\nvoid to_json(json& j, const Column& p);\nvoid from_json(const json& j, Column& p);\n\n} // namespace facebook::presto::protocol",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "name",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "type",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ValueSet",
    "field_name": "valueSet",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "EquatableValueSet",
        "name": "equatableValueSet",
        "key": "equatable",
        "_N": 1
      },
      {
        "type": "SortedRangeSet",
        "name": "sortedRangeSet",
        "key": "sortable",
        "_N": 2
      },
      {
        "type": "AllOrNoneValueSet",
        "name": "allOrNoneValueSet",
        "key": "allOrNone",
        "_N": 3,
        "_last": true
      }
    ],
    "fields": []
  },
  {
    "class_name": "Domain",
    "struct": true,
    "fields": [
      {
        "field_type": "ValueSet",
        "field_name": "values",
        "field_text": "ValueSet",
        "_N": 1,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "boolean",
        "field_name": "nullAllowed",
        "field_text": "bool",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "TupleDomain",
    "hinc": "namespace facebook::presto::protocol {\n\ntemplate <typename T>\nstruct pointerDerefCompare {\n  bool operator()(const std::shared_ptr<T>& a, const std::shared_ptr<T>& b)\n      const {\n    return *a < *b;\n  }\n};\n\ntemplate <typename T>\nstruct TupleDomain {\n  std::shared_ptr<Map<T, Domain>> domains;\n};\n\ntemplate <typename T>\nstruct TupleDomain<std::shared_ptr<T>> {\n  std::shared_ptr<std::map<std::shared_ptr<T>, Domain, pointerDerefCompare<T>>>\n      domains;\n};\n\ntemplate <class T>\nstruct ColumnDomain {\n  T column;\n  Domain domain; // dependency\n};\n\n} // namespace facebook::presto::protocol\n\nnamespace nlohmann {\n\ntemplate <typename T>\nstruct adl_serializer<facebook::presto::protocol::ColumnDomain<T>> {\n  static void to_json(\n      json& j,\n      const facebook::presto::protocol::ColumnDomain<T>& p) {\n    facebook::presto::protocol::to_json_key(\n        j, \"column\", p.column, \"ColumnDomain\", \"T\", \"column\");\n    facebook::presto::protocol::to_json_key(\n        j, \"domain\", p.domain, \"ColumnDomain\", \"Domain\", \"domain\");\n  }\n\n  static void from_json(\n      const json& j,\n      facebook::presto::protocol::ColumnDomain<T>& p) {\n    facebook::presto::protocol::from_json_key(\n        j, \"column\", p.column, \"ColumnDomain\", \"T\", \"column\");\n    facebook::presto::protocol::from_json_key(\n        j, \"domain\", p.domain, \"ColumnDomain\", \"Domain\", \"domain\");\n  }\n};\n\ntemplate <typename T>\nstruct adl_serializer<facebook::presto::protocol::TupleDomain<T>> {\n  static void to_json(\n      json& j,\n      const facebook::presto::protocol::TupleDomain<T>& tup) {\n    facebook::presto::protocol::List<\n        facebook::presto::protocol::ColumnDomain<T>>\n        list;\n    if (tup.domains != nullptr) {\n      for (auto& el : *tup.domains) {\n        facebook::presto::protocol::ColumnDomain<T> domain;\n        domain.column = el.first;\n        domain.domain = el.second;\n        list.push_back(domain);\n      }\n    }\n\n    j[\"columnDomains\"] = list;\n  }\n\n  static void from_json(\n      const json& j,\n      facebook::presto::protocol::TupleDomain<T>& tup) {\n    if (j.count(\"columnDomains\") != 0U) {\n      std::shared_ptr<facebook::presto::protocol::\n                          Map<T, facebook::presto::protocol::Domain>>\n          map = std::make_shared<\n              std::map<T, facebook::presto::protocol::Domain>>();\n\n      facebook::presto::protocol::List<\n          facebook::presto::protocol::ColumnDomain<T>>\n          list = j.at(\"columnDomains\");\n      for (const facebook::presto::protocol::ColumnDomain<T>& value : list) {\n        map->insert(std::make_pair(T(value.column), value.domain));\n      }\n      tup.domains = map;\n    }\n  }\n};\n\ntemplate <typename T>\nstruct adl_serializer<\n    facebook::presto::protocol::TupleDomain<std::shared_ptr<T>>> {\n  static void to_json(\n      json& j,\n      const facebook::presto::protocol::TupleDomain<std::shared_ptr<T>>& tup) {\n    facebook::presto::protocol::List<\n        facebook::presto::protocol::ColumnDomain<std::shared_ptr<T>>>\n        list;\n    if (tup.domains != nullptr) {\n      for (auto& el : *tup.domains) {\n        facebook::presto::protocol::ColumnDomain<std::shared_ptr<T>> domain;\n        domain.column = el.first;\n        domain.domain = el.second;\n        list.push_back(domain);\n      }\n    }\n\n    j[\"columnDomains\"] = list;\n  }\n\n  static void from_json(\n      const json& j,\n      facebook::presto::protocol::TupleDomain<std::shared_ptr<T>>& tup) {\n    if (j.count(\"columnDomains\") != 0U) {\n      auto map = std::make_shared<std::map<\n          std::shared_ptr<T>,\n          facebook::presto::protocol::Domain,\n          facebook::presto::protocol::pointerDerefCompare<T>>>();\n\n      facebook::presto::protocol::List<\n          facebook::presto::protocol::ColumnDomain<std::shared_ptr<T>>>\n          list = j.at(\"columnDomains\");\n      for (const facebook::presto::protocol::ColumnDomain<std::shared_ptr<T>>&\n               value : list) {\n        map->insert(\n            std::make_pair(std::shared_ptr<T>(value.column), value.domain));\n      }\n      tup.domains = map;\n    }\n  }\n};\n\n} // namespace nlohmann"
  },
  {
    "class_name": "HiveBucketFilter",
    "struct": true,
    "fields": [
      {
        "field_type": "Set<Integer>",
        "field_name": "bucketsToKeep",
        "field_text": "List<Integer>",
        "_N": 1,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "HiveBucketHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "List<HiveColumnHandle>",
        "field_name": "columns",
        "field_text": "List<HiveColumnHandle>",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "tableBucketCount",
        "field_text": "int",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "readBucketCount",
        "field_text": "int",
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "HiveTableLayoutHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "SchemaTableName",
        "field_name": "schemaTableName",
        "field_text": "SchemaTableName",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "tablePath",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<HiveColumnHandle>",
        "field_name": "partitionColumns",
        "field_text": "List<HiveColumnHandle>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "List<Column>",
        "field_name": "dataColumns",
        "field_text": "List<Column>",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "tableParameters",
        "field_text": "Map<String, String>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "TupleDomain<Subfield>",
        "field_name": "domainPredicate",
        "field_text": "TupleDomain<Subfield>",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "RowExpression",
        "field_name": "remainingPredicate",
        "field_text": "RowExpression",
        "_N": 7,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "Map<String, HiveColumnHandle>",
        "field_name": "predicateColumns",
        "field_text": "Map<String, HiveColumnHandle>",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "TupleDomain<ColumnHandle>",
        "field_name": "partitionColumnPredicate",
        "field_text": "TupleDomain<std::shared_ptr<ColumnHandle>>",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "Optional<HiveBucketHandle>",
        "field_name": "bucketHandle",
        "field_text": "HiveBucketHandle",
        "optional": true,
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "Optional<HiveBucketFilter>",
        "field_name": "bucketFilter",
        "field_text": "HiveBucketFilter",
        "optional": true,
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "pushdownFilterEnabled",
        "field_text": "bool",
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "layoutString",
        "field_text": "String",
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "Optional<Set<HiveColumnHandle>>",
        "field_name": "requestedColumns",
        "field_text": "List<HiveColumnHandle>",
        "optional": true,
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "partialAggregationsPushedDown",
        "field_text": "bool",
        "_N": 15,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "appendRowNumber",
        "field_text": "bool",
        "_N": 16,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorTableLayoutHandle",
    "json_key": "hive"
  },
  {
    "class_name": "PlanNode",
    "field_name": "planNode",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "AggregationNode",
        "name": "aggregationNode",
        "key": ".AggregationNode",
        "_N": 1
      },
      {
        "type": "GroupIdNode",
        "name": "groupIdNode",
        "key": "com.facebook.presto.sql.planner.plan.GroupIdNode",
        "_N": 2
      },
      {
        "type": "DistinctLimitNode",
        "name": "distinctLimitNode",
        "key": ".DistinctLimitNode",
        "_N": 3
      },
      {
        "type": "EnforceSingleRowNode",
        "name": "enforceSingleRowNode",
        "key": "com.facebook.presto.sql.planner.plan.EnforceSingleRowNode",
        "_N": 4
      },
      {
        "type": "ExchangeNode",
        "name": "exchangeNode",
        "key": "com.facebook.presto.sql.planner.plan.ExchangeNode",
        "_N": 5
      },
      {
        "type": "FilterNode",
        "name": "filterNode",
        "key": ".FilterNode",
        "_N": 6
      },
      {
        "type": "JoinNode",
        "name": "joinNode",
        "key": "com.facebook.presto.sql.planner.plan.JoinNode",
        "_N": 7
      },
      {
        "type": "LimitNode",
        "name": "limitNode",
        "key": ".LimitNode",
        "_N": 8
      },
      {
        "type": "SortNode",
        "name": "sortNode",
        "key": "com.facebook.presto.sql.planner.plan.SortNode",
        "_N": 9
      },
      {
        "type": "OutputNode",
        "name": "outputNode",
        "key": "com.facebook.presto.sql.planner.plan.OutputNode",
        "_N": 10
      },
      {
        "type": "ProjectNode",
        "name": "projectNode",
        "key": ".ProjectNode",
        "_N": 11
      },
      {
        "type": "RowNumberNode",
        "name": "rowNumberNode",
        "key": "com.facebook.presto.sql.planner.plan.RowNumberNode",
        "_N": 12
      },
      {
        "type": "RemoteSourceNode",
        "name": "remoteSourceNode",
        "key": "com.facebook.presto.sql.planner.plan.RemoteSourceNode",
        "_N": 13
      },
      {
        "type": "SemiJoinNode",
        "name": "semiJoinNode",
        "key": "com.facebook.presto.sql.planner.plan.SemiJoinNode",
        "_N": 14
      },
      {
        "type": "TableScanNode",
        "name": "tableScanNode",
        "key": ".TableScanNode",
        "_N": 15
      },
      {
        "type": "TableWriterNode",
        "name": "tableWriterNode",
        "key": "com.facebook.presto.sql.planner.plan.TableWriterNode",
        "_N": 16
      },
      {
        "type": "TopNNode",
        "name": "topNNode",
        "key": ".TopNNode",
        "_N": 17
      },
      {
        "type": "UnnestNode",
        "name": "unnestNode",
        "key": "com.facebook.presto.sql.planner.plan.UnnestNode",
        "_N": 18
      },
      {
        "type": "ValuesNode",
        "name": "valuesNode",
        "key": ".ValuesNode",
        "_N": 19
      },
      {
        "type": "AssignUniqueId",
        "name": "assignUniqueId",
        "key": "com.facebook.presto.sql.planner.plan.AssignUniqueId",
        "_N": 20
      },
      {
        "type": "MergeJoinNode",
        "name": "mergeJoinNode",
        "key": "com.facebook.presto.sql.planner.plan.MergeJoinNode",
        "_N": 21
      },
      {
        "type": "WindowNode",
        "name": "windowNode",
        "key": "com.facebook.presto.sql.planner.plan.WindowNode",
        "_N": 22,
        "_last": true
      }
    ],
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": true,
        "last": true
      }
    ]
  },
  {
    "class_name": "DistinctLimitNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "long",
        "field_name": "limit",
        "field_text": "int64_t",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "partial",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "distinctVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "hashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 6,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": ".DistinctLimitNode"
  },
  {
    "class_name": "TableToPartitionMapping",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<Map<Integer, Integer>>",
        "field_name": "tableToPartitionColumns",
        "field_text": "Map<Integer, Integer>",
        "optional": true,
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Map<Integer, Column>",
        "field_name": "partitionSchemaDifference",
        "field_text": "Map<Integer, Column>",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "DwrfEncryptionMetadata",
    "struct": true,
    "fields": [
      {
        "field_type": "Map<String, byte[]>",
        "field_name": "fieldToKeyData",
        "field_text": "Map<String, String>",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "extraMetadata",
        "field_text": "Map<String, String>",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "encryptionAlgorithm",
        "field_text": "String",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "encryptionProvider",
        "field_text": "String",
        "_N": 4,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "EncryptionInformation",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<DwrfEncryptionMetadata>",
        "field_name": "dwrfEncryptionMetadata",
        "field_text": "DwrfEncryptionMetadata",
        "optional": true,
        "_N": 1,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "FilterNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "RowExpression",
        "field_name": "predicate",
        "field_text": "RowExpression",
        "_N": 3,
        "field_local": true,
        "optional": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": ".FilterNode"
  },
  {
    "class_name": "WriteMode",
    "enum": true,
    "elements": [
      {
        "element": "STAGE_AND_MOVE_TO_TARGET_DIRECTORY",
        "_N": 1
      },
      {
        "element": "DIRECT_TO_TARGET_NEW_DIRECTORY",
        "_N": 2
      },
      {
        "element": "DIRECT_TO_TARGET_EXISTING_DIRECTORY",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "TableType",
    "enum": true,
    "elements": [
      {
        "element": "NEW",
        "_N": 1
      },
      {
        "element": "EXISTING",
        "_N": 2
      },
      {
        "element": "TEMPORARY",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "LocationHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "targetPath",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "writePath",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "tempPath",
        "field_text": "String",
        "optional": true,
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "TableType",
        "field_name": "tableType",
        "field_text": "TableType",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "WriteMode",
        "field_name": "writeMode",
        "field_text": "WriteMode",
        "_N": 5,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "BucketFunctionType",
    "enum": true,
    "elements": [
      {
        "element": "HIVE_COMPATIBLE",
        "_N": 1
      },
      {
        "element": "PRESTO_NATIVE",
        "_N": 2,
        "_last": true
      }
    ]
  },
  {
    "class_name": "Order",
    "enum": true,
    "elements": [
      {
        "element": "ASCENDING",
        "_N": 1
      },
      {
        "element": "DESCENDING",
        "_N": 2,
        "_last": true
      }
    ]
  },
  {
    "class_name": "SortingColumn",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "columnName",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Order",
        "field_name": "order",
        "field_text": "Order",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "HiveBucketProperty",
    "struct": true,
    "fields": [
      {
        "field_type": "List<String>",
        "field_name": "bucketedBy",
        "field_text": "List<String>",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "bucketCount",
        "field_text": "int",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<SortingColumn>",
        "field_name": "sortedBy",
        "field_text": "List<SortingColumn>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "BucketFunctionType",
        "field_name": "bucketFunctionType",
        "field_text": "BucketFunctionType",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<List<Type>>",
        "field_name": "types",
        "field_text": "List<Type>",
        "optional": true,
        "_N": 5,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "HiveCompressionCodec",
    "enum": true,
    "elements": [
      {
        "element": "NONE",
        "_N": 1
      },
      {
        "element": "SNAPPY",
        "_N": 2
      },
      {
        "element": "GZIP",
        "_N": 3
      },
      {
        "element": "LZ4",
        "_N": 4
      },
      {
        "element": "ZSTD",
        "_N": 5,
        "_last": true
      }
    ]
  },
  {
    "class_name": "PrestoTableType",
    "enum": true,
    "elements": [
      {
        "element": "MANAGED_TABLE",
        "_N": 1
      },
      {
        "element": "EXTERNAL_TABLE",
        "_N": 2
      },
      {
        "element": "VIRTUAL_VIEW",
        "_N": 3
      },
      {
        "element": "MATERIALIZED_VIEW",
        "_N": 4
      },
      {
        "element": "TEMPORARY_TABLE",
        "_N": 5
      },
      {
        "element": "OTHER",
        "_N": 6,
        "_last": true
      }
    ]
  },
  {
    "class_name": "StorageFormat",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "serDe",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "inputFormat",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "outputFormat",
        "field_text": "String",
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Storage",
    "struct": true,
    "fields": [
      {
        "field_type": "StorageFormat",
        "field_name": "storageFormat",
        "field_text": "StorageFormat",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "location",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<HiveBucketProperty>",
        "field_name": "bucketProperty",
        "field_text": "HiveBucketProperty",
        "optional": true,
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "skewed",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "serdeParameters",
        "field_text": "Map<String, String>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "parameters",
        "field_text": "Map<String, String>",
        "_N": 6,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Table",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "databaseName",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "tableName",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "owner",
        "field_text": "String",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "PrestoTableType",
        "field_name": "tableType",
        "field_text": "PrestoTableType",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Storage",
        "field_name": "storage",
        "field_text": "Storage",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "List<Column>",
        "field_name": "dataColumns",
        "field_text": "List<Column>",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "List<Column>",
        "field_name": "partitionColumns",
        "field_text": "List<Column>",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "parameters",
        "field_text": "Map<String, String>",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "viewOriginalText",
        "field_text": "String",
        "optional": true,
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "viewExpandedText",
        "field_text": "String",
        "optional": true,
        "_N": 10,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "HivePageSinkMetadata",
    "cinc": "namespace facebook::presto::protocol {\n\nvoid to_json(json& j, const HivePageSinkMetadata& p) {\n  j = json::object();\n  to_json_key(\n      j,\n      \"schemaTableName\",\n      p.schemaTableName,\n      \"HivePageSinkMetadata\",\n      \"SchemaTableName\",\n      \"schemaTableName\");\n  to_json_key(j, \"table\", p.table, \"HivePageSinkMetadata\", \"Table\", \"table\");\n}\n\nvoid from_json(const json& j, HivePageSinkMetadata& p) {\n  from_json_key(\n      j,\n      \"schemaTableName\",\n      p.schemaTableName,\n      \"HivePageSinkMetadata\",\n      \"SchemaTableName\",\n      \"schemaTableName\");\n  from_json_key(j, \"table\", p.table, \"HivePageSinkMetadata\", \"Table\", \"table\");\n}\n} // namespace facebook::presto::protocol",
    "hinc": "// dependency Table\n// dependency SchemaTableName\n\nnamespace facebook::presto::protocol {\n\nstruct HivePageSinkMetadata {\n  SchemaTableName schemaTableName = {};\n  std::shared_ptr<Table> table = {};\n  // TODO Add modifiedPartitions\n};\nvoid to_json(json& j, const HivePageSinkMetadata& p);\nvoid from_json(const json& j, HivePageSinkMetadata& p);\n\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "HiveStorageFormat",
    "cinc": "namespace facebook::presto::protocol {\n\nvoid to_json(json& j, const HiveStorageFormat& p) {\n  throw ParseError(\"Not implemented\");\n}\n\nstatic const std::pair<HiveStorageFormat, json> HiveStorageFormat_enum_table[] =\n    { // NOLINT: cert-err58-cpp\n        {HiveStorageFormat::ORC, \"ORC\"},\n        {HiveStorageFormat::DWRF, \"DWRF\"},\n        {HiveStorageFormat::PARQUET, \"PARQUET\"},\n        {HiveStorageFormat::AVRO, \"AVRO\"},\n        {HiveStorageFormat::RCBINARY, \"RCBINARY\"},\n        {HiveStorageFormat::RCTEXT, \"RCTEXT\"},\n        {HiveStorageFormat::SEQUENCEFILE, \"SEQUENCEFILE\"},\n        {HiveStorageFormat::JSON, \"JSON\"},\n        {HiveStorageFormat::TEXTFILE, \"TEXTFILE\"},\n        {HiveStorageFormat::CSV, \"CSV\"},\n        {HiveStorageFormat::PAGEFILE, \"PAGEFILE\"}};\n\nvoid from_json(const json& j, HiveStorageFormat& e) {\n  static_assert(\n      std::is_enum<HiveStorageFormat>::value,\n      \"HiveStorageFormat must be an enum!\");\n  const auto* it = std::find_if(\n      std::begin(HiveStorageFormat_enum_table),\n      std::end(HiveStorageFormat_enum_table),\n      [&j](const std::pair<HiveStorageFormat, json>& ej_pair) -> bool {\n        return ej_pair.second == j;\n      });\n  e = ((it != std::end(HiveStorageFormat_enum_table))\n           ? it\n           : std::begin(HiveStorageFormat_enum_table))\n          ->first;\n}\n} // namespace facebook::presto::protocol",
    "hinc": "namespace facebook::presto::protocol {\n\nenum class HiveStorageFormat {\n  ORC,\n  DWRF,\n  PARQUET,\n  AVRO,\n  RCBINARY,\n  RCTEXT,\n  SEQUENCEFILE,\n  JSON,\n  TEXTFILE,\n  CSV,\n  PAGEFILE\n};\n\nvoid to_json(json& j, const HiveStorageFormat& p);\nvoid from_json(const json& j, HiveStorageFormat& p);\n\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "HiveInsertTableHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "schemaName",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "tableName",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<HiveColumnHandle>",
        "field_name": "inputColumns",
        "field_text": "List<HiveColumnHandle>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "HivePageSinkMetadata",
        "field_name": "pageSinkMetadata",
        "field_text": "HivePageSinkMetadata",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "LocationHandle",
        "field_name": "locationHandle",
        "field_text": "LocationHandle",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Optional<HiveBucketProperty>",
        "field_name": "bucketProperty",
        "field_text": "HiveBucketProperty",
        "optional": true,
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "List<SortingColumn>",
        "field_name": "preferredOrderingColumns",
        "field_text": "List<SortingColumn>",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "HiveStorageFormat",
        "field_name": "tableStorageFormat",
        "field_text": "HiveStorageFormat",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "HiveStorageFormat",
        "field_name": "partitionStorageFormat",
        "field_text": "HiveStorageFormat",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "HiveStorageFormat",
        "field_name": "actualStorageFormat",
        "field_text": "HiveStorageFormat",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "HiveCompressionCodec",
        "field_name": "compressionCodec",
        "field_text": "HiveCompressionCodec",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "Optional<EncryptionInformation>",
        "field_name": "encryptionInformation",
        "field_text": "EncryptionInformation",
        "optional": true,
        "_N": 12,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorInsertTableHandle",
    "json_key": "hive"
  },
  {
    "class_name": "ConnectorPartitioningHandle",
    "field_name": "connectorPartitioningHandle",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "SystemPartitioningHandle",
        "name": "systemPartitioningHandle",
        "key": "$remote",
        "_N": 1
      },
      {
        "type": "HivePartitioningHandle",
        "name": "hivePartitioningHandle",
        "key": "hive",
        "_N": 2,
        "_last": true
      }
    ],
    "fields": [],
    "cinc": "namespace facebook::presto::protocol {\nvoid to_json(json& j, const std::shared_ptr<ConnectorPartitioningHandle>& p) {\n  if (p == nullptr) {\n    return;\n  }\n  String type = p->_type;\n\n  if (type == \"$remote\") {\n    j = *std::static_pointer_cast<SystemPartitioningHandle>(p);\n    return;\n  }\n  if (getConnectorKey(type) == \"hive\") {\n    j = *std::static_pointer_cast<HivePartitioningHandle>(p);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorPartitioningHandle\");\n}\n\nvoid from_json(const json& j, std::shared_ptr<ConnectorPartitioningHandle>& p) {\n  String type;\n  try {\n    type = p->getSubclassKey(j);\n  } catch (json::parse_error& e) {\n    throw ParseError(std::string(e.what()) + \" ConnectorPartitioningHandle\");\n  }\n\n  if (type == \"$remote\") {\n    auto k = std::make_shared<SystemPartitioningHandle>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n  if (getConnectorKey(type) == \"hive\") {\n    auto k = std::make_shared<HivePartitioningHandle>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorPartitioningHandle\");\n}\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "ConnectorTransactionHandle",
    "field_name": "connectorTransactionHandle",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "HiveTransactionHandle",
        "name": "hiveTransactionHandle",
        "key": "hive",
        "_N": 1
      },
      {
        "type": "RemoteTransactionHandle",
        "name": "remoteTransactionHandle",
        "key": "$remote",
        "_N": 2,
        "_last": true
      }
    ],
    "fields": [],
    "cinc": "namespace facebook::presto::protocol {\nvoid to_json(json& j, const std::shared_ptr<ConnectorTransactionHandle>& p) {\n  if (p == nullptr) {\n    return;\n  }\n  String type = p->_type;\n\n  if (type == \"$remote\") {\n    j = *std::static_pointer_cast<RemoteTransactionHandle>(p);\n    return;\n  }\n  if (getConnectorKey(type) == \"hive\") {\n    j = *std::static_pointer_cast<HiveTransactionHandle>(p);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorTransactionHandle\");\n}\n\nvoid from_json(const json& j, std::shared_ptr<ConnectorTransactionHandle>& p) {\n  String type;\n  try {\n    type = p->getSubclassKey(j);\n  } catch (json::parse_error& e) {\n    throw ParseError(\n        std::string(e.what()) +\n        \" ConnectorTransactionHandle  ConnectorTransactionHandle\");\n  }\n\n  if (type == \"$remote\") {\n    auto k = std::make_shared<RemoteTransactionHandle>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n  if (getConnectorKey(type) == \"hive\") {\n    auto k = std::make_shared<HiveTransactionHandle>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorTransactionHandle\");\n}\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "PartitioningHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<ConnectorId>",
        "field_name": "connectorId",
        "field_text": "ConnectorId",
        "optional": true,
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<ConnectorTransactionHandle>",
        "field_name": "transactionHandle",
        "field_text": "ConnectorTransactionHandle",
        "optional": true,
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "ConnectorPartitioningHandle",
        "field_name": "connectorHandle",
        "field_text": "ConnectorPartitioningHandle",
        "_N": 3,
        "field_local": true,
        "optional": true
      }
    ]
  },
  {
    "class_name": "DistributionSnapshot",
    "struct": true,
    "fields": [
      {
        "field_type": "double",
        "field_name": "maxError",
        "field_text": "double",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "count",
        "field_text": "double",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "total",
        "field_text": "double",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "p01",
        "field_text": "int64_t",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "p05",
        "field_text": "int64_t",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "p10",
        "field_text": "int64_t",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "p25",
        "field_text": "int64_t",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "p50",
        "field_text": "int64_t",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "p75",
        "field_text": "int64_t",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "p90",
        "field_text": "int64_t",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "p95",
        "field_text": "int64_t",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "p99",
        "field_text": "int64_t",
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "min",
        "field_text": "int64_t",
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "max",
        "field_text": "int64_t",
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "avg",
        "field_text": "double",
        "_N": 15,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Lifespan",
    "cinc": "namespace facebook::presto::protocol {\n\nvoid to_json(json& j, const Lifespan& p) {\n  if (p.isgroup) {\n    j = \"Group\" + std::to_string(p.groupid);\n  } else {\n    j = \"TaskWide\";\n  }\n}\n\nvoid from_json(const json& j, Lifespan& p) {\n  String lifespan = j;\n\n  if (lifespan == \"TaskWide\") {\n    p.isgroup = false;\n    p.groupid = 0;\n  } else {\n    if (lifespan != \"Group\") {\n      // fail...\n    }\n    p.isgroup = true;\n    p.groupid = std::stoi(lifespan.substr(strlen(\"Group\")));\n  }\n}\n\n} // namespace facebook::presto::protocol",
    "hinc": "namespace facebook::presto::protocol {\n\nstruct Lifespan {\n  bool isgroup = false;\n  long groupid = 0;\n\n  bool operator<(const Lifespan& o) const {\n    return groupid < o.groupid;\n  }\n};\n\nvoid to_json(json& j, const Lifespan& p);\nvoid from_json(const json& j, Lifespan& p);\n\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "Duration",
    "cinc": "namespace facebook::presto::protocol {\n\nvoid to_json(json& j, const Duration& p) {\n  j = p.toString();\n}\n\nvoid from_json(const json& j, Duration& p) {\n  p = Duration(std::string(j));\n}\n\nstd::ostream& operator<<(std::ostream& os, const Duration& d) {\n  return os << d.toString();\n}\n\n} // namespace facebook::presto::protocol",
    "hinc": "namespace facebook::presto::protocol {\n\nstd::ostream& operator<<(std::ostream& os, const Duration& d);\n\nvoid to_json(json& j, const Duration& p);\nvoid from_json(const json& j, Duration& p);\n\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "BlockedReason",
    "enum": true,
    "elements": [
      {
        "element": "WAITING_FOR_MEMORY",
        "_N": 1,
        "_last": true
      }
    ]
  },
  {
    "class_name": "OperatorInfo",
    "cinc": "namespace facebook::presto::protocol {\nvoid to_json(json& j, const OperatorInfo& p) {}\nvoid from_json(const json& j, OperatorInfo& p) {}\n} // namespace facebook::presto::protocol",
    "hinc": "namespace facebook::presto::protocol {\nstruct OperatorInfo {};\nvoid to_json(json& j, const OperatorInfo& p);\nvoid from_json(const json& j, OperatorInfo& p);\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "DataSize",
    "cinc": "namespace facebook::presto::protocol {\n\nvoid to_json(nlohmann::json& j, const DataSize& p) {\n  j = p.toString();\n}\n\nvoid from_json(const nlohmann::json& j, DataSize& p) {\n  p = DataSize(std::string(j));\n}\n\nstd::ostream& operator<<(std::ostream& os, const DataSize& d) {\n  return os << d.toString();\n}\n\n} // namespace facebook::presto::protocol",
    "hinc": "namespace facebook::presto::protocol {\n\nstd::ostream& operator<<(std::ostream& os, const DataSize& d);\n\nvoid to_json(nlohmann::json& j, const DataSize& p);\nvoid from_json(const nlohmann::json& j, DataSize& p);\n\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "OperatorStats",
    "struct": true,
    "fields": [
      {
        "field_type": "int",
        "field_name": "stageId",
        "field_text": "int",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "stageExecutionId",
        "field_text": "int",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "pipelineId",
        "field_text": "int",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "operatorId",
        "field_text": "int",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "PlanNodeId",
        "field_name": "planNodeId",
        "field_text": "PlanNodeId",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "operatorType",
        "field_text": "String",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalDrivers",
        "field_text": "int64_t",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "addInputCalls",
        "field_text": "int64_t",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "addInputWall",
        "field_text": "Duration",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "addInputCpu",
        "field_text": "Duration",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "addInputAllocation",
        "field_text": "DataSize",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "rawInputDataSize",
        "field_text": "DataSize",
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "rawInputPositions",
        "field_text": "int64_t",
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "inputDataSize",
        "field_text": "DataSize",
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "inputPositions",
        "field_text": "int64_t",
        "_N": 15,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "sumSquaredInputPositions",
        "field_text": "double",
        "_N": 16,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "getOutputCalls",
        "field_text": "int64_t",
        "_N": 17,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "getOutputWall",
        "field_text": "Duration",
        "_N": 18,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "getOutputCpu",
        "field_text": "Duration",
        "_N": 19,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "getOutputAllocation",
        "field_text": "DataSize",
        "_N": 20,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "outputDataSize",
        "field_text": "DataSize",
        "_N": 21,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "outputPositions",
        "field_text": "int64_t",
        "_N": 22,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "physicalWrittenDataSize",
        "field_text": "DataSize",
        "_N": 23,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "additionalCpu",
        "field_text": "Duration",
        "_N": 24,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "blockedWall",
        "field_text": "Duration",
        "_N": 25,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "finishCalls",
        "field_text": "int64_t",
        "_N": 26,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "finishWall",
        "field_text": "Duration",
        "_N": 27,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "finishCpu",
        "field_text": "Duration",
        "_N": 28,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "finishAllocation",
        "field_text": "DataSize",
        "_N": 29,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "userMemoryReservation",
        "field_text": "DataSize",
        "_N": 30,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "revocableMemoryReservation",
        "field_text": "DataSize",
        "_N": 31,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "systemMemoryReservation",
        "field_text": "DataSize",
        "_N": 32,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "peakUserMemoryReservation",
        "field_text": "DataSize",
        "_N": 33,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "peakSystemMemoryReservation",
        "field_text": "DataSize",
        "_N": 34,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "peakTotalMemoryReservation",
        "field_text": "DataSize",
        "_N": 35,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "spilledDataSize",
        "field_text": "DataSize",
        "_N": 36,
        "field_local": true
      },
      {
        "field_type": "Optional<BlockedReason>",
        "field_name": "blockedReason",
        "field_text": "BlockedReason",
        "optional": true,
        "_N": 37,
        "field_local": true
      },
      {
        "field_type": "OperatorInfo",
        "field_name": "info",
        "field_text": "OperatorInfo",
        "_N": 38,
        "field_local": true
      },
      {
        "field_type": "RuntimeStats",
        "field_name": "runtimeStats",
        "field_text": "RuntimeStats",
        "_N": 39,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "DriverStats",
    "struct": true,
    "fields": [
      {
        "field_type": "Lifespan",
        "field_name": "lifespan",
        "field_text": "Lifespan",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "createTime",
        "field_text": "DateTime",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "startTime",
        "field_text": "DateTime",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "endTime",
        "field_text": "DateTime",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "queuedTime",
        "field_text": "Duration",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "elapsedTime",
        "field_text": "Duration",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "userMemoryReservation",
        "field_text": "DataSize",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "revocableMemoryReservation",
        "field_text": "DataSize",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "systemMemoryReservation",
        "field_text": "DataSize",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "totalScheduledTime",
        "field_text": "Duration",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "totalCpuTime",
        "field_text": "Duration",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "totalBlockedTime",
        "field_text": "Duration",
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "fullyBlocked",
        "field_text": "bool",
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "Set<BlockedReason>",
        "field_name": "blockedReasons",
        "field_text": "List<BlockedReason>",
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "totalAllocation",
        "field_text": "DataSize",
        "_N": 15,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "rawInputDataSize",
        "field_text": "DataSize",
        "_N": 16,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "rawInputPositions",
        "field_text": "int64_t",
        "_N": 17,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "rawInputReadTime",
        "field_text": "Duration",
        "_N": 18,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "processedInputDataSize",
        "field_text": "DataSize",
        "_N": 19,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "processedInputPositions",
        "field_text": "int64_t",
        "_N": 20,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "outputDataSize",
        "field_text": "DataSize",
        "_N": 21,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "outputPositions",
        "field_text": "int64_t",
        "_N": 22,
        "field_local": true
      },
      {
        "field_type": "DataSize",
        "field_name": "physicalWrittenDataSize",
        "field_text": "DataSize",
        "_N": 23,
        "field_local": true
      },
      {
        "field_type": "List<OperatorStats>",
        "field_name": "operatorStats",
        "field_text": "List<OperatorStats>",
        "_N": 24,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "PipelineStats",
    "struct": true,
    "fields": [
      {
        "field_type": "int",
        "field_name": "pipelineId",
        "field_text": "int",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "firstStartTime",
        "field_text": "DateTime",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "lastStartTime",
        "field_text": "DateTime",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "lastEndTime",
        "field_text": "DateTime",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "inputPipeline",
        "field_text": "bool",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "outputPipeline",
        "field_text": "bool",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "totalDrivers",
        "field_text": "int",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "queuedDrivers",
        "field_text": "int",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "queuedPartitionedDrivers",
        "field_text": "int",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "queuedPartitionedSplitsWeight",
        "field_text": "int64_t",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "runningDrivers",
        "field_text": "int",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "runningPartitionedDrivers",
        "field_text": "int",
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "runningPartitionedSplitsWeight",
        "field_text": "int64_t",
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "blockedDrivers",
        "field_text": "int",
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "completedDrivers",
        "field_text": "int",
        "_N": 15,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "userMemoryReservationInBytes",
        "field_text": "int64_t",
        "_N": 16,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "revocableMemoryReservationInBytes",
        "field_text": "int64_t",
        "_N": 17,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "systemMemoryReservationInBytes",
        "field_text": "int64_t",
        "_N": 18,
        "field_local": true
      },
      {
        "field_type": "DistributionSnapshot",
        "field_name": "queuedTime",
        "field_text": "DistributionSnapshot",
        "_N": 19,
        "field_local": true
      },
      {
        "field_type": "DistributionSnapshot",
        "field_name": "elapsedTime",
        "field_text": "DistributionSnapshot",
        "_N": 20,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalScheduledTimeInNanos",
        "field_text": "int64_t",
        "_N": 21,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalCpuTimeInNanos",
        "field_text": "int64_t",
        "_N": 22,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalBlockedTimeInNanos",
        "field_text": "int64_t",
        "_N": 23,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "fullyBlocked",
        "field_text": "bool",
        "_N": 24,
        "field_local": true
      },
      {
        "field_type": "Set<BlockedReason>",
        "field_name": "blockedReasons",
        "field_text": "List<BlockedReason>",
        "_N": 25,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalAllocationInBytes",
        "field_text": "int64_t",
        "_N": 26,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "rawInputDataSizeInBytes",
        "field_text": "int64_t",
        "_N": 27,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "rawInputPositions",
        "field_text": "int64_t",
        "_N": 28,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "processedInputDataSizeInBytes",
        "field_text": "int64_t",
        "_N": 29,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "processedInputPositions",
        "field_text": "int64_t",
        "_N": 30,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "outputDataSizeInBytes",
        "field_text": "int64_t",
        "_N": 31,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "outputPositions",
        "field_text": "int64_t",
        "_N": 32,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "physicalWrittenDataSizeInBytes",
        "field_text": "int64_t",
        "_N": 33,
        "field_local": true
      },
      {
        "field_type": "List<OperatorStats>",
        "field_name": "operatorSummaries",
        "field_text": "List<OperatorStats>",
        "_N": 34,
        "field_local": true
      },
      {
        "field_type": "List<DriverStats>",
        "field_name": "drivers",
        "field_text": "List<DriverStats>",
        "_N": 35,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "TaskStats",
    "struct": true,
    "fields": [
      {
        "field_type": "DateTime",
        "field_name": "createTime",
        "field_text": "DateTime",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "firstStartTime",
        "field_text": "DateTime",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "lastStartTime",
        "field_text": "DateTime",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "lastEndTime",
        "field_text": "DateTime",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "endTime",
        "field_text": "DateTime",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "elapsedTimeInNanos",
        "field_text": "int64_t",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "queuedTimeInNanos",
        "field_text": "int64_t",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "totalDrivers",
        "field_text": "int",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "queuedDrivers",
        "field_text": "int",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "queuedPartitionedDrivers",
        "field_text": "int",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "queuedPartitionedSplitsWeight",
        "field_text": "int64_t",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "runningDrivers",
        "field_text": "int",
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "runningPartitionedDrivers",
        "field_text": "int",
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "runningPartitionedSplitsWeight",
        "field_text": "int64_t",
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "blockedDrivers",
        "field_text": "int",
        "_N": 15,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "completedDrivers",
        "field_text": "int",
        "_N": 16,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "cumulativeUserMemory",
        "field_text": "double",
        "_N": 17,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "cumulativeTotalMemory",
        "field_text": "double",
        "_N": 18,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "userMemoryReservation",
        "field_text": "int64_t",
        "_N": 19,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "revocableMemoryReservationInBytes",
        "field_text": "int64_t",
        "_N": 20,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "systemMemoryReservationInBytes",
        "field_text": "int64_t",
        "_N": 21,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "peakTotalMemoryInBytes",
        "field_text": "int64_t",
        "_N": 22,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "peakUserMemoryInBytes",
        "field_text": "int64_t",
        "_N": 23,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "peakNodeTotalMemoryInbytes",
        "field_text": "int64_t",
        "_N": 24,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalScheduledTimeInNanos",
        "field_text": "int64_t",
        "_N": 25,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalCpuTimeInNanos",
        "field_text": "int64_t",
        "_N": 26,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalBlockedTimeInNanos",
        "field_text": "int64_t",
        "_N": 27,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "fullyBlocked",
        "field_text": "bool",
        "_N": 28,
        "field_local": true
      },
      {
        "field_type": "Set<BlockedReason>",
        "field_name": "blockedReasons",
        "field_text": "List<BlockedReason>",
        "_N": 29,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalAllocationInBytes",
        "field_text": "int64_t",
        "_N": 30,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "rawInputDataSizeInBytes",
        "field_text": "int64_t",
        "_N": 31,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "rawInputPositions",
        "field_text": "int64_t",
        "_N": 32,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "processedInputDataSizeInBytes",
        "field_text": "int64_t",
        "_N": 33,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "processedInputPositions",
        "field_text": "int64_t",
        "_N": 34,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "outputDataSizeInBytes",
        "field_text": "int64_t",
        "_N": 35,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "outputPositions",
        "field_text": "int64_t",
        "_N": 36,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "physicalWrittenDataSizeInBytes",
        "field_text": "int64_t",
        "_N": 37,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "fullGcCount",
        "field_text": "int",
        "_N": 38,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "fullGcTimeInMillis",
        "field_text": "int64_t",
        "_N": 39,
        "field_local": true
      },
      {
        "field_type": "List<PipelineStats>",
        "field_name": "pipelines",
        "field_text": "List<PipelineStats>",
        "_N": 40,
        "field_local": true
      },
      {
        "field_type": "RuntimeStats",
        "field_name": "runtimeStats",
        "field_text": "RuntimeStats",
        "_N": 41,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Form",
    "enum": true,
    "elements": [
      {
        "element": "IF",
        "_N": 1
      },
      {
        "element": "NULL_IF",
        "_N": 2
      },
      {
        "element": "SWITCH",
        "_N": 3
      },
      {
        "element": "WHEN",
        "_N": 4
      },
      {
        "element": "IS_NULL",
        "_N": 5
      },
      {
        "element": "COALESCE",
        "_N": 6
      },
      {
        "element": "IN",
        "_N": 7
      },
      {
        "element": "AND",
        "_N": 8
      },
      {
        "element": "OR",
        "_N": 9
      },
      {
        "element": "DEREFERENCE",
        "_N": 10
      },
      {
        "element": "ROW_CONSTRUCTOR",
        "_N": 11
      },
      {
        "element": "BIND",
        "_N": 12,
        "_last": true
      }
    ]
  },
  {
    "class_name": "SpecialFormExpression",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<SourceLocation>",
        "field_name": "sourceLocation",
        "field_text": "SourceLocation",
        "optional": true,
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "Form",
        "field_name": "form",
        "field_text": "Form",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Type",
        "field_name": "returnType",
        "field_text": "Type",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "List<RowExpression>",
        "field_name": "arguments",
        "field_text": "List<std::shared_ptr<RowExpression>>",
        "_N": 4,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "RowExpression",
    "json_key": "special"
  },
  {
    "class_name": "AssignUniqueId",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "idVariable",
        "field_text": "VariableReferenceExpression",
        "_N": 3,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.AssignUniqueId"
  },
  {
    "class_name": "Location",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "location",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ConnectorOutputTableHandle",
    "field_name": "connectorOutputTableHandle",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "HiveOutputTableHandle",
        "name": "hiveOutputTableHandle",
        "key": "hive",
        "_N": 1,
        "_last": true
      }
    ],
    "fields": [],
    "cinc": "namespace facebook::presto::protocol {\nvoid to_json(json& j, const std::shared_ptr<ConnectorOutputTableHandle>& p) {\n  if (p == nullptr) {\n    return;\n  }\n  String type = p->_type;\n\n  if (getConnectorKey(type) == \"hive\") {\n    j = *std::static_pointer_cast<HiveOutputTableHandle>(p);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorOutputTableHandle \");\n}\n\nvoid from_json(const json& j, std::shared_ptr<ConnectorOutputTableHandle>& p) {\n  String type;\n  try {\n    type = p->getSubclassKey(j);\n  } catch (json::parse_error& e) {\n    throw ParseError(\n        std::string(e.what()) +\n        \" ConnectorOutputTableHandle  ConnectorOutputTableHandle\");\n  }\n\n  if (getConnectorKey(type) == \"hive\") {\n    std::shared_ptr<HiveOutputTableHandle> k =\n        std::make_shared<HiveOutputTableHandle>();\n    j.get_to(*k);\n    p = std::static_pointer_cast<ConnectorOutputTableHandle>(k);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorOutputTableHandle \");\n}\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "OutputTableHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "ConnectorId",
        "field_name": "connectorId",
        "field_text": "ConnectorId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "ConnectorTransactionHandle",
        "field_name": "transactionHandle",
        "field_text": "ConnectorTransactionHandle",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "ConnectorOutputTableHandle",
        "field_name": "connectorHandle",
        "field_text": "ConnectorOutputTableHandle",
        "_N": 3,
        "field_local": true,
        "optional": true
      }
    ]
  },
  {
    "class_name": "BufferType",
    "enum": true,
    "elements": [
      {
        "element": "PARTITIONED",
        "_N": 1
      },
      {
        "element": "BROADCAST",
        "_N": 2
      },
      {
        "element": "ARBITRARY",
        "_N": 3
      },
      {
        "element": "DISCARDING",
        "_N": 4
      },
      {
        "element": "SPOOLING",
        "_N": 5,
        "_last": true
      }
    ]
  },
  {
    "class_name": "OutputBuffers",
    "struct": true,
    "fields": [
      {
        "field_type": "BufferType",
        "field_name": "type",
        "field_text": "BufferType",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "version",
        "field_text": "int64_t",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "noMoreBufferIds",
        "field_text": "bool",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Map<OutputBufferId, Integer>",
        "field_name": "buffers",
        "field_text": "Map<OutputBufferId, Integer>",
        "_N": 4,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ExecutionWriterTarget",
    "field_name": "executionWriterTarget",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "CreateHandle",
        "name": "createHandle",
        "key": "CreateHandle",
        "_N": 1
      },
      {
        "type": "InsertHandle",
        "name": "insertHandle",
        "key": "InsertHandle",
        "_N": 2
      },
      {
        "type": "DeleteHandle",
        "name": "deleteHandle",
        "key": "DeleteHandle",
        "_N": 3,
        "_last": true
      }
    ],
    "fields": []
  },
  {
    "class_name": "ConnectorTableLayoutHandle",
    "field_name": "connectorTableLayoutHandle",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "HiveTableLayoutHandle",
        "name": "hiveTableLayoutHandle",
        "key": "hive",
        "_N": 1,
        "_last": true
      }
    ],
    "fields": [],
    "cinc": "namespace facebook::presto::protocol {\nvoid to_json(json& j, const std::shared_ptr<ConnectorTableLayoutHandle>& p) {\n  if (p == nullptr) {\n    return;\n  }\n  String type = p->_type;\n\n  if (getConnectorKey(type) == \"hive\") {\n    j = *std::static_pointer_cast<HiveTableLayoutHandle>(p);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorTableLayoutHandle\");\n}\n\nvoid from_json(const json& j, std::shared_ptr<ConnectorTableLayoutHandle>& p) {\n  String type;\n  try {\n    type = p->getSubclassKey(j);\n  } catch (json::parse_error& e) {\n    throw ParseError(\n        std::string(e.what()) +\n        \" ConnectorTableLayoutHandle  ConnectorTableLayoutHandle\");\n  }\n\n  if (getConnectorKey(type) == \"hive\") {\n    auto k = std::make_shared<HiveTableLayoutHandle>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorTableLayoutHandle\");\n}\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "ConnectorTableHandle",
    "field_name": "connectorTableHandle",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "HiveTableHandle",
        "name": "hiveTableHandle",
        "key": "hive",
        "_N": 1,
        "_last": true
      }
    ],
    "fields": [],
    "cinc": "namespace facebook::presto::protocol {\nvoid to_json(json& j, const std::shared_ptr<ConnectorTableHandle>& p) {\n  if (p == nullptr) {\n    return;\n  }\n  String type = p->_type;\n\n  if (getConnectorKey(type) == \"hive\") {\n    j = *std::static_pointer_cast<HiveTableHandle>(p);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorTableHandle\");\n}\n\nvoid from_json(const json& j, std::shared_ptr<ConnectorTableHandle>& p) {\n  String type;\n  try {\n    type = p->getSubclassKey(j);\n  } catch (json::parse_error& e) {\n    throw ParseError(\n        std::string(e.what()) + \" ConnectorTableHandle  ConnectorTableHandle\");\n  }\n\n  if (getConnectorKey(type) == \"hive\") {\n    auto k = std::make_shared<HiveTableHandle>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorTableHandle\");\n}\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "TableHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "ConnectorId",
        "field_name": "connectorId",
        "field_text": "ConnectorId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "ConnectorTableHandle",
        "field_name": "connectorHandle",
        "field_text": "ConnectorTableHandle",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "ConnectorTransactionHandle",
        "field_name": "transaction",
        "field_text": "ConnectorTransactionHandle",
        "_N": 3,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "Optional<ConnectorTableLayoutHandle>",
        "field_name": "connectorTableLayout",
        "field_text": "ConnectorTableLayoutHandle",
        "optional": true,
        "_N": 4,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "DeleteScanInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "TableHandle",
        "field_name": "tableHandle",
        "field_text": "TableHandle",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "AnalyzeTableHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "ConnectorId",
        "field_name": "connectorId",
        "field_text": "ConnectorId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "ConnectorTransactionHandle",
        "field_name": "transactionHandle",
        "field_text": "ConnectorTransactionHandle",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "ConnectorTableHandle",
        "field_name": "connectorHandle",
        "field_text": "ConnectorTableHandle",
        "_N": 3,
        "field_local": true,
        "optional": true
      }
    ]
  },
  {
    "class_name": "TableWriteInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<ExecutionWriterTarget>",
        "field_name": "writerTarget",
        "field_text": "ExecutionWriterTarget",
        "optional": true,
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<AnalyzeTableHandle>",
        "field_name": "analyzeTableHandle",
        "field_text": "AnalyzeTableHandle",
        "optional": true,
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<DeleteScanInfo>",
        "field_name": "deleteScanInfo",
        "field_text": "DeleteScanInfo",
        "optional": true,
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "SplitContext",
    "struct": true,
    "fields": [
      {
        "field_type": "boolean",
        "field_name": "cacheable",
        "field_text": "bool",
        "_N": 1,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ConnectorSplit",
    "field_name": "connectorSplit",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "HiveSplit",
        "name": "hiveSplit",
        "key": "hive",
        "_N": 1
      },
      {
        "type": "RemoteSplit",
        "name": "remoteSplit",
        "key": "$remote",
        "_N": 2
      },
      {
        "type": "EmptySplit",
        "name": "emptySplit",
        "key": "$empty",
        "_N": 3,
        "_last": true
      }
    ],
    "fields": [],
    "cinc": "namespace facebook::presto::protocol {\nvoid to_json(json& j, const std::shared_ptr<ConnectorSplit>& p) {\n  if (p == nullptr) {\n    return;\n  }\n  String type = p->_type;\n\n  if (type == \"$remote\") {\n    j = *std::static_pointer_cast<RemoteSplit>(p);\n    return;\n  }\n  if (type == \"$empty\") {\n    j = *std::static_pointer_cast<EmptySplit>(p);\n    return;\n  }\n  if (getConnectorKey(type) == \"hive\") {\n    j = *std::static_pointer_cast<HiveSplit>(p);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorSplit\");\n}\n\nvoid from_json(const json& j, std::shared_ptr<ConnectorSplit>& p) {\n  String type;\n  try {\n    type = p->getSubclassKey(j);\n  } catch (json::parse_error& e) {\n    throw ParseError(std::string(e.what()) + \" ConnectorSplit\");\n  }\n\n  if (type == \"$remote\") {\n    auto k = std::make_shared<RemoteSplit>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n  if (type == \"$empty\") {\n    auto k = std::make_shared<EmptySplit>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n  if (getConnectorKey(type) == \"hive\") {\n    auto k = std::make_shared<HiveSplit>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorSplit\");\n}\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "Split",
    "struct": true,
    "fields": [
      {
        "field_type": "ConnectorId",
        "field_name": "connectorId",
        "field_text": "ConnectorId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "ConnectorTransactionHandle",
        "field_name": "transactionHandle",
        "field_text": "ConnectorTransactionHandle",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "ConnectorSplit",
        "field_name": "connectorSplit",
        "field_text": "ConnectorSplit",
        "_N": 3,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "Lifespan",
        "field_name": "lifespan",
        "field_text": "Lifespan",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "SplitContext",
        "field_name": "splitContext",
        "field_text": "SplitContext",
        "_N": 5,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ScheduledSplit",
    "hinc": "namespace facebook::presto::protocol {\n\nstruct ScheduledSplit {\n  long sequenceId = {};\n  PlanNodeId planNodeId = {}; // dependency\n  Split split = {};\n\n  bool operator<(const ScheduledSplit& o) const {\n    return sequenceId < o.sequenceId;\n  }\n};\n\nvoid to_json(json& j, const ScheduledSplit& p);\nvoid from_json(const json& j, ScheduledSplit& p);\n\n} // namespace facebook::presto::protocol",
    "struct": true,
    "fields": [
      {
        "field_type": "long",
        "field_name": "sequenceId",
        "field_text": "int64_t",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "PlanNodeId",
        "field_name": "planNodeId",
        "field_text": "PlanNodeId",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Split",
        "field_name": "split",
        "field_text": "Split",
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "TaskSource",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "planNodeId",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Set<ScheduledSplit>",
        "field_name": "splits",
        "field_text": "List<ScheduledSplit>",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Set<Lifespan>",
        "field_name": "noMoreSplitsForLifespan",
        "field_text": "List<Lifespan>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "noMoreSplits",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ResourceEstimates",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<Duration>",
        "field_name": "executionTime",
        "field_text": "Duration",
        "optional": true,
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<Duration>",
        "field_name": "cpuTime",
        "field_text": "Duration",
        "optional": true,
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<DataSize>",
        "field_name": "peakMemory",
        "field_text": "DataSize",
        "optional": true,
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Optional<DataSize>",
        "field_name": "peakTaskMemory",
        "field_text": "DataSize",
        "optional": true,
        "_N": 4,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "SelectedRoleType",
    "enum": true,
    "elements": [
      {
        "element": "ROLE",
        "_N": 1
      },
      {
        "element": "ALL",
        "_N": 2
      },
      {
        "element": "NONE",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "SelectedRole",
    "struct": true,
    "fields": [
      {
        "field_type": "SelectedRoleType",
        "field_name": "type",
        "field_text": "SelectedRoleType",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "role",
        "field_text": "String",
        "optional": true,
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Parameter",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "name",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "TypeSignature",
        "field_name": "type",
        "field_text": "TypeSignature",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Language",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "language",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "NullCallClause",
    "enum": true,
    "elements": [
      {
        "element": "RETURNS_NULL_ON_NULL_INPUT",
        "_N": 1
      },
      {
        "element": "CALLED_ON_NULL_INPUT",
        "_N": 2,
        "_last": true
      }
    ]
  },
  {
    "class_name": "Determinism",
    "enum": true,
    "elements": [
      {
        "element": "DETERMINISTIC",
        "_N": 1
      },
      {
        "element": "NOT_DETERMINISTIC",
        "_N": 2
      }
    ]
  },
  {
    "class_name": "RoutineCharacteristics",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<Language>",
        "field_name": "language",
        "field_text": "Language",
        "optional": true,
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<Determinism>",
        "field_name": "determinism",
        "field_text": "Determinism",
        "optional": true,
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<NullCallClause>",
        "field_name": "nullCallClause",
        "field_text": "NullCallClause",
        "optional": true,
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "LongVariableConstraint",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "name",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "expression",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "TypeVariableConstraint",
    "hinc": "namespace facebook::presto::protocol {\n\nstruct TypeVariableConstraint {\n  String name = {};\n  bool comparableRequired = {};\n  bool orderableRequired = {};\n  String variadicBound = {};\n  bool nonDecimalNumericRequired = {};\n  String boundedBy = {};\n};\nvoid to_json(json& j, const TypeVariableConstraint& p);\nvoid from_json(const json& j, TypeVariableConstraint& p);\n\n} // namespace facebook::presto::protocol",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "name",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "comparableRequired",
        "field_text": "bool",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "orderableRequired",
        "field_text": "bool",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "variadicBound",
        "field_text": "String",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "nonDecimalNumericRequired",
        "field_text": "bool",
        "_N": 5,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "FunctionKind",
    "enum": true,
    "elements": [
      {
        "element": "SCALAR",
        "_N": 1
      },
      {
        "element": "AGGREGATE",
        "_N": 2
      },
      {
        "element": "WINDOW",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "Signature",
    "struct": true,
    "fields": [
      {
        "field_type": "QualifiedObjectName",
        "field_name": "name",
        "field_text": "QualifiedObjectName",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "FunctionKind",
        "field_name": "kind",
        "field_text": "FunctionKind",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<TypeVariableConstraint>",
        "field_name": "typeVariableConstraints",
        "field_text": "List<TypeVariableConstraint>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "List<LongVariableConstraint>",
        "field_name": "longVariableConstraints",
        "field_text": "List<LongVariableConstraint>",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "TypeSignature",
        "field_name": "returnType",
        "field_text": "TypeSignature",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "List<TypeSignature>",
        "field_name": "argumentTypes",
        "field_text": "List<TypeSignature>",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "variableArity",
        "field_text": "bool",
        "_N": 7,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "SqlInvokedFunction",
    "struct": true,
    "fields": [
      {
        "field_type": "List<Parameter>",
        "field_name": "parameters",
        "field_text": "List<Parameter>",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "description",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "RoutineCharacteristics",
        "field_name": "routineCharacteristics",
        "field_text": "RoutineCharacteristics",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "body",
        "field_text": "String",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Signature",
        "field_name": "signature",
        "field_text": "Signature",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "SqlFunctionId",
        "field_name": "functionId",
        "field_text": "SqlFunctionId",
        "_N": 6,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "SessionRepresentation",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "queryId",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<TransactionId>",
        "field_name": "transactionId",
        "field_text": "TransactionId",
        "optional": true,
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "clientTransactionSupport",
        "field_text": "bool",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "user",
        "field_text": "String",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "principal",
        "field_text": "String",
        "optional": true,
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "source",
        "field_text": "String",
        "optional": true,
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "catalog",
        "field_text": "String",
        "optional": true,
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "schema",
        "field_text": "String",
        "optional": true,
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "traceToken",
        "field_text": "String",
        "optional": true,
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "TimeZoneKey",
        "field_name": "timeZoneKey",
        "field_text": "TimeZoneKey",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "Locale",
        "field_name": "locale",
        "field_text": "Locale",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "remoteUserAddress",
        "field_text": "String",
        "optional": true,
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "userAgent",
        "field_text": "String",
        "optional": true,
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "clientInfo",
        "field_text": "String",
        "optional": true,
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "Set<String>",
        "field_name": "clientTags",
        "field_text": "List<String>",
        "_N": 15,
        "field_local": true
      },
      {
        "field_type": "ResourceEstimates",
        "field_name": "resourceEstimates",
        "field_text": "ResourceEstimates",
        "_N": 16,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "startTime",
        "field_text": "int64_t",
        "_N": 17,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "systemProperties",
        "field_text": "Map<String, String>",
        "_N": 18,
        "field_local": true
      },
      {
        "field_type": "Map<ConnectorId, Map<String, String>>",
        "field_name": "catalogProperties",
        "field_text": "Map<ConnectorId, Map<String, String>>",
        "_N": 19,
        "field_local": true
      },
      {
        "field_type": "Map<String, Map<String, String>>",
        "field_name": "unprocessedCatalogProperties",
        "field_text": "Map<String, Map<String, String>>",
        "_N": 20,
        "field_local": true
      },
      {
        "field_type": "Map<String, SelectedRole>",
        "field_name": "roles",
        "field_text": "Map<String, SelectedRole>",
        "_N": 21,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "preparedStatements",
        "field_text": "Map<String, String>",
        "_N": 22,
        "field_local": true
      },
      {
        "field_type": "Map<SqlFunctionId, SqlInvokedFunction>",
        "field_name": "sessionFunctions",
        "field_text": "Map<SqlFunctionId, SqlInvokedFunction>",
        "_N": 23,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "TaskUpdateRequest",
    "struct": true,
    "fields": [
      {
        "field_type": "SessionRepresentation",
        "field_name": "session",
        "field_text": "SessionRepresentation",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "extraCredentials",
        "field_text": "Map<String, String>",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<byte[]>",
        "field_name": "fragment",
        "field_text": "String",
        "optional": true,
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "List<TaskSource>",
        "field_name": "sources",
        "field_text": "List<TaskSource>",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "OutputBuffers",
        "field_name": "outputIds",
        "field_text": "OutputBuffers",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Optional<TableWriteInfo>",
        "field_name": "tableWriteInfo",
        "field_text": "TableWriteInfo",
        "optional": true,
        "_N": 6,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Specification",
    "struct": true,
    "fields": [
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "partitionBy",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<OrderingScheme>",
        "field_name": "orderingScheme",
        "field_text": "OrderingScheme",
        "optional": true,
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "WindowType",
    "enum": true,
    "elements": [
      {
        "element": "RANGE",
        "_N": 1
      },
      {
        "element": "ROWS",
        "_N": 2
      }
    ]
  },
  {
    "class_name": "BoundType",
    "enum": true,
    "elements": [
      {
        "element": "UNBOUNDED_PRECEDING",
        "_N": 1
      },
      {
        "element": "PRECEDING",
        "_N": 2
      },
      {
        "element": "CURRENT_ROW",
        "_N": 3
      },
      {
        "element": "FOLLOWING",
        "_N": 4
      },
      {
        "element": "UNBOUNDED_FOLLOWING",
        "_N": 5,
        "_last": true
      }
    ]
  },
  {
    "class_name": "Frame",
    "struct": true,
    "fields": [
      {
        "field_type": "WindowType",
        "field_name": "type",
        "field_text": "WindowType",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "BoundType",
        "field_name": "startType",
        "field_text": "BoundType",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "startValue",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "BoundType",
        "field_name": "endType",
        "field_text": "BoundType",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "endValue",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "originalStartValue",
        "field_text": "String",
        "optional": true,
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "originalEndValue",
        "field_text": "String",
        "optional": true,
        "_N": 7,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Function",
    "struct": true,
    "fields": [
      {
        "field_type": "CallExpression",
        "field_name": "functionCall",
        "field_text": "CallExpression",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Frame",
        "field_name": "frame",
        "field_text": "Frame",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "ignoreNulls",
        "field_text": "bool",
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "WindowNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "Specification",
        "field_name": "specification",
        "field_text": "Specification",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Map<VariableReferenceExpression, Function>",
        "field_name": "windowFunctions",
        "field_text": "Map<VariableReferenceExpression, Function>",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "hashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Set<VariableReferenceExpression>",
        "field_name": "prePartitionedInputs",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "preSortedOrderPrefix",
        "field_text": "int",
        "_N": 7,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.WindowNode"
  },
  {
    "class_name": "DeleteHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "TableHandle",
        "field_name": "handle",
        "field_text": "TableHandle",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "SchemaTableName",
        "field_name": "schemaTableName",
        "field_text": "SchemaTableName",
        "_N": 2,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ExecutionWriterTarget",
    "json_key": "DeleteHandle"
  },
  {
    "class_name": "ValuesNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "outputVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<List<RowExpression>>",
        "field_name": "rows",
        "field_text": "List<List<std::shared_ptr<RowExpression>>>",
        "_N": 3,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": ".ValuesNode"
  },
  {
    "class_name": "ConnectorInsertTableHandle",
    "field_name": "connectorInsertTableHandle",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "HiveInsertTableHandle",
        "name": "hiveInsertTableHandle",
        "key": "hive",
        "_N": 1,
        "_last": true
      }
    ],
    "fields": []
  },
  {
    "class_name": "InsertTableHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "ConnectorId",
        "field_name": "connectorId",
        "field_text": "ConnectorId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "ConnectorTransactionHandle",
        "field_name": "transactionHandle",
        "field_text": "ConnectorTransactionHandle",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "ConnectorInsertTableHandle",
        "field_name": "connectorHandle",
        "field_text": "ConnectorInsertTableHandle",
        "_N": 3,
        "field_local": true,
        "optional": true
      }
    ]
  },
  {
    "class_name": "RefreshMaterializedViewHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "InsertTableHandle",
        "field_name": "handle",
        "field_text": "InsertTableHandle",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "SchemaTableName",
        "field_name": "schemaTableName",
        "field_text": "SchemaTableName",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Locality",
    "enum": true,
    "elements": [
      {
        "element": "UNKNOWN",
        "_N": 1
      },
      {
        "element": "LOCAL",
        "_N": 2
      },
      {
        "element": "REMOTE",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "Assignments",
    "struct": true,
    "fields": [
      {
        "field_type": "Map<VariableReferenceExpression, RowExpression>",
        "field_name": "assignments",
        "field_text": "Map<VariableReferenceExpression, std::shared_ptr<RowExpression>>",
        "_N": 1,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ProjectNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "Assignments",
        "field_name": "assignments",
        "field_text": "Assignments",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Locality",
        "field_name": "locality",
        "field_text": "Locality",
        "_N": 4,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": ".ProjectNode"
  },
  {
    "class_name": "HostAddress",
    "hinc": "namespace facebook::presto::protocol {\n\nusing HostAddress = std::string;\n\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "ErrorType",
    "enum": true,
    "elements": [
      {
        "element": "USER_ERROR",
        "_N": 1
      },
      {
        "element": "INTERNAL_ERROR",
        "_N": 2
      },
      {
        "element": "INSUFFICIENT_RESOURCES",
        "_N": 3
      },
      {
        "element": "EXTERNAL",
        "_N": 4,
        "_last": true
      }
    ]
  },
  {
    "class_name": "ErrorCode",
    "struct": true,
    "fields": [
      {
        "field_type": "int",
        "field_name": "code",
        "field_text": "int",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "name",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "ErrorType",
        "field_name": "type",
        "field_text": "ErrorType",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "retriable",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ErrorLocation",
    "struct": true,
    "fields": [
      {
        "field_type": "int",
        "field_name": "lineNumber",
        "field_text": "int",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "columnNumber",
        "field_text": "int",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ExecutionFailureInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "type",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "message",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "ExecutionFailureInfo",
        "field_name": "cause",
        "field_text": "ExecutionFailureInfo",
        "_N": 3,
        "optional": true,
        "field_local": true
      },
      {
        "field_type": "List<ExecutionFailureInfo>",
        "field_name": "suppressed",
        "field_text": "List<ExecutionFailureInfo>",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "List<String>",
        "field_name": "stack",
        "field_text": "List<String>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "ErrorLocation",
        "field_name": "errorLocation",
        "field_text": "ErrorLocation",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "ErrorCode",
        "field_name": "errorCode",
        "field_text": "ErrorCode",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "HostAddress",
        "field_name": "remoteHost",
        "field_text": "HostAddress",
        "_N": 8,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "PageBufferInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "int",
        "field_name": "partition",
        "field_text": "int",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "bufferedPages",
        "field_text": "int64_t",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "bufferedBytes",
        "field_text": "int64_t",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "rowsAdded",
        "field_text": "int64_t",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "pagesAdded",
        "field_text": "int64_t",
        "_N": 5,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "BufferInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "OutputBufferId",
        "field_name": "bufferId",
        "field_text": "OutputBufferId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "finished",
        "field_text": "bool",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "bufferedPages",
        "field_text": "int",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "pagesSent",
        "field_text": "int64_t",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "PageBufferInfo",
        "field_name": "pageBufferInfo",
        "field_text": "PageBufferInfo",
        "_N": 5,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Partitioning",
    "struct": true,
    "fields": [
      {
        "field_type": "PartitioningHandle",
        "field_name": "handle",
        "field_text": "PartitioningHandle",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "List<RowExpression>",
        "field_name": "arguments",
        "field_text": "List<std::shared_ptr<RowExpression>>",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "PartitioningScheme",
    "struct": true,
    "fields": [
      {
        "field_type": "Partitioning",
        "field_name": "partitioning",
        "field_text": "Partitioning",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "outputLayout",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "hashColumn",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "replicateNullsAndAny",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<int[]>",
        "field_name": "bucketToPartition",
        "field_text": "List<int>",
        "optional": true,
        "_N": 5,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "TableWriterNode",
    "cinc": "namespace facebook::presto::protocol {\nTableWriterNode::TableWriterNode() noexcept {\n  _type = \"com.facebook.presto.sql.planner.plan.TableWriterNode\";\n}\n\nvoid to_json(json& j, const TableWriterNode& p) {\n  j = json::object();\n  j[\"@type\"] = \"com.facebook.presto.sql.planner.plan.TableWriterNode\";\n  to_json_key(j, \"id\", p.id, \"TableWriterNode\", \"PlanNodeId\", \"id\");\n  to_json_key(j, \"source\", p.source, \"TableWriterNode\", \"PlanNode\", \"source\");\n  to_json_key(\n      j,\n      \"rowCountVariable\",\n      p.rowCountVariable,\n      \"TableWriterNode\",\n      \"VariableReferenceExpression\",\n      \"rowCountVariable\");\n  to_json_key(\n      j,\n      \"fragmentVariable\",\n      p.fragmentVariable,\n      \"TableWriterNode\",\n      \"VariableReferenceExpression\",\n      \"fragmentVariable\");\n  to_json_key(\n      j,\n      \"tableCommitContextVariable\",\n      p.tableCommitContextVariable,\n      \"TableWriterNode\",\n      \"VariableReferenceExpression\",\n      \"tableCommitContextVariable\");\n  to_json_key(\n      j,\n      \"columns\",\n      p.columns,\n      \"TableWriterNode\",\n      \"List<VariableReferenceExpression>\",\n      \"columns\");\n  to_json_key(\n      j,\n      \"columnNames\",\n      p.columnNames,\n      \"TableWriterNode\",\n      \"List<String>\",\n      \"columnNames\");\n  to_json_key(\n      j,\n      \"notNullColumnVariables\",\n      p.notNullColumnVariables,\n      \"TableWriterNode\",\n      \"List<VariableReferenceExpression>\",\n      \"notNullColumnVariables\");\n  to_json_key(\n      j,\n      \"partitioningScheme\",\n      p.partitioningScheme,\n      \"TableWriterNode\",\n      \"PartitioningScheme\",\n      \"partitioningScheme\");\n  to_json_key(\n      j,\n      \"preferredShufflePartitioningScheme\",\n      p.preferredShufflePartitioningScheme,\n      \"TableWriterNode\",\n      \"PartitioningScheme\",\n      \"preferredShufflePartitioningScheme\");\n}\n\nvoid from_json(const json& j, TableWriterNode& p) {\n  p._type = j[\"@type\"];\n  from_json_key(j, \"id\", p.id, \"TableWriterNode\", \"PlanNodeId\", \"id\");\n  from_json_key(j, \"source\", p.source, \"TableWriterNode\", \"PlanNode\", \"source\");\n  from_json_key(\n      j,\n      \"rowCountVariable\",\n      p.rowCountVariable,\n      \"TableWriterNode\",\n      \"VariableReferenceExpression\",\n      \"rowCountVariable\");\n  from_json_key(\n      j,\n      \"fragmentVariable\",\n      p.fragmentVariable,\n      \"TableWriterNode\",\n      \"VariableReferenceExpression\",\n      \"fragmentVariable\");\n  from_json_key(\n      j,\n      \"tableCommitContextVariable\",\n      p.tableCommitContextVariable,\n      \"TableWriterNode\",\n      \"VariableReferenceExpression\",\n      \"tableCommitContextVariable\");\n  from_json_key(\n      j,\n      \"columns\",\n      p.columns,\n      \"TableWriterNode\",\n      \"List<VariableReferenceExpression>\",\n      \"columns\");\n  from_json_key(\n      j,\n      \"columnNames\",\n      p.columnNames,\n      \"TableWriterNode\",\n      \"List<String>\",\n      \"columnNames\");\n  from_json_key(\n      j,\n      \"notNullColumnVariables\",\n      p.notNullColumnVariables,\n      \"TableWriterNode\",\n      \"List<VariableReferenceExpression>\",\n      \"notNullColumnVariables\");\n  from_json_key(\n      j,\n      \"partitioningScheme\",\n      p.partitioningScheme,\n      \"TableWriterNode\",\n      \"PartitioningScheme\",\n      \"partitioningScheme\");\n  from_json_key(\n      j,\n      \"preferredShufflePartitioningScheme\",\n      p.preferredShufflePartitioningScheme,\n      \"TableWriterNode\",\n      \"PartitioningScheme\",\n      \"preferredShufflePartitioningScheme\");\n}\n} // namespace facebook::presto::protocol",
    "hinc": "namespace facebook::presto::protocol {\nstruct TableWriterNode : public PlanNode {\n  std::shared_ptr<PlanNode> source = {};\n  // TODO Add target\n  VariableReferenceExpression rowCountVariable = {};\n  VariableReferenceExpression fragmentVariable = {};\n  VariableReferenceExpression tableCommitContextVariable = {};\n  List<VariableReferenceExpression> columns = {};\n  List<String> columnNames = {};\n  List<VariableReferenceExpression> notNullColumnVariables = {};\n  std::shared_ptr<PartitioningScheme> partitioningScheme = {};\n  std::shared_ptr<PartitioningScheme> preferredShufflePartitioningScheme = {};\n  // TODO Add statisticsAggregation\n\n  TableWriterNode() noexcept;\n};\nvoid to_json(json& j, const TableWriterNode& p);\nvoid from_json(const json& j, TableWriterNode& p);\n} // namespace facebook::presto::protocol",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "Optional<WriterTarget>",
        "field_name": "target",
        "field_text": "WriterTarget",
        "optional": true,
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "rowCountVariable",
        "field_text": "VariableReferenceExpression",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "fragmentVariable",
        "field_text": "VariableReferenceExpression",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "tableCommitContextVariable",
        "field_text": "VariableReferenceExpression",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "columns",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "List<String>",
        "field_name": "columnNames",
        "field_text": "List<String>",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "Set<VariableReferenceExpression>",
        "field_name": "notNullColumnVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "Optional<PartitioningScheme>",
        "field_name": "partitioningScheme",
        "field_text": "PartitioningScheme",
        "optional": true,
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "Optional<PartitioningScheme>",
        "field_name": "preferredShufflePartitioningScheme",
        "field_text": "PartitioningScheme",
        "optional": true,
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "Optional<StatisticAggregations>",
        "field_name": "statisticsAggregation",
        "field_text": "StatisticAggregations",
        "optional": true,
        "_N": 12,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.TableWriterNode"
  },
  {
    "class_name": "GroupIdNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "List<List<VariableReferenceExpression>>",
        "field_name": "groupingSets",
        "field_text": "List<List<VariableReferenceExpression>>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Map<VariableReferenceExpression, VariableReferenceExpression>",
        "field_name": "groupingColumns",
        "field_text": "Map<VariableReferenceExpression, VariableReferenceExpression>",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "aggregationArguments",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "groupIdVariable",
        "field_text": "VariableReferenceExpression",
        "_N": 6,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.GroupIdNode"
  },
  {
    "class_name": "HiveMetadataUpdateHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "UUID",
        "field_name": "requestId",
        "field_text": "UUID",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "SchemaTableName",
        "field_name": "schemaTableName",
        "field_text": "SchemaTableName",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "partitionName",
        "field_text": "String",
        "optional": true,
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "fileName",
        "field_text": "String",
        "optional": true,
        "_N": 4,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorMetadataUpdateHandle",
    "json_key": "hive"
  },
  {
    "class_name": "VariableStatsEstimate",
    "struct": true,
    "fields": [
      {
        "field_type": "double",
        "field_name": "lowValue",
        "field_text": "double",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "highValue",
        "field_text": "double",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "nullsFraction",
        "field_text": "double",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "averageRowSize",
        "field_text": "double",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "distinctValuesCount",
        "field_text": "double",
        "_N": 5,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "PlanNodeStatsEstimate",
    "struct": true,
    "fields": [
      {
        "field_type": "double",
        "field_name": "outputRowCount",
        "field_text": "double",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "totalSize",
        "field_text": "double",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "confident",
        "field_text": "bool",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Map<VariableReferenceExpression, VariableStatsEstimate>",
        "field_name": "variableStatistics",
        "field_text": "Map<VariableReferenceExpression, VariableStatsEstimate>",
        "_N": 4,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "EmptySplit",
    "struct": true,
    "fields": [
      {
        "field_type": "ConnectorId",
        "field_name": "connectorId",
        "field_text": "ConnectorId",
        "_N": 1,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorSplit",
    "json_key": "$empty"
  },
  {
    "class_name": "RemoteTransactionHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<String>",
        "field_name": "dummy",
        "field_text": "String",
        "optional": true,
        "_N": 1,
        "field_local": true,
        "last": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorTransactionHandle",
    "json_key": "$remote"
  },
  {
    "class_name": "RuntimeUnit",
    "enum": true,
    "elements": [
      {
        "element": "NONE",
        "_N": 1
      },
      {
        "element": "NANO",
        "_N": 2
      },
      {
        "element": "BYTE",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "RuntimeMetric",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "name",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "RuntimeUnit",
        "field_name": "unit",
        "field_text": "RuntimeUnit",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "sum",
        "field_text": "int64_t",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "count",
        "field_text": "int64_t",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "max",
        "field_text": "int64_t",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "min",
        "field_text": "int64_t",
        "_N": 6,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Block",
    "cinc": "namespace facebook::presto::protocol {\n\nvoid to_json(json& j, const Block& p) {\n  j = p.data;\n}\n\nvoid from_json(const json& j, Block& p) {\n  p.data = std::string(j);\n}\n} // namespace facebook::presto::protocol",
    "hinc": "namespace facebook::presto::protocol {\n\nstruct Block {\n  std::string data;\n};\n\nvoid to_json(json& j, const Block& p);\n\nvoid from_json(const json& j, Block& p);\n\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "ValueEntry",
    "hinc": "namespace facebook::presto::protocol {\n\nclass ValueEntry {\n public:\n  Type type;\n  std::shared_ptr<Block> block;\n};\n\nvoid to_json(json& j, const ValueEntry& p);\nvoid from_json(const json& j, ValueEntry& p);\n\n} // namespace facebook::presto::protocol",
    "struct": true,
    "fields": [
      {
        "field_type": "Type",
        "field_name": "type",
        "field_text": "Type",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Block",
        "field_name": "block",
        "field_text": "Block",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "EquatableValueSet",
    "struct": true,
    "fields": [
      {
        "field_type": "Type",
        "field_name": "type",
        "field_text": "Type",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "whiteList",
        "field_text": "bool",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Set<ValueEntry>",
        "field_name": "entries",
        "field_text": "List<ValueEntry>",
        "_N": 3,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ValueSet",
    "json_key": "equatable"
  },
  {
    "class_name": "TaskState",
    "enum": true,
    "elements": [
      {
        "element": "PLANNED",
        "_N": 1
      },
      {
        "element": "RUNNING",
        "_N": 2
      },
      {
        "element": "FINISHED",
        "_N": 3
      },
      {
        "element": "CANCELED",
        "_N": 4
      },
      {
        "element": "ABORTED",
        "_N": 5
      },
      {
        "element": "FAILED",
        "_N": 6,
        "_last": true
      }
    ]
  },
  {
    "class_name": "TaskStatus",
    "struct": true,
    "fields": [
      {
        "field_type": "long",
        "field_name": "taskInstanceIdLeastSignificantBits",
        "field_text": "int64_t",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "taskInstanceIdMostSignificantBits",
        "field_text": "int64_t",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "version",
        "field_text": "int64_t",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "TaskState",
        "field_name": "state",
        "field_text": "TaskState",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "URI",
        "field_name": "self",
        "field_text": "URI",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Set<Lifespan>",
        "field_name": "completedDriverGroups",
        "field_text": "List<Lifespan>",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "List<ExecutionFailureInfo>",
        "field_name": "failures",
        "field_text": "List<ExecutionFailureInfo>",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "queuedPartitionedDrivers",
        "field_text": "int",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "runningPartitionedDrivers",
        "field_text": "int",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "outputBufferUtilization",
        "field_text": "double",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "outputBufferOverutilized",
        "field_text": "bool",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "physicalWrittenDataSizeInBytes",
        "field_text": "int64_t",
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "memoryReservationInBytes",
        "field_text": "int64_t",
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "systemMemoryReservationInBytes",
        "field_text": "int64_t",
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "peakNodeTotalMemoryReservationInBytes",
        "field_text": "int64_t",
        "_N": 15,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "fullGcCount",
        "field_text": "int64_t",
        "_N": 16,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "fullGcTimeInMillis",
        "field_text": "int64_t",
        "_N": 17,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalCpuTimeInNanos",
        "field_text": "int64_t",
        "_N": 18,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "taskAgeInMillis",
        "field_text": "int64_t",
        "_N": 19,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "queuedPartitionedSplitsWeight",
        "field_text": "int64_t",
        "_N": 20,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "runningPartitionedSplitsWeight",
        "field_text": "int64_t",
        "_N": 21,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "BufferState",
    "enum": true,
    "elements": [
      {
        "element": "OPEN",
        "_N": 1
      },
      {
        "element": "NO_MORE_BUFFERS",
        "_N": 2
      },
      {
        "element": "NO_MORE_PAGES",
        "_N": 3
      },
      {
        "element": "FLUSHING",
        "_N": 4
      },
      {
        "element": "FINISHED",
        "_N": 5
      },
      {
        "element": "FAILED",
        "_N": 6,
        "_last": true
      }
    ]
  },
  {
    "class_name": "OutputBufferInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "type",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "BufferState",
        "field_name": "state",
        "field_text": "BufferState",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "canAddBuffers",
        "field_text": "bool",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "canAddPages",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalBufferedBytes",
        "field_text": "int64_t",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalBufferedPages",
        "field_text": "int64_t",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalRowsSent",
        "field_text": "int64_t",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "totalPagesSent",
        "field_text": "int64_t",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "List<BufferInfo>",
        "field_name": "buffers",
        "field_text": "List<BufferInfo>",
        "_N": 9,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ConnectorMetadataUpdateHandle",
    "field_name": "connectorMetadataUpdateHandle",
    "abstract": true,
    "super_class": "JsonEncodedSubclass",
    "subclasses": [
      {
        "type": "HiveMetadataUpdateHandle",
        "name": "hiveMetadataUpdateHandle",
        "key": "hive",
        "_N": 1,
        "_last": true
      }
    ],
    "fields": [],
    "cinc": "namespace facebook::presto::protocol {\nvoid to_json(json& j, const std::shared_ptr<ConnectorMetadataUpdateHandle>& p) {\n  if (p == nullptr) {\n    return;\n  }\n  String type = p->_type;\n\n  if (getConnectorKey(type) == \"hive\") {\n    j = *std::static_pointer_cast<HiveMetadataUpdateHandle>(p);\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorMetadataUpdateHandle\");\n}\n\nvoid from_json(\n    const json& j,\n    std::shared_ptr<ConnectorMetadataUpdateHandle>& p) {\n  String type;\n  try {\n    type = p->getSubclassKey(j);\n  } catch (json::parse_error& e) {\n    throw ParseError(std::string(e.what()) + \" ConnectorMetadataUpdateHandle\");\n  }\n\n  if (getConnectorKey(type) == \"hive\") {\n    auto k = std::make_shared<HiveMetadataUpdateHandle>();\n    j.get_to(*k);\n    p = k;\n    return;\n  }\n\n  throw TypeError(type + \" no abstract type ConnectorMetadataUpdateHandle\");\n}\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "MetadataUpdates",
    "struct": true,
    "fields": [
      {
        "field_type": "ConnectorId",
        "field_name": "connectorId",
        "field_text": "ConnectorId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "List<ConnectorMetadataUpdateHandle>",
        "field_name": "metadataUpdates",
        "field_text": "List<std::shared_ptr<ConnectorMetadataUpdateHandle>>",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "TaskInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "TaskId",
        "field_name": "taskId",
        "field_text": "TaskId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "TaskStatus",
        "field_name": "taskStatus",
        "field_text": "TaskStatus",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "DateTime",
        "field_name": "lastHeartbeat",
        "field_text": "DateTime",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "OutputBufferInfo",
        "field_name": "outputBuffers",
        "field_text": "OutputBufferInfo",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Set<PlanNodeId>",
        "field_name": "noMoreSplits",
        "field_text": "List<PlanNodeId>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "TaskStats",
        "field_name": "stats",
        "field_text": "TaskStats",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "needsPlan",
        "field_text": "bool",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "MetadataUpdates",
        "field_name": "metadataUpdates",
        "field_text": "MetadataUpdates",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "nodeId",
        "field_text": "String",
        "_N": 9,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "MemoryAllocation",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "tag",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "allocation",
        "field_text": "int64_t",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "MemoryPoolInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "long",
        "field_name": "maxBytes",
        "field_text": "int64_t",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "reservedBytes",
        "field_text": "int64_t",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "reservedRevocableBytes",
        "field_text": "int64_t",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Map<QueryId, Long>",
        "field_name": "queryMemoryReservations",
        "field_text": "Map<QueryId, Long>",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Map<QueryId, List<MemoryAllocation>>",
        "field_name": "queryMemoryAllocations",
        "field_text": "Map<QueryId, List<MemoryAllocation>>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Map<QueryId, Long>",
        "field_name": "queryMemoryRevocableReservations",
        "field_text": "Map<QueryId, Long>",
        "_N": 6,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "MemoryInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "DataSize",
        "field_name": "totalNodeMemory",
        "field_text": "DataSize",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Map<MemoryPoolId, MemoryPoolInfo>",
        "field_name": "pools",
        "field_text": "Map<MemoryPoolId, MemoryPoolInfo>",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "NodeVersion",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "version",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "NodeStatus",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "nodeId",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "NodeVersion",
        "field_name": "nodeVersion",
        "field_text": "NodeVersion",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "environment",
        "field_text": "String",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "coordinator",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Duration",
        "field_name": "uptime",
        "field_text": "Duration",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "externalAddress",
        "field_text": "String",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "internalAddress",
        "field_text": "String",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "MemoryInfo",
        "field_name": "memoryInfo",
        "field_text": "MemoryInfo",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "processors",
        "field_text": "int",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "processCpuLoad",
        "field_text": "double",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "systemCpuLoad",
        "field_text": "double",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "heapUsed",
        "field_text": "int64_t",
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "heapAvailable",
        "field_text": "int64_t",
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "nonHeapUsed",
        "field_text": "int64_t",
        "_N": 14,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "PlanCostEstimate",
    "struct": true,
    "fields": [
      {
        "field_type": "double",
        "field_name": "cpuCost",
        "field_text": "double",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "maxMemory",
        "field_text": "double",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "maxMemoryWhenOutputting",
        "field_text": "double",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "double",
        "field_name": "networkCost",
        "field_text": "double",
        "_N": 4,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "StatsAndCosts",
    "struct": true,
    "fields": [
      {
        "field_type": "Map<PlanNodeId, PlanNodeStatsEstimate>",
        "field_name": "stats",
        "field_text": "Map<PlanNodeId, PlanNodeStatsEstimate>",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Map<PlanNodeId, PlanCostEstimate>",
        "field_name": "costs",
        "field_text": "Map<PlanNodeId, PlanCostEstimate>",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "LimitNodeStep",
    "enum": true,
    "elements": [
      {
        "element": "PARTIAL",
        "_N": 1
      },
      {
        "element": "FINAL",
        "_N": 2,
        "_last": true
      }
    ]
  },
  {
    "class_name": "LimitNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "long",
        "field_name": "count",
        "field_text": "int64_t",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "LimitNodeStep",
        "field_name": "step",
        "field_text": "LimitNodeStep",
        "_N": 4,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": ".LimitNode"
  },
  {
    "class_name": "HivePartitioningHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "int",
        "field_name": "bucketCount",
        "field_text": "int",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "OptionalInt",
        "field_name": "maxCompatibleBucketCount",
        "field_text": "int",
        "optional": true,
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "BucketFunctionType",
        "field_name": "bucketFunctionType",
        "field_text": "BucketFunctionType",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Optional<List<HiveType>>",
        "field_name": "hiveTypes",
        "field_text": "List<HiveType>",
        "optional": true,
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<List<Type>>",
        "field_name": "types",
        "field_text": "List<Type>",
        "optional": true,
        "_N": 5,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorPartitioningHandle",
    "json_key": "hive"
  },
  {
    "class_name": "ExchangeNodeType",
    "enum": true,
    "elements": [
      {
        "element": "GATHER",
        "_N": 1
      },
      {
        "element": "REPARTITION",
        "_N": 2
      },
      {
        "element": "REPLICATE",
        "_N": 3
      }
    ]
  },
  {
    "class_name": "ExchangeNodeScope",
    "enum": true,
    "elements": [
      {
        "element": "LOCAL",
        "_N": 1
      },
      {
        "element": "REMOTE_STREAMING",
        "_N": 2
      },
      {
        "element": "REMOTE_MATERIALIZED",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "ExchangeNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "ExchangeNodeType",
        "field_name": "type",
        "field_text": "ExchangeNodeType",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "ExchangeNodeScope",
        "field_name": "scope",
        "field_text": "ExchangeNodeScope",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "PartitioningScheme",
        "field_name": "partitioningScheme",
        "field_text": "PartitioningScheme",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "List<PlanNode>",
        "field_name": "sources",
        "field_text": "List<std::shared_ptr<PlanNode>>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "List<List<VariableReferenceExpression>>",
        "field_name": "inputs",
        "field_text": "List<List<VariableReferenceExpression>>",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "ensureSourceOrdering",
        "field_text": "bool",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "Optional<OrderingScheme>",
        "field_name": "orderingScheme",
        "field_text": "OrderingScheme",
        "optional": true,
        "_N": 8,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.ExchangeNode"
  },
  {
    "class_name": "RemoteSourceNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "List<PlanFragmentId>",
        "field_name": "sourceFragmentIds",
        "field_text": "List<PlanFragmentId>",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "outputVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "ensureSourceOrdering",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<OrderingScheme>",
        "field_name": "orderingScheme",
        "field_text": "OrderingScheme",
        "optional": true,
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "ExchangeNode.Type",
        "field_name": "exchangeType",
        "field_text": "ExchangeNodeType",
        "_N": 6,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.RemoteSourceNode"
  },
  {
    "class_name": "ServerInfo",
    "struct": true,
    "fields": [
      {
        "field_type": "NodeVersion",
        "field_name": "nodeVersion",
        "field_text": "NodeVersion",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "environment",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "coordinator",
        "field_text": "bool",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "starting",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<Duration>",
        "field_name": "uptime",
        "field_text": "Duration",
        "optional": true,
        "_N": 5,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "CreateHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "OutputTableHandle",
        "field_name": "handle",
        "field_text": "OutputTableHandle",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "SchemaTableName",
        "field_name": "schemaTableName",
        "field_text": "SchemaTableName",
        "_N": 2,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ExecutionWriterTarget",
    "json_key": "CreateHandle"
  },
  {
    "class_name": "BuiltInFunctionHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "Signature",
        "field_name": "signature",
        "field_text": "Signature",
        "_N": 1,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "FunctionHandle",
    "json_key": "$static"
  },
  {
    "class_name": "DistributionType",
    "enum": true,
    "elements": [
      {
        "element": "PARTITIONED",
        "_N": 1
      },
      {
        "element": "REPLICATED",
        "_N": 2,
        "_last": true
      }
    ]
  },
  {
    "class_name": "EquiJoinClause",
    "struct": true,
    "fields": [
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "left",
        "field_text": "VariableReferenceExpression",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "right",
        "field_text": "VariableReferenceExpression",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "JoinNodeType",
    "enum": true,
    "elements": [
      {
        "element": "INNER",
        "_N": 1
      },
      {
        "element": "LEFT",
        "_N": 2
      },
      {
        "element": "RIGHT",
        "_N": 3
      },
      {
        "element": "FULL",
        "_N": 4,
        "_last": true
      }
    ]
  },
  {
    "class_name": "JoinNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "JoinNodeType",
        "field_name": "type",
        "field_text": "JoinNodeType",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "PlanNode",
        "field_name": "left",
        "field_text": "PlanNode",
        "_N": 3,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "PlanNode",
        "field_name": "right",
        "field_text": "PlanNode",
        "_N": 4,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "List<EquiJoinClause>",
        "field_name": "criteria",
        "field_text": "List<EquiJoinClause>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "outputVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "Optional<RowExpression>",
        "field_name": "filter",
        "field_text": "std::shared_ptr<RowExpression>",
        "optional": true,
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "leftHashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "rightHashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "Optional<DistributionType>",
        "field_name": "distributionType",
        "field_text": "DistributionType",
        "optional": true,
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "Map<String, VariableReferenceExpression>",
        "field_name": "dynamicFilters",
        "field_text": "Map<String, VariableReferenceExpression>",
        "_N": 11,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.JoinNode"
  },
  {
    "class_name": "SystemPartitioning",
    "enum": true,
    "elements": [
      {
        "element": "SINGLE",
        "_N": 1
      },
      {
        "element": "FIXED",
        "_N": 2
      },
      {
        "element": "SOURCE",
        "_N": 3
      },
      {
        "element": "SCALED",
        "_N": 4
      },
      {
        "element": "COORDINATOR_ONLY",
        "_N": 5
      },
      {
        "element": "ARBITRARY",
        "_N": 6,
        "_last": true
      }
    ]
  },
  {
    "class_name": "SystemPartitionFunction",
    "enum": true,
    "elements": [
      {
        "element": "SINGLE",
        "_N": 1
      },
      {
        "element": "HASH",
        "_N": 2
      },
      {
        "element": "ROUND_ROBIN",
        "_N": 3
      },
      {
        "element": "BROADCAST",
        "_N": 4
      },
      {
        "element": "UNKNOWN",
        "_N": 5,
        "_last": true
      }
    ]
  },
  {
    "class_name": "SystemPartitioningHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "SystemPartitioning",
        "field_name": "partitioning",
        "field_text": "SystemPartitioning",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "SystemPartitionFunction",
        "field_name": "function",
        "field_text": "SystemPartitionFunction",
        "_N": 2,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorPartitioningHandle",
    "json_key": "$remote"
  },
  {
    "class_name": "Bound",
    "enum": true,
    "elements": [
      {
        "element": "BELOW",
        "_N": 1
      },
      {
        "element": "EXACTLY",
        "_N": 2
      },
      {
        "element": "ABOVE",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "Marker",
    "struct": true,
    "fields": [
      {
        "field_type": "Type",
        "field_name": "type",
        "field_text": "Type",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<Block>",
        "field_name": "valueBlock",
        "field_text": "Block",
        "optional": true,
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Bound",
        "field_name": "bound",
        "field_text": "Bound",
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "Range",
    "struct": true,
    "fields": [
      {
        "field_type": "Marker",
        "field_name": "low",
        "field_text": "Marker",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Marker",
        "field_name": "high",
        "field_text": "Marker",
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "SortedRangeSet",
    "struct": true,
    "fields": [
      {
        "field_type": "Type",
        "field_name": "type",
        "field_text": "Type",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "List<Range>",
        "field_name": "ranges",
        "field_text": "List<Range>",
        "_N": 2,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ValueSet",
    "json_key": "sortable"
  },
  {
    "class_name": "TableScanNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "TableHandle",
        "field_name": "table",
        "field_text": "TableHandle",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "outputVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Map<VariableReferenceExpression, ColumnHandle>",
        "field_name": "assignments",
        "field_text": "Map<VariableReferenceExpression, std::shared_ptr<ColumnHandle>>",
        "_N": 4,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": ".TableScanNode"
  },
  {
    "class_name": "StageExecutionStrategy",
    "enum": true,
    "elements": [
      {
        "element": "UNGROUPED_EXECUTION",
        "_N": 1
      },
      {
        "element": "FIXED_LIFESPAN_SCHEDULE_GROUPED_EXECUTION",
        "_N": 2
      },
      {
        "element": "DYNAMIC_LIFESPAN_SCHEDULE_GROUPED_EXECUTION",
        "_N": 3
      },
      {
        "element": "RECOVERABLE_GROUPED_EXECUTION",
        "_N": 4,
        "_last": true
      }
    ]
  },
  {
    "class_name": "StageExecutionDescriptor",
    "struct": true,
    "fields": [
      {
        "field_type": "StageExecutionStrategy",
        "field_name": "stageExecutionStrategy",
        "field_text": "StageExecutionStrategy",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Set<PlanNodeId>",
        "field_name": "groupedExecutionScanNodes",
        "field_text": "List<PlanNodeId>",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "totalLifespans",
        "field_text": "int",
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "PlanFragment",
    "cinc": "namespace facebook::presto::protocol {\n\nvoid to_json(json& j, const PlanFragment& p) {\n  j = json::object();\n  to_json_key(j, \"id\", p.id, \"PlanFragment\", \"PlanFragmentId\", \"id\");\n  to_json_key(j, \"root\", p.root, \"PlanFragment\", \"PlanNode\", \"root\");\n  to_json_key(\n      j,\n      \"variables\",\n      p.variables,\n      \"PlanFragment\",\n      \"List<VariableReferenceExpression>\",\n      \"variables\");\n  to_json_key(\n      j,\n      \"partitioning\",\n      p.partitioning,\n      \"PlanFragment\",\n      \"PartitioningHandle\",\n      \"partitioning\");\n  to_json_key(\n      j,\n      \"tableScanSchedulingOrder\",\n      p.tableScanSchedulingOrder,\n      \"PlanFragment\",\n      \"List<PlanNodeId>\",\n      \"tableScanSchedulingOrder\");\n  to_json_key(\n      j,\n      \"partitioningScheme\",\n      p.partitioningScheme,\n      \"PlanFragment\",\n      \"PartitioningScheme\",\n      \"partitioningScheme\");\n  to_json_key(\n      j,\n      \"stageExecutionDescriptor\",\n      p.stageExecutionDescriptor,\n      \"PlanFragment\",\n      \"StageExecutionDescriptor\",\n      \"stageExecutionDescriptor\");\n  to_json_key(\n      j,\n      \"outputTableWriterFragment\",\n      p.outputTableWriterFragment,\n      \"PlanFragment\",\n      \"bool\",\n      \"outputTableWriterFragment\");\n  to_json_key(\n      j,\n      \"jsonRepresentation\",\n      p.jsonRepresentation,\n      \"PlanFragment\",\n      \"String\",\n      \"jsonRepresentation\");\n}\n\nvoid from_json(const json& j, PlanFragment& p) {\n  from_json_key(j, \"id\", p.id, \"PlanFragment\", \"PlanFragmentId\", \"id\");\n  from_json_key(j, \"root\", p.root, \"PlanFragment\", \"PlanNode\", \"root\");\n  from_json_key(\n      j,\n      \"variables\",\n      p.variables,\n      \"PlanFragment\",\n      \"List<VariableReferenceExpression>\",\n      \"variables\");\n  from_json_key(\n      j,\n      \"partitioning\",\n      p.partitioning,\n      \"PlanFragment\",\n      \"PartitioningHandle\",\n      \"partitioning\");\n  from_json_key(\n      j,\n      \"tableScanSchedulingOrder\",\n      p.tableScanSchedulingOrder,\n      \"PlanFragment\",\n      \"List<PlanNodeId>\",\n      \"tableScanSchedulingOrder\");\n  from_json_key(\n      j,\n      \"partitioningScheme\",\n      p.partitioningScheme,\n      \"PlanFragment\",\n      \"PartitioningScheme\",\n      \"partitioningScheme\");\n  from_json_key(\n      j,\n      \"stageExecutionDescriptor\",\n      p.stageExecutionDescriptor,\n      \"PlanFragment\",\n      \"StageExecutionDescriptor\",\n      \"stageExecutionDescriptor\");\n  from_json_key(\n      j,\n      \"outputTableWriterFragment\",\n      p.outputTableWriterFragment,\n      \"PlanFragment\",\n      \"bool\",\n      \"outputTableWriterFragment\");\n  from_json_key(\n      j,\n      \"jsonRepresentation\",\n      p.jsonRepresentation,\n      \"PlanFragment\",\n      \"String\",\n      \"jsonRepresentation\");\n}\n} // namespace facebook::presto::protocol",
    "hinc": "namespace facebook::presto::protocol {\nstruct PlanFragment {\n  PlanFragmentId id = {};\n  std::shared_ptr<PlanNode> root = {};\n  List<VariableReferenceExpression> variables = {};\n  PartitioningHandle partitioning = {};\n  List<PlanNodeId> tableScanSchedulingOrder = {};\n  PartitioningScheme partitioningScheme = {};\n  StageExecutionDescriptor stageExecutionDescriptor = {};\n  bool outputTableWriterFragment = {};\n  std::shared_ptr<String> jsonRepresentation = {};\n};\nvoid to_json(json& j, const PlanFragment& p);\nvoid from_json(const json& j, PlanFragment& p);\n} // namespace facebook::presto::protocol",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanFragmentId",
        "field_name": "id",
        "field_text": "PlanFragmentId",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "PlanNode",
        "field_name": "root",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "Set<VariableReferenceExpression>",
        "field_name": "variables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "PartitioningHandle",
        "field_name": "partitioning",
        "field_text": "PartitioningHandle",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "List<PlanNodeId>",
        "field_name": "tableScanSchedulingOrder",
        "field_text": "List<PlanNodeId>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "PartitioningScheme",
        "field_name": "partitioningScheme",
        "field_text": "PartitioningScheme",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "StageExecutionDescriptor",
        "field_name": "stageExecutionDescriptor",
        "field_text": "StageExecutionDescriptor",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "outputTableWriterFragment",
        "field_text": "bool",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "StatsAndCosts",
        "field_name": "statsAndCosts",
        "field_text": "StatsAndCosts",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "jsonRepresentation",
        "field_text": "String",
        "optional": true,
        "_N": 10,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "GroupingSetDescriptor",
    "struct": true,
    "fields": [
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "groupingKeys",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "groupingSetCount",
        "field_text": "int",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Set<Integer>",
        "field_name": "globalGroupingSets",
        "field_text": "List<Integer>",
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "AggregationNodeStep",
    "enum": true,
    "elements": [
      {
        "element": "PARTIAL",
        "_N": 1
      },
      {
        "element": "FINAL",
        "_N": 2
      },
      {
        "element": "INTERMEDIATE",
        "_N": 3
      },
      {
        "element": "SINGLE",
        "_N": 4,
        "_last": true
      }
    ]
  },
  {
    "class_name": "AggregationNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "Map<VariableReferenceExpression, Aggregation>",
        "field_name": "aggregations",
        "field_text": "Map<VariableReferenceExpression, Aggregation>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "GroupingSetDescriptor",
        "field_name": "groupingSets",
        "field_text": "GroupingSetDescriptor",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "preGroupedVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "AggregationNodeStep",
        "field_name": "step",
        "field_text": "AggregationNodeStep",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "hashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "groupIdVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 8,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": ".AggregationNode"
  },
  {
    "class_name": "JsonEncodedSubclass",
    "cinc": "// dependency KeyedSubclass\n\nnamespace facebook::presto::protocol {\n\nstd::string JsonEncodedSubclass::getSubclassKey(nlohmann::json j) {\n  return j[\"@type\"];\n}\n\n} // namespace facebook::presto::protocol"
  },
  {
    "class_name": "RowNumberNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "partitionBy",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "rowNumberVariable",
        "field_text": "VariableReferenceExpression",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<Integer>",
        "field_name": "maxRowCountPerPartition",
        "field_text": "Integer",
        "optional": true,
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "hashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 6,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.RowNumberNode"
  },
  {
    "class_name": "UnnestNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "replicateVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "Map<VariableReferenceExpression, List<VariableReferenceExpression>>",
        "field_name": "unnestVariables",
        "field_text": "Map<VariableReferenceExpression, List<VariableReferenceExpression>>",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "ordinalityVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 5,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.UnnestNode"
  },
  {
    "class_name": "InsertHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "InsertTableHandle",
        "field_name": "handle",
        "field_text": "InsertTableHandle",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "SchemaTableName",
        "field_name": "schemaTableName",
        "field_text": "SchemaTableName",
        "_N": 2,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ExecutionWriterTarget",
    "json_key": "InsertHandle"
  },
  {
    "class_name": "AllOrNoneValueSet",
    "struct": true,
    "fields": [
      {
        "field_type": "Type",
        "field_name": "type",
        "field_text": "Type",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "all",
        "field_text": "bool",
        "_N": 2,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ValueSet",
    "json_key": "allOrNone"
  },
  {
    "class_name": "MergeJoinNode",
    "hinc": "namespace facebook::presto::protocol {\nstruct MergeJoinNode : public PlanNode {\n  MergeJoinNode() noexcept;\n  PlanNodeId id = {};\n  // JoinNodeType is referenced as JoinNode.Type in Presto\n  // Since presto_cpp codegen can't nicely handle inner class references\n  // So a special hard-coded template is required here\n  JoinNodeType type = {};\n  std::shared_ptr<PlanNode> left = {};\n  std::shared_ptr<PlanNode> right = {};\n  // EquiJoinClause is referenced as JoinNode.EquiJoinClause in Presto\n  List<EquiJoinClause> criteria = {};\n  List<VariableReferenceExpression> outputVariables = {};\n  std::shared_ptr<std::shared_ptr<RowExpression>> filter = {};\n  std::shared_ptr<VariableReferenceExpression> leftHashVariable = {};\n  std::shared_ptr<VariableReferenceExpression> rightHashVariable = {};\n};\nvoid to_json(json& j, const MergeJoinNode& p);\nvoid from_json(const json& j, MergeJoinNode& p);\n} // namespace facebook::presto::protocol",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "JoinNode.Type",
        "field_name": "type",
        "field_text": "JoinNode.Type",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "PlanNode",
        "field_name": "left",
        "field_text": "PlanNode",
        "_N": 3,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "PlanNode",
        "field_name": "right",
        "field_text": "PlanNode",
        "_N": 4,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "List<JoinNode.EquiJoinClause>",
        "field_name": "criteria",
        "field_text": "List<JoinNode.EquiJoinClause>",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "outputVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "Optional<RowExpression>",
        "field_name": "filter",
        "field_text": "std::shared_ptr<RowExpression>",
        "optional": true,
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "leftHashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "rightHashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 9,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.MergeJoinNode"
  },
  {
    "class_name": "HiveTableHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "schemaName",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "tableName",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "Optional<List<List<String>>>",
        "field_name": "analyzePartitionValues",
        "field_text": "List<List<String>>",
        "optional": true,
        "_N": 3,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorTableHandle",
    "json_key": "hive"
  },
  {
    "class_name": "Step",
    "enum": true,
    "elements": [
      {
        "element": "SINGLE",
        "_N": 1
      },
      {
        "element": "PARTIAL",
        "_N": 2
      },
      {
        "element": "FINAL",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "TopNNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "long",
        "field_name": "count",
        "field_text": "int64_t",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "OrderingScheme",
        "field_name": "orderingScheme",
        "field_text": "OrderingScheme",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "Step",
        "field_name": "step",
        "field_text": "Step",
        "_N": 5,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": ".TopNNode"
  },
  {
    "class_name": "HiveTransactionHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "UUID",
        "field_name": "uuid",
        "field_text": "UUID",
        "_N": 1,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorTransactionHandle",
    "json_key": "hive"
  },
  {
    "class_name": "LambdaDefinitionExpression",
    "struct": true,
    "fields": [
      {
        "field_type": "Optional<SourceLocation>",
        "field_name": "sourceLocation",
        "field_text": "SourceLocation",
        "optional": true,
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "List<Type>",
        "field_name": "argumentTypes",
        "field_text": "List<Type>",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<String>",
        "field_name": "arguments",
        "field_text": "List<String>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "RowExpression",
        "field_name": "body",
        "field_text": "RowExpression",
        "_N": 4,
        "field_local": true,
        "optional": true
      }
    ],
    "subclass": true,
    "super_class": "RowExpression",
    "json_key": "lambda"
  },
  {
    "class_name": "RemoteSplit",
    "struct": true,
    "fields": [
      {
        "field_type": "Location",
        "field_name": "location",
        "field_text": "Location",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "TaskId",
        "field_name": "remoteSourceTaskId",
        "field_text": "TaskId",
        "_N": 2,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorSplit",
    "json_key": "$remote"
  },
  {
    "class_name": "HiveOutputTableHandle",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "schemaName",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "tableName",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<HiveColumnHandle>",
        "field_name": "inputColumns",
        "field_text": "List<HiveColumnHandle>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "HivePageSinkMetadata",
        "field_name": "pageSinkMetadata",
        "field_text": "HivePageSinkMetadata",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "LocationHandle",
        "field_name": "locationHandle",
        "field_text": "LocationHandle",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "HiveStorageFormat",
        "field_name": "tableStorageFormat",
        "field_text": "HiveStorageFormat",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "HiveStorageFormat",
        "field_name": "partitionStorageFormat",
        "field_text": "HiveStorageFormat",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "HiveStorageFormat",
        "field_name": "actualStorageFormat",
        "field_text": "HiveStorageFormat",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "HiveCompressionCodec",
        "field_name": "compressionCodec",
        "field_text": "HiveCompressionCodec",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "List<String>",
        "field_name": "partitionedBy",
        "field_text": "List<String>",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "Optional<HiveBucketProperty>",
        "field_name": "bucketProperty",
        "field_text": "HiveBucketProperty",
        "optional": true,
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "List<SortingColumn>",
        "field_name": "preferredOrderingColumns",
        "field_text": "List<SortingColumn>",
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "tableOwner",
        "field_text": "String",
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "additionalTableParameters",
        "field_text": "Map<String, String>",
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "Optional<EncryptionInformation>",
        "field_name": "encryptionInformation",
        "field_text": "EncryptionInformation",
        "optional": true,
        "_N": 15,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorOutputTableHandle",
    "json_key": "hive"
  },
  {
    "class_name": "CacheQuotaScope",
    "enum": true,
    "elements": [
      {
        "element": "GLOBAL",
        "_N": 1
      },
      {
        "element": "SCHEMA",
        "_N": 2
      },
      {
        "element": "TABLE",
        "_N": 3
      },
      {
        "element": "PARTITION",
        "_N": 4,
        "_last": true
      }
    ]
  },
  {
    "class_name": "CacheQuotaRequirement",
    "struct": true,
    "fields": [
      {
        "field_type": "CacheQuotaScope",
        "field_name": "cacheQuotaScope",
        "field_text": "CacheQuotaScope",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<DataSize>",
        "field_name": "quota",
        "field_text": "DataSize",
        "optional": true,
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "SortNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "OrderingScheme",
        "field_name": "orderingScheme",
        "field_text": "OrderingScheme",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "isPartial",
        "field_text": "bool",
        "_N": 4,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.SortNode"
  },
  {
    "class_name": "HivePartitionKey",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "name",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Optional<String>",
        "field_name": "value",
        "field_text": "String",
        "optional": true,
        "_N": 2,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "ConstantExpression",
    "struct": true,
    "fields": [
      {
        "field_type": "Block",
        "field_name": "valueBlock",
        "field_text": "Block",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "Type",
        "field_name": "type",
        "field_text": "Type",
        "_N": 2,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "RowExpression",
    "json_key": "constant"
  },
  {
    "class_name": "BucketConversion",
    "struct": true,
    "fields": [
      {
        "field_type": "int",
        "field_name": "tableBucketCount",
        "field_text": "int",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "partitionBucketCount",
        "field_text": "int",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "List<HiveColumnHandle>",
        "field_name": "bucketColumnHandles",
        "field_text": "List<HiveColumnHandle>",
        "_N": 3,
        "field_local": true
      }
    ]
  },
  {
    "class_name": "NodeSelectionStrategy",
    "enum": true,
    "elements": [
      {
        "element": "HARD_AFFINITY",
        "_N": 1
      },
      {
        "element": "SOFT_AFFINITY",
        "_N": 2
      },
      {
        "element": "NO_PREFERENCE",
        "_N": 3,
        "_last": true
      }
    ]
  },
  {
    "class_name": "HiveSplit",
    "struct": true,
    "fields": [
      {
        "field_type": "String",
        "field_name": "database",
        "field_text": "String",
        "_N": 1,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "table",
        "field_text": "String",
        "_N": 2,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "partitionName",
        "field_text": "String",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "String",
        "field_name": "path",
        "field_text": "String",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "start",
        "field_text": "int64_t",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "length",
        "field_text": "int64_t",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "fileSize",
        "field_text": "int64_t",
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "long",
        "field_name": "fileModifiedTime",
        "field_text": "int64_t",
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "Storage",
        "field_name": "storage",
        "field_text": "Storage",
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "List<HivePartitionKey>",
        "field_name": "partitionKeys",
        "field_text": "List<HivePartitionKey>",
        "_N": 10,
        "field_local": true
      },
      {
        "field_type": "List<HostAddress>",
        "field_name": "addresses",
        "field_text": "List<HostAddress>",
        "_N": 11,
        "field_local": true
      },
      {
        "field_type": "OptionalInt",
        "field_name": "readBucketNumber",
        "field_text": "int",
        "optional": true,
        "_N": 12,
        "field_local": true
      },
      {
        "field_type": "OptionalInt",
        "field_name": "tableBucketNumber",
        "field_text": "int",
        "optional": true,
        "_N": 13,
        "field_local": true
      },
      {
        "field_type": "NodeSelectionStrategy",
        "field_name": "nodeSelectionStrategy",
        "field_text": "NodeSelectionStrategy",
        "_N": 14,
        "field_local": true
      },
      {
        "field_type": "int",
        "field_name": "partitionDataColumnCount",
        "field_text": "int",
        "_N": 15,
        "field_local": true
      },
      {
        "field_type": "TableToPartitionMapping",
        "field_name": "tableToPartitionMapping",
        "field_text": "TableToPartitionMapping",
        "_N": 16,
        "field_local": true
      },
      {
        "field_type": "Optional<BucketConversion>",
        "field_name": "bucketConversion",
        "field_text": "BucketConversion",
        "optional": true,
        "_N": 17,
        "field_local": true
      },
      {
        "field_type": "boolean",
        "field_name": "s3SelectPushdownEnabled",
        "field_text": "bool",
        "_N": 18,
        "field_local": true
      },
      {
        "field_type": "Optional<byte[]>",
        "field_name": "extraFileInfo",
        "field_text": "String",
        "optional": true,
        "_N": 19,
        "field_local": true
      },
      {
        "field_type": "CacheQuotaRequirement",
        "field_name": "cacheQuota",
        "field_text": "CacheQuotaRequirement",
        "_N": 20,
        "field_local": true
      },
      {
        "field_type": "Optional<EncryptionInformation>",
        "field_name": "encryptionMetadata",
        "field_text": "EncryptionInformation",
        "optional": true,
        "_N": 21,
        "field_local": true
      },
      {
        "field_type": "Map<String, String>",
        "field_name": "customSplitInfo",
        "field_text": "Map<String, String>",
        "_N": 22,
        "field_local": true
      },
      {
        "field_type": "Set<ColumnHandle>",
        "field_name": "redundantColumnDomains",
        "field_text": "List<std::shared_ptr<ColumnHandle>>",
        "_N": 23,
        "field_local": true
      },
      {
        "field_type": "SplitWeight",
        "field_name": "splitWeight",
        "field_text": "SplitWeight",
        "_N": 24,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "ConnectorSplit",
    "json_key": "hive"
  },
  {
    "class_name": "OutputNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "List<String>",
        "field_name": "columnNames",
        "field_text": "List<String>",
        "_N": 3,
        "field_local": true
      },
      {
        "field_type": "List<VariableReferenceExpression>",
        "field_name": "outputVariables",
        "field_text": "List<VariableReferenceExpression>",
        "_N": 4,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.OutputNode"
  },
  {
    "class_name": "EnforceSingleRowNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.EnforceSingleRowNode"
  },
  {
    "class_name": "SemiJoinNode",
    "struct": true,
    "fields": [
      {
        "field_type": "PlanNodeId",
        "field_name": "id",
        "field_text": "PlanNodeId",
        "_N": 1,
        "field_local": false
      },
      {
        "field_type": "PlanNode",
        "field_name": "source",
        "field_text": "PlanNode",
        "_N": 2,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "PlanNode",
        "field_name": "filteringSource",
        "field_text": "PlanNode",
        "_N": 3,
        "field_local": true,
        "optional": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "sourceJoinVariable",
        "field_text": "VariableReferenceExpression",
        "_N": 4,
        "field_local": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "filteringSourceJoinVariable",
        "field_text": "VariableReferenceExpression",
        "_N": 5,
        "field_local": true
      },
      {
        "field_type": "VariableReferenceExpression",
        "field_name": "semiJoinOutput",
        "field_text": "VariableReferenceExpression",
        "_N": 6,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "sourceHashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 7,
        "field_local": true
      },
      {
        "field_type": "Optional<VariableReferenceExpression>",
        "field_name": "filteringSourceHashVariable",
        "field_text": "VariableReferenceExpression",
        "optional": true,
        "_N": 8,
        "field_local": true
      },
      {
        "field_type": "Optional<DistributionType>",
        "field_name": "distributionType",
        "field_text": "DistributionType",
        "optional": true,
        "_N": 9,
        "field_local": true
      },
      {
        "field_type": "Map<String, VariableReferenceExpression>",
        "field_name": "dynamicFilters",
        "field_text": "Map<String, VariableReferenceExpression>",
        "_N": 10,
        "field_local": true
      }
    ],
    "subclass": true,
    "super_class": "PlanNode",
    "json_key": "com.facebook.presto.sql.planner.plan.SemiJoinNode"
  },
  {
    "class_name": "NodeState",
    "enum": true,
    "elements": [
      {
        "element": "ACTIVE",
        "_N": 1
      },
      {
        "element": "INACTIVE",
        "_N": 2
      },
      {
        "element": "SHUTTING_DOWN",
        "_N": 3,
        "_last": true
      }
    ]
  }
]
