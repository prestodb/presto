/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;

import java.util.*;

import javax.annotation.Nullable;

import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;

import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value = "ThriftTypeSignature", builder = ThriftTypeSignature.Builder.class)
public final class ThriftTypeSignature
        implements com.facebook.thrift.payload.ThriftSerializable
{
    @ThriftConstructor
    public ThriftTypeSignature(
            @com.facebook.swift.codec.ThriftField(value = 1, name = "base", requiredness = Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureBase base,
            @com.facebook.swift.codec.ThriftField(value = 2, name = "parameters", requiredness = Requiredness.NONE) final List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter> parameters,
            @com.facebook.swift.codec.ThriftField(value = 3, name = "calculated", requiredness = Requiredness.NONE) final boolean calculated
    )
    {
        this.base = base;
        this.parameters = parameters;
        this.calculated = calculated;
    }

    @ThriftConstructor
    protected ThriftTypeSignature()
    {
        this.base = null;
        this.parameters = null;
        this.calculated = false;
    }

    public static Builder builder()
    {
        return new Builder();
    }

    public static Builder builder(ThriftTypeSignature other)
    {
        return new Builder(other);
    }

    public static class Builder
    {
        private com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureBase base = null;
        private List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter> parameters = null;
        private boolean calculated = false;

        @com.facebook.swift.codec.ThriftField(value = 1, name = "base", requiredness = Requiredness.NONE)
        public Builder setBase(com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureBase base)
        {
            this.base = base;
            return this;
        }

        public com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureBase getBase() {return base;}

        @com.facebook.swift.codec.ThriftField(value = 2, name = "parameters", requiredness = Requiredness.NONE)
        public Builder setParameters(List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter> parameters)
        {
            this.parameters = parameters;
            return this;
        }

        public List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter> getParameters() {return parameters;}

        @com.facebook.swift.codec.ThriftField(value = 3, name = "calculated", requiredness = Requiredness.NONE)
        public Builder setCalculated(boolean calculated)
        {
            this.calculated = calculated;
            return this;
        }

        public boolean isCalculated() {return calculated;}

        public Builder() {}

        public Builder(ThriftTypeSignature other)
        {
            this.base = other.base;
            this.parameters = other.parameters;
            this.calculated = other.calculated;
        }

        @ThriftConstructor
        public ThriftTypeSignature build()
        {
            ThriftTypeSignature result = new ThriftTypeSignature(
                    this.base,
                    this.parameters,
                    this.calculated
            );
            return result;
        }
    }

    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftTypeSignature");
    private final com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureBase base;
    public static final int _BASE = 1;
    private static final TField BASE_FIELD_DESC = new TField("base", TType.STRUCT, (short) 1);
    private final List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter> parameters;
    public static final int _PARAMETERS = 2;
    private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.LIST, (short) 2);
    private final boolean calculated;
    public static final int _CALCULATED = 3;
    private static final TField CALCULATED_FIELD_DESC = new TField("calculated", TType.BOOL, (short) 3);

    static {
        NAMES_TO_IDS.put("base", 1);
        THRIFT_NAMES_TO_IDS.put("base", 1);
        FIELD_METADATA.put(1, BASE_FIELD_DESC);
        NAMES_TO_IDS.put("parameters", 2);
        THRIFT_NAMES_TO_IDS.put("parameters", 2);
        FIELD_METADATA.put(2, PARAMETERS_FIELD_DESC);
        NAMES_TO_IDS.put("calculated", 3);
        THRIFT_NAMES_TO_IDS.put("calculated", 3);
        FIELD_METADATA.put(3, CALCULATED_FIELD_DESC);
    }

    @Nullable
    @com.facebook.swift.codec.ThriftField(value = 1, name = "base", requiredness = Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureBase getBase() {return base;}

    @Nullable
    @com.facebook.swift.codec.ThriftField(value = 2, name = "parameters", requiredness = Requiredness.NONE)
    public List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter> getParameters() {return parameters;}

    @com.facebook.swift.codec.ThriftField(value = 3, name = "calculated", requiredness = Requiredness.NONE)
    public boolean isCalculated() {return calculated;}

    @java.lang.Override
    public String toString()
    {
        ToStringHelper helper = toStringHelper(this);
        helper.add("base", base);
        helper.add("parameters", parameters);
        helper.add("calculated", calculated);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ThriftTypeSignature other = (ThriftTypeSignature) o;

        return
                Objects.equals(base, other.base) &&
                        Objects.equals(parameters, other.parameters) &&
                        Objects.equals(calculated, other.calculated) &&
                        true;
    }

    @java.lang.Override
    public int hashCode()
    {
        return Arrays.deepHashCode(new java.lang.Object[] {
                base,
                parameters,
                calculated
        });
    }

    public static com.facebook.thrift.payload.Reader<ThriftTypeSignature> asReader()
    {
        return ThriftTypeSignature::read0;
    }

    public static ThriftTypeSignature read0(TProtocol oprot)
            throws TException
    {
        TField __field;
        oprot.readStructBegin(ThriftTypeSignature.NAMES_TO_IDS, ThriftTypeSignature.THRIFT_NAMES_TO_IDS, ThriftTypeSignature.FIELD_METADATA);
        ThriftTypeSignature.Builder builder = new ThriftTypeSignature.Builder();
        while (true) {
            __field = oprot.readFieldBegin();
            if (__field.type == TType.STOP) {
                break;
            }
            switch (__field.id) {
                case _BASE:
                    if (__field.type == TType.STRUCT) {
                        com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureBase base = com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureBase.read0(oprot);
                        builder.setBase(base);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _PARAMETERS:
                    if (__field.type == TType.LIST) {
                        List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter> parameters;
                        {
                            TList _list = oprot.readListBegin();
                            parameters = new ArrayList<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter>(Math.max(0, _list.size));
                            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {

                                com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter.read0(oprot);
                                parameters.add(_value1);
                            }
                            oprot.readListEnd();
                        }
                        builder.setParameters(parameters);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _CALCULATED:
                    if (__field.type == TType.BOOL) {
                        boolean calculated = oprot.readBool();
                        builder.setCalculated(calculated);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(oprot, __field.type);
                    break;
            }
            oprot.readFieldEnd();
        }
        oprot.readStructEnd();
        return builder.build();
    }

    public void write0(TProtocol oprot)
            throws TException
    {
        oprot.writeStructBegin(STRUCT_DESC);
        if (base != null) {
            oprot.writeFieldBegin(BASE_FIELD_DESC);
            this.base.write0(oprot);
            oprot.writeFieldEnd();
        }
        if (parameters != null) {
            oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
            List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter> _iter0 = parameters;
            oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignatureParameter _iter1 : _iter0) {
                _iter1.write0(oprot);
            }
            oprot.writeListEnd();
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CALCULATED_FIELD_DESC);
        oprot.writeBool(this.calculated);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    private static class _ThriftTypeSignatureLazy
    {
        private static final ThriftTypeSignature _DEFAULT = new ThriftTypeSignature.Builder().build();
    }

    public static ThriftTypeSignature defaultInstance()
    {
        return _ThriftTypeSignatureLazy._DEFAULT;
    }
}
