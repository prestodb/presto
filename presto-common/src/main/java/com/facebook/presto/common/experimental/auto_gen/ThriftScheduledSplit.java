/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftScheduledSplit", builder=ThriftScheduledSplit.Builder.class)
public final class ThriftScheduledSplit implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftScheduledSplit(
        @com.facebook.swift.codec.ThriftField(value=1, name="sequenceId", requiredness=Requiredness.NONE) final long sequenceId,
        @com.facebook.swift.codec.ThriftField(value=2, name="planNodeId", requiredness=Requiredness.NONE) final String planNodeId,
        @com.facebook.swift.codec.ThriftField(value=3, name="split", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftSplit split
    ) {
        this.sequenceId = sequenceId;
        this.planNodeId = planNodeId;
        this.split = split;
    }
    
    @ThriftConstructor
    protected ThriftScheduledSplit() {
      this.sequenceId = 0L;
      this.planNodeId = null;
      this.split = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftScheduledSplit other) {
      return new Builder(other);
    }

    public static class Builder {
        private long sequenceId = 0L;
        private String planNodeId = null;
        private com.facebook.presto.common.experimental.auto_gen.ThriftSplit split = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="sequenceId", requiredness=Requiredness.NONE)    public Builder setSequenceId(long sequenceId) {
            this.sequenceId = sequenceId;
            return this;
        }
    
        public long getSequenceId() { return sequenceId; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="planNodeId", requiredness=Requiredness.NONE)    public Builder setPlanNodeId(String planNodeId) {
            this.planNodeId = planNodeId;
            return this;
        }
    
        public String getPlanNodeId() { return planNodeId; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="split", requiredness=Requiredness.NONE)    public Builder setSplit(com.facebook.presto.common.experimental.auto_gen.ThriftSplit split) {
            this.split = split;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftSplit getSplit() { return split; }
    
        public Builder() { }
        public Builder(ThriftScheduledSplit other) {
            this.sequenceId = other.sequenceId;
            this.planNodeId = other.planNodeId;
            this.split = other.split;
        }
    
        @ThriftConstructor
        public ThriftScheduledSplit build() {
            ThriftScheduledSplit result = new ThriftScheduledSplit (
                this.sequenceId,
                this.planNodeId,
                this.split
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftScheduledSplit");
    private final long sequenceId;
    public static final int _SEQUENCEID = 1;
    private static final TField SEQUENCE_ID_FIELD_DESC = new TField("sequenceId", TType.I64, (short)1);
        private final String planNodeId;
    public static final int _PLANNODEID = 2;
    private static final TField PLAN_NODE_ID_FIELD_DESC = new TField("planNodeId", TType.STRING, (short)2);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftSplit split;
    public static final int _SPLIT = 3;
    private static final TField SPLIT_FIELD_DESC = new TField("split", TType.STRUCT, (short)3);
    static {
      NAMES_TO_IDS.put("sequenceId", 1);
      THRIFT_NAMES_TO_IDS.put("sequenceId", 1);
      FIELD_METADATA.put(1, SEQUENCE_ID_FIELD_DESC);
      NAMES_TO_IDS.put("planNodeId", 2);
      THRIFT_NAMES_TO_IDS.put("planNodeId", 2);
      FIELD_METADATA.put(2, PLAN_NODE_ID_FIELD_DESC);
      NAMES_TO_IDS.put("split", 3);
      THRIFT_NAMES_TO_IDS.put("split", 3);
      FIELD_METADATA.put(3, SPLIT_FIELD_DESC);
    }
    
    
    @com.facebook.swift.codec.ThriftField(value=1, name="sequenceId", requiredness=Requiredness.NONE)
    public long getSequenceId() { return sequenceId; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="planNodeId", requiredness=Requiredness.NONE)
    public String getPlanNodeId() { return planNodeId; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=3, name="split", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftSplit getSplit() { return split; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("sequenceId", sequenceId);
        helper.add("planNodeId", planNodeId);
        helper.add("split", split);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftScheduledSplit other = (ThriftScheduledSplit)o;
    
        return
            Objects.equals(sequenceId, other.sequenceId) &&
            Objects.equals(planNodeId, other.planNodeId) &&
            Objects.equals(split, other.split) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            sequenceId,
            planNodeId,
            split
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftScheduledSplit> asReader() {
      return ThriftScheduledSplit::read0;
    }
    
    public static ThriftScheduledSplit read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftScheduledSplit.NAMES_TO_IDS, ThriftScheduledSplit.THRIFT_NAMES_TO_IDS, ThriftScheduledSplit.FIELD_METADATA);
      ThriftScheduledSplit.Builder builder = new ThriftScheduledSplit.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _SEQUENCEID:
          if (__field.type == TType.I64) {
            long sequenceId = oprot.readI64();
            builder.setSequenceId(sequenceId);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _PLANNODEID:
          if (__field.type == TType.STRING) {
            String planNodeId = oprot.readString();
            builder.setPlanNodeId(planNodeId);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SPLIT:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftSplit split = com.facebook.presto.common.experimental.auto_gen.ThriftSplit.read0(oprot);
            builder.setSplit(split);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_ID_FIELD_DESC);
      oprot.writeI64(this.sequenceId);
      oprot.writeFieldEnd();
      if (planNodeId != null) {
        oprot.writeFieldBegin(PLAN_NODE_ID_FIELD_DESC);
        oprot.writeString(this.planNodeId);
        oprot.writeFieldEnd();
      }
      if (split != null) {
        oprot.writeFieldBegin(SPLIT_FIELD_DESC);
        this.split.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftScheduledSplitLazy {
        private static final ThriftScheduledSplit _DEFAULT = new ThriftScheduledSplit.Builder().build();
    }
    
    public static ThriftScheduledSplit defaultInstance() {
        return  _ThriftScheduledSplitLazy._DEFAULT;
    }
}
