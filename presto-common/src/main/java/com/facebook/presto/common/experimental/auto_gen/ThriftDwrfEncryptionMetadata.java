/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.SwiftGenerated;
import com.facebook.swift.codec.ThriftConstructor;
import com.facebook.swift.codec.ThriftField;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftStruct;
import org.apache.fbthrift.TException;
import org.apache.fbthrift.protocol.TField;
import org.apache.fbthrift.protocol.TMap;
import org.apache.fbthrift.protocol.TProtocol;
import org.apache.fbthrift.protocol.TProtocolUtil;
import org.apache.fbthrift.protocol.TStruct;
import org.apache.fbthrift.protocol.TType;

import javax.annotation.Nullable;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import static com.google.common.base.MoreObjects.ToStringHelper;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value = "ThriftDwrfEncryptionMetadata", builder = ThriftDwrfEncryptionMetadata.Builder.class)
public final class ThriftDwrfEncryptionMetadata
        implements com.facebook.thrift.payload.ThriftSerializable
{
    @ThriftConstructor
    public ThriftDwrfEncryptionMetadata(
            @ThriftField(value = 1, name = "fieldToKeyData", requiredness = Requiredness.NONE) final Map<String, byte[]> fieldToKeyData,
            @ThriftField(value = 2, name = "extraMetadata", requiredness = Requiredness.NONE) final Map<String, String> extraMetadata,
            @ThriftField(value = 3, name = "encryptionAlgorithm", requiredness = Requiredness.NONE) final String encryptionAlgorithm,
            @ThriftField(value = 4, name = "encryptionProvider", requiredness = Requiredness.NONE) final String encryptionProvider
    )
    {
        this.fieldToKeyData = fieldToKeyData;
        this.extraMetadata = extraMetadata;
        this.encryptionAlgorithm = encryptionAlgorithm;
        this.encryptionProvider = encryptionProvider;
    }

    @ThriftConstructor
    protected ThriftDwrfEncryptionMetadata()
    {
        this.fieldToKeyData = null;
        this.extraMetadata = null;
        this.encryptionAlgorithm = null;
        this.encryptionProvider = null;
    }

    public static Builder builder()
    {
        return new Builder();
    }

    public static Builder builder(ThriftDwrfEncryptionMetadata other)
    {
        return new Builder(other);
    }

    public static class Builder
    {
        private Map<String, byte[]> fieldToKeyData = null;
        private Map<String, String> extraMetadata = null;
        private String encryptionAlgorithm = null;
        private String encryptionProvider = null;

        @ThriftField(value = 1, name = "fieldToKeyData", requiredness = Requiredness.NONE)
        public Builder setFieldToKeyData(Map<String, byte[]> fieldToKeyData)
        {
            this.fieldToKeyData = fieldToKeyData;
            return this;
        }

        public Map<String, byte[]> getFieldToKeyData() {return fieldToKeyData;}

        @ThriftField(value = 2, name = "extraMetadata", requiredness = Requiredness.NONE)
        public Builder setExtraMetadata(Map<String, String> extraMetadata)
        {
            this.extraMetadata = extraMetadata;
            return this;
        }

        public Map<String, String> getExtraMetadata() {return extraMetadata;}

        @ThriftField(value = 3, name = "encryptionAlgorithm", requiredness = Requiredness.NONE)
        public Builder setEncryptionAlgorithm(String encryptionAlgorithm)
        {
            this.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }

        public String getEncryptionAlgorithm() {return encryptionAlgorithm;}

        @ThriftField(value = 4, name = "encryptionProvider", requiredness = Requiredness.NONE)
        public Builder setEncryptionProvider(String encryptionProvider)
        {
            this.encryptionProvider = encryptionProvider;
            return this;
        }

        public String getEncryptionProvider() {return encryptionProvider;}

        public Builder() {}

        public Builder(ThriftDwrfEncryptionMetadata other)
        {
            this.fieldToKeyData = other.fieldToKeyData;
            this.extraMetadata = other.extraMetadata;
            this.encryptionAlgorithm = other.encryptionAlgorithm;
            this.encryptionProvider = other.encryptionProvider;
        }

        @ThriftConstructor
        public ThriftDwrfEncryptionMetadata build()
        {
            ThriftDwrfEncryptionMetadata result = new ThriftDwrfEncryptionMetadata(
                    this.fieldToKeyData,
                    this.extraMetadata,
                    this.encryptionAlgorithm,
                    this.encryptionProvider
            );
            return result;
        }
    }

    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftDwrfEncryptionMetadata");
    private final Map<String, byte[]> fieldToKeyData;
    public static final int _FIELDTOKEYDATA = 1;
    private static final TField FIELD_TO_KEY_DATA_FIELD_DESC = new TField("fieldToKeyData", TType.MAP, (short) 1);
    private final Map<String, String> extraMetadata;
    public static final int _EXTRAMETADATA = 2;
    private static final TField EXTRA_METADATA_FIELD_DESC = new TField("extraMetadata", TType.MAP, (short) 2);
    private final String encryptionAlgorithm;
    public static final int _ENCRYPTIONALGORITHM = 3;
    private static final TField ENCRYPTION_ALGORITHM_FIELD_DESC = new TField("encryptionAlgorithm", TType.STRING, (short) 3);
    private final String encryptionProvider;
    public static final int _ENCRYPTIONPROVIDER = 4;
    private static final TField ENCRYPTION_PROVIDER_FIELD_DESC = new TField("encryptionProvider", TType.STRING, (short) 4);

    static {
        NAMES_TO_IDS.put("fieldToKeyData", 1);
        THRIFT_NAMES_TO_IDS.put("fieldToKeyData", 1);
        FIELD_METADATA.put(1, FIELD_TO_KEY_DATA_FIELD_DESC);
        NAMES_TO_IDS.put("extraMetadata", 2);
        THRIFT_NAMES_TO_IDS.put("extraMetadata", 2);
        FIELD_METADATA.put(2, EXTRA_METADATA_FIELD_DESC);
        NAMES_TO_IDS.put("encryptionAlgorithm", 3);
        THRIFT_NAMES_TO_IDS.put("encryptionAlgorithm", 3);
        FIELD_METADATA.put(3, ENCRYPTION_ALGORITHM_FIELD_DESC);
        NAMES_TO_IDS.put("encryptionProvider", 4);
        THRIFT_NAMES_TO_IDS.put("encryptionProvider", 4);
        FIELD_METADATA.put(4, ENCRYPTION_PROVIDER_FIELD_DESC);
    }

    @Nullable
    @ThriftField(value = 1, name = "fieldToKeyData", requiredness = Requiredness.NONE)
    public Map<String, byte[]> getFieldToKeyData() {return fieldToKeyData;}

    @Nullable
    @ThriftField(value = 2, name = "extraMetadata", requiredness = Requiredness.NONE)
    public Map<String, String> getExtraMetadata() {return extraMetadata;}

    @Nullable
    @ThriftField(value = 3, name = "encryptionAlgorithm", requiredness = Requiredness.NONE)
    public String getEncryptionAlgorithm() {return encryptionAlgorithm;}

    @Nullable
    @ThriftField(value = 4, name = "encryptionProvider", requiredness = Requiredness.NONE)
    public String getEncryptionProvider() {return encryptionProvider;}

    @Override
    public String toString()
    {
        ToStringHelper helper = toStringHelper(this);
        helper.add("fieldToKeyData", fieldToKeyData);
        helper.add("extraMetadata", extraMetadata);
        helper.add("encryptionAlgorithm", encryptionAlgorithm);
        helper.add("encryptionProvider", encryptionProvider);
        return helper.toString();
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ThriftDwrfEncryptionMetadata other = (ThriftDwrfEncryptionMetadata) o;

        return
                Objects.equals(fieldToKeyData, other.fieldToKeyData) &&
                        Objects.equals(extraMetadata, other.extraMetadata) &&
                        Objects.equals(encryptionAlgorithm, other.encryptionAlgorithm) &&
                        Objects.equals(encryptionProvider, other.encryptionProvider) &&
                        true;
    }

    @Override
    public int hashCode()
    {
        return Arrays.deepHashCode(new Object[] {
                fieldToKeyData,
                extraMetadata,
                encryptionAlgorithm,
                encryptionProvider
        });
    }

    public static com.facebook.thrift.payload.Reader<ThriftDwrfEncryptionMetadata> asReader()
    {
        return ThriftDwrfEncryptionMetadata::read0;
    }

    public static ThriftDwrfEncryptionMetadata read0(TProtocol oprot)
            throws TException
    {
        TField __field;
        oprot.readStructBegin(ThriftDwrfEncryptionMetadata.NAMES_TO_IDS, ThriftDwrfEncryptionMetadata.THRIFT_NAMES_TO_IDS, ThriftDwrfEncryptionMetadata.FIELD_METADATA);
        Builder builder = new Builder();
        while (true) {
            __field = oprot.readFieldBegin();
            if (__field.type == TType.STOP) {
                break;
            }
            switch (__field.id) {
                case _FIELDTOKEYDATA:
                    if (__field.type == TType.MAP) {
                        Map<String, byte[]> fieldToKeyData;
                        {
                            TMap _map = oprot.readMapBegin();
                            fieldToKeyData = new HashMap<String, byte[]>(Math.max(0, _map.size));
                            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {

                                String _key1 = oprot.readString();
                                byte[] _value1 = oprot.readBinary().array();
                                fieldToKeyData.put(_key1, _value1);
                            }
                        }
                        oprot.readMapEnd();
                        builder.setFieldToKeyData(fieldToKeyData);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _EXTRAMETADATA:
                    if (__field.type == TType.MAP) {
                        Map<String, String> extraMetadata;
                        {
                            TMap _map = oprot.readMapBegin();
                            extraMetadata = new HashMap<String, String>(Math.max(0, _map.size));
                            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {

                                String _key1 = oprot.readString();
                                String _value1 = oprot.readString();
                                extraMetadata.put(_key1, _value1);
                            }
                        }
                        oprot.readMapEnd();
                        builder.setExtraMetadata(extraMetadata);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _ENCRYPTIONALGORITHM:
                    if (__field.type == TType.STRING) {
                        String encryptionAlgorithm = oprot.readString();
                        builder.setEncryptionAlgorithm(encryptionAlgorithm);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _ENCRYPTIONPROVIDER:
                    if (__field.type == TType.STRING) {
                        String encryptionProvider = oprot.readString();
                        builder.setEncryptionProvider(encryptionProvider);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(oprot, __field.type);
                    break;
            }
            oprot.readFieldEnd();
        }
        oprot.readStructEnd();
        return builder.build();
    }

    public void write0(TProtocol oprot)
            throws TException
    {
        oprot.writeStructBegin(STRUCT_DESC);
        if (fieldToKeyData != null) {
            oprot.writeFieldBegin(FIELD_TO_KEY_DATA_FIELD_DESC);
            Map<String, byte[]> _iter0 = fieldToKeyData;
            oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
            for (Map.Entry<String, byte[]> _iter1 : _iter0.entrySet()) {
                oprot.writeString(_iter1.getKey());
                oprot.writeBinary(java.nio.ByteBuffer.wrap(_iter1.getValue()));
            }
            oprot.writeMapEnd();
            oprot.writeFieldEnd();
        }
        if (extraMetadata != null) {
            oprot.writeFieldBegin(EXTRA_METADATA_FIELD_DESC);
            Map<String, String> _iter0 = extraMetadata;
            oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
            for (Map.Entry<String, String> _iter1 : _iter0.entrySet()) {
                oprot.writeString(_iter1.getKey());
                oprot.writeString(_iter1.getValue());
            }
            oprot.writeMapEnd();
            oprot.writeFieldEnd();
        }
        if (encryptionAlgorithm != null) {
            oprot.writeFieldBegin(ENCRYPTION_ALGORITHM_FIELD_DESC);
            oprot.writeString(this.encryptionAlgorithm);
            oprot.writeFieldEnd();
        }
        if (encryptionProvider != null) {
            oprot.writeFieldBegin(ENCRYPTION_PROVIDER_FIELD_DESC);
            oprot.writeString(this.encryptionProvider);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    private static class _ThriftDwrfEncryptionMetadataLazy
    {
        private static final ThriftDwrfEncryptionMetadata _DEFAULT = new Builder().build();
    }

    public static ThriftDwrfEncryptionMetadata defaultInstance()
    {
        return _ThriftDwrfEncryptionMetadataLazy._DEFAULT;
    }
}
