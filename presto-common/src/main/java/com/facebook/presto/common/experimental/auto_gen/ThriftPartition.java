/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.SwiftGenerated;
import com.facebook.swift.codec.ThriftConstructor;
import com.facebook.swift.codec.ThriftField;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftStruct;
import org.apache.fbthrift.TException;
import org.apache.fbthrift.protocol.TField;
import org.apache.fbthrift.protocol.TList;
import org.apache.fbthrift.protocol.TMap;
import org.apache.fbthrift.protocol.TProtocol;
import org.apache.fbthrift.protocol.TProtocolUtil;
import org.apache.fbthrift.protocol.TStruct;
import org.apache.fbthrift.protocol.TType;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import static com.google.common.base.MoreObjects.ToStringHelper;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value = "ThriftPartition", builder = ThriftPartition.Builder.class)
public final class ThriftPartition
        implements com.facebook.thrift.payload.ThriftSerializable
{
    @ThriftConstructor
    public ThriftPartition(
            @ThriftField(value = 1, name = "databaseName", requiredness = Requiredness.NONE) final String databaseName,
            @ThriftField(value = 2, name = "tableName", requiredness = Requiredness.NONE) final String tableName,
            @ThriftField(value = 3, name = "values", requiredness = Requiredness.NONE) final List<String> values,
            @ThriftField(value = 4, name = "storage", requiredness = Requiredness.NONE) final ThriftStorage storage,
            @ThriftField(value = 5, name = "columns", requiredness = Requiredness.NONE) final List<ThriftColumn> columns,
            @ThriftField(value = 6, name = "parameters", requiredness = Requiredness.NONE) final Map<String, String> parameters,
            @ThriftField(value = 7, name = "partitionVersion", requiredness = Requiredness.OPTIONAL) final Long partitionVersion,
            @ThriftField(value = 8, name = "eligibleToIgnore", requiredness = Requiredness.NONE) final boolean eligibleToIgnore,
            @ThriftField(value = 9, name = "sealedPartition", requiredness = Requiredness.NONE) final boolean sealedPartition,
            @ThriftField(value = 10, name = "createTime", requiredness = Requiredness.NONE) final int createTime,
            @ThriftField(value = 11, name = "lastDataCommitTime", requiredness = Requiredness.NONE) final long lastDataCommitTime,
            @ThriftField(value = 12, name = "rowIdPartitionComponent", requiredness = Requiredness.OPTIONAL) final byte[] rowIdPartitionComponent,
            @ThriftField(value = 13, name = "rowIdPartitionComponentV2", requiredness = Requiredness.OPTIONAL) final ThriftRowIdComponentV2 rowIdPartitionComponentV2
    )
    {
        this.databaseName = databaseName;
        this.tableName = tableName;
        this.values = values;
        this.storage = storage;
        this.columns = columns;
        this.parameters = parameters;
        this.partitionVersion = partitionVersion;
        this.eligibleToIgnore = eligibleToIgnore;
        this.sealedPartition = sealedPartition;
        this.createTime = createTime;
        this.lastDataCommitTime = lastDataCommitTime;
        this.rowIdPartitionComponent = rowIdPartitionComponent;
        this.rowIdPartitionComponentV2 = rowIdPartitionComponentV2;
    }

    @ThriftConstructor
    protected ThriftPartition()
    {
        this.databaseName = null;
        this.tableName = null;
        this.values = null;
        this.storage = null;
        this.columns = null;
        this.parameters = null;
        this.partitionVersion = null;
        this.eligibleToIgnore = false;
        this.sealedPartition = false;
        this.createTime = 0;
        this.lastDataCommitTime = 0L;
        this.rowIdPartitionComponent = null;
        this.rowIdPartitionComponentV2 = null;
    }

    public static Builder builder()
    {
        return new Builder();
    }

    public static Builder builder(ThriftPartition other)
    {
        return new Builder(other);
    }

    public static class Builder
    {
        private String databaseName = null;
        private String tableName = null;
        private List<String> values = null;
        private ThriftStorage storage = null;
        private List<ThriftColumn> columns = null;
        private Map<String, String> parameters = null;
        private Long partitionVersion = null;
        private boolean eligibleToIgnore = false;
        private boolean sealedPartition = false;
        private int createTime = 0;
        private long lastDataCommitTime = 0L;
        private byte[] rowIdPartitionComponent = null;
        private ThriftRowIdComponentV2 rowIdPartitionComponentV2 = null;

        @ThriftField(value = 1, name = "databaseName", requiredness = Requiredness.NONE)
        public Builder setDatabaseName(String databaseName)
        {
            this.databaseName = databaseName;
            return this;
        }

        public String getDatabaseName() {return databaseName;}

        @ThriftField(value = 2, name = "tableName", requiredness = Requiredness.NONE)
        public Builder setTableName(String tableName)
        {
            this.tableName = tableName;
            return this;
        }

        public String getTableName() {return tableName;}

        @ThriftField(value = 3, name = "values", requiredness = Requiredness.NONE)
        public Builder setValues(List<String> values)
        {
            this.values = values;
            return this;
        }

        public List<String> getValues() {return values;}

        @ThriftField(value = 4, name = "storage", requiredness = Requiredness.NONE)
        public Builder setStorage(ThriftStorage storage)
        {
            this.storage = storage;
            return this;
        }

        public ThriftStorage getStorage() {return storage;}

        @ThriftField(value = 5, name = "columns", requiredness = Requiredness.NONE)
        public Builder setColumns(List<ThriftColumn> columns)
        {
            this.columns = columns;
            return this;
        }

        public List<ThriftColumn> getColumns() {return columns;}

        @ThriftField(value = 6, name = "parameters", requiredness = Requiredness.NONE)
        public Builder setParameters(Map<String, String> parameters)
        {
            this.parameters = parameters;
            return this;
        }

        public Map<String, String> getParameters() {return parameters;}

        @ThriftField(value = 7, name = "partitionVersion", requiredness = Requiredness.OPTIONAL)
        public Builder setPartitionVersion(Long partitionVersion)
        {
            this.partitionVersion = partitionVersion;
            return this;
        }

        public Long getPartitionVersion() {return partitionVersion;}

        @ThriftField(value = 8, name = "eligibleToIgnore", requiredness = Requiredness.NONE)
        public Builder setEligibleToIgnore(boolean eligibleToIgnore)
        {
            this.eligibleToIgnore = eligibleToIgnore;
            return this;
        }

        public boolean isEligibleToIgnore() {return eligibleToIgnore;}

        @ThriftField(value = 9, name = "sealedPartition", requiredness = Requiredness.NONE)
        public Builder setSealedPartition(boolean sealedPartition)
        {
            this.sealedPartition = sealedPartition;
            return this;
        }

        public boolean isSealedPartition() {return sealedPartition;}

        @ThriftField(value = 10, name = "createTime", requiredness = Requiredness.NONE)
        public Builder setCreateTime(int createTime)
        {
            this.createTime = createTime;
            return this;
        }

        public int getCreateTime() {return createTime;}

        @ThriftField(value = 11, name = "lastDataCommitTime", requiredness = Requiredness.NONE)
        public Builder setLastDataCommitTime(long lastDataCommitTime)
        {
            this.lastDataCommitTime = lastDataCommitTime;
            return this;
        }

        public long getLastDataCommitTime() {return lastDataCommitTime;}

        @ThriftField(value = 12, name = "rowIdPartitionComponent", requiredness = Requiredness.OPTIONAL)
        public Builder setRowIdPartitionComponent(byte[] rowIdPartitionComponent)
        {
            this.rowIdPartitionComponent = rowIdPartitionComponent;
            return this;
        }

        public byte[] getRowIdPartitionComponent() {return rowIdPartitionComponent;}

        @ThriftField(value = 13, name = "rowIdPartitionComponentV2", requiredness = Requiredness.OPTIONAL)
        public Builder setRowIdPartitionComponentV2(ThriftRowIdComponentV2 rowIdPartitionComponentV2)
        {
            this.rowIdPartitionComponentV2 = rowIdPartitionComponentV2;
            return this;
        }

        public ThriftRowIdComponentV2 getRowIdPartitionComponentV2() {return rowIdPartitionComponentV2;}

        public Builder() {}

        public Builder(ThriftPartition other)
        {
            this.databaseName = other.databaseName;
            this.tableName = other.tableName;
            this.values = other.values;
            this.storage = other.storage;
            this.columns = other.columns;
            this.parameters = other.parameters;
            this.partitionVersion = other.partitionVersion;
            this.eligibleToIgnore = other.eligibleToIgnore;
            this.sealedPartition = other.sealedPartition;
            this.createTime = other.createTime;
            this.lastDataCommitTime = other.lastDataCommitTime;
            this.rowIdPartitionComponent = other.rowIdPartitionComponent;
            this.rowIdPartitionComponentV2 = other.rowIdPartitionComponentV2;
        }

        @ThriftConstructor
        public ThriftPartition build()
        {
            ThriftPartition result = new ThriftPartition(
                    this.databaseName,
                    this.tableName,
                    this.values,
                    this.storage,
                    this.columns,
                    this.parameters,
                    this.partitionVersion,
                    this.eligibleToIgnore,
                    this.sealedPartition,
                    this.createTime,
                    this.lastDataCommitTime,
                    this.rowIdPartitionComponent,
                    this.rowIdPartitionComponentV2
            );
            return result;
        }
    }

    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftPartition");
    private final String databaseName;
    public static final int _DATABASENAME = 1;
    private static final TField DATABASE_NAME_FIELD_DESC = new TField("databaseName", TType.STRING, (short) 1);
    private final String tableName;
    public static final int _TABLENAME = 2;
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 2);
    private final List<String> values;
    public static final int _VALUES = 3;
    private static final TField VALUES_FIELD_DESC = new TField("values", TType.LIST, (short) 3);
    private final ThriftStorage storage;
    public static final int _STORAGE = 4;
    private static final TField STORAGE_FIELD_DESC = new TField("storage", TType.STRUCT, (short) 4);
    private final List<ThriftColumn> columns;
    public static final int _COLUMNS = 5;
    private static final TField COLUMNS_FIELD_DESC = new TField("columns", TType.LIST, (short) 5);
    private final Map<String, String> parameters;
    public static final int _PARAMETERS = 6;
    private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.MAP, (short) 6);
    private final Long partitionVersion;
    public static final int _PARTITIONVERSION = 7;
    private static final TField PARTITION_VERSION_FIELD_DESC = new TField("partitionVersion", TType.I64, (short) 7);
    private final boolean eligibleToIgnore;
    public static final int _ELIGIBLETOIGNORE = 8;
    private static final TField ELIGIBLE_TO_IGNORE_FIELD_DESC = new TField("eligibleToIgnore", TType.BOOL, (short) 8);
    private final boolean sealedPartition;
    public static final int _SEALEDPARTITION = 9;
    private static final TField SEALED_PARTITION_FIELD_DESC = new TField("sealedPartition", TType.BOOL, (short) 9);
    private final int createTime;
    public static final int _CREATETIME = 10;
    private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.I32, (short) 10);
    private final long lastDataCommitTime;
    public static final int _LASTDATACOMMITTIME = 11;
    private static final TField LAST_DATA_COMMIT_TIME_FIELD_DESC = new TField("lastDataCommitTime", TType.I64, (short) 11);
    private final byte[] rowIdPartitionComponent;
    public static final int _ROWIDPARTITIONCOMPONENT = 12;
    private static final TField ROW_ID_PARTITION_COMPONENT_FIELD_DESC = new TField("rowIdPartitionComponent", TType.STRING, (short) 12);
    private final ThriftRowIdComponentV2 rowIdPartitionComponentV2;
    public static final int _ROWIDPARTITIONCOMPONENTV2 = 13;
    private static final TField ROW_ID_PARTITION_COMPONENT_V2_FIELD_DESC = new TField("rowIdPartitionComponentV2", TType.STRUCT, (short) 13);

    static {
        NAMES_TO_IDS.put("databaseName", 1);
        THRIFT_NAMES_TO_IDS.put("databaseName", 1);
        FIELD_METADATA.put(1, DATABASE_NAME_FIELD_DESC);
        NAMES_TO_IDS.put("tableName", 2);
        THRIFT_NAMES_TO_IDS.put("tableName", 2);
        FIELD_METADATA.put(2, TABLE_NAME_FIELD_DESC);
        NAMES_TO_IDS.put("values", 3);
        THRIFT_NAMES_TO_IDS.put("values", 3);
        FIELD_METADATA.put(3, VALUES_FIELD_DESC);
        NAMES_TO_IDS.put("storage", 4);
        THRIFT_NAMES_TO_IDS.put("storage", 4);
        FIELD_METADATA.put(4, STORAGE_FIELD_DESC);
        NAMES_TO_IDS.put("columns", 5);
        THRIFT_NAMES_TO_IDS.put("columns", 5);
        FIELD_METADATA.put(5, COLUMNS_FIELD_DESC);
        NAMES_TO_IDS.put("parameters", 6);
        THRIFT_NAMES_TO_IDS.put("parameters", 6);
        FIELD_METADATA.put(6, PARAMETERS_FIELD_DESC);
        NAMES_TO_IDS.put("partitionVersion", 7);
        THRIFT_NAMES_TO_IDS.put("partitionVersion", 7);
        FIELD_METADATA.put(7, PARTITION_VERSION_FIELD_DESC);
        NAMES_TO_IDS.put("eligibleToIgnore", 8);
        THRIFT_NAMES_TO_IDS.put("eligibleToIgnore", 8);
        FIELD_METADATA.put(8, ELIGIBLE_TO_IGNORE_FIELD_DESC);
        NAMES_TO_IDS.put("sealedPartition", 9);
        THRIFT_NAMES_TO_IDS.put("sealedPartition", 9);
        FIELD_METADATA.put(9, SEALED_PARTITION_FIELD_DESC);
        NAMES_TO_IDS.put("createTime", 10);
        THRIFT_NAMES_TO_IDS.put("createTime", 10);
        FIELD_METADATA.put(10, CREATE_TIME_FIELD_DESC);
        NAMES_TO_IDS.put("lastDataCommitTime", 11);
        THRIFT_NAMES_TO_IDS.put("lastDataCommitTime", 11);
        FIELD_METADATA.put(11, LAST_DATA_COMMIT_TIME_FIELD_DESC);
        NAMES_TO_IDS.put("rowIdPartitionComponent", 12);
        THRIFT_NAMES_TO_IDS.put("rowIdPartitionComponent", 12);
        FIELD_METADATA.put(12, ROW_ID_PARTITION_COMPONENT_FIELD_DESC);
        NAMES_TO_IDS.put("rowIdPartitionComponentV2", 13);
        THRIFT_NAMES_TO_IDS.put("rowIdPartitionComponentV2", 13);
        FIELD_METADATA.put(13, ROW_ID_PARTITION_COMPONENT_V2_FIELD_DESC);
    }

    @Nullable
    @ThriftField(value = 1, name = "databaseName", requiredness = Requiredness.NONE)
    public String getDatabaseName() {return databaseName;}

    @Nullable
    @ThriftField(value = 2, name = "tableName", requiredness = Requiredness.NONE)
    public String getTableName() {return tableName;}

    @Nullable
    @ThriftField(value = 3, name = "values", requiredness = Requiredness.NONE)
    public List<String> getValues() {return values;}

    @Nullable
    @ThriftField(value = 4, name = "storage", requiredness = Requiredness.NONE)
    public ThriftStorage getStorage() {return storage;}

    @Nullable
    @ThriftField(value = 5, name = "columns", requiredness = Requiredness.NONE)
    public List<ThriftColumn> getColumns() {return columns;}

    @Nullable
    @ThriftField(value = 6, name = "parameters", requiredness = Requiredness.NONE)
    public Map<String, String> getParameters() {return parameters;}

    @Nullable
    @ThriftField(value = 7, name = "partitionVersion", requiredness = Requiredness.OPTIONAL)
    public Long getPartitionVersion() {return partitionVersion;}

    @ThriftField(value = 8, name = "eligibleToIgnore", requiredness = Requiredness.NONE)
    public boolean isEligibleToIgnore() {return eligibleToIgnore;}

    @ThriftField(value = 9, name = "sealedPartition", requiredness = Requiredness.NONE)
    public boolean isSealedPartition() {return sealedPartition;}

    @ThriftField(value = 10, name = "createTime", requiredness = Requiredness.NONE)
    public int getCreateTime() {return createTime;}

    @ThriftField(value = 11, name = "lastDataCommitTime", requiredness = Requiredness.NONE)
    public long getLastDataCommitTime() {return lastDataCommitTime;}

    @Nullable
    @ThriftField(value = 12, name = "rowIdPartitionComponent", requiredness = Requiredness.OPTIONAL)
    public byte[] getRowIdPartitionComponent() {return rowIdPartitionComponent;}

    @Nullable
    @ThriftField(value = 13, name = "rowIdPartitionComponentV2", requiredness = Requiredness.OPTIONAL)
    public ThriftRowIdComponentV2 getRowIdPartitionComponentV2() {return rowIdPartitionComponentV2;}

    @Override
    public String toString()
    {
        ToStringHelper helper = toStringHelper(this);
        helper.add("databaseName", databaseName);
        helper.add("tableName", tableName);
        helper.add("values", values);
        helper.add("storage", storage);
        helper.add("columns", columns);
        helper.add("parameters", parameters);
        helper.add("partitionVersion", partitionVersion);
        helper.add("eligibleToIgnore", eligibleToIgnore);
        helper.add("sealedPartition", sealedPartition);
        helper.add("createTime", createTime);
        helper.add("lastDataCommitTime", lastDataCommitTime);
        helper.add("rowIdPartitionComponent", rowIdPartitionComponent);
        helper.add("rowIdPartitionComponentV2", rowIdPartitionComponentV2);
        return helper.toString();
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ThriftPartition other = (ThriftPartition) o;

        return
                Objects.equals(databaseName, other.databaseName) &&
                        Objects.equals(tableName, other.tableName) &&
                        Objects.equals(values, other.values) &&
                        Objects.equals(storage, other.storage) &&
                        Objects.equals(columns, other.columns) &&
                        Objects.equals(parameters, other.parameters) &&
                        Objects.equals(partitionVersion, other.partitionVersion) &&
                        Objects.equals(eligibleToIgnore, other.eligibleToIgnore) &&
                        Objects.equals(sealedPartition, other.sealedPartition) &&
                        Objects.equals(createTime, other.createTime) &&
                        Objects.equals(lastDataCommitTime, other.lastDataCommitTime) &&
                        Arrays.equals(rowIdPartitionComponent, other.rowIdPartitionComponent) &&
                        Objects.equals(rowIdPartitionComponentV2, other.rowIdPartitionComponentV2) &&
                        true;
    }

    @Override
    public int hashCode()
    {
        return Arrays.deepHashCode(new Object[] {
                databaseName,
                tableName,
                values,
                storage,
                columns,
                parameters,
                partitionVersion,
                eligibleToIgnore,
                sealedPartition,
                createTime,
                lastDataCommitTime,
                rowIdPartitionComponent,
                rowIdPartitionComponentV2
        });
    }

    public static com.facebook.thrift.payload.Reader<ThriftPartition> asReader()
    {
        return ThriftPartition::read0;
    }

    public static ThriftPartition read0(TProtocol oprot)
            throws TException
    {
        TField __field;
        oprot.readStructBegin(ThriftPartition.NAMES_TO_IDS, ThriftPartition.THRIFT_NAMES_TO_IDS, ThriftPartition.FIELD_METADATA);
        Builder builder = new Builder();
        while (true) {
            __field = oprot.readFieldBegin();
            if (__field.type == TType.STOP) {
                break;
            }
            switch (__field.id) {
                case _DATABASENAME:
                    if (__field.type == TType.STRING) {
                        String databaseName = oprot.readString();
                        builder.setDatabaseName(databaseName);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _TABLENAME:
                    if (__field.type == TType.STRING) {
                        String tableName = oprot.readString();
                        builder.setTableName(tableName);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _VALUES:
                    if (__field.type == TType.LIST) {
                        List<String> values;
                        {
                            TList _list = oprot.readListBegin();
                            values = new ArrayList<String>(Math.max(0, _list.size));
                            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {

                                String _value1 = oprot.readString();
                                values.add(_value1);
                            }
                            oprot.readListEnd();
                        }
                        builder.setValues(values);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _STORAGE:
                    if (__field.type == TType.STRUCT) {
                        ThriftStorage storage = ThriftStorage.read0(oprot);
                        builder.setStorage(storage);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _COLUMNS:
                    if (__field.type == TType.LIST) {
                        List<ThriftColumn> columns;
                        {
                            TList _list = oprot.readListBegin();
                            columns = new ArrayList<ThriftColumn>(Math.max(0, _list.size));
                            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {

                                ThriftColumn _value1 = ThriftColumn.read0(oprot);
                                columns.add(_value1);
                            }
                            oprot.readListEnd();
                        }
                        builder.setColumns(columns);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _PARAMETERS:
                    if (__field.type == TType.MAP) {
                        Map<String, String> parameters;
                        {
                            TMap _map = oprot.readMapBegin();
                            parameters = new HashMap<String, String>(Math.max(0, _map.size));
                            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {

                                String _key1 = oprot.readString();
                                String _value1 = oprot.readString();
                                parameters.put(_key1, _value1);
                            }
                        }
                        oprot.readMapEnd();
                        builder.setParameters(parameters);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _PARTITIONVERSION:
                    if (__field.type == TType.I64) {
                        Long partitionVersion = oprot.readI64();
                        builder.setPartitionVersion(partitionVersion);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _ELIGIBLETOIGNORE:
                    if (__field.type == TType.BOOL) {
                        boolean eligibleToIgnore = oprot.readBool();
                        builder.setEligibleToIgnore(eligibleToIgnore);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _SEALEDPARTITION:
                    if (__field.type == TType.BOOL) {
                        boolean sealedPartition = oprot.readBool();
                        builder.setSealedPartition(sealedPartition);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _CREATETIME:
                    if (__field.type == TType.I32) {
                        int createTime = oprot.readI32();
                        builder.setCreateTime(createTime);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _LASTDATACOMMITTIME:
                    if (__field.type == TType.I64) {
                        long lastDataCommitTime = oprot.readI64();
                        builder.setLastDataCommitTime(lastDataCommitTime);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _ROWIDPARTITIONCOMPONENT:
                    if (__field.type == TType.STRING) {
                        byte[] rowIdPartitionComponent = oprot.readBinary().array();
                        builder.setRowIdPartitionComponent(rowIdPartitionComponent);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _ROWIDPARTITIONCOMPONENTV2:
                    if (__field.type == TType.STRUCT) {
                        ThriftRowIdComponentV2 rowIdPartitionComponentV2 = ThriftRowIdComponentV2.read0(oprot);
                        builder.setRowIdPartitionComponentV2(rowIdPartitionComponentV2);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(oprot, __field.type);
                    break;
            }
            oprot.readFieldEnd();
        }
        oprot.readStructEnd();
        return builder.build();
    }

    public void write0(TProtocol oprot)
            throws TException
    {
        oprot.writeStructBegin(STRUCT_DESC);
        if (databaseName != null) {
            oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
            oprot.writeString(this.databaseName);
            oprot.writeFieldEnd();
        }
        if (tableName != null) {
            oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
            oprot.writeString(this.tableName);
            oprot.writeFieldEnd();
        }
        if (values != null) {
            oprot.writeFieldBegin(VALUES_FIELD_DESC);
            List<String> _iter0 = values;
            oprot.writeListBegin(new TList(TType.STRING, _iter0.size()));
            for (String _iter1 : _iter0) {
                oprot.writeString(_iter1);
            }
            oprot.writeListEnd();
            oprot.writeFieldEnd();
        }
        if (storage != null) {
            oprot.writeFieldBegin(STORAGE_FIELD_DESC);
            this.storage.write0(oprot);
            oprot.writeFieldEnd();
        }
        if (columns != null) {
            oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
            List<ThriftColumn> _iter0 = columns;
            oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (ThriftColumn _iter1 : _iter0) {
                _iter1.write0(oprot);
            }
            oprot.writeListEnd();
            oprot.writeFieldEnd();
        }
        if (parameters != null) {
            oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
            Map<String, String> _iter0 = parameters;
            oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
            for (Map.Entry<String, String> _iter1 : _iter0.entrySet()) {
                oprot.writeString(_iter1.getKey());
                oprot.writeString(_iter1.getValue());
            }
            oprot.writeMapEnd();
            oprot.writeFieldEnd();
        }
        if (partitionVersion != null) {
            oprot.writeFieldBegin(PARTITION_VERSION_FIELD_DESC);
            oprot.writeI64(this.partitionVersion);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ELIGIBLE_TO_IGNORE_FIELD_DESC);
        oprot.writeBool(this.eligibleToIgnore);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEALED_PARTITION_FIELD_DESC);
        oprot.writeBool(this.sealedPartition);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI32(this.createTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_DATA_COMMIT_TIME_FIELD_DESC);
        oprot.writeI64(this.lastDataCommitTime);
        oprot.writeFieldEnd();
        if (rowIdPartitionComponent != null) {
            oprot.writeFieldBegin(ROW_ID_PARTITION_COMPONENT_FIELD_DESC);
            oprot.writeBinary(java.nio.ByteBuffer.wrap(this.rowIdPartitionComponent));
            oprot.writeFieldEnd();
        }
        if (rowIdPartitionComponentV2 != null) {
            oprot.writeFieldBegin(ROW_ID_PARTITION_COMPONENT_V2_FIELD_DESC);
            this.rowIdPartitionComponentV2.write0(oprot);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    private static class _ThriftPartitionLazy
    {
        private static final ThriftPartition _DEFAULT = new Builder().build();
    }

    public static ThriftPartition defaultInstance()
    {
        return _ThriftPartitionLazy._DEFAULT;
    }
}
