/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.SwiftGenerated;
import com.facebook.swift.codec.ThriftEnumValue;
import org.apache.fbthrift.TException;
import org.apache.fbthrift.protocol.TProtocol;

@SwiftGenerated
public enum ThriftTimeUnit
        implements com.facebook.thrift.enums.BaseEnum, com.facebook.thrift.payload.ThriftSerializable
{
    NANOSECONDS(0),
    MICROSECONDS(1),
    MILLISECONDS(2),
    SECONDS(3),
    MINUTES(4),
    HOURS(5),
    DAYS(6);

    private final int value;

    ThriftTimeUnit(int value)
    {
        this.value = value;
    }

    @ThriftEnumValue
    public int getValue()
    {
        return value;
    }

    public static ThriftTimeUnit fromInteger(int n)
    {
        switch (n) {
            case 0:
                return NANOSECONDS;
            case 1:
                return MICROSECONDS;
            case 2:
                return MILLISECONDS;
            case 3:
                return SECONDS;
            case 4:
                return MINUTES;
            case 5:
                return HOURS;
            case 6:
                return DAYS;
            default:
                return null;
        }
    }

    public static com.facebook.thrift.payload.Reader<ThriftTimeUnit> asReader()
    {
        return ThriftTimeUnit::read0;
    }

    public static ThriftTimeUnit read0(TProtocol iprot)
            throws TException
    {
        return ThriftTimeUnit.fromInteger(iprot.readI32());
    }

    public void write0(TProtocol oprot)
            throws TException
    {
        oprot.writeI32(getValue());
    }
}
