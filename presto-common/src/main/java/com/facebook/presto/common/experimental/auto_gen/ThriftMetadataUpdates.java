/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.SwiftGenerated;
import com.facebook.swift.codec.ThriftConstructor;
import com.facebook.swift.codec.ThriftField;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftStruct;
import org.apache.fbthrift.TException;
import org.apache.fbthrift.protocol.TField;
import org.apache.fbthrift.protocol.TList;
import org.apache.fbthrift.protocol.TProtocol;
import org.apache.fbthrift.protocol.TProtocolUtil;
import org.apache.fbthrift.protocol.TStruct;
import org.apache.fbthrift.protocol.TType;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import static com.google.common.base.MoreObjects.ToStringHelper;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value = "ThriftMetadataUpdates", builder = ThriftMetadataUpdates.Builder.class)
public final class ThriftMetadataUpdates
        implements com.facebook.thrift.payload.ThriftSerializable
{
    @ThriftConstructor
    public ThriftMetadataUpdates(
            @ThriftField(value = 1, name = "connectorId", requiredness = Requiredness.OPTIONAL) final String connectorId,
            @ThriftField(value = 2, name = "metadataUpdates", requiredness = Requiredness.NONE) final List<ThriftConnectorMetadataUpdateHandle> metadataUpdates
    )
    {
        this.connectorId = connectorId;
        this.metadataUpdates = metadataUpdates;
    }

    @ThriftConstructor
    protected ThriftMetadataUpdates()
    {
        this.connectorId = null;
        this.metadataUpdates = null;
    }

    public static Builder builder()
    {
        return new Builder();
    }

    public static Builder builder(ThriftMetadataUpdates other)
    {
        return new Builder(other);
    }

    public static class Builder
    {
        private String connectorId = null;
        private List<ThriftConnectorMetadataUpdateHandle> metadataUpdates = null;

        @ThriftField(value = 1, name = "connectorId", requiredness = Requiredness.OPTIONAL)
        public Builder setConnectorId(String connectorId)
        {
            this.connectorId = connectorId;
            return this;
        }

        public String getConnectorId() {return connectorId;}

        @ThriftField(value = 2, name = "metadataUpdates", requiredness = Requiredness.NONE)
        public Builder setMetadataUpdates(List<ThriftConnectorMetadataUpdateHandle> metadataUpdates)
        {
            this.metadataUpdates = metadataUpdates;
            return this;
        }

        public List<ThriftConnectorMetadataUpdateHandle> getMetadataUpdates() {return metadataUpdates;}

        public Builder() {}

        public Builder(ThriftMetadataUpdates other)
        {
            this.connectorId = other.connectorId;
            this.metadataUpdates = other.metadataUpdates;
        }

        @ThriftConstructor
        public ThriftMetadataUpdates build()
        {
            ThriftMetadataUpdates result = new ThriftMetadataUpdates(
                    this.connectorId,
                    this.metadataUpdates
            );
            return result;
        }
    }

    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftMetadataUpdates");
    private final String connectorId;
    public static final int _CONNECTORID = 1;
    private static final TField CONNECTOR_ID_FIELD_DESC = new TField("connectorId", TType.STRING, (short) 1);
    private final List<ThriftConnectorMetadataUpdateHandle> metadataUpdates;
    public static final int _METADATAUPDATES = 2;
    private static final TField METADATA_UPDATES_FIELD_DESC = new TField("metadataUpdates", TType.LIST, (short) 2);

    static {
        NAMES_TO_IDS.put("connectorId", 1);
        THRIFT_NAMES_TO_IDS.put("connectorId", 1);
        FIELD_METADATA.put(1, CONNECTOR_ID_FIELD_DESC);
        NAMES_TO_IDS.put("metadataUpdates", 2);
        THRIFT_NAMES_TO_IDS.put("metadataUpdates", 2);
        FIELD_METADATA.put(2, METADATA_UPDATES_FIELD_DESC);
    }

    @Nullable
    @ThriftField(value = 1, name = "connectorId", requiredness = Requiredness.OPTIONAL)
    public String getConnectorId() {return connectorId;}

    @Nullable
    @ThriftField(value = 2, name = "metadataUpdates", requiredness = Requiredness.NONE)
    public List<ThriftConnectorMetadataUpdateHandle> getMetadataUpdates() {return metadataUpdates;}

    @Override
    public String toString()
    {
        ToStringHelper helper = toStringHelper(this);
        helper.add("connectorId", connectorId);
        helper.add("metadataUpdates", metadataUpdates);
        return helper.toString();
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ThriftMetadataUpdates other = (ThriftMetadataUpdates) o;

        return
                Objects.equals(connectorId, other.connectorId) &&
                        Objects.equals(metadataUpdates, other.metadataUpdates) &&
                        true;
    }

    @Override
    public int hashCode()
    {
        return Arrays.deepHashCode(new Object[] {
                connectorId,
                metadataUpdates
        });
    }

    public static com.facebook.thrift.payload.Reader<ThriftMetadataUpdates> asReader()
    {
        return ThriftMetadataUpdates::read0;
    }

    public static ThriftMetadataUpdates read0(TProtocol oprot)
            throws TException
    {
        TField __field;
        oprot.readStructBegin(ThriftMetadataUpdates.NAMES_TO_IDS, ThriftMetadataUpdates.THRIFT_NAMES_TO_IDS, ThriftMetadataUpdates.FIELD_METADATA);
        Builder builder = new Builder();
        while (true) {
            __field = oprot.readFieldBegin();
            if (__field.type == TType.STOP) {
                break;
            }
            switch (__field.id) {
                case _CONNECTORID:
                    if (__field.type == TType.STRING) {
                        String connectorId = oprot.readString();
                        builder.setConnectorId(connectorId);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _METADATAUPDATES:
                    if (__field.type == TType.LIST) {
                        List<ThriftConnectorMetadataUpdateHandle> metadataUpdates;
                        {
                            TList _list = oprot.readListBegin();
                            metadataUpdates = new ArrayList<ThriftConnectorMetadataUpdateHandle>(Math.max(0, _list.size));
                            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {

                                ThriftConnectorMetadataUpdateHandle _value1 = ThriftConnectorMetadataUpdateHandle.read0(oprot);
                                metadataUpdates.add(_value1);
                            }
                            oprot.readListEnd();
                        }
                        builder.setMetadataUpdates(metadataUpdates);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(oprot, __field.type);
                    break;
            }
            oprot.readFieldEnd();
        }
        oprot.readStructEnd();
        return builder.build();
    }

    public void write0(TProtocol oprot)
            throws TException
    {
        oprot.writeStructBegin(STRUCT_DESC);
        if (connectorId != null) {
            oprot.writeFieldBegin(CONNECTOR_ID_FIELD_DESC);
            oprot.writeString(this.connectorId);
            oprot.writeFieldEnd();
        }
        if (metadataUpdates != null) {
            oprot.writeFieldBegin(METADATA_UPDATES_FIELD_DESC);
            List<ThriftConnectorMetadataUpdateHandle> _iter0 = metadataUpdates;
            oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (ThriftConnectorMetadataUpdateHandle _iter1 : _iter0) {
                _iter1.write0(oprot);
            }
            oprot.writeListEnd();
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    private static class _ThriftMetadataUpdatesLazy
    {
        private static final ThriftMetadataUpdates _DEFAULT = new Builder().build();
    }

    public static ThriftMetadataUpdates defaultInstance()
    {
        return _ThriftMetadataUpdatesLazy._DEFAULT;
    }
}
