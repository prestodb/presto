/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftOptionalPartition", builder=ThriftOptionalPartition.Builder.class)
public final class ThriftOptionalPartition implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftOptionalPartition(
        @com.facebook.swift.codec.ThriftField(value=1, name="isPresent", requiredness=Requiredness.NONE) final boolean isPresent,
        @com.facebook.swift.codec.ThriftField(value=2, name="partition", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftPartition partition
    ) {
        this.isPresent = isPresent;
        this.partition = partition;
    }
    
    @ThriftConstructor
    protected ThriftOptionalPartition() {
      this.isPresent = false;
      this.partition = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftOptionalPartition other) {
      return new Builder(other);
    }

    public static class Builder {
        private boolean isPresent = false;
        private com.facebook.presto.common.experimental.auto_gen.ThriftPartition partition = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="isPresent", requiredness=Requiredness.NONE)    public Builder setIsPresent(boolean isPresent) {
            this.isPresent = isPresent;
            return this;
        }
    
        public boolean isIsPresent() { return isPresent; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="partition", requiredness=Requiredness.NONE)    public Builder setPartition(com.facebook.presto.common.experimental.auto_gen.ThriftPartition partition) {
            this.partition = partition;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftPartition getPartition() { return partition; }
    
        public Builder() { }
        public Builder(ThriftOptionalPartition other) {
            this.isPresent = other.isPresent;
            this.partition = other.partition;
        }
    
        @ThriftConstructor
        public ThriftOptionalPartition build() {
            ThriftOptionalPartition result = new ThriftOptionalPartition (
                this.isPresent,
                this.partition
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftOptionalPartition");
    private final boolean isPresent;
    public static final int _ISPRESENT = 1;
    private static final TField IS_PRESENT_FIELD_DESC = new TField("isPresent", TType.BOOL, (short)1);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftPartition partition;
    public static final int _PARTITION = 2;
    private static final TField PARTITION_FIELD_DESC = new TField("partition", TType.STRUCT, (short)2);
    static {
      NAMES_TO_IDS.put("isPresent", 1);
      THRIFT_NAMES_TO_IDS.put("isPresent", 1);
      FIELD_METADATA.put(1, IS_PRESENT_FIELD_DESC);
      NAMES_TO_IDS.put("partition", 2);
      THRIFT_NAMES_TO_IDS.put("partition", 2);
      FIELD_METADATA.put(2, PARTITION_FIELD_DESC);
    }
    
    
    @com.facebook.swift.codec.ThriftField(value=1, name="isPresent", requiredness=Requiredness.NONE)
    public boolean isIsPresent() { return isPresent; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="partition", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftPartition getPartition() { return partition; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("isPresent", isPresent);
        helper.add("partition", partition);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftOptionalPartition other = (ThriftOptionalPartition)o;
    
        return
            Objects.equals(isPresent, other.isPresent) &&
            Objects.equals(partition, other.partition) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            isPresent,
            partition
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftOptionalPartition> asReader() {
      return ThriftOptionalPartition::read0;
    }
    
    public static ThriftOptionalPartition read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftOptionalPartition.NAMES_TO_IDS, ThriftOptionalPartition.THRIFT_NAMES_TO_IDS, ThriftOptionalPartition.FIELD_METADATA);
      ThriftOptionalPartition.Builder builder = new ThriftOptionalPartition.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _ISPRESENT:
          if (__field.type == TType.BOOL) {
            boolean isPresent = oprot.readBool();
            builder.setIsPresent(isPresent);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _PARTITION:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftPartition partition = com.facebook.presto.common.experimental.auto_gen.ThriftPartition.read0(oprot);
            builder.setPartition(partition);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_PRESENT_FIELD_DESC);
      oprot.writeBool(this.isPresent);
      oprot.writeFieldEnd();
      if (partition != null) {
        oprot.writeFieldBegin(PARTITION_FIELD_DESC);
        this.partition.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftOptionalPartitionLazy {
        private static final ThriftOptionalPartition _DEFAULT = new ThriftOptionalPartition.Builder().build();
    }
    
    public static ThriftOptionalPartition defaultInstance() {
        return  _ThriftOptionalPartitionLazy._DEFAULT;
    }
}
