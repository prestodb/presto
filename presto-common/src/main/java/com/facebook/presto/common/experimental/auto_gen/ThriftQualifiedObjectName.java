/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftQualifiedObjectName", builder=ThriftQualifiedObjectName.Builder.class)
public final class ThriftQualifiedObjectName implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftQualifiedObjectName(
        @com.facebook.swift.codec.ThriftField(value=1, name="catalogName", requiredness=Requiredness.NONE) final String catalogName,
        @com.facebook.swift.codec.ThriftField(value=2, name="schemaName", requiredness=Requiredness.NONE) final String schemaName,
        @com.facebook.swift.codec.ThriftField(value=3, name="objectName", requiredness=Requiredness.NONE) final String objectName
    ) {
        this.catalogName = catalogName;
        this.schemaName = schemaName;
        this.objectName = objectName;
    }
    
    @ThriftConstructor
    protected ThriftQualifiedObjectName() {
      this.catalogName = null;
      this.schemaName = null;
      this.objectName = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftQualifiedObjectName other) {
      return new Builder(other);
    }

    public static class Builder {
        private String catalogName = null;
        private String schemaName = null;
        private String objectName = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="catalogName", requiredness=Requiredness.NONE)    public Builder setCatalogName(String catalogName) {
            this.catalogName = catalogName;
            return this;
        }
    
        public String getCatalogName() { return catalogName; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="schemaName", requiredness=Requiredness.NONE)    public Builder setSchemaName(String schemaName) {
            this.schemaName = schemaName;
            return this;
        }
    
        public String getSchemaName() { return schemaName; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="objectName", requiredness=Requiredness.NONE)    public Builder setObjectName(String objectName) {
            this.objectName = objectName;
            return this;
        }
    
        public String getObjectName() { return objectName; }
    
        public Builder() { }
        public Builder(ThriftQualifiedObjectName other) {
            this.catalogName = other.catalogName;
            this.schemaName = other.schemaName;
            this.objectName = other.objectName;
        }
    
        @ThriftConstructor
        public ThriftQualifiedObjectName build() {
            ThriftQualifiedObjectName result = new ThriftQualifiedObjectName (
                this.catalogName,
                this.schemaName,
                this.objectName
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftQualifiedObjectName");
    private final String catalogName;
    public static final int _CATALOGNAME = 1;
    private static final TField CATALOG_NAME_FIELD_DESC = new TField("catalogName", TType.STRING, (short)1);
        private final String schemaName;
    public static final int _SCHEMANAME = 2;
    private static final TField SCHEMA_NAME_FIELD_DESC = new TField("schemaName", TType.STRING, (short)2);
        private final String objectName;
    public static final int _OBJECTNAME = 3;
    private static final TField OBJECT_NAME_FIELD_DESC = new TField("objectName", TType.STRING, (short)3);
    static {
      NAMES_TO_IDS.put("catalogName", 1);
      THRIFT_NAMES_TO_IDS.put("catalogName", 1);
      FIELD_METADATA.put(1, CATALOG_NAME_FIELD_DESC);
      NAMES_TO_IDS.put("schemaName", 2);
      THRIFT_NAMES_TO_IDS.put("schemaName", 2);
      FIELD_METADATA.put(2, SCHEMA_NAME_FIELD_DESC);
      NAMES_TO_IDS.put("objectName", 3);
      THRIFT_NAMES_TO_IDS.put("objectName", 3);
      FIELD_METADATA.put(3, OBJECT_NAME_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="catalogName", requiredness=Requiredness.NONE)
    public String getCatalogName() { return catalogName; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="schemaName", requiredness=Requiredness.NONE)
    public String getSchemaName() { return schemaName; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=3, name="objectName", requiredness=Requiredness.NONE)
    public String getObjectName() { return objectName; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("catalogName", catalogName);
        helper.add("schemaName", schemaName);
        helper.add("objectName", objectName);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftQualifiedObjectName other = (ThriftQualifiedObjectName)o;
    
        return
            Objects.equals(catalogName, other.catalogName) &&
            Objects.equals(schemaName, other.schemaName) &&
            Objects.equals(objectName, other.objectName) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            catalogName,
            schemaName,
            objectName
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftQualifiedObjectName> asReader() {
      return ThriftQualifiedObjectName::read0;
    }
    
    public static ThriftQualifiedObjectName read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftQualifiedObjectName.NAMES_TO_IDS, ThriftQualifiedObjectName.THRIFT_NAMES_TO_IDS, ThriftQualifiedObjectName.FIELD_METADATA);
      ThriftQualifiedObjectName.Builder builder = new ThriftQualifiedObjectName.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _CATALOGNAME:
          if (__field.type == TType.STRING) {
            String catalogName = oprot.readString();
            builder.setCatalogName(catalogName);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SCHEMANAME:
          if (__field.type == TType.STRING) {
            String schemaName = oprot.readString();
            builder.setSchemaName(schemaName);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OBJECTNAME:
          if (__field.type == TType.STRING) {
            String objectName = oprot.readString();
            builder.setObjectName(objectName);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (catalogName != null) {
        oprot.writeFieldBegin(CATALOG_NAME_FIELD_DESC);
        oprot.writeString(this.catalogName);
        oprot.writeFieldEnd();
      }
      if (schemaName != null) {
        oprot.writeFieldBegin(SCHEMA_NAME_FIELD_DESC);
        oprot.writeString(this.schemaName);
        oprot.writeFieldEnd();
      }
      if (objectName != null) {
        oprot.writeFieldBegin(OBJECT_NAME_FIELD_DESC);
        oprot.writeString(this.objectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftQualifiedObjectNameLazy {
        private static final ThriftQualifiedObjectName _DEFAULT = new ThriftQualifiedObjectName.Builder().build();
    }
    
    public static ThriftQualifiedObjectName defaultInstance() {
        return  _ThriftQualifiedObjectNameLazy._DEFAULT;
    }
}
