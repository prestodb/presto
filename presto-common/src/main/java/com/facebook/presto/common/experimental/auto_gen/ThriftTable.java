/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.SwiftGenerated;
import com.facebook.swift.codec.ThriftConstructor;
import com.facebook.swift.codec.ThriftField;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftStruct;
import org.apache.fbthrift.TException;
import org.apache.fbthrift.protocol.TField;
import org.apache.fbthrift.protocol.TList;
import org.apache.fbthrift.protocol.TMap;
import org.apache.fbthrift.protocol.TProtocol;
import org.apache.fbthrift.protocol.TProtocolUtil;
import org.apache.fbthrift.protocol.TStruct;
import org.apache.fbthrift.protocol.TType;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import static com.google.common.base.MoreObjects.ToStringHelper;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value = "ThriftTable", builder = ThriftTable.Builder.class)
public final class ThriftTable
        implements com.facebook.thrift.payload.ThriftSerializable
{
    @ThriftConstructor
    public ThriftTable(
            @ThriftField(value = 1, name = "databaseName", requiredness = Requiredness.NONE) final String databaseName,
            @ThriftField(value = 2, name = "tableName", requiredness = Requiredness.NONE) final String tableName,
            @ThriftField(value = 3, name = "owner", requiredness = Requiredness.NONE) final String owner,
            @ThriftField(value = 4, name = "tableType", requiredness = Requiredness.NONE) final ThriftPrestoTableType tableType,
            @ThriftField(value = 5, name = "dataColumns", requiredness = Requiredness.NONE) final List<ThriftColumn> dataColumns,
            @ThriftField(value = 6, name = "partitionColumns", requiredness = Requiredness.NONE) final List<ThriftColumn> partitionColumns,
            @ThriftField(value = 7, name = "storage", requiredness = Requiredness.NONE) final ThriftStorage storage,
            @ThriftField(value = 8, name = "parameters", requiredness = Requiredness.NONE) final Map<String, String> parameters,
            @ThriftField(value = 9, name = "viewOriginalText", requiredness = Requiredness.OPTIONAL) final String viewOriginalText,
            @ThriftField(value = 10, name = "viewExpandedText", requiredness = Requiredness.OPTIONAL) final String viewExpandedText,
            @ThriftField(value = 11, name = "metadataVersion", requiredness = Requiredness.OPTIONAL) final Long metadataVersion
    )
    {
        this.databaseName = databaseName;
        this.tableName = tableName;
        this.owner = owner;
        this.tableType = tableType;
        this.dataColumns = dataColumns;
        this.partitionColumns = partitionColumns;
        this.storage = storage;
        this.parameters = parameters;
        this.viewOriginalText = viewOriginalText;
        this.viewExpandedText = viewExpandedText;
        this.metadataVersion = metadataVersion;
    }

    @ThriftConstructor
    protected ThriftTable()
    {
        this.databaseName = null;
        this.tableName = null;
        this.owner = null;
        this.tableType = ThriftPrestoTableType.fromInteger(0);
        this.dataColumns = null;
        this.partitionColumns = null;
        this.storage = null;
        this.parameters = null;
        this.viewOriginalText = null;
        this.viewExpandedText = null;
        this.metadataVersion = null;
    }

    public static Builder builder()
    {
        return new Builder();
    }

    public static Builder builder(ThriftTable other)
    {
        return new Builder(other);
    }

    public static class Builder
    {
        private String databaseName = null;
        private String tableName = null;
        private String owner = null;
        private ThriftPrestoTableType tableType = ThriftPrestoTableType.fromInteger(0);
        private List<ThriftColumn> dataColumns = null;
        private List<ThriftColumn> partitionColumns = null;
        private ThriftStorage storage = null;
        private Map<String, String> parameters = null;
        private String viewOriginalText = null;
        private String viewExpandedText = null;
        private Long metadataVersion = null;

        @ThriftField(value = 1, name = "databaseName", requiredness = Requiredness.NONE)
        public Builder setDatabaseName(String databaseName)
        {
            this.databaseName = databaseName;
            return this;
        }

        public String getDatabaseName() {return databaseName;}

        @ThriftField(value = 2, name = "tableName", requiredness = Requiredness.NONE)
        public Builder setTableName(String tableName)
        {
            this.tableName = tableName;
            return this;
        }

        public String getTableName() {return tableName;}

        @ThriftField(value = 3, name = "owner", requiredness = Requiredness.NONE)
        public Builder setOwner(String owner)
        {
            this.owner = owner;
            return this;
        }

        public String getOwner() {return owner;}

        @ThriftField(value = 4, name = "tableType", requiredness = Requiredness.NONE)
        public Builder setTableType(ThriftPrestoTableType tableType)
        {
            this.tableType = tableType;
            return this;
        }

        public ThriftPrestoTableType getTableType() {return tableType;}

        @ThriftField(value = 5, name = "dataColumns", requiredness = Requiredness.NONE)
        public Builder setDataColumns(List<ThriftColumn> dataColumns)
        {
            this.dataColumns = dataColumns;
            return this;
        }

        public List<ThriftColumn> getDataColumns() {return dataColumns;}

        @ThriftField(value = 6, name = "partitionColumns", requiredness = Requiredness.NONE)
        public Builder setPartitionColumns(List<ThriftColumn> partitionColumns)
        {
            this.partitionColumns = partitionColumns;
            return this;
        }

        public List<ThriftColumn> getPartitionColumns() {return partitionColumns;}

        @ThriftField(value = 7, name = "storage", requiredness = Requiredness.NONE)
        public Builder setStorage(ThriftStorage storage)
        {
            this.storage = storage;
            return this;
        }

        public ThriftStorage getStorage() {return storage;}

        @ThriftField(value = 8, name = "parameters", requiredness = Requiredness.NONE)
        public Builder setParameters(Map<String, String> parameters)
        {
            this.parameters = parameters;
            return this;
        }

        public Map<String, String> getParameters() {return parameters;}

        @ThriftField(value = 9, name = "viewOriginalText", requiredness = Requiredness.OPTIONAL)
        public Builder setViewOriginalText(String viewOriginalText)
        {
            this.viewOriginalText = viewOriginalText;
            return this;
        }

        public String getViewOriginalText() {return viewOriginalText;}

        @ThriftField(value = 10, name = "viewExpandedText", requiredness = Requiredness.OPTIONAL)
        public Builder setViewExpandedText(String viewExpandedText)
        {
            this.viewExpandedText = viewExpandedText;
            return this;
        }

        public String getViewExpandedText() {return viewExpandedText;}

        @ThriftField(value = 11, name = "metadataVersion", requiredness = Requiredness.OPTIONAL)
        public Builder setMetadataVersion(Long metadataVersion)
        {
            this.metadataVersion = metadataVersion;
            return this;
        }

        public Long getMetadataVersion() {return metadataVersion;}

        public Builder() {}

        public Builder(ThriftTable other)
        {
            this.databaseName = other.databaseName;
            this.tableName = other.tableName;
            this.owner = other.owner;
            this.tableType = other.tableType;
            this.dataColumns = other.dataColumns;
            this.partitionColumns = other.partitionColumns;
            this.storage = other.storage;
            this.parameters = other.parameters;
            this.viewOriginalText = other.viewOriginalText;
            this.viewExpandedText = other.viewExpandedText;
            this.metadataVersion = other.metadataVersion;
        }

        @ThriftConstructor
        public ThriftTable build()
        {
            ThriftTable result = new ThriftTable(
                    this.databaseName,
                    this.tableName,
                    this.owner,
                    this.tableType,
                    this.dataColumns,
                    this.partitionColumns,
                    this.storage,
                    this.parameters,
                    this.viewOriginalText,
                    this.viewExpandedText,
                    this.metadataVersion
            );
            return result;
        }
    }

    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftTable");
    private final String databaseName;
    public static final int _DATABASENAME = 1;
    private static final TField DATABASE_NAME_FIELD_DESC = new TField("databaseName", TType.STRING, (short) 1);
    private final String tableName;
    public static final int _TABLENAME = 2;
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 2);
    private final String owner;
    public static final int _OWNER = 3;
    private static final TField OWNER_FIELD_DESC = new TField("owner", TType.STRING, (short) 3);
    private final ThriftPrestoTableType tableType;
    public static final int _TABLETYPE = 4;
    private static final TField TABLE_TYPE_FIELD_DESC = new TField("tableType", TType.I32, (short) 4);
    private final List<ThriftColumn> dataColumns;
    public static final int _DATACOLUMNS = 5;
    private static final TField DATA_COLUMNS_FIELD_DESC = new TField("dataColumns", TType.LIST, (short) 5);
    private final List<ThriftColumn> partitionColumns;
    public static final int _PARTITIONCOLUMNS = 6;
    private static final TField PARTITION_COLUMNS_FIELD_DESC = new TField("partitionColumns", TType.LIST, (short) 6);
    private final ThriftStorage storage;
    public static final int _STORAGE = 7;
    private static final TField STORAGE_FIELD_DESC = new TField("storage", TType.STRUCT, (short) 7);
    private final Map<String, String> parameters;
    public static final int _PARAMETERS = 8;
    private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.MAP, (short) 8);
    private final String viewOriginalText;
    public static final int _VIEWORIGINALTEXT = 9;
    private static final TField VIEW_ORIGINAL_TEXT_FIELD_DESC = new TField("viewOriginalText", TType.STRING, (short) 9);
    private final String viewExpandedText;
    public static final int _VIEWEXPANDEDTEXT = 10;
    private static final TField VIEW_EXPANDED_TEXT_FIELD_DESC = new TField("viewExpandedText", TType.STRING, (short) 10);
    private final Long metadataVersion;
    public static final int _METADATAVERSION = 11;
    private static final TField METADATA_VERSION_FIELD_DESC = new TField("metadataVersion", TType.I64, (short) 11);

    static {
        NAMES_TO_IDS.put("databaseName", 1);
        THRIFT_NAMES_TO_IDS.put("databaseName", 1);
        FIELD_METADATA.put(1, DATABASE_NAME_FIELD_DESC);
        NAMES_TO_IDS.put("tableName", 2);
        THRIFT_NAMES_TO_IDS.put("tableName", 2);
        FIELD_METADATA.put(2, TABLE_NAME_FIELD_DESC);
        NAMES_TO_IDS.put("owner", 3);
        THRIFT_NAMES_TO_IDS.put("owner", 3);
        FIELD_METADATA.put(3, OWNER_FIELD_DESC);
        NAMES_TO_IDS.put("tableType", 4);
        THRIFT_NAMES_TO_IDS.put("tableType", 4);
        FIELD_METADATA.put(4, TABLE_TYPE_FIELD_DESC);
        NAMES_TO_IDS.put("dataColumns", 5);
        THRIFT_NAMES_TO_IDS.put("dataColumns", 5);
        FIELD_METADATA.put(5, DATA_COLUMNS_FIELD_DESC);
        NAMES_TO_IDS.put("partitionColumns", 6);
        THRIFT_NAMES_TO_IDS.put("partitionColumns", 6);
        FIELD_METADATA.put(6, PARTITION_COLUMNS_FIELD_DESC);
        NAMES_TO_IDS.put("storage", 7);
        THRIFT_NAMES_TO_IDS.put("storage", 7);
        FIELD_METADATA.put(7, STORAGE_FIELD_DESC);
        NAMES_TO_IDS.put("parameters", 8);
        THRIFT_NAMES_TO_IDS.put("parameters", 8);
        FIELD_METADATA.put(8, PARAMETERS_FIELD_DESC);
        NAMES_TO_IDS.put("viewOriginalText", 9);
        THRIFT_NAMES_TO_IDS.put("viewOriginalText", 9);
        FIELD_METADATA.put(9, VIEW_ORIGINAL_TEXT_FIELD_DESC);
        NAMES_TO_IDS.put("viewExpandedText", 10);
        THRIFT_NAMES_TO_IDS.put("viewExpandedText", 10);
        FIELD_METADATA.put(10, VIEW_EXPANDED_TEXT_FIELD_DESC);
        NAMES_TO_IDS.put("metadataVersion", 11);
        THRIFT_NAMES_TO_IDS.put("metadataVersion", 11);
        FIELD_METADATA.put(11, METADATA_VERSION_FIELD_DESC);
    }

    @Nullable
    @ThriftField(value = 1, name = "databaseName", requiredness = Requiredness.NONE)
    public String getDatabaseName() {return databaseName;}

    @Nullable
    @ThriftField(value = 2, name = "tableName", requiredness = Requiredness.NONE)
    public String getTableName() {return tableName;}

    @Nullable
    @ThriftField(value = 3, name = "owner", requiredness = Requiredness.NONE)
    public String getOwner() {return owner;}

    @Nullable
    @ThriftField(value = 4, name = "tableType", requiredness = Requiredness.NONE)
    public ThriftPrestoTableType getTableType() {return tableType;}

    @Nullable
    @ThriftField(value = 5, name = "dataColumns", requiredness = Requiredness.NONE)
    public List<ThriftColumn> getDataColumns() {return dataColumns;}

    @Nullable
    @ThriftField(value = 6, name = "partitionColumns", requiredness = Requiredness.NONE)
    public List<ThriftColumn> getPartitionColumns() {return partitionColumns;}

    @Nullable
    @ThriftField(value = 7, name = "storage", requiredness = Requiredness.NONE)
    public ThriftStorage getStorage() {return storage;}

    @Nullable
    @ThriftField(value = 8, name = "parameters", requiredness = Requiredness.NONE)
    public Map<String, String> getParameters() {return parameters;}

    @Nullable
    @ThriftField(value = 9, name = "viewOriginalText", requiredness = Requiredness.OPTIONAL)
    public String getViewOriginalText() {return viewOriginalText;}

    @Nullable
    @ThriftField(value = 10, name = "viewExpandedText", requiredness = Requiredness.OPTIONAL)
    public String getViewExpandedText() {return viewExpandedText;}

    @Nullable
    @ThriftField(value = 11, name = "metadataVersion", requiredness = Requiredness.OPTIONAL)
    public Long getMetadataVersion() {return metadataVersion;}

    @Override
    public String toString()
    {
        ToStringHelper helper = toStringHelper(this);
        helper.add("databaseName", databaseName);
        helper.add("tableName", tableName);
        helper.add("owner", owner);
        helper.add("tableType", tableType);
        helper.add("dataColumns", dataColumns);
        helper.add("partitionColumns", partitionColumns);
        helper.add("storage", storage);
        helper.add("parameters", parameters);
        helper.add("viewOriginalText", viewOriginalText);
        helper.add("viewExpandedText", viewExpandedText);
        helper.add("metadataVersion", metadataVersion);
        return helper.toString();
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ThriftTable other = (ThriftTable) o;

        return
                Objects.equals(databaseName, other.databaseName) &&
                        Objects.equals(tableName, other.tableName) &&
                        Objects.equals(owner, other.owner) &&
                        Objects.equals(tableType, other.tableType) &&
                        Objects.equals(dataColumns, other.dataColumns) &&
                        Objects.equals(partitionColumns, other.partitionColumns) &&
                        Objects.equals(storage, other.storage) &&
                        Objects.equals(parameters, other.parameters) &&
                        Objects.equals(viewOriginalText, other.viewOriginalText) &&
                        Objects.equals(viewExpandedText, other.viewExpandedText) &&
                        Objects.equals(metadataVersion, other.metadataVersion) &&
                        true;
    }

    @Override
    public int hashCode()
    {
        return Arrays.deepHashCode(new Object[] {
                databaseName,
                tableName,
                owner,
                tableType,
                dataColumns,
                partitionColumns,
                storage,
                parameters,
                viewOriginalText,
                viewExpandedText,
                metadataVersion
        });
    }

    public static com.facebook.thrift.payload.Reader<ThriftTable> asReader()
    {
        return ThriftTable::read0;
    }

    public static ThriftTable read0(TProtocol oprot)
            throws TException
    {
        TField __field;
        oprot.readStructBegin(ThriftTable.NAMES_TO_IDS, ThriftTable.THRIFT_NAMES_TO_IDS, ThriftTable.FIELD_METADATA);
        Builder builder = new Builder();
        while (true) {
            __field = oprot.readFieldBegin();
            if (__field.type == TType.STOP) {
                break;
            }
            switch (__field.id) {
                case _DATABASENAME:
                    if (__field.type == TType.STRING) {
                        String databaseName = oprot.readString();
                        builder.setDatabaseName(databaseName);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _TABLENAME:
                    if (__field.type == TType.STRING) {
                        String tableName = oprot.readString();
                        builder.setTableName(tableName);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _OWNER:
                    if (__field.type == TType.STRING) {
                        String owner = oprot.readString();
                        builder.setOwner(owner);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _TABLETYPE:
                    if (__field.type == TType.I32) {
                        ThriftPrestoTableType tableType = ThriftPrestoTableType.fromInteger(oprot.readI32());
                        builder.setTableType(tableType);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _DATACOLUMNS:
                    if (__field.type == TType.LIST) {
                        List<ThriftColumn> dataColumns;
                        {
                            TList _list = oprot.readListBegin();
                            dataColumns = new ArrayList<ThriftColumn>(Math.max(0, _list.size));
                            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {

                                ThriftColumn _value1 = ThriftColumn.read0(oprot);
                                dataColumns.add(_value1);
                            }
                            oprot.readListEnd();
                        }
                        builder.setDataColumns(dataColumns);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _PARTITIONCOLUMNS:
                    if (__field.type == TType.LIST) {
                        List<ThriftColumn> partitionColumns;
                        {
                            TList _list = oprot.readListBegin();
                            partitionColumns = new ArrayList<ThriftColumn>(Math.max(0, _list.size));
                            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {

                                ThriftColumn _value1 = ThriftColumn.read0(oprot);
                                partitionColumns.add(_value1);
                            }
                            oprot.readListEnd();
                        }
                        builder.setPartitionColumns(partitionColumns);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _STORAGE:
                    if (__field.type == TType.STRUCT) {
                        ThriftStorage storage = ThriftStorage.read0(oprot);
                        builder.setStorage(storage);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _PARAMETERS:
                    if (__field.type == TType.MAP) {
                        Map<String, String> parameters;
                        {
                            TMap _map = oprot.readMapBegin();
                            parameters = new HashMap<String, String>(Math.max(0, _map.size));
                            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {

                                String _key1 = oprot.readString();
                                String _value1 = oprot.readString();
                                parameters.put(_key1, _value1);
                            }
                        }
                        oprot.readMapEnd();
                        builder.setParameters(parameters);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _VIEWORIGINALTEXT:
                    if (__field.type == TType.STRING) {
                        String viewOriginalText = oprot.readString();
                        builder.setViewOriginalText(viewOriginalText);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _VIEWEXPANDEDTEXT:
                    if (__field.type == TType.STRING) {
                        String viewExpandedText = oprot.readString();
                        builder.setViewExpandedText(viewExpandedText);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _METADATAVERSION:
                    if (__field.type == TType.I64) {
                        Long metadataVersion = oprot.readI64();
                        builder.setMetadataVersion(metadataVersion);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(oprot, __field.type);
                    break;
            }
            oprot.readFieldEnd();
        }
        oprot.readStructEnd();
        return builder.build();
    }

    public void write0(TProtocol oprot)
            throws TException
    {
        oprot.writeStructBegin(STRUCT_DESC);
        if (databaseName != null) {
            oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
            oprot.writeString(this.databaseName);
            oprot.writeFieldEnd();
        }
        if (tableName != null) {
            oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
            oprot.writeString(this.tableName);
            oprot.writeFieldEnd();
        }
        if (owner != null) {
            oprot.writeFieldBegin(OWNER_FIELD_DESC);
            oprot.writeString(this.owner);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
        oprot.writeI32(this.tableType == null ? 0 : com.facebook.thrift.util.EnumUtil.getValue(this.tableType));
        oprot.writeFieldEnd();
        if (dataColumns != null) {
            oprot.writeFieldBegin(DATA_COLUMNS_FIELD_DESC);
            List<ThriftColumn> _iter0 = dataColumns;
            oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (ThriftColumn _iter1 : _iter0) {
                _iter1.write0(oprot);
            }
            oprot.writeListEnd();
            oprot.writeFieldEnd();
        }
        if (partitionColumns != null) {
            oprot.writeFieldBegin(PARTITION_COLUMNS_FIELD_DESC);
            List<ThriftColumn> _iter0 = partitionColumns;
            oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (ThriftColumn _iter1 : _iter0) {
                _iter1.write0(oprot);
            }
            oprot.writeListEnd();
            oprot.writeFieldEnd();
        }
        if (storage != null) {
            oprot.writeFieldBegin(STORAGE_FIELD_DESC);
            this.storage.write0(oprot);
            oprot.writeFieldEnd();
        }
        if (parameters != null) {
            oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
            Map<String, String> _iter0 = parameters;
            oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
            for (Map.Entry<String, String> _iter1 : _iter0.entrySet()) {
                oprot.writeString(_iter1.getKey());
                oprot.writeString(_iter1.getValue());
            }
            oprot.writeMapEnd();
            oprot.writeFieldEnd();
        }
        if (viewOriginalText != null) {
            oprot.writeFieldBegin(VIEW_ORIGINAL_TEXT_FIELD_DESC);
            oprot.writeString(this.viewOriginalText);
            oprot.writeFieldEnd();
        }
        if (viewExpandedText != null) {
            oprot.writeFieldBegin(VIEW_EXPANDED_TEXT_FIELD_DESC);
            oprot.writeString(this.viewExpandedText);
            oprot.writeFieldEnd();
        }
        if (metadataVersion != null) {
            oprot.writeFieldBegin(METADATA_VERSION_FIELD_DESC);
            oprot.writeI64(this.metadataVersion);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    private static class _ThriftTableLazy
    {
        private static final ThriftTable _DEFAULT = new Builder().build();
    }

    public static ThriftTable defaultInstance()
    {
        return _ThriftTableLazy._DEFAULT;
    }
}
