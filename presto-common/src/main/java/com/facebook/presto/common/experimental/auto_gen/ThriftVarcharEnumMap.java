/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftVarcharEnumMap", builder=ThriftVarcharEnumMap.Builder.class)
public final class ThriftVarcharEnumMap implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftVarcharEnumMap(
        @com.facebook.swift.codec.ThriftField(value=1, name="typeName", requiredness=Requiredness.NONE) final String typeName,
        @com.facebook.swift.codec.ThriftField(value=2, name="enumMap", requiredness=Requiredness.NONE) final Map<String, String> enumMap
    ) {
        this.typeName = typeName;
        this.enumMap = enumMap;
    }
    
    @ThriftConstructor
    protected ThriftVarcharEnumMap() {
      this.typeName = null;
      this.enumMap = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftVarcharEnumMap other) {
      return new Builder(other);
    }

    public static class Builder {
        private String typeName = null;
        private Map<String, String> enumMap = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="typeName", requiredness=Requiredness.NONE)    public Builder setTypeName(String typeName) {
            this.typeName = typeName;
            return this;
        }
    
        public String getTypeName() { return typeName; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="enumMap", requiredness=Requiredness.NONE)    public Builder setEnumMap(Map<String, String> enumMap) {
            this.enumMap = enumMap;
            return this;
        }
    
        public Map<String, String> getEnumMap() { return enumMap; }
    
        public Builder() { }
        public Builder(ThriftVarcharEnumMap other) {
            this.typeName = other.typeName;
            this.enumMap = other.enumMap;
        }
    
        @ThriftConstructor
        public ThriftVarcharEnumMap build() {
            ThriftVarcharEnumMap result = new ThriftVarcharEnumMap (
                this.typeName,
                this.enumMap
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftVarcharEnumMap");
    private final String typeName;
    public static final int _TYPENAME = 1;
    private static final TField TYPE_NAME_FIELD_DESC = new TField("typeName", TType.STRING, (short)1);
        private final Map<String, String> enumMap;
    public static final int _ENUMMAP = 2;
    private static final TField ENUM_MAP_FIELD_DESC = new TField("enumMap", TType.MAP, (short)2);
    static {
      NAMES_TO_IDS.put("typeName", 1);
      THRIFT_NAMES_TO_IDS.put("typeName", 1);
      FIELD_METADATA.put(1, TYPE_NAME_FIELD_DESC);
      NAMES_TO_IDS.put("enumMap", 2);
      THRIFT_NAMES_TO_IDS.put("enumMap", 2);
      FIELD_METADATA.put(2, ENUM_MAP_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="typeName", requiredness=Requiredness.NONE)
    public String getTypeName() { return typeName; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="enumMap", requiredness=Requiredness.NONE)
    public Map<String, String> getEnumMap() { return enumMap; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("typeName", typeName);
        helper.add("enumMap", enumMap);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftVarcharEnumMap other = (ThriftVarcharEnumMap)o;
    
        return
            Objects.equals(typeName, other.typeName) &&
            Objects.equals(enumMap, other.enumMap) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            typeName,
            enumMap
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftVarcharEnumMap> asReader() {
      return ThriftVarcharEnumMap::read0;
    }
    
    public static ThriftVarcharEnumMap read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftVarcharEnumMap.NAMES_TO_IDS, ThriftVarcharEnumMap.THRIFT_NAMES_TO_IDS, ThriftVarcharEnumMap.FIELD_METADATA);
      ThriftVarcharEnumMap.Builder builder = new ThriftVarcharEnumMap.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _TYPENAME:
          if (__field.type == TType.STRING) {
            String typeName = oprot.readString();
            builder.setTypeName(typeName);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ENUMMAP:
          if (__field.type == TType.MAP) {
            Map<String, String> enumMap;
                {
                TMap _map = oprot.readMapBegin();
                enumMap = new HashMap<String, String>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    String _value1 = oprot.readString();
                    enumMap.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setEnumMap(enumMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (typeName != null) {
        oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
        oprot.writeString(this.typeName);
        oprot.writeFieldEnd();
      }
      if (enumMap != null) {
        oprot.writeFieldBegin(ENUM_MAP_FIELD_DESC);
        Map<String, String> _iter0 = enumMap;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
            for (Map.Entry<String, String> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeString(_iter1.getValue());
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftVarcharEnumMapLazy {
        private static final ThriftVarcharEnumMap _DEFAULT = new ThriftVarcharEnumMap.Builder().build();
    }
    
    public static ThriftVarcharEnumMap defaultInstance() {
        return  _ThriftVarcharEnumMapLazy._DEFAULT;
    }
}
