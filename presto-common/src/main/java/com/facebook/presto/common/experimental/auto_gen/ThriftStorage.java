/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftStorage", builder=ThriftStorage.Builder.class)
public final class ThriftStorage implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftStorage(
        @com.facebook.swift.codec.ThriftField(value=1, name="storageFormat", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftStorageFormat storageFormat,
        @com.facebook.swift.codec.ThriftField(value=2, name="location", requiredness=Requiredness.NONE) final String location,
        @com.facebook.swift.codec.ThriftField(value=3, name="bucketProperty", requiredness=Requiredness.OPTIONAL) final com.facebook.presto.common.experimental.auto_gen.ThriftHiveBucketProperty bucketProperty,
        @com.facebook.swift.codec.ThriftField(value=4, name="skewed", requiredness=Requiredness.NONE) final boolean skewed,
        @com.facebook.swift.codec.ThriftField(value=5, name="serdeParameters", requiredness=Requiredness.NONE) final Map<String, String> serdeParameters,
        @com.facebook.swift.codec.ThriftField(value=6, name="parameters", requiredness=Requiredness.NONE) final Map<String, String> parameters
    ) {
        this.storageFormat = storageFormat;
        this.location = location;
        this.bucketProperty = bucketProperty;
        this.skewed = skewed;
        this.serdeParameters = serdeParameters;
        this.parameters = parameters;
    }
    
    @ThriftConstructor
    protected ThriftStorage() {
      this.storageFormat = null;
      this.location = null;
      this.bucketProperty = null;
      this.skewed = false;
      this.serdeParameters = null;
      this.parameters = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftStorage other) {
      return new Builder(other);
    }

    public static class Builder {
        private com.facebook.presto.common.experimental.auto_gen.ThriftStorageFormat storageFormat = null;
        private String location = null;
        private com.facebook.presto.common.experimental.auto_gen.ThriftHiveBucketProperty bucketProperty = null;
        private boolean skewed = false;
        private Map<String, String> serdeParameters = null;
        private Map<String, String> parameters = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="storageFormat", requiredness=Requiredness.NONE)    public Builder setStorageFormat(com.facebook.presto.common.experimental.auto_gen.ThriftStorageFormat storageFormat) {
            this.storageFormat = storageFormat;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftStorageFormat getStorageFormat() { return storageFormat; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="location", requiredness=Requiredness.NONE)    public Builder setLocation(String location) {
            this.location = location;
            return this;
        }
    
        public String getLocation() { return location; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="bucketProperty", requiredness=Requiredness.OPTIONAL)    public Builder setBucketProperty(com.facebook.presto.common.experimental.auto_gen.ThriftHiveBucketProperty bucketProperty) {
            this.bucketProperty = bucketProperty;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftHiveBucketProperty getBucketProperty() { return bucketProperty; }
    
            @com.facebook.swift.codec.ThriftField(value=4, name="skewed", requiredness=Requiredness.NONE)    public Builder setSkewed(boolean skewed) {
            this.skewed = skewed;
            return this;
        }
    
        public boolean isSkewed() { return skewed; }
    
            @com.facebook.swift.codec.ThriftField(value=5, name="serdeParameters", requiredness=Requiredness.NONE)    public Builder setSerdeParameters(Map<String, String> serdeParameters) {
            this.serdeParameters = serdeParameters;
            return this;
        }
    
        public Map<String, String> getSerdeParameters() { return serdeParameters; }
    
            @com.facebook.swift.codec.ThriftField(value=6, name="parameters", requiredness=Requiredness.NONE)    public Builder setParameters(Map<String, String> parameters) {
            this.parameters = parameters;
            return this;
        }
    
        public Map<String, String> getParameters() { return parameters; }
    
        public Builder() { }
        public Builder(ThriftStorage other) {
            this.storageFormat = other.storageFormat;
            this.location = other.location;
            this.bucketProperty = other.bucketProperty;
            this.skewed = other.skewed;
            this.serdeParameters = other.serdeParameters;
            this.parameters = other.parameters;
        }
    
        @ThriftConstructor
        public ThriftStorage build() {
            ThriftStorage result = new ThriftStorage (
                this.storageFormat,
                this.location,
                this.bucketProperty,
                this.skewed,
                this.serdeParameters,
                this.parameters
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftStorage");
    private final com.facebook.presto.common.experimental.auto_gen.ThriftStorageFormat storageFormat;
    public static final int _STORAGEFORMAT = 1;
    private static final TField STORAGE_FORMAT_FIELD_DESC = new TField("storageFormat", TType.STRUCT, (short)1);
        private final String location;
    public static final int _LOCATION = 2;
    private static final TField LOCATION_FIELD_DESC = new TField("location", TType.STRING, (short)2);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftHiveBucketProperty bucketProperty;
    public static final int _BUCKETPROPERTY = 3;
    private static final TField BUCKET_PROPERTY_FIELD_DESC = new TField("bucketProperty", TType.STRUCT, (short)3);
        private final boolean skewed;
    public static final int _SKEWED = 4;
    private static final TField SKEWED_FIELD_DESC = new TField("skewed", TType.BOOL, (short)4);
        private final Map<String, String> serdeParameters;
    public static final int _SERDEPARAMETERS = 5;
    private static final TField SERDE_PARAMETERS_FIELD_DESC = new TField("serdeParameters", TType.MAP, (short)5);
        private final Map<String, String> parameters;
    public static final int _PARAMETERS = 6;
    private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.MAP, (short)6);
    static {
      NAMES_TO_IDS.put("storageFormat", 1);
      THRIFT_NAMES_TO_IDS.put("storageFormat", 1);
      FIELD_METADATA.put(1, STORAGE_FORMAT_FIELD_DESC);
      NAMES_TO_IDS.put("location", 2);
      THRIFT_NAMES_TO_IDS.put("location", 2);
      FIELD_METADATA.put(2, LOCATION_FIELD_DESC);
      NAMES_TO_IDS.put("bucketProperty", 3);
      THRIFT_NAMES_TO_IDS.put("bucketProperty", 3);
      FIELD_METADATA.put(3, BUCKET_PROPERTY_FIELD_DESC);
      NAMES_TO_IDS.put("skewed", 4);
      THRIFT_NAMES_TO_IDS.put("skewed", 4);
      FIELD_METADATA.put(4, SKEWED_FIELD_DESC);
      NAMES_TO_IDS.put("serdeParameters", 5);
      THRIFT_NAMES_TO_IDS.put("serdeParameters", 5);
      FIELD_METADATA.put(5, SERDE_PARAMETERS_FIELD_DESC);
      NAMES_TO_IDS.put("parameters", 6);
      THRIFT_NAMES_TO_IDS.put("parameters", 6);
      FIELD_METADATA.put(6, PARAMETERS_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="storageFormat", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftStorageFormat getStorageFormat() { return storageFormat; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="location", requiredness=Requiredness.NONE)
    public String getLocation() { return location; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=3, name="bucketProperty", requiredness=Requiredness.OPTIONAL)
    public com.facebook.presto.common.experimental.auto_gen.ThriftHiveBucketProperty getBucketProperty() { return bucketProperty; }

    
    
    @com.facebook.swift.codec.ThriftField(value=4, name="skewed", requiredness=Requiredness.NONE)
    public boolean isSkewed() { return skewed; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=5, name="serdeParameters", requiredness=Requiredness.NONE)
    public Map<String, String> getSerdeParameters() { return serdeParameters; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=6, name="parameters", requiredness=Requiredness.NONE)
    public Map<String, String> getParameters() { return parameters; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("storageFormat", storageFormat);
        helper.add("location", location);
        helper.add("bucketProperty", bucketProperty);
        helper.add("skewed", skewed);
        helper.add("serdeParameters", serdeParameters);
        helper.add("parameters", parameters);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftStorage other = (ThriftStorage)o;
    
        return
            Objects.equals(storageFormat, other.storageFormat) &&
            Objects.equals(location, other.location) &&
            Objects.equals(bucketProperty, other.bucketProperty) &&
            Objects.equals(skewed, other.skewed) &&
            Objects.equals(serdeParameters, other.serdeParameters) &&
            Objects.equals(parameters, other.parameters) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            storageFormat,
            location,
            bucketProperty,
            skewed,
            serdeParameters,
            parameters
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftStorage> asReader() {
      return ThriftStorage::read0;
    }
    
    public static ThriftStorage read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftStorage.NAMES_TO_IDS, ThriftStorage.THRIFT_NAMES_TO_IDS, ThriftStorage.FIELD_METADATA);
      ThriftStorage.Builder builder = new ThriftStorage.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _STORAGEFORMAT:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftStorageFormat storageFormat = com.facebook.presto.common.experimental.auto_gen.ThriftStorageFormat.read0(oprot);
            builder.setStorageFormat(storageFormat);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _LOCATION:
          if (__field.type == TType.STRING) {
            String location = oprot.readString();
            builder.setLocation(location);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _BUCKETPROPERTY:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftHiveBucketProperty bucketProperty = com.facebook.presto.common.experimental.auto_gen.ThriftHiveBucketProperty.read0(oprot);
            builder.setBucketProperty(bucketProperty);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SKEWED:
          if (__field.type == TType.BOOL) {
            boolean skewed = oprot.readBool();
            builder.setSkewed(skewed);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SERDEPARAMETERS:
          if (__field.type == TType.MAP) {
            Map<String, String> serdeParameters;
                {
                TMap _map = oprot.readMapBegin();
                serdeParameters = new HashMap<String, String>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    String _value1 = oprot.readString();
                    serdeParameters.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setSerdeParameters(serdeParameters);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _PARAMETERS:
          if (__field.type == TType.MAP) {
            Map<String, String> parameters;
                {
                TMap _map = oprot.readMapBegin();
                parameters = new HashMap<String, String>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    String _value1 = oprot.readString();
                    parameters.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setParameters(parameters);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (storageFormat != null) {
        oprot.writeFieldBegin(STORAGE_FORMAT_FIELD_DESC);
        this.storageFormat.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(this.location);
        oprot.writeFieldEnd();
      }
      if (bucketProperty != null) {
        oprot.writeFieldBegin(BUCKET_PROPERTY_FIELD_DESC);
        this.bucketProperty.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SKEWED_FIELD_DESC);
      oprot.writeBool(this.skewed);
      oprot.writeFieldEnd();
      if (serdeParameters != null) {
        oprot.writeFieldBegin(SERDE_PARAMETERS_FIELD_DESC);
        Map<String, String> _iter0 = serdeParameters;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
            for (Map.Entry<String, String> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeString(_iter1.getValue());
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (parameters != null) {
        oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
        Map<String, String> _iter0 = parameters;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
            for (Map.Entry<String, String> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeString(_iter1.getValue());
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftStorageLazy {
        private static final ThriftStorage _DEFAULT = new ThriftStorage.Builder().build();
    }
    
    public static ThriftStorage defaultInstance() {
        return  _ThriftStorageLazy._DEFAULT;
    }
}
