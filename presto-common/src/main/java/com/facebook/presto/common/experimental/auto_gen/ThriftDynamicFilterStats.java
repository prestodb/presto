/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftDynamicFilterStats", builder=ThriftDynamicFilterStats.Builder.class)
public final class ThriftDynamicFilterStats implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftDynamicFilterStats(
        @com.facebook.swift.codec.ThriftField(value=1, name="producerNodeIds", requiredness=Requiredness.NONE) final Set<String> producerNodeIds
    ) {
        this.producerNodeIds = producerNodeIds;
    }
    
    @ThriftConstructor
    protected ThriftDynamicFilterStats() {
      this.producerNodeIds = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftDynamicFilterStats other) {
      return new Builder(other);
    }

    public static class Builder {
        private Set<String> producerNodeIds = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="producerNodeIds", requiredness=Requiredness.NONE)    public Builder setProducerNodeIds(Set<String> producerNodeIds) {
            this.producerNodeIds = producerNodeIds;
            return this;
        }
    
        public Set<String> getProducerNodeIds() { return producerNodeIds; }
    
        public Builder() { }
        public Builder(ThriftDynamicFilterStats other) {
            this.producerNodeIds = other.producerNodeIds;
        }
    
        @ThriftConstructor
        public ThriftDynamicFilterStats build() {
            ThriftDynamicFilterStats result = new ThriftDynamicFilterStats (
                this.producerNodeIds
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftDynamicFilterStats");
    private final Set<String> producerNodeIds;
    public static final int _PRODUCERNODEIDS = 1;
    private static final TField PRODUCER_NODE_IDS_FIELD_DESC = new TField("producerNodeIds", TType.SET, (short)1);
    static {
      NAMES_TO_IDS.put("producerNodeIds", 1);
      THRIFT_NAMES_TO_IDS.put("producerNodeIds", 1);
      FIELD_METADATA.put(1, PRODUCER_NODE_IDS_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="producerNodeIds", requiredness=Requiredness.NONE)
    public Set<String> getProducerNodeIds() { return producerNodeIds; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("producerNodeIds", producerNodeIds);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftDynamicFilterStats other = (ThriftDynamicFilterStats)o;
    
        return
            Objects.equals(producerNodeIds, other.producerNodeIds) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            producerNodeIds
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftDynamicFilterStats> asReader() {
      return ThriftDynamicFilterStats::read0;
    }
    
    public static ThriftDynamicFilterStats read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftDynamicFilterStats.NAMES_TO_IDS, ThriftDynamicFilterStats.THRIFT_NAMES_TO_IDS, ThriftDynamicFilterStats.FIELD_METADATA);
      ThriftDynamicFilterStats.Builder builder = new ThriftDynamicFilterStats.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _PRODUCERNODEIDS:
          if (__field.type == TType.SET) {
            Set<String> producerNodeIds;
                {
                TSet _set = oprot.readSetBegin();
                producerNodeIds = new HashSet<String>(Math.max(0, _set.size));
                for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                    
                    String _value1 = oprot.readString();
                    producerNodeIds.add(_value1);
                }
                oprot.readSetEnd();
                }
            builder.setProducerNodeIds(producerNodeIds);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (producerNodeIds != null) {
        oprot.writeFieldBegin(PRODUCER_NODE_IDS_FIELD_DESC);
        Set<String> _iter0 = producerNodeIds;
        oprot.writeSetBegin(new TSet(TType.STRING, _iter0.size()));
            for (String _iter1 : _iter0) {
              oprot.writeString(_iter1);
            }
            oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftDynamicFilterStatsLazy {
        private static final ThriftDynamicFilterStats _DEFAULT = new ThriftDynamicFilterStats.Builder().build();
    }
    
    public static ThriftDynamicFilterStats defaultInstance() {
        return  _ThriftDynamicFilterStatsLazy._DEFAULT;
    }
}
