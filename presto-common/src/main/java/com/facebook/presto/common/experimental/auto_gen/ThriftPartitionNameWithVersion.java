/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftPartitionNameWithVersion", builder=ThriftPartitionNameWithVersion.Builder.class)
public final class ThriftPartitionNameWithVersion implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftPartitionNameWithVersion(
        @com.facebook.swift.codec.ThriftField(value=1, name="partitionName", requiredness=Requiredness.NONE) final String partitionName,
        @com.facebook.swift.codec.ThriftField(value=2, name="partitionVersion", requiredness=Requiredness.OPTIONAL) final Long partitionVersion
    ) {
        this.partitionName = partitionName;
        this.partitionVersion = partitionVersion;
    }
    
    @ThriftConstructor
    protected ThriftPartitionNameWithVersion() {
      this.partitionName = null;
      this.partitionVersion = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftPartitionNameWithVersion other) {
      return new Builder(other);
    }

    public static class Builder {
        private String partitionName = null;
        private Long partitionVersion = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="partitionName", requiredness=Requiredness.NONE)    public Builder setPartitionName(String partitionName) {
            this.partitionName = partitionName;
            return this;
        }
    
        public String getPartitionName() { return partitionName; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="partitionVersion", requiredness=Requiredness.OPTIONAL)    public Builder setPartitionVersion(Long partitionVersion) {
            this.partitionVersion = partitionVersion;
            return this;
        }
    
        public Long getPartitionVersion() { return partitionVersion; }
    
        public Builder() { }
        public Builder(ThriftPartitionNameWithVersion other) {
            this.partitionName = other.partitionName;
            this.partitionVersion = other.partitionVersion;
        }
    
        @ThriftConstructor
        public ThriftPartitionNameWithVersion build() {
            ThriftPartitionNameWithVersion result = new ThriftPartitionNameWithVersion (
                this.partitionName,
                this.partitionVersion
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftPartitionNameWithVersion");
    private final String partitionName;
    public static final int _PARTITIONNAME = 1;
    private static final TField PARTITION_NAME_FIELD_DESC = new TField("partitionName", TType.STRING, (short)1);
        private final Long partitionVersion;
    public static final int _PARTITIONVERSION = 2;
    private static final TField PARTITION_VERSION_FIELD_DESC = new TField("partitionVersion", TType.I64, (short)2);
    static {
      NAMES_TO_IDS.put("partitionName", 1);
      THRIFT_NAMES_TO_IDS.put("partitionName", 1);
      FIELD_METADATA.put(1, PARTITION_NAME_FIELD_DESC);
      NAMES_TO_IDS.put("partitionVersion", 2);
      THRIFT_NAMES_TO_IDS.put("partitionVersion", 2);
      FIELD_METADATA.put(2, PARTITION_VERSION_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="partitionName", requiredness=Requiredness.NONE)
    public String getPartitionName() { return partitionName; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="partitionVersion", requiredness=Requiredness.OPTIONAL)
    public Long getPartitionVersion() { return partitionVersion; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("partitionName", partitionName);
        helper.add("partitionVersion", partitionVersion);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftPartitionNameWithVersion other = (ThriftPartitionNameWithVersion)o;
    
        return
            Objects.equals(partitionName, other.partitionName) &&
            Objects.equals(partitionVersion, other.partitionVersion) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            partitionName,
            partitionVersion
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftPartitionNameWithVersion> asReader() {
      return ThriftPartitionNameWithVersion::read0;
    }
    
    public static ThriftPartitionNameWithVersion read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftPartitionNameWithVersion.NAMES_TO_IDS, ThriftPartitionNameWithVersion.THRIFT_NAMES_TO_IDS, ThriftPartitionNameWithVersion.FIELD_METADATA);
      ThriftPartitionNameWithVersion.Builder builder = new ThriftPartitionNameWithVersion.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _PARTITIONNAME:
          if (__field.type == TType.STRING) {
            String partitionName = oprot.readString();
            builder.setPartitionName(partitionName);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _PARTITIONVERSION:
          if (__field.type == TType.I64) {
            Long  partitionVersion = oprot.readI64();
            builder.setPartitionVersion(partitionVersion);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (partitionName != null) {
        oprot.writeFieldBegin(PARTITION_NAME_FIELD_DESC);
        oprot.writeString(this.partitionName);
        oprot.writeFieldEnd();
      }
      if (partitionVersion != null) {
        oprot.writeFieldBegin(PARTITION_VERSION_FIELD_DESC);
        oprot.writeI64(this.partitionVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftPartitionNameWithVersionLazy {
        private static final ThriftPartitionNameWithVersion _DEFAULT = new ThriftPartitionNameWithVersion.Builder().build();
    }
    
    public static ThriftPartitionNameWithVersion defaultInstance() {
        return  _ThriftPartitionNameWithVersionLazy._DEFAULT;
    }
}
