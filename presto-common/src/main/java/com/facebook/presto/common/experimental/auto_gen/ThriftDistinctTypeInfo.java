/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftDistinctTypeInfo", builder=ThriftDistinctTypeInfo.Builder.class)
public final class ThriftDistinctTypeInfo implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftDistinctTypeInfo(
        @com.facebook.swift.codec.ThriftField(value=1, name="name", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName name,
        @com.facebook.swift.codec.ThriftField(value=2, name="baseType", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature baseType,
        @com.facebook.swift.codec.ThriftField(value=3, name="isOrderable", requiredness=Requiredness.NONE) final boolean isOrderable,
        @com.facebook.swift.codec.ThriftField(value=4, name="topMostAncestor", requiredness=Requiredness.OPTIONAL) final com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName topMostAncestor,
        @com.facebook.swift.codec.ThriftField(value=5, name="otherAncestors", requiredness=Requiredness.NONE) final List<com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName> otherAncestors
    ) {
        this.name = name;
        this.baseType = baseType;
        this.isOrderable = isOrderable;
        this.topMostAncestor = topMostAncestor;
        this.otherAncestors = otherAncestors;
    }
    
    @ThriftConstructor
    protected ThriftDistinctTypeInfo() {
      this.name = null;
      this.baseType = null;
      this.isOrderable = false;
      this.topMostAncestor = null;
      this.otherAncestors = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftDistinctTypeInfo other) {
      return new Builder(other);
    }

    public static class Builder {
        private com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName name = null;
        private com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature baseType = null;
        private boolean isOrderable = false;
        private com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName topMostAncestor = null;
        private List<com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName> otherAncestors = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="name", requiredness=Requiredness.NONE)    public Builder setName(com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName name) {
            this.name = name;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName getName() { return name; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="baseType", requiredness=Requiredness.NONE)    public Builder setBaseType(com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature baseType) {
            this.baseType = baseType;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature getBaseType() { return baseType; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="isOrderable", requiredness=Requiredness.NONE)    public Builder setIsOrderable(boolean isOrderable) {
            this.isOrderable = isOrderable;
            return this;
        }
    
        public boolean isIsOrderable() { return isOrderable; }
    
            @com.facebook.swift.codec.ThriftField(value=4, name="topMostAncestor", requiredness=Requiredness.OPTIONAL)    public Builder setTopMostAncestor(com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName topMostAncestor) {
            this.topMostAncestor = topMostAncestor;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName getTopMostAncestor() { return topMostAncestor; }
    
            @com.facebook.swift.codec.ThriftField(value=5, name="otherAncestors", requiredness=Requiredness.NONE)    public Builder setOtherAncestors(List<com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName> otherAncestors) {
            this.otherAncestors = otherAncestors;
            return this;
        }
    
        public List<com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName> getOtherAncestors() { return otherAncestors; }
    
        public Builder() { }
        public Builder(ThriftDistinctTypeInfo other) {
            this.name = other.name;
            this.baseType = other.baseType;
            this.isOrderable = other.isOrderable;
            this.topMostAncestor = other.topMostAncestor;
            this.otherAncestors = other.otherAncestors;
        }
    
        @ThriftConstructor
        public ThriftDistinctTypeInfo build() {
            ThriftDistinctTypeInfo result = new ThriftDistinctTypeInfo (
                this.name,
                this.baseType,
                this.isOrderable,
                this.topMostAncestor,
                this.otherAncestors
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftDistinctTypeInfo");
    private final com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName name;
    public static final int _NAME = 1;
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRUCT, (short)1);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature baseType;
    public static final int _BASETYPE = 2;
    private static final TField BASE_TYPE_FIELD_DESC = new TField("baseType", TType.STRUCT, (short)2);
        private final boolean isOrderable;
    public static final int _ISORDERABLE = 3;
    private static final TField IS_ORDERABLE_FIELD_DESC = new TField("isOrderable", TType.BOOL, (short)3);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName topMostAncestor;
    public static final int _TOPMOSTANCESTOR = 4;
    private static final TField TOP_MOST_ANCESTOR_FIELD_DESC = new TField("topMostAncestor", TType.STRUCT, (short)4);
        private final List<com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName> otherAncestors;
    public static final int _OTHERANCESTORS = 5;
    private static final TField OTHER_ANCESTORS_FIELD_DESC = new TField("otherAncestors", TType.LIST, (short)5);
    static {
      NAMES_TO_IDS.put("name", 1);
      THRIFT_NAMES_TO_IDS.put("name", 1);
      FIELD_METADATA.put(1, NAME_FIELD_DESC);
      NAMES_TO_IDS.put("baseType", 2);
      THRIFT_NAMES_TO_IDS.put("baseType", 2);
      FIELD_METADATA.put(2, BASE_TYPE_FIELD_DESC);
      NAMES_TO_IDS.put("isOrderable", 3);
      THRIFT_NAMES_TO_IDS.put("isOrderable", 3);
      FIELD_METADATA.put(3, IS_ORDERABLE_FIELD_DESC);
      NAMES_TO_IDS.put("topMostAncestor", 4);
      THRIFT_NAMES_TO_IDS.put("topMostAncestor", 4);
      FIELD_METADATA.put(4, TOP_MOST_ANCESTOR_FIELD_DESC);
      NAMES_TO_IDS.put("otherAncestors", 5);
      THRIFT_NAMES_TO_IDS.put("otherAncestors", 5);
      FIELD_METADATA.put(5, OTHER_ANCESTORS_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="name", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName getName() { return name; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="baseType", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature getBaseType() { return baseType; }

    
    
    @com.facebook.swift.codec.ThriftField(value=3, name="isOrderable", requiredness=Requiredness.NONE)
    public boolean isIsOrderable() { return isOrderable; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=4, name="topMostAncestor", requiredness=Requiredness.OPTIONAL)
    public com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName getTopMostAncestor() { return topMostAncestor; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=5, name="otherAncestors", requiredness=Requiredness.NONE)
    public List<com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName> getOtherAncestors() { return otherAncestors; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("name", name);
        helper.add("baseType", baseType);
        helper.add("isOrderable", isOrderable);
        helper.add("topMostAncestor", topMostAncestor);
        helper.add("otherAncestors", otherAncestors);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftDistinctTypeInfo other = (ThriftDistinctTypeInfo)o;
    
        return
            Objects.equals(name, other.name) &&
            Objects.equals(baseType, other.baseType) &&
            Objects.equals(isOrderable, other.isOrderable) &&
            Objects.equals(topMostAncestor, other.topMostAncestor) &&
            Objects.equals(otherAncestors, other.otherAncestors) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            name,
            baseType,
            isOrderable,
            topMostAncestor,
            otherAncestors
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftDistinctTypeInfo> asReader() {
      return ThriftDistinctTypeInfo::read0;
    }
    
    public static ThriftDistinctTypeInfo read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftDistinctTypeInfo.NAMES_TO_IDS, ThriftDistinctTypeInfo.THRIFT_NAMES_TO_IDS, ThriftDistinctTypeInfo.FIELD_METADATA);
      ThriftDistinctTypeInfo.Builder builder = new ThriftDistinctTypeInfo.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _NAME:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName name = com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName.read0(oprot);
            builder.setName(name);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _BASETYPE:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature baseType = com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature.read0(oprot);
            builder.setBaseType(baseType);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ISORDERABLE:
          if (__field.type == TType.BOOL) {
            boolean isOrderable = oprot.readBool();
            builder.setIsOrderable(isOrderable);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _TOPMOSTANCESTOR:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName topMostAncestor = com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName.read0(oprot);
            builder.setTopMostAncestor(topMostAncestor);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OTHERANCESTORS:
          if (__field.type == TType.LIST) {
            List<com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName> otherAncestors;
                {
                TList _list = oprot.readListBegin();
                otherAncestors = new ArrayList<com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName>(Math.max(0, _list.size));
                for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                    
                    com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName.read0(oprot);
                    otherAncestors.add(_value1);
                }
                oprot.readListEnd();
                }
            builder.setOtherAncestors(otherAncestors);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        this.name.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (baseType != null) {
        oprot.writeFieldBegin(BASE_TYPE_FIELD_DESC);
        this.baseType.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ORDERABLE_FIELD_DESC);
      oprot.writeBool(this.isOrderable);
      oprot.writeFieldEnd();
      if (topMostAncestor != null) {
        oprot.writeFieldBegin(TOP_MOST_ANCESTOR_FIELD_DESC);
        this.topMostAncestor.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (otherAncestors != null) {
        oprot.writeFieldBegin(OTHER_ANCESTORS_FIELD_DESC);
        List<com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName> _iter0 = otherAncestors;
        oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName _iter1 : _iter0) {
              _iter1.write0(oprot);
            }
            oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftDistinctTypeInfoLazy {
        private static final ThriftDistinctTypeInfo _DEFAULT = new ThriftDistinctTypeInfo.Builder().build();
    }
    
    public static ThriftDistinctTypeInfo defaultInstance() {
        return  _ThriftDistinctTypeInfoLazy._DEFAULT;
    }
}
