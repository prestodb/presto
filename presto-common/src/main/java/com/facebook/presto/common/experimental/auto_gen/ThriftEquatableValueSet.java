/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftEquatableValueSet", builder=ThriftEquatableValueSet.Builder.class)
public final class ThriftEquatableValueSet implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftEquatableValueSet(
        @com.facebook.swift.codec.ThriftField(value=1, name="type", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftType type,
        @com.facebook.swift.codec.ThriftField(value=2, name="whiteList", requiredness=Requiredness.NONE) final boolean whiteList,
        @com.facebook.swift.codec.ThriftField(value=3, name="entries", requiredness=Requiredness.NONE) final Set<com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry> entries
    ) {
        this.type = type;
        this.whiteList = whiteList;
        this.entries = entries;
    }
    
    @ThriftConstructor
    protected ThriftEquatableValueSet() {
      this.type = null;
      this.whiteList = false;
      this.entries = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftEquatableValueSet other) {
      return new Builder(other);
    }

    public static class Builder {
        private com.facebook.presto.common.experimental.auto_gen.ThriftType type = null;
        private boolean whiteList = false;
        private Set<com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry> entries = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="type", requiredness=Requiredness.NONE)    public Builder setType(com.facebook.presto.common.experimental.auto_gen.ThriftType type) {
            this.type = type;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftType getType() { return type; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="whiteList", requiredness=Requiredness.NONE)    public Builder setWhiteList(boolean whiteList) {
            this.whiteList = whiteList;
            return this;
        }
    
        public boolean isWhiteList() { return whiteList; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="entries", requiredness=Requiredness.NONE)    public Builder setEntries(Set<com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry> entries) {
            this.entries = entries;
            return this;
        }
    
        public Set<com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry> getEntries() { return entries; }
    
        public Builder() { }
        public Builder(ThriftEquatableValueSet other) {
            this.type = other.type;
            this.whiteList = other.whiteList;
            this.entries = other.entries;
        }
    
        @ThriftConstructor
        public ThriftEquatableValueSet build() {
            ThriftEquatableValueSet result = new ThriftEquatableValueSet (
                this.type,
                this.whiteList,
                this.entries
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftEquatableValueSet");
    private final com.facebook.presto.common.experimental.auto_gen.ThriftType type;
    public static final int _TYPE = 1;
    private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRUCT, (short)1);
        private final boolean whiteList;
    public static final int _WHITELIST = 2;
    private static final TField WHITE_LIST_FIELD_DESC = new TField("whiteList", TType.BOOL, (short)2);
        private final Set<com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry> entries;
    public static final int _ENTRIES = 3;
    private static final TField ENTRIES_FIELD_DESC = new TField("entries", TType.SET, (short)3);
    static {
      NAMES_TO_IDS.put("type", 1);
      THRIFT_NAMES_TO_IDS.put("type", 1);
      FIELD_METADATA.put(1, TYPE_FIELD_DESC);
      NAMES_TO_IDS.put("whiteList", 2);
      THRIFT_NAMES_TO_IDS.put("whiteList", 2);
      FIELD_METADATA.put(2, WHITE_LIST_FIELD_DESC);
      NAMES_TO_IDS.put("entries", 3);
      THRIFT_NAMES_TO_IDS.put("entries", 3);
      FIELD_METADATA.put(3, ENTRIES_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="type", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftType getType() { return type; }

    
    
    @com.facebook.swift.codec.ThriftField(value=2, name="whiteList", requiredness=Requiredness.NONE)
    public boolean isWhiteList() { return whiteList; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=3, name="entries", requiredness=Requiredness.NONE)
    public Set<com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry> getEntries() { return entries; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("type", type);
        helper.add("whiteList", whiteList);
        helper.add("entries", entries);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftEquatableValueSet other = (ThriftEquatableValueSet)o;
    
        return
            Objects.equals(type, other.type) &&
            Objects.equals(whiteList, other.whiteList) &&
            Objects.equals(entries, other.entries) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            type,
            whiteList,
            entries
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftEquatableValueSet> asReader() {
      return ThriftEquatableValueSet::read0;
    }
    
    public static ThriftEquatableValueSet read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftEquatableValueSet.NAMES_TO_IDS, ThriftEquatableValueSet.THRIFT_NAMES_TO_IDS, ThriftEquatableValueSet.FIELD_METADATA);
      ThriftEquatableValueSet.Builder builder = new ThriftEquatableValueSet.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _TYPE:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftType type = com.facebook.presto.common.experimental.auto_gen.ThriftType.read0(oprot);
            builder.setType(type);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _WHITELIST:
          if (__field.type == TType.BOOL) {
            boolean whiteList = oprot.readBool();
            builder.setWhiteList(whiteList);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ENTRIES:
          if (__field.type == TType.SET) {
            Set<com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry> entries;
                {
                TSet _set = oprot.readSetBegin();
                entries = new HashSet<com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry>(Math.max(0, _set.size));
                for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                    
                    com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry.read0(oprot);
                    entries.add(_value1);
                }
                oprot.readSetEnd();
                }
            builder.setEntries(entries);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        this.type.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WHITE_LIST_FIELD_DESC);
      oprot.writeBool(this.whiteList);
      oprot.writeFieldEnd();
      if (entries != null) {
        oprot.writeFieldBegin(ENTRIES_FIELD_DESC);
        Set<com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry> _iter0 = entries;
        oprot.writeSetBegin(new TSet(TType.STRUCT, _iter0.size()));
            for (com.facebook.presto.common.experimental.auto_gen.ThriftValueEntry _iter1 : _iter0) {
              _iter1.write0(oprot);
            }
            oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftEquatableValueSetLazy {
        private static final ThriftEquatableValueSet _DEFAULT = new ThriftEquatableValueSet.Builder().build();
    }
    
    public static ThriftEquatableValueSet defaultInstance() {
        return  _ThriftEquatableValueSetLazy._DEFAULT;
    }
}
