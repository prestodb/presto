/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftSessionRepresentation", builder=ThriftSessionRepresentation.Builder.class)
public final class ThriftSessionRepresentation implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftSessionRepresentation(
        @com.facebook.swift.codec.ThriftField(value=1, name="queryId", requiredness=Requiredness.NONE) final String queryId,
        @com.facebook.swift.codec.ThriftField(value=2, name="transactionId", requiredness=Requiredness.OPTIONAL) final com.facebook.presto.common.experimental.auto_gen.ThriftTransactionId transactionId,
        @com.facebook.swift.codec.ThriftField(value=3, name="clientTransactionSupport", requiredness=Requiredness.NONE) final boolean clientTransactionSupport,
        @com.facebook.swift.codec.ThriftField(value=4, name="user", requiredness=Requiredness.NONE) final String user,
        @com.facebook.swift.codec.ThriftField(value=5, name="principal", requiredness=Requiredness.OPTIONAL) final String principal,
        @com.facebook.swift.codec.ThriftField(value=6, name="source", requiredness=Requiredness.OPTIONAL) final String source,
        @com.facebook.swift.codec.ThriftField(value=7, name="catalog", requiredness=Requiredness.OPTIONAL) final String catalog,
        @com.facebook.swift.codec.ThriftField(value=8, name="schema", requiredness=Requiredness.OPTIONAL) final String schema,
        @com.facebook.swift.codec.ThriftField(value=9, name="traceToken", requiredness=Requiredness.OPTIONAL) final String traceToken,
        @com.facebook.swift.codec.ThriftField(value=10, name="timeZoneKey", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftTimeZoneKey timeZoneKey,
        @com.facebook.swift.codec.ThriftField(value=11, name="locale", requiredness=Requiredness.NONE) final String locale,
        @com.facebook.swift.codec.ThriftField(value=12, name="remoteUserAddress", requiredness=Requiredness.OPTIONAL) final String remoteUserAddress,
        @com.facebook.swift.codec.ThriftField(value=13, name="userAgent", requiredness=Requiredness.OPTIONAL) final String userAgent,
        @com.facebook.swift.codec.ThriftField(value=14, name="clientInfo", requiredness=Requiredness.OPTIONAL) final String clientInfo,
        @com.facebook.swift.codec.ThriftField(value=15, name="clientTags", requiredness=Requiredness.NONE) final Set<String> clientTags,
        @com.facebook.swift.codec.ThriftField(value=16, name="startTime", requiredness=Requiredness.NONE) final long startTime,
        @com.facebook.swift.codec.ThriftField(value=17, name="resourceEstimates", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftResourceEstimates resourceEstimates,
        @com.facebook.swift.codec.ThriftField(value=18, name="systemProperties", requiredness=Requiredness.NONE) final Map<String, String> systemProperties,
        @com.facebook.swift.codec.ThriftField(value=19, name="catalogProperties", requiredness=Requiredness.NONE) final Map<String, Map<String, String>> catalogProperties,
        @com.facebook.swift.codec.ThriftField(value=20, name="unprocessedCatalogProperties", requiredness=Requiredness.NONE) final Map<String, Map<String, String>> unprocessedCatalogProperties,
        @com.facebook.swift.codec.ThriftField(value=21, name="roles", requiredness=Requiredness.NONE) final Map<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole> roles,
        @com.facebook.swift.codec.ThriftField(value=22, name="preparedStatements", requiredness=Requiredness.NONE) final Map<String, String> preparedStatements,
        @com.facebook.swift.codec.ThriftField(value=23, name="sessionFunctions", requiredness=Requiredness.NONE) final Map<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction> sessionFunctions
    ) {
        this.queryId = queryId;
        this.transactionId = transactionId;
        this.clientTransactionSupport = clientTransactionSupport;
        this.user = user;
        this.principal = principal;
        this.source = source;
        this.catalog = catalog;
        this.schema = schema;
        this.traceToken = traceToken;
        this.timeZoneKey = timeZoneKey;
        this.locale = locale;
        this.remoteUserAddress = remoteUserAddress;
        this.userAgent = userAgent;
        this.clientInfo = clientInfo;
        this.clientTags = clientTags;
        this.startTime = startTime;
        this.resourceEstimates = resourceEstimates;
        this.systemProperties = systemProperties;
        this.catalogProperties = catalogProperties;
        this.unprocessedCatalogProperties = unprocessedCatalogProperties;
        this.roles = roles;
        this.preparedStatements = preparedStatements;
        this.sessionFunctions = sessionFunctions;
    }
    
    @ThriftConstructor
    protected ThriftSessionRepresentation() {
      this.queryId = null;
      this.transactionId = null;
      this.clientTransactionSupport = false;
      this.user = null;
      this.principal = null;
      this.source = null;
      this.catalog = null;
      this.schema = null;
      this.traceToken = null;
      this.timeZoneKey = null;
      this.locale = null;
      this.remoteUserAddress = null;
      this.userAgent = null;
      this.clientInfo = null;
      this.clientTags = null;
      this.startTime = 0L;
      this.resourceEstimates = null;
      this.systemProperties = null;
      this.catalogProperties = null;
      this.unprocessedCatalogProperties = null;
      this.roles = null;
      this.preparedStatements = null;
      this.sessionFunctions = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftSessionRepresentation other) {
      return new Builder(other);
    }

    public static class Builder {
        private String queryId = null;
        private com.facebook.presto.common.experimental.auto_gen.ThriftTransactionId transactionId = null;
        private boolean clientTransactionSupport = false;
        private String user = null;
        private String principal = null;
        private String source = null;
        private String catalog = null;
        private String schema = null;
        private String traceToken = null;
        private com.facebook.presto.common.experimental.auto_gen.ThriftTimeZoneKey timeZoneKey = null;
        private String locale = null;
        private String remoteUserAddress = null;
        private String userAgent = null;
        private String clientInfo = null;
        private Set<String> clientTags = null;
        private long startTime = 0L;
        private com.facebook.presto.common.experimental.auto_gen.ThriftResourceEstimates resourceEstimates = null;
        private Map<String, String> systemProperties = null;
        private Map<String, Map<String, String>> catalogProperties = null;
        private Map<String, Map<String, String>> unprocessedCatalogProperties = null;
        private Map<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole> roles = null;
        private Map<String, String> preparedStatements = null;
        private Map<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction> sessionFunctions = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="queryId", requiredness=Requiredness.NONE)    public Builder setQueryId(String queryId) {
            this.queryId = queryId;
            return this;
        }
    
        public String getQueryId() { return queryId; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="transactionId", requiredness=Requiredness.OPTIONAL)    public Builder setTransactionId(com.facebook.presto.common.experimental.auto_gen.ThriftTransactionId transactionId) {
            this.transactionId = transactionId;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftTransactionId getTransactionId() { return transactionId; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="clientTransactionSupport", requiredness=Requiredness.NONE)    public Builder setClientTransactionSupport(boolean clientTransactionSupport) {
            this.clientTransactionSupport = clientTransactionSupport;
            return this;
        }
    
        public boolean isClientTransactionSupport() { return clientTransactionSupport; }
    
            @com.facebook.swift.codec.ThriftField(value=4, name="user", requiredness=Requiredness.NONE)    public Builder setUser(String user) {
            this.user = user;
            return this;
        }
    
        public String getUser() { return user; }
    
            @com.facebook.swift.codec.ThriftField(value=5, name="principal", requiredness=Requiredness.OPTIONAL)    public Builder setPrincipal(String principal) {
            this.principal = principal;
            return this;
        }
    
        public String getPrincipal() { return principal; }
    
            @com.facebook.swift.codec.ThriftField(value=6, name="source", requiredness=Requiredness.OPTIONAL)    public Builder setSource(String source) {
            this.source = source;
            return this;
        }
    
        public String getSource() { return source; }
    
            @com.facebook.swift.codec.ThriftField(value=7, name="catalog", requiredness=Requiredness.OPTIONAL)    public Builder setCatalog(String catalog) {
            this.catalog = catalog;
            return this;
        }
    
        public String getCatalog() { return catalog; }
    
            @com.facebook.swift.codec.ThriftField(value=8, name="schema", requiredness=Requiredness.OPTIONAL)    public Builder setSchema(String schema) {
            this.schema = schema;
            return this;
        }
    
        public String getSchema() { return schema; }
    
            @com.facebook.swift.codec.ThriftField(value=9, name="traceToken", requiredness=Requiredness.OPTIONAL)    public Builder setTraceToken(String traceToken) {
            this.traceToken = traceToken;
            return this;
        }
    
        public String getTraceToken() { return traceToken; }
    
            @com.facebook.swift.codec.ThriftField(value=10, name="timeZoneKey", requiredness=Requiredness.NONE)    public Builder setTimeZoneKey(com.facebook.presto.common.experimental.auto_gen.ThriftTimeZoneKey timeZoneKey) {
            this.timeZoneKey = timeZoneKey;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftTimeZoneKey getTimeZoneKey() { return timeZoneKey; }
    
            @com.facebook.swift.codec.ThriftField(value=11, name="locale", requiredness=Requiredness.NONE)    public Builder setLocale(String locale) {
            this.locale = locale;
            return this;
        }
    
        public String getLocale() { return locale; }
    
            @com.facebook.swift.codec.ThriftField(value=12, name="remoteUserAddress", requiredness=Requiredness.OPTIONAL)    public Builder setRemoteUserAddress(String remoteUserAddress) {
            this.remoteUserAddress = remoteUserAddress;
            return this;
        }
    
        public String getRemoteUserAddress() { return remoteUserAddress; }
    
            @com.facebook.swift.codec.ThriftField(value=13, name="userAgent", requiredness=Requiredness.OPTIONAL)    public Builder setUserAgent(String userAgent) {
            this.userAgent = userAgent;
            return this;
        }
    
        public String getUserAgent() { return userAgent; }
    
            @com.facebook.swift.codec.ThriftField(value=14, name="clientInfo", requiredness=Requiredness.OPTIONAL)    public Builder setClientInfo(String clientInfo) {
            this.clientInfo = clientInfo;
            return this;
        }
    
        public String getClientInfo() { return clientInfo; }
    
            @com.facebook.swift.codec.ThriftField(value=15, name="clientTags", requiredness=Requiredness.NONE)    public Builder setClientTags(Set<String> clientTags) {
            this.clientTags = clientTags;
            return this;
        }
    
        public Set<String> getClientTags() { return clientTags; }
    
            @com.facebook.swift.codec.ThriftField(value=16, name="startTime", requiredness=Requiredness.NONE)    public Builder setStartTime(long startTime) {
            this.startTime = startTime;
            return this;
        }
    
        public long getStartTime() { return startTime; }
    
            @com.facebook.swift.codec.ThriftField(value=17, name="resourceEstimates", requiredness=Requiredness.NONE)    public Builder setResourceEstimates(com.facebook.presto.common.experimental.auto_gen.ThriftResourceEstimates resourceEstimates) {
            this.resourceEstimates = resourceEstimates;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftResourceEstimates getResourceEstimates() { return resourceEstimates; }
    
            @com.facebook.swift.codec.ThriftField(value=18, name="systemProperties", requiredness=Requiredness.NONE)    public Builder setSystemProperties(Map<String, String> systemProperties) {
            this.systemProperties = systemProperties;
            return this;
        }
    
        public Map<String, String> getSystemProperties() { return systemProperties; }
    
            @com.facebook.swift.codec.ThriftField(value=19, name="catalogProperties", requiredness=Requiredness.NONE)    public Builder setCatalogProperties(Map<String, Map<String, String>> catalogProperties) {
            this.catalogProperties = catalogProperties;
            return this;
        }
    
        public Map<String, Map<String, String>> getCatalogProperties() { return catalogProperties; }
    
            @com.facebook.swift.codec.ThriftField(value=20, name="unprocessedCatalogProperties", requiredness=Requiredness.NONE)    public Builder setUnprocessedCatalogProperties(Map<String, Map<String, String>> unprocessedCatalogProperties) {
            this.unprocessedCatalogProperties = unprocessedCatalogProperties;
            return this;
        }
    
        public Map<String, Map<String, String>> getUnprocessedCatalogProperties() { return unprocessedCatalogProperties; }
    
            @com.facebook.swift.codec.ThriftField(value=21, name="roles", requiredness=Requiredness.NONE)    public Builder setRoles(Map<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole> roles) {
            this.roles = roles;
            return this;
        }
    
        public Map<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole> getRoles() { return roles; }
    
            @com.facebook.swift.codec.ThriftField(value=22, name="preparedStatements", requiredness=Requiredness.NONE)    public Builder setPreparedStatements(Map<String, String> preparedStatements) {
            this.preparedStatements = preparedStatements;
            return this;
        }
    
        public Map<String, String> getPreparedStatements() { return preparedStatements; }
    
            @com.facebook.swift.codec.ThriftField(value=23, name="sessionFunctions", requiredness=Requiredness.NONE)    public Builder setSessionFunctions(Map<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction> sessionFunctions) {
            this.sessionFunctions = sessionFunctions;
            return this;
        }
    
        public Map<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction> getSessionFunctions() { return sessionFunctions; }
    
        public Builder() { }
        public Builder(ThriftSessionRepresentation other) {
            this.queryId = other.queryId;
            this.transactionId = other.transactionId;
            this.clientTransactionSupport = other.clientTransactionSupport;
            this.user = other.user;
            this.principal = other.principal;
            this.source = other.source;
            this.catalog = other.catalog;
            this.schema = other.schema;
            this.traceToken = other.traceToken;
            this.timeZoneKey = other.timeZoneKey;
            this.locale = other.locale;
            this.remoteUserAddress = other.remoteUserAddress;
            this.userAgent = other.userAgent;
            this.clientInfo = other.clientInfo;
            this.clientTags = other.clientTags;
            this.startTime = other.startTime;
            this.resourceEstimates = other.resourceEstimates;
            this.systemProperties = other.systemProperties;
            this.catalogProperties = other.catalogProperties;
            this.unprocessedCatalogProperties = other.unprocessedCatalogProperties;
            this.roles = other.roles;
            this.preparedStatements = other.preparedStatements;
            this.sessionFunctions = other.sessionFunctions;
        }
    
        @ThriftConstructor
        public ThriftSessionRepresentation build() {
            ThriftSessionRepresentation result = new ThriftSessionRepresentation (
                this.queryId,
                this.transactionId,
                this.clientTransactionSupport,
                this.user,
                this.principal,
                this.source,
                this.catalog,
                this.schema,
                this.traceToken,
                this.timeZoneKey,
                this.locale,
                this.remoteUserAddress,
                this.userAgent,
                this.clientInfo,
                this.clientTags,
                this.startTime,
                this.resourceEstimates,
                this.systemProperties,
                this.catalogProperties,
                this.unprocessedCatalogProperties,
                this.roles,
                this.preparedStatements,
                this.sessionFunctions
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftSessionRepresentation");
    private final String queryId;
    public static final int _QUERYID = 1;
    private static final TField QUERY_ID_FIELD_DESC = new TField("queryId", TType.STRING, (short)1);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftTransactionId transactionId;
    public static final int _TRANSACTIONID = 2;
    private static final TField TRANSACTION_ID_FIELD_DESC = new TField("transactionId", TType.STRUCT, (short)2);
        private final boolean clientTransactionSupport;
    public static final int _CLIENTTRANSACTIONSUPPORT = 3;
    private static final TField CLIENT_TRANSACTION_SUPPORT_FIELD_DESC = new TField("clientTransactionSupport", TType.BOOL, (short)3);
        private final String user;
    public static final int _USER = 4;
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short)4);
        private final String principal;
    public static final int _PRINCIPAL = 5;
    private static final TField PRINCIPAL_FIELD_DESC = new TField("principal", TType.STRING, (short)5);
        private final String source;
    public static final int _SOURCE = 6;
    private static final TField SOURCE_FIELD_DESC = new TField("source", TType.STRING, (short)6);
        private final String catalog;
    public static final int _CATALOG = 7;
    private static final TField CATALOG_FIELD_DESC = new TField("catalog", TType.STRING, (short)7);
        private final String schema;
    public static final int _SCHEMA = 8;
    private static final TField SCHEMA_FIELD_DESC = new TField("schema", TType.STRING, (short)8);
        private final String traceToken;
    public static final int _TRACETOKEN = 9;
    private static final TField TRACE_TOKEN_FIELD_DESC = new TField("traceToken", TType.STRING, (short)9);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftTimeZoneKey timeZoneKey;
    public static final int _TIMEZONEKEY = 10;
    private static final TField TIME_ZONE_KEY_FIELD_DESC = new TField("timeZoneKey", TType.STRUCT, (short)10);
        private final String locale;
    public static final int _LOCALE = 11;
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)11);
        private final String remoteUserAddress;
    public static final int _REMOTEUSERADDRESS = 12;
    private static final TField REMOTE_USER_ADDRESS_FIELD_DESC = new TField("remoteUserAddress", TType.STRING, (short)12);
        private final String userAgent;
    public static final int _USERAGENT = 13;
    private static final TField USER_AGENT_FIELD_DESC = new TField("userAgent", TType.STRING, (short)13);
        private final String clientInfo;
    public static final int _CLIENTINFO = 14;
    private static final TField CLIENT_INFO_FIELD_DESC = new TField("clientInfo", TType.STRING, (short)14);
        private final Set<String> clientTags;
    public static final int _CLIENTTAGS = 15;
    private static final TField CLIENT_TAGS_FIELD_DESC = new TField("clientTags", TType.SET, (short)15);
        private final long startTime;
    public static final int _STARTTIME = 16;
    private static final TField START_TIME_FIELD_DESC = new TField("startTime", TType.I64, (short)16);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftResourceEstimates resourceEstimates;
    public static final int _RESOURCEESTIMATES = 17;
    private static final TField RESOURCE_ESTIMATES_FIELD_DESC = new TField("resourceEstimates", TType.STRUCT, (short)17);
        private final Map<String, String> systemProperties;
    public static final int _SYSTEMPROPERTIES = 18;
    private static final TField SYSTEM_PROPERTIES_FIELD_DESC = new TField("systemProperties", TType.MAP, (short)18);
        private final Map<String, Map<String, String>> catalogProperties;
    public static final int _CATALOGPROPERTIES = 19;
    private static final TField CATALOG_PROPERTIES_FIELD_DESC = new TField("catalogProperties", TType.MAP, (short)19);
        private final Map<String, Map<String, String>> unprocessedCatalogProperties;
    public static final int _UNPROCESSEDCATALOGPROPERTIES = 20;
    private static final TField UNPROCESSED_CATALOG_PROPERTIES_FIELD_DESC = new TField("unprocessedCatalogProperties", TType.MAP, (short)20);
        private final Map<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole> roles;
    public static final int _ROLES = 21;
    private static final TField ROLES_FIELD_DESC = new TField("roles", TType.MAP, (short)21);
        private final Map<String, String> preparedStatements;
    public static final int _PREPAREDSTATEMENTS = 22;
    private static final TField PREPARED_STATEMENTS_FIELD_DESC = new TField("preparedStatements", TType.MAP, (short)22);
        private final Map<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction> sessionFunctions;
    public static final int _SESSIONFUNCTIONS = 23;
    private static final TField SESSION_FUNCTIONS_FIELD_DESC = new TField("sessionFunctions", TType.MAP, (short)23);
    static {
      NAMES_TO_IDS.put("queryId", 1);
      THRIFT_NAMES_TO_IDS.put("queryId", 1);
      FIELD_METADATA.put(1, QUERY_ID_FIELD_DESC);
      NAMES_TO_IDS.put("transactionId", 2);
      THRIFT_NAMES_TO_IDS.put("transactionId", 2);
      FIELD_METADATA.put(2, TRANSACTION_ID_FIELD_DESC);
      NAMES_TO_IDS.put("clientTransactionSupport", 3);
      THRIFT_NAMES_TO_IDS.put("clientTransactionSupport", 3);
      FIELD_METADATA.put(3, CLIENT_TRANSACTION_SUPPORT_FIELD_DESC);
      NAMES_TO_IDS.put("user", 4);
      THRIFT_NAMES_TO_IDS.put("user", 4);
      FIELD_METADATA.put(4, USER_FIELD_DESC);
      NAMES_TO_IDS.put("principal", 5);
      THRIFT_NAMES_TO_IDS.put("principal", 5);
      FIELD_METADATA.put(5, PRINCIPAL_FIELD_DESC);
      NAMES_TO_IDS.put("source", 6);
      THRIFT_NAMES_TO_IDS.put("source", 6);
      FIELD_METADATA.put(6, SOURCE_FIELD_DESC);
      NAMES_TO_IDS.put("catalog", 7);
      THRIFT_NAMES_TO_IDS.put("catalog", 7);
      FIELD_METADATA.put(7, CATALOG_FIELD_DESC);
      NAMES_TO_IDS.put("schema", 8);
      THRIFT_NAMES_TO_IDS.put("schema", 8);
      FIELD_METADATA.put(8, SCHEMA_FIELD_DESC);
      NAMES_TO_IDS.put("traceToken", 9);
      THRIFT_NAMES_TO_IDS.put("traceToken", 9);
      FIELD_METADATA.put(9, TRACE_TOKEN_FIELD_DESC);
      NAMES_TO_IDS.put("timeZoneKey", 10);
      THRIFT_NAMES_TO_IDS.put("timeZoneKey", 10);
      FIELD_METADATA.put(10, TIME_ZONE_KEY_FIELD_DESC);
      NAMES_TO_IDS.put("locale", 11);
      THRIFT_NAMES_TO_IDS.put("locale", 11);
      FIELD_METADATA.put(11, LOCALE_FIELD_DESC);
      NAMES_TO_IDS.put("remoteUserAddress", 12);
      THRIFT_NAMES_TO_IDS.put("remoteUserAddress", 12);
      FIELD_METADATA.put(12, REMOTE_USER_ADDRESS_FIELD_DESC);
      NAMES_TO_IDS.put("userAgent", 13);
      THRIFT_NAMES_TO_IDS.put("userAgent", 13);
      FIELD_METADATA.put(13, USER_AGENT_FIELD_DESC);
      NAMES_TO_IDS.put("clientInfo", 14);
      THRIFT_NAMES_TO_IDS.put("clientInfo", 14);
      FIELD_METADATA.put(14, CLIENT_INFO_FIELD_DESC);
      NAMES_TO_IDS.put("clientTags", 15);
      THRIFT_NAMES_TO_IDS.put("clientTags", 15);
      FIELD_METADATA.put(15, CLIENT_TAGS_FIELD_DESC);
      NAMES_TO_IDS.put("startTime", 16);
      THRIFT_NAMES_TO_IDS.put("startTime", 16);
      FIELD_METADATA.put(16, START_TIME_FIELD_DESC);
      NAMES_TO_IDS.put("resourceEstimates", 17);
      THRIFT_NAMES_TO_IDS.put("resourceEstimates", 17);
      FIELD_METADATA.put(17, RESOURCE_ESTIMATES_FIELD_DESC);
      NAMES_TO_IDS.put("systemProperties", 18);
      THRIFT_NAMES_TO_IDS.put("systemProperties", 18);
      FIELD_METADATA.put(18, SYSTEM_PROPERTIES_FIELD_DESC);
      NAMES_TO_IDS.put("catalogProperties", 19);
      THRIFT_NAMES_TO_IDS.put("catalogProperties", 19);
      FIELD_METADATA.put(19, CATALOG_PROPERTIES_FIELD_DESC);
      NAMES_TO_IDS.put("unprocessedCatalogProperties", 20);
      THRIFT_NAMES_TO_IDS.put("unprocessedCatalogProperties", 20);
      FIELD_METADATA.put(20, UNPROCESSED_CATALOG_PROPERTIES_FIELD_DESC);
      NAMES_TO_IDS.put("roles", 21);
      THRIFT_NAMES_TO_IDS.put("roles", 21);
      FIELD_METADATA.put(21, ROLES_FIELD_DESC);
      NAMES_TO_IDS.put("preparedStatements", 22);
      THRIFT_NAMES_TO_IDS.put("preparedStatements", 22);
      FIELD_METADATA.put(22, PREPARED_STATEMENTS_FIELD_DESC);
      NAMES_TO_IDS.put("sessionFunctions", 23);
      THRIFT_NAMES_TO_IDS.put("sessionFunctions", 23);
      FIELD_METADATA.put(23, SESSION_FUNCTIONS_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="queryId", requiredness=Requiredness.NONE)
    public String getQueryId() { return queryId; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="transactionId", requiredness=Requiredness.OPTIONAL)
    public com.facebook.presto.common.experimental.auto_gen.ThriftTransactionId getTransactionId() { return transactionId; }

    
    
    @com.facebook.swift.codec.ThriftField(value=3, name="clientTransactionSupport", requiredness=Requiredness.NONE)
    public boolean isClientTransactionSupport() { return clientTransactionSupport; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=4, name="user", requiredness=Requiredness.NONE)
    public String getUser() { return user; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=5, name="principal", requiredness=Requiredness.OPTIONAL)
    public String getPrincipal() { return principal; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=6, name="source", requiredness=Requiredness.OPTIONAL)
    public String getSource() { return source; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=7, name="catalog", requiredness=Requiredness.OPTIONAL)
    public String getCatalog() { return catalog; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=8, name="schema", requiredness=Requiredness.OPTIONAL)
    public String getSchema() { return schema; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=9, name="traceToken", requiredness=Requiredness.OPTIONAL)
    public String getTraceToken() { return traceToken; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=10, name="timeZoneKey", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftTimeZoneKey getTimeZoneKey() { return timeZoneKey; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=11, name="locale", requiredness=Requiredness.NONE)
    public String getLocale() { return locale; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=12, name="remoteUserAddress", requiredness=Requiredness.OPTIONAL)
    public String getRemoteUserAddress() { return remoteUserAddress; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=13, name="userAgent", requiredness=Requiredness.OPTIONAL)
    public String getUserAgent() { return userAgent; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=14, name="clientInfo", requiredness=Requiredness.OPTIONAL)
    public String getClientInfo() { return clientInfo; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=15, name="clientTags", requiredness=Requiredness.NONE)
    public Set<String> getClientTags() { return clientTags; }

    
    
    @com.facebook.swift.codec.ThriftField(value=16, name="startTime", requiredness=Requiredness.NONE)
    public long getStartTime() { return startTime; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=17, name="resourceEstimates", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftResourceEstimates getResourceEstimates() { return resourceEstimates; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=18, name="systemProperties", requiredness=Requiredness.NONE)
    public Map<String, String> getSystemProperties() { return systemProperties; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=19, name="catalogProperties", requiredness=Requiredness.NONE)
    public Map<String, Map<String, String>> getCatalogProperties() { return catalogProperties; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=20, name="unprocessedCatalogProperties", requiredness=Requiredness.NONE)
    public Map<String, Map<String, String>> getUnprocessedCatalogProperties() { return unprocessedCatalogProperties; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=21, name="roles", requiredness=Requiredness.NONE)
    public Map<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole> getRoles() { return roles; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=22, name="preparedStatements", requiredness=Requiredness.NONE)
    public Map<String, String> getPreparedStatements() { return preparedStatements; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=23, name="sessionFunctions", requiredness=Requiredness.NONE)
    public Map<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction> getSessionFunctions() { return sessionFunctions; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("queryId", queryId);
        helper.add("transactionId", transactionId);
        helper.add("clientTransactionSupport", clientTransactionSupport);
        helper.add("user", user);
        helper.add("principal", principal);
        helper.add("source", source);
        helper.add("catalog", catalog);
        helper.add("schema", schema);
        helper.add("traceToken", traceToken);
        helper.add("timeZoneKey", timeZoneKey);
        helper.add("locale", locale);
        helper.add("remoteUserAddress", remoteUserAddress);
        helper.add("userAgent", userAgent);
        helper.add("clientInfo", clientInfo);
        helper.add("clientTags", clientTags);
        helper.add("startTime", startTime);
        helper.add("resourceEstimates", resourceEstimates);
        helper.add("systemProperties", systemProperties);
        helper.add("catalogProperties", catalogProperties);
        helper.add("unprocessedCatalogProperties", unprocessedCatalogProperties);
        helper.add("roles", roles);
        helper.add("preparedStatements", preparedStatements);
        helper.add("sessionFunctions", sessionFunctions);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftSessionRepresentation other = (ThriftSessionRepresentation)o;
    
        return
            Objects.equals(queryId, other.queryId) &&
            Objects.equals(transactionId, other.transactionId) &&
            Objects.equals(clientTransactionSupport, other.clientTransactionSupport) &&
            Objects.equals(user, other.user) &&
            Objects.equals(principal, other.principal) &&
            Objects.equals(source, other.source) &&
            Objects.equals(catalog, other.catalog) &&
            Objects.equals(schema, other.schema) &&
            Objects.equals(traceToken, other.traceToken) &&
            Objects.equals(timeZoneKey, other.timeZoneKey) &&
            Objects.equals(locale, other.locale) &&
            Objects.equals(remoteUserAddress, other.remoteUserAddress) &&
            Objects.equals(userAgent, other.userAgent) &&
            Objects.equals(clientInfo, other.clientInfo) &&
            Objects.equals(clientTags, other.clientTags) &&
            Objects.equals(startTime, other.startTime) &&
            Objects.equals(resourceEstimates, other.resourceEstimates) &&
            Objects.equals(systemProperties, other.systemProperties) &&
            Objects.equals(catalogProperties, other.catalogProperties) &&
            Objects.equals(unprocessedCatalogProperties, other.unprocessedCatalogProperties) &&
            Objects.equals(roles, other.roles) &&
            Objects.equals(preparedStatements, other.preparedStatements) &&
            Objects.equals(sessionFunctions, other.sessionFunctions) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            queryId,
            transactionId,
            clientTransactionSupport,
            user,
            principal,
            source,
            catalog,
            schema,
            traceToken,
            timeZoneKey,
            locale,
            remoteUserAddress,
            userAgent,
            clientInfo,
            clientTags,
            startTime,
            resourceEstimates,
            systemProperties,
            catalogProperties,
            unprocessedCatalogProperties,
            roles,
            preparedStatements,
            sessionFunctions
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftSessionRepresentation> asReader() {
      return ThriftSessionRepresentation::read0;
    }
    
    public static ThriftSessionRepresentation read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftSessionRepresentation.NAMES_TO_IDS, ThriftSessionRepresentation.THRIFT_NAMES_TO_IDS, ThriftSessionRepresentation.FIELD_METADATA);
      ThriftSessionRepresentation.Builder builder = new ThriftSessionRepresentation.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _QUERYID:
          if (__field.type == TType.STRING) {
            String queryId = oprot.readString();
            builder.setQueryId(queryId);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _TRANSACTIONID:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftTransactionId transactionId = com.facebook.presto.common.experimental.auto_gen.ThriftTransactionId.read0(oprot);
            builder.setTransactionId(transactionId);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _CLIENTTRANSACTIONSUPPORT:
          if (__field.type == TType.BOOL) {
            boolean clientTransactionSupport = oprot.readBool();
            builder.setClientTransactionSupport(clientTransactionSupport);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _USER:
          if (__field.type == TType.STRING) {
            String user = oprot.readString();
            builder.setUser(user);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _PRINCIPAL:
          if (__field.type == TType.STRING) {
            String  principal = oprot.readString();
            builder.setPrincipal(principal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SOURCE:
          if (__field.type == TType.STRING) {
            String  source = oprot.readString();
            builder.setSource(source);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _CATALOG:
          if (__field.type == TType.STRING) {
            String  catalog = oprot.readString();
            builder.setCatalog(catalog);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SCHEMA:
          if (__field.type == TType.STRING) {
            String  schema = oprot.readString();
            builder.setSchema(schema);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _TRACETOKEN:
          if (__field.type == TType.STRING) {
            String  traceToken = oprot.readString();
            builder.setTraceToken(traceToken);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _TIMEZONEKEY:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftTimeZoneKey timeZoneKey = com.facebook.presto.common.experimental.auto_gen.ThriftTimeZoneKey.read0(oprot);
            builder.setTimeZoneKey(timeZoneKey);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _LOCALE:
          if (__field.type == TType.STRING) {
            String locale = oprot.readString();
            builder.setLocale(locale);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _REMOTEUSERADDRESS:
          if (__field.type == TType.STRING) {
            String  remoteUserAddress = oprot.readString();
            builder.setRemoteUserAddress(remoteUserAddress);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _USERAGENT:
          if (__field.type == TType.STRING) {
            String  userAgent = oprot.readString();
            builder.setUserAgent(userAgent);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _CLIENTINFO:
          if (__field.type == TType.STRING) {
            String  clientInfo = oprot.readString();
            builder.setClientInfo(clientInfo);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _CLIENTTAGS:
          if (__field.type == TType.SET) {
            Set<String> clientTags;
                {
                TSet _set = oprot.readSetBegin();
                clientTags = new HashSet<String>(Math.max(0, _set.size));
                for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                    
                    String _value1 = oprot.readString();
                    clientTags.add(_value1);
                }
                oprot.readSetEnd();
                }
            builder.setClientTags(clientTags);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _STARTTIME:
          if (__field.type == TType.I64) {
            long startTime = oprot.readI64();
            builder.setStartTime(startTime);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _RESOURCEESTIMATES:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftResourceEstimates resourceEstimates = com.facebook.presto.common.experimental.auto_gen.ThriftResourceEstimates.read0(oprot);
            builder.setResourceEstimates(resourceEstimates);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SYSTEMPROPERTIES:
          if (__field.type == TType.MAP) {
            Map<String, String> systemProperties;
                {
                TMap _map = oprot.readMapBegin();
                systemProperties = new HashMap<String, String>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    String _value1 = oprot.readString();
                    systemProperties.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setSystemProperties(systemProperties);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _CATALOGPROPERTIES:
          if (__field.type == TType.MAP) {
            Map<String, Map<String, String>> catalogProperties;
                {
                TMap _map = oprot.readMapBegin();
                catalogProperties = new HashMap<String, Map<String, String>>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    Map<String, String> _value1;
                                {
                                TMap _map1 = oprot.readMapBegin();
                                _value1 = new HashMap<String, String>(Math.max(0, _map1.size));
                                for (int _i1 = 0; (_map1.size < 0) ? oprot.peekMap() : (_i1 < _map1.size); _i1++) {
                                    
                                    
                                    String _key2 = oprot.readString();
                                    
                    
                                    
                                    String _value2 = oprot.readString();
                                    
                                    
                                    _value1.put(_key2, _value2);
                                    
                                }
                                }
                                oprot.readMapEnd();
                    catalogProperties.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setCatalogProperties(catalogProperties);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _UNPROCESSEDCATALOGPROPERTIES:
          if (__field.type == TType.MAP) {
            Map<String, Map<String, String>> unprocessedCatalogProperties;
                {
                TMap _map = oprot.readMapBegin();
                unprocessedCatalogProperties = new HashMap<String, Map<String, String>>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    Map<String, String> _value1;
                                {
                                TMap _map1 = oprot.readMapBegin();
                                _value1 = new HashMap<String, String>(Math.max(0, _map1.size));
                                for (int _i1 = 0; (_map1.size < 0) ? oprot.peekMap() : (_i1 < _map1.size); _i1++) {
                                    
                                    
                                    String _key2 = oprot.readString();
                                    
                    
                                    
                                    String _value2 = oprot.readString();
                                    
                                    
                                    _value1.put(_key2, _value2);
                                    
                                }
                                }
                                oprot.readMapEnd();
                    unprocessedCatalogProperties.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setUnprocessedCatalogProperties(unprocessedCatalogProperties);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ROLES:
          if (__field.type == TType.MAP) {
            Map<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole> roles;
                {
                TMap _map = oprot.readMapBegin();
                roles = new HashMap<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole.read0(oprot);
                    roles.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setRoles(roles);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _PREPAREDSTATEMENTS:
          if (__field.type == TType.MAP) {
            Map<String, String> preparedStatements;
                {
                TMap _map = oprot.readMapBegin();
                preparedStatements = new HashMap<String, String>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    String _value1 = oprot.readString();
                    preparedStatements.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setPreparedStatements(preparedStatements);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SESSIONFUNCTIONS:
          if (__field.type == TType.MAP) {
            Map<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction> sessionFunctions;
                {
                TMap _map = oprot.readMapBegin();
                sessionFunctions = new HashMap<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId _key1 = com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId.read0(oprot);
                    com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction.read0(oprot);
                    sessionFunctions.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setSessionFunctions(sessionFunctions);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (queryId != null) {
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        oprot.writeString(this.queryId);
        oprot.writeFieldEnd();
      }
      if (transactionId != null) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        this.transactionId.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLIENT_TRANSACTION_SUPPORT_FIELD_DESC);
      oprot.writeBool(this.clientTransactionSupport);
      oprot.writeFieldEnd();
      if (user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (principal != null) {
        oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
        oprot.writeString(this.principal);
        oprot.writeFieldEnd();
      }
      if (source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(this.source);
        oprot.writeFieldEnd();
      }
      if (catalog != null) {
        oprot.writeFieldBegin(CATALOG_FIELD_DESC);
        oprot.writeString(this.catalog);
        oprot.writeFieldEnd();
      }
      if (schema != null) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        oprot.writeString(this.schema);
        oprot.writeFieldEnd();
      }
      if (traceToken != null) {
        oprot.writeFieldBegin(TRACE_TOKEN_FIELD_DESC);
        oprot.writeString(this.traceToken);
        oprot.writeFieldEnd();
      }
      if (timeZoneKey != null) {
        oprot.writeFieldBegin(TIME_ZONE_KEY_FIELD_DESC);
        this.timeZoneKey.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      if (remoteUserAddress != null) {
        oprot.writeFieldBegin(REMOTE_USER_ADDRESS_FIELD_DESC);
        oprot.writeString(this.remoteUserAddress);
        oprot.writeFieldEnd();
      }
      if (userAgent != null) {
        oprot.writeFieldBegin(USER_AGENT_FIELD_DESC);
        oprot.writeString(this.userAgent);
        oprot.writeFieldEnd();
      }
      if (clientInfo != null) {
        oprot.writeFieldBegin(CLIENT_INFO_FIELD_DESC);
        oprot.writeString(this.clientInfo);
        oprot.writeFieldEnd();
      }
      if (clientTags != null) {
        oprot.writeFieldBegin(CLIENT_TAGS_FIELD_DESC);
        Set<String> _iter0 = clientTags;
        oprot.writeSetBegin(new TSet(TType.STRING, _iter0.size()));
            for (String _iter1 : _iter0) {
              oprot.writeString(_iter1);
            }
            oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(this.startTime);
      oprot.writeFieldEnd();
      if (resourceEstimates != null) {
        oprot.writeFieldBegin(RESOURCE_ESTIMATES_FIELD_DESC);
        this.resourceEstimates.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (systemProperties != null) {
        oprot.writeFieldBegin(SYSTEM_PROPERTIES_FIELD_DESC);
        Map<String, String> _iter0 = systemProperties;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
            for (Map.Entry<String, String> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeString(_iter1.getValue());
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (catalogProperties != null) {
        oprot.writeFieldBegin(CATALOG_PROPERTIES_FIELD_DESC);
        Map<String, Map<String, String>> _iter0 = catalogProperties;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, _iter0.size()));
            for (Map.Entry<String, Map<String, String>> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter1.getValue().size()));
            for (Map.Entry<String, String> _iter2 : _iter1.getValue().entrySet()) {
              oprot.writeString(_iter2.getKey());
              oprot.writeString(_iter2.getValue());
            }
            oprot.writeMapEnd();
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (unprocessedCatalogProperties != null) {
        oprot.writeFieldBegin(UNPROCESSED_CATALOG_PROPERTIES_FIELD_DESC);
        Map<String, Map<String, String>> _iter0 = unprocessedCatalogProperties;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, _iter0.size()));
            for (Map.Entry<String, Map<String, String>> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter1.getValue().size()));
            for (Map.Entry<String, String> _iter2 : _iter1.getValue().entrySet()) {
              oprot.writeString(_iter2.getKey());
              oprot.writeString(_iter2.getValue());
            }
            oprot.writeMapEnd();
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (roles != null) {
        oprot.writeFieldBegin(ROLES_FIELD_DESC);
        Map<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole> _iter0 = roles;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _iter0.size()));
            for (Map.Entry<String, com.facebook.presto.common.experimental.auto_gen.ThriftSelectedRole> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              _iter1.getValue().write0(oprot);
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (preparedStatements != null) {
        oprot.writeFieldBegin(PREPARED_STATEMENTS_FIELD_DESC);
        Map<String, String> _iter0 = preparedStatements;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
            for (Map.Entry<String, String> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeString(_iter1.getValue());
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (sessionFunctions != null) {
        oprot.writeFieldBegin(SESSION_FUNCTIONS_FIELD_DESC);
        Map<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction> _iter0 = sessionFunctions;
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.STRUCT, _iter0.size()));
            for (Map.Entry<com.facebook.presto.common.experimental.auto_gen.ThriftSqlFunctionId, com.facebook.presto.common.experimental.auto_gen.ThriftSqlInvokedFunction> _iter1 : _iter0.entrySet()) {
              _iter1.getKey().write0(oprot);
              _iter1.getValue().write0(oprot);
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftSessionRepresentationLazy {
        private static final ThriftSessionRepresentation _DEFAULT = new ThriftSessionRepresentation.Builder().build();
    }
    
    public static ThriftSessionRepresentation defaultInstance() {
        return  _ThriftSessionRepresentationLazy._DEFAULT;
    }
}
