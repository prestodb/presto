/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftBaseHiveTableHandle", builder=ThriftBaseHiveTableHandle.Builder.class)
public final class ThriftBaseHiveTableHandle implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftBaseHiveTableHandle(
        @com.facebook.swift.codec.ThriftField(value=1, name="schemaName", requiredness=Requiredness.NONE) final String schemaName,
        @com.facebook.swift.codec.ThriftField(value=2, name="tableName", requiredness=Requiredness.NONE) final String tableName
    ) {
        this.schemaName = schemaName;
        this.tableName = tableName;
    }
    
    @ThriftConstructor
    protected ThriftBaseHiveTableHandle() {
      this.schemaName = null;
      this.tableName = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftBaseHiveTableHandle other) {
      return new Builder(other);
    }

    public static class Builder {
        private String schemaName = null;
        private String tableName = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="schemaName", requiredness=Requiredness.NONE)    public Builder setSchemaName(String schemaName) {
            this.schemaName = schemaName;
            return this;
        }
    
        public String getSchemaName() { return schemaName; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="tableName", requiredness=Requiredness.NONE)    public Builder setTableName(String tableName) {
            this.tableName = tableName;
            return this;
        }
    
        public String getTableName() { return tableName; }
    
        public Builder() { }
        public Builder(ThriftBaseHiveTableHandle other) {
            this.schemaName = other.schemaName;
            this.tableName = other.tableName;
        }
    
        @ThriftConstructor
        public ThriftBaseHiveTableHandle build() {
            ThriftBaseHiveTableHandle result = new ThriftBaseHiveTableHandle (
                this.schemaName,
                this.tableName
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftBaseHiveTableHandle");
    private final String schemaName;
    public static final int _SCHEMANAME = 1;
    private static final TField SCHEMA_NAME_FIELD_DESC = new TField("schemaName", TType.STRING, (short)1);
        private final String tableName;
    public static final int _TABLENAME = 2;
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short)2);
    static {
      NAMES_TO_IDS.put("schemaName", 1);
      THRIFT_NAMES_TO_IDS.put("schemaName", 1);
      FIELD_METADATA.put(1, SCHEMA_NAME_FIELD_DESC);
      NAMES_TO_IDS.put("tableName", 2);
      THRIFT_NAMES_TO_IDS.put("tableName", 2);
      FIELD_METADATA.put(2, TABLE_NAME_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="schemaName", requiredness=Requiredness.NONE)
    public String getSchemaName() { return schemaName; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="tableName", requiredness=Requiredness.NONE)
    public String getTableName() { return tableName; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("schemaName", schemaName);
        helper.add("tableName", tableName);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftBaseHiveTableHandle other = (ThriftBaseHiveTableHandle)o;
    
        return
            Objects.equals(schemaName, other.schemaName) &&
            Objects.equals(tableName, other.tableName) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            schemaName,
            tableName
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftBaseHiveTableHandle> asReader() {
      return ThriftBaseHiveTableHandle::read0;
    }
    
    public static ThriftBaseHiveTableHandle read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftBaseHiveTableHandle.NAMES_TO_IDS, ThriftBaseHiveTableHandle.THRIFT_NAMES_TO_IDS, ThriftBaseHiveTableHandle.FIELD_METADATA);
      ThriftBaseHiveTableHandle.Builder builder = new ThriftBaseHiveTableHandle.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _SCHEMANAME:
          if (__field.type == TType.STRING) {
            String schemaName = oprot.readString();
            builder.setSchemaName(schemaName);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _TABLENAME:
          if (__field.type == TType.STRING) {
            String tableName = oprot.readString();
            builder.setTableName(tableName);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (schemaName != null) {
        oprot.writeFieldBegin(SCHEMA_NAME_FIELD_DESC);
        oprot.writeString(this.schemaName);
        oprot.writeFieldEnd();
      }
      if (tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftBaseHiveTableHandleLazy {
        private static final ThriftBaseHiveTableHandle _DEFAULT = new ThriftBaseHiveTableHandle.Builder().build();
    }
    
    public static ThriftBaseHiveTableHandle defaultInstance() {
        return  _ThriftBaseHiveTableHandleLazy._DEFAULT;
    }
}
