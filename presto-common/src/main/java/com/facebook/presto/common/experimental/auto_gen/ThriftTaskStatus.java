/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.SwiftGenerated;
import com.facebook.swift.codec.ThriftConstructor;
import com.facebook.swift.codec.ThriftField.Requiredness;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TList;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TSet;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import static com.google.common.base.MoreObjects.ToStringHelper;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value = "ThriftTaskStatus", builder = ThriftTaskStatus.Builder.class)
public final class ThriftTaskStatus
        implements com.facebook.thrift.payload.ThriftSerializable
{
    @ThriftConstructor
    public ThriftTaskStatus(
            @com.facebook.swift.codec.ThriftField(value = 1, name = "taskInstanceIdLeastSignificantBits", requiredness = Requiredness.NONE) final long taskInstanceIdLeastSignificantBits,
            @com.facebook.swift.codec.ThriftField(value = 2, name = "taskInstanceIdMostSignificantBits", requiredness = Requiredness.NONE) final long taskInstanceIdMostSignificantBits,
            @com.facebook.swift.codec.ThriftField(value = 3, name = "version", requiredness = Requiredness.NONE) final long version,
            @com.facebook.swift.codec.ThriftField(value = 4, name = "state", requiredness = Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftTaskState state,
            @com.facebook.swift.codec.ThriftField(value = 5, name = "self", requiredness = Requiredness.NONE) final String self,
            @com.facebook.swift.codec.ThriftField(value = 6, name = "completedDriverGroups", requiredness = Requiredness.NONE) final Set<com.facebook.presto.common.experimental.auto_gen.ThriftLifespan> completedDriverGroups,
            @com.facebook.swift.codec.ThriftField(value = 7, name = "failures", requiredness = Requiredness.NONE) final List<com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo> failures,
            @com.facebook.swift.codec.ThriftField(value = 8, name = "queuedPartitionedDrivers", requiredness = Requiredness.NONE) final int queuedPartitionedDrivers,
            @com.facebook.swift.codec.ThriftField(value = 9, name = "runningPartitionedDrivers", requiredness = Requiredness.NONE) final int runningPartitionedDrivers,
            @com.facebook.swift.codec.ThriftField(value = 10, name = "outputBufferUtilization", requiredness = Requiredness.NONE) final double outputBufferUtilization,
            @com.facebook.swift.codec.ThriftField(value = 11, name = "outputBufferOverutilized", requiredness = Requiredness.NONE) final boolean outputBufferOverutilized,
            @com.facebook.swift.codec.ThriftField(value = 12, name = "physicalWrittenDataSizeInBytes", requiredness = Requiredness.NONE) final long physicalWrittenDataSizeInBytes,
            @com.facebook.swift.codec.ThriftField(value = 13, name = "memoryReservationInBytes", requiredness = Requiredness.NONE) final long memoryReservationInBytes,
            @com.facebook.swift.codec.ThriftField(value = 14, name = "systemMemoryReservationInBytes", requiredness = Requiredness.NONE) final long systemMemoryReservationInBytes,
            @com.facebook.swift.codec.ThriftField(value = 15, name = "peakNodeTotalMemoryReservationInBytes", requiredness = Requiredness.NONE) final long peakNodeTotalMemoryReservationInBytes,
            @com.facebook.swift.codec.ThriftField(value = 16, name = "fullGcCount", requiredness = Requiredness.NONE) final long fullGcCount,
            @com.facebook.swift.codec.ThriftField(value = 17, name = "fullGcTimeInMillis", requiredness = Requiredness.NONE) final long fullGcTimeInMillis,
            @com.facebook.swift.codec.ThriftField(value = 18, name = "totalCpuTimeInNanos", requiredness = Requiredness.NONE) final long totalCpuTimeInNanos,
            @com.facebook.swift.codec.ThriftField(value = 19, name = "taskAgeInMillis", requiredness = Requiredness.NONE) final long taskAgeInMillis,
            @com.facebook.swift.codec.ThriftField(value = 20, name = "queuedPartitionedSplitsWeight", requiredness = Requiredness.NONE) final long queuedPartitionedSplitsWeight,
            @com.facebook.swift.codec.ThriftField(value = 21, name = "runningPartitionedSplitsWeight", requiredness = Requiredness.NONE) final long runningPartitionedSplitsWeight
    )
    {
        this.taskInstanceIdLeastSignificantBits = taskInstanceIdLeastSignificantBits;
        this.taskInstanceIdMostSignificantBits = taskInstanceIdMostSignificantBits;
        this.version = version;
        this.state = state;
        this.self = self;
        this.completedDriverGroups = completedDriverGroups;
        this.failures = failures;
        this.queuedPartitionedDrivers = queuedPartitionedDrivers;
        this.runningPartitionedDrivers = runningPartitionedDrivers;
        this.outputBufferUtilization = outputBufferUtilization;
        this.outputBufferOverutilized = outputBufferOverutilized;
        this.physicalWrittenDataSizeInBytes = physicalWrittenDataSizeInBytes;
        this.memoryReservationInBytes = memoryReservationInBytes;
        this.systemMemoryReservationInBytes = systemMemoryReservationInBytes;
        this.peakNodeTotalMemoryReservationInBytes = peakNodeTotalMemoryReservationInBytes;
        this.fullGcCount = fullGcCount;
        this.fullGcTimeInMillis = fullGcTimeInMillis;
        this.totalCpuTimeInNanos = totalCpuTimeInNanos;
        this.taskAgeInMillis = taskAgeInMillis;
        this.queuedPartitionedSplitsWeight = queuedPartitionedSplitsWeight;
        this.runningPartitionedSplitsWeight = runningPartitionedSplitsWeight;
    }

    @ThriftConstructor
    protected ThriftTaskStatus()
    {
        this.taskInstanceIdLeastSignificantBits = 0L;
        this.taskInstanceIdMostSignificantBits = 0L;
        this.version = 0L;
        this.state = com.facebook.presto.common.experimental.auto_gen.ThriftTaskState.fromInteger(0);
        this.self = null;
        this.completedDriverGroups = null;
        this.failures = null;
        this.queuedPartitionedDrivers = 0;
        this.runningPartitionedDrivers = 0;
        this.outputBufferUtilization = 0.;
        this.outputBufferOverutilized = false;
        this.physicalWrittenDataSizeInBytes = 0L;
        this.memoryReservationInBytes = 0L;
        this.systemMemoryReservationInBytes = 0L;
        this.peakNodeTotalMemoryReservationInBytes = 0L;
        this.fullGcCount = 0L;
        this.fullGcTimeInMillis = 0L;
        this.totalCpuTimeInNanos = 0L;
        this.taskAgeInMillis = 0L;
        this.queuedPartitionedSplitsWeight = 0L;
        this.runningPartitionedSplitsWeight = 0L;
    }

    public static Builder builder()
    {
        return new Builder();
    }

    public static Builder builder(ThriftTaskStatus other)
    {
        return new Builder(other);
    }

    public static class Builder
    {
        private long taskInstanceIdLeastSignificantBits = 0L;
        private long taskInstanceIdMostSignificantBits = 0L;
        private long version = 0L;
        private com.facebook.presto.common.experimental.auto_gen.ThriftTaskState state = com.facebook.presto.common.experimental.auto_gen.ThriftTaskState.fromInteger(0);
        private String self = null;
        private Set<com.facebook.presto.common.experimental.auto_gen.ThriftLifespan> completedDriverGroups = null;
        private List<com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo> failures = null;
        private int queuedPartitionedDrivers = 0;
        private int runningPartitionedDrivers = 0;
        private double outputBufferUtilization = 0.;
        private boolean outputBufferOverutilized = false;
        private long physicalWrittenDataSizeInBytes = 0L;
        private long memoryReservationInBytes = 0L;
        private long systemMemoryReservationInBytes = 0L;
        private long peakNodeTotalMemoryReservationInBytes = 0L;
        private long fullGcCount = 0L;
        private long fullGcTimeInMillis = 0L;
        private long totalCpuTimeInNanos = 0L;
        private long taskAgeInMillis = 0L;
        private long queuedPartitionedSplitsWeight = 0L;
        private long runningPartitionedSplitsWeight = 0L;

        @com.facebook.swift.codec.ThriftField(value = 1, name = "taskInstanceIdLeastSignificantBits", requiredness = Requiredness.NONE)
        public Builder setTaskInstanceIdLeastSignificantBits(long taskInstanceIdLeastSignificantBits)
        {
            this.taskInstanceIdLeastSignificantBits = taskInstanceIdLeastSignificantBits;
            return this;
        }

        public long getTaskInstanceIdLeastSignificantBits() {return taskInstanceIdLeastSignificantBits;}

        @com.facebook.swift.codec.ThriftField(value = 2, name = "taskInstanceIdMostSignificantBits", requiredness = Requiredness.NONE)
        public Builder setTaskInstanceIdMostSignificantBits(long taskInstanceIdMostSignificantBits)
        {
            this.taskInstanceIdMostSignificantBits = taskInstanceIdMostSignificantBits;
            return this;
        }

        public long getTaskInstanceIdMostSignificantBits() {return taskInstanceIdMostSignificantBits;}

        @com.facebook.swift.codec.ThriftField(value = 3, name = "version", requiredness = Requiredness.NONE)
        public Builder setVersion(long version)
        {
            this.version = version;
            return this;
        }

        public long getVersion() {return version;}

        @com.facebook.swift.codec.ThriftField(value = 4, name = "state", requiredness = Requiredness.NONE)
        public Builder setState(com.facebook.presto.common.experimental.auto_gen.ThriftTaskState state)
        {
            this.state = state;
            return this;
        }

        public com.facebook.presto.common.experimental.auto_gen.ThriftTaskState getState() {return state;}

        @com.facebook.swift.codec.ThriftField(value = 5, name = "self", requiredness = Requiredness.NONE)
        public Builder setSelf(String self)
        {
            this.self = self;
            return this;
        }

        public String getSelf() {return self;}

        @com.facebook.swift.codec.ThriftField(value = 6, name = "completedDriverGroups", requiredness = Requiredness.NONE)
        public Builder setCompletedDriverGroups(Set<com.facebook.presto.common.experimental.auto_gen.ThriftLifespan> completedDriverGroups)
        {
            this.completedDriverGroups = completedDriverGroups;
            return this;
        }

        public Set<com.facebook.presto.common.experimental.auto_gen.ThriftLifespan> getCompletedDriverGroups() {return completedDriverGroups;}

        @com.facebook.swift.codec.ThriftField(value = 7, name = "failures", requiredness = Requiredness.NONE)
        public Builder setFailures(List<com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo> failures)
        {
            this.failures = failures;
            return this;
        }

        public List<com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo> getFailures() {return failures;}

        @com.facebook.swift.codec.ThriftField(value = 8, name = "queuedPartitionedDrivers", requiredness = Requiredness.NONE)
        public Builder setQueuedPartitionedDrivers(int queuedPartitionedDrivers)
        {
            this.queuedPartitionedDrivers = queuedPartitionedDrivers;
            return this;
        }

        public int getQueuedPartitionedDrivers() {return queuedPartitionedDrivers;}

        @com.facebook.swift.codec.ThriftField(value = 9, name = "runningPartitionedDrivers", requiredness = Requiredness.NONE)
        public Builder setRunningPartitionedDrivers(int runningPartitionedDrivers)
        {
            this.runningPartitionedDrivers = runningPartitionedDrivers;
            return this;
        }

        public int getRunningPartitionedDrivers() {return runningPartitionedDrivers;}

        @com.facebook.swift.codec.ThriftField(value = 10, name = "outputBufferUtilization", requiredness = Requiredness.NONE)
        public Builder setOutputBufferUtilization(double outputBufferUtilization)
        {
            this.outputBufferUtilization = outputBufferUtilization;
            return this;
        }

        public double getOutputBufferUtilization() {return outputBufferUtilization;}

        @com.facebook.swift.codec.ThriftField(value = 11, name = "outputBufferOverutilized", requiredness = Requiredness.NONE)
        public Builder setOutputBufferOverutilized(boolean outputBufferOverutilized)
        {
            this.outputBufferOverutilized = outputBufferOverutilized;
            return this;
        }

        public boolean isOutputBufferOverutilized() {return outputBufferOverutilized;}

        @com.facebook.swift.codec.ThriftField(value = 12, name = "physicalWrittenDataSizeInBytes", requiredness = Requiredness.NONE)
        public Builder setPhysicalWrittenDataSizeInBytes(long physicalWrittenDataSizeInBytes)
        {
            this.physicalWrittenDataSizeInBytes = physicalWrittenDataSizeInBytes;
            return this;
        }

        public long getPhysicalWrittenDataSizeInBytes() {return physicalWrittenDataSizeInBytes;}

        @com.facebook.swift.codec.ThriftField(value = 13, name = "memoryReservationInBytes", requiredness = Requiredness.NONE)
        public Builder setMemoryReservationInBytes(long memoryReservationInBytes)
        {
            this.memoryReservationInBytes = memoryReservationInBytes;
            return this;
        }

        public long getMemoryReservationInBytes() {return memoryReservationInBytes;}

        @com.facebook.swift.codec.ThriftField(value = 14, name = "systemMemoryReservationInBytes", requiredness = Requiredness.NONE)
        public Builder setSystemMemoryReservationInBytes(long systemMemoryReservationInBytes)
        {
            this.systemMemoryReservationInBytes = systemMemoryReservationInBytes;
            return this;
        }

        public long getSystemMemoryReservationInBytes() {return systemMemoryReservationInBytes;}

        @com.facebook.swift.codec.ThriftField(value = 15, name = "peakNodeTotalMemoryReservationInBytes", requiredness = Requiredness.NONE)
        public Builder setPeakNodeTotalMemoryReservationInBytes(long peakNodeTotalMemoryReservationInBytes)
        {
            this.peakNodeTotalMemoryReservationInBytes = peakNodeTotalMemoryReservationInBytes;
            return this;
        }

        public long getPeakNodeTotalMemoryReservationInBytes() {return peakNodeTotalMemoryReservationInBytes;}

        @com.facebook.swift.codec.ThriftField(value = 16, name = "fullGcCount", requiredness = Requiredness.NONE)
        public Builder setFullGcCount(long fullGcCount)
        {
            this.fullGcCount = fullGcCount;
            return this;
        }

        public long getFullGcCount() {return fullGcCount;}

        @com.facebook.swift.codec.ThriftField(value = 17, name = "fullGcTimeInMillis", requiredness = Requiredness.NONE)
        public Builder setFullGcTimeInMillis(long fullGcTimeInMillis)
        {
            this.fullGcTimeInMillis = fullGcTimeInMillis;
            return this;
        }

        public long getFullGcTimeInMillis() {return fullGcTimeInMillis;}

        @com.facebook.swift.codec.ThriftField(value = 18, name = "totalCpuTimeInNanos", requiredness = Requiredness.NONE)
        public Builder setTotalCpuTimeInNanos(long totalCpuTimeInNanos)
        {
            this.totalCpuTimeInNanos = totalCpuTimeInNanos;
            return this;
        }

        public long getTotalCpuTimeInNanos() {return totalCpuTimeInNanos;}

        @com.facebook.swift.codec.ThriftField(value = 19, name = "taskAgeInMillis", requiredness = Requiredness.NONE)
        public Builder setTaskAgeInMillis(long taskAgeInMillis)
        {
            this.taskAgeInMillis = taskAgeInMillis;
            return this;
        }

        public long getTaskAgeInMillis() {return taskAgeInMillis;}

        @com.facebook.swift.codec.ThriftField(value = 20, name = "queuedPartitionedSplitsWeight", requiredness = Requiredness.NONE)
        public Builder setQueuedPartitionedSplitsWeight(long queuedPartitionedSplitsWeight)
        {
            this.queuedPartitionedSplitsWeight = queuedPartitionedSplitsWeight;
            return this;
        }

        public long getQueuedPartitionedSplitsWeight() {return queuedPartitionedSplitsWeight;}

        @com.facebook.swift.codec.ThriftField(value = 21, name = "runningPartitionedSplitsWeight", requiredness = Requiredness.NONE)
        public Builder setRunningPartitionedSplitsWeight(long runningPartitionedSplitsWeight)
        {
            this.runningPartitionedSplitsWeight = runningPartitionedSplitsWeight;
            return this;
        }

        public long getRunningPartitionedSplitsWeight() {return runningPartitionedSplitsWeight;}

        public Builder() {}

        public Builder(ThriftTaskStatus other)
        {
            this.taskInstanceIdLeastSignificantBits = other.taskInstanceIdLeastSignificantBits;
            this.taskInstanceIdMostSignificantBits = other.taskInstanceIdMostSignificantBits;
            this.version = other.version;
            this.state = other.state;
            this.self = other.self;
            this.completedDriverGroups = other.completedDriverGroups;
            this.failures = other.failures;
            this.queuedPartitionedDrivers = other.queuedPartitionedDrivers;
            this.runningPartitionedDrivers = other.runningPartitionedDrivers;
            this.outputBufferUtilization = other.outputBufferUtilization;
            this.outputBufferOverutilized = other.outputBufferOverutilized;
            this.physicalWrittenDataSizeInBytes = other.physicalWrittenDataSizeInBytes;
            this.memoryReservationInBytes = other.memoryReservationInBytes;
            this.systemMemoryReservationInBytes = other.systemMemoryReservationInBytes;
            this.peakNodeTotalMemoryReservationInBytes = other.peakNodeTotalMemoryReservationInBytes;
            this.fullGcCount = other.fullGcCount;
            this.fullGcTimeInMillis = other.fullGcTimeInMillis;
            this.totalCpuTimeInNanos = other.totalCpuTimeInNanos;
            this.taskAgeInMillis = other.taskAgeInMillis;
            this.queuedPartitionedSplitsWeight = other.queuedPartitionedSplitsWeight;
            this.runningPartitionedSplitsWeight = other.runningPartitionedSplitsWeight;
        }

        @ThriftConstructor
        public ThriftTaskStatus build()
        {
            ThriftTaskStatus result = new ThriftTaskStatus(
                    this.taskInstanceIdLeastSignificantBits,
                    this.taskInstanceIdMostSignificantBits,
                    this.version,
                    this.state,
                    this.self,
                    this.completedDriverGroups,
                    this.failures,
                    this.queuedPartitionedDrivers,
                    this.runningPartitionedDrivers,
                    this.outputBufferUtilization,
                    this.outputBufferOverutilized,
                    this.physicalWrittenDataSizeInBytes,
                    this.memoryReservationInBytes,
                    this.systemMemoryReservationInBytes,
                    this.peakNodeTotalMemoryReservationInBytes,
                    this.fullGcCount,
                    this.fullGcTimeInMillis,
                    this.totalCpuTimeInNanos,
                    this.taskAgeInMillis,
                    this.queuedPartitionedSplitsWeight,
                    this.runningPartitionedSplitsWeight
            );
            return result;
        }
    }

    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftTaskStatus");
    private final long taskInstanceIdLeastSignificantBits;
    public static final int _TASKINSTANCEIDLEASTSIGNIFICANTBITS = 1;
    private static final TField TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS_FIELD_DESC = new TField("taskInstanceIdLeastSignificantBits", TType.I64, (short) 1);
    private final long taskInstanceIdMostSignificantBits;
    public static final int _TASKINSTANCEIDMOSTSIGNIFICANTBITS = 2;
    private static final TField TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS_FIELD_DESC = new TField("taskInstanceIdMostSignificantBits", TType.I64, (short) 2);
    private final long version;
    public static final int _VERSION = 3;
    private static final TField VERSION_FIELD_DESC = new TField("version", TType.I64, (short) 3);
    private final com.facebook.presto.common.experimental.auto_gen.ThriftTaskState state;
    public static final int _STATE = 4;
    private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short) 4);
    private final String self;
    public static final int _SELF = 5;
    private static final TField SELF_FIELD_DESC = new TField("self", TType.STRING, (short) 5);
    private final Set<com.facebook.presto.common.experimental.auto_gen.ThriftLifespan> completedDriverGroups;
    public static final int _COMPLETEDDRIVERGROUPS = 6;
    private static final TField COMPLETED_DRIVER_GROUPS_FIELD_DESC = new TField("completedDriverGroups", TType.SET, (short) 6);
    private final List<com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo> failures;
    public static final int _FAILURES = 7;
    private static final TField FAILURES_FIELD_DESC = new TField("failures", TType.LIST, (short) 7);
    private final int queuedPartitionedDrivers;
    public static final int _QUEUEDPARTITIONEDDRIVERS = 8;
    private static final TField QUEUED_PARTITIONED_DRIVERS_FIELD_DESC = new TField("queuedPartitionedDrivers", TType.I32, (short) 8);
    private final int runningPartitionedDrivers;
    public static final int _RUNNINGPARTITIONEDDRIVERS = 9;
    private static final TField RUNNING_PARTITIONED_DRIVERS_FIELD_DESC = new TField("runningPartitionedDrivers", TType.I32, (short) 9);
    private final double outputBufferUtilization;
    public static final int _OUTPUTBUFFERUTILIZATION = 10;
    private static final TField OUTPUT_BUFFER_UTILIZATION_FIELD_DESC = new TField("outputBufferUtilization", TType.DOUBLE, (short) 10);
    private final boolean outputBufferOverutilized;
    public static final int _OUTPUTBUFFEROVERUTILIZED = 11;
    private static final TField OUTPUT_BUFFER_OVERUTILIZED_FIELD_DESC = new TField("outputBufferOverutilized", TType.BOOL, (short) 11);
    private final long physicalWrittenDataSizeInBytes;
    public static final int _PHYSICALWRITTENDATASIZEINBYTES = 12;
    private static final TField PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES_FIELD_DESC = new TField("physicalWrittenDataSizeInBytes", TType.I64, (short) 12);
    private final long memoryReservationInBytes;
    public static final int _MEMORYRESERVATIONINBYTES = 13;
    private static final TField MEMORY_RESERVATION_IN_BYTES_FIELD_DESC = new TField("memoryReservationInBytes", TType.I64, (short) 13);
    private final long systemMemoryReservationInBytes;
    public static final int _SYSTEMMEMORYRESERVATIONINBYTES = 14;
    private static final TField SYSTEM_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC = new TField("systemMemoryReservationInBytes", TType.I64, (short) 14);
    private final long peakNodeTotalMemoryReservationInBytes;
    public static final int _PEAKNODETOTALMEMORYRESERVATIONINBYTES = 15;
    private static final TField PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC = new TField("peakNodeTotalMemoryReservationInBytes", TType.I64, (short) 15);
    private final long fullGcCount;
    public static final int _FULLGCCOUNT = 16;
    private static final TField FULL_GC_COUNT_FIELD_DESC = new TField("fullGcCount", TType.I64, (short) 16);
    private final long fullGcTimeInMillis;
    public static final int _FULLGCTIMEINMILLIS = 17;
    private static final TField FULL_GC_TIME_IN_MILLIS_FIELD_DESC = new TField("fullGcTimeInMillis", TType.I64, (short) 17);
    private final long totalCpuTimeInNanos;
    public static final int _TOTALCPUTIMEINNANOS = 18;
    private static final TField TOTAL_CPU_TIME_IN_NANOS_FIELD_DESC = new TField("totalCpuTimeInNanos", TType.I64, (short) 18);
    private final long taskAgeInMillis;
    public static final int _TASKAGEINMILLIS = 19;
    private static final TField TASK_AGE_IN_MILLIS_FIELD_DESC = new TField("taskAgeInMillis", TType.I64, (short) 19);
    private final long queuedPartitionedSplitsWeight;
    public static final int _QUEUEDPARTITIONEDSPLITSWEIGHT = 20;
    private static final TField QUEUED_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC = new TField("queuedPartitionedSplitsWeight", TType.I64, (short) 20);
    private final long runningPartitionedSplitsWeight;
    public static final int _RUNNINGPARTITIONEDSPLITSWEIGHT = 21;
    private static final TField RUNNING_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC = new TField("runningPartitionedSplitsWeight", TType.I64, (short) 21);

    static {
        NAMES_TO_IDS.put("taskInstanceIdLeastSignificantBits", 1);
        THRIFT_NAMES_TO_IDS.put("taskInstanceIdLeastSignificantBits", 1);
        FIELD_METADATA.put(1, TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS_FIELD_DESC);
        NAMES_TO_IDS.put("taskInstanceIdMostSignificantBits", 2);
        THRIFT_NAMES_TO_IDS.put("taskInstanceIdMostSignificantBits", 2);
        FIELD_METADATA.put(2, TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS_FIELD_DESC);
        NAMES_TO_IDS.put("version", 3);
        THRIFT_NAMES_TO_IDS.put("version", 3);
        FIELD_METADATA.put(3, VERSION_FIELD_DESC);
        NAMES_TO_IDS.put("state", 4);
        THRIFT_NAMES_TO_IDS.put("state", 4);
        FIELD_METADATA.put(4, STATE_FIELD_DESC);
        NAMES_TO_IDS.put("self", 5);
        THRIFT_NAMES_TO_IDS.put("self", 5);
        FIELD_METADATA.put(5, SELF_FIELD_DESC);
        NAMES_TO_IDS.put("completedDriverGroups", 6);
        THRIFT_NAMES_TO_IDS.put("completedDriverGroups", 6);
        FIELD_METADATA.put(6, COMPLETED_DRIVER_GROUPS_FIELD_DESC);
        NAMES_TO_IDS.put("failures", 7);
        THRIFT_NAMES_TO_IDS.put("failures", 7);
        FIELD_METADATA.put(7, FAILURES_FIELD_DESC);
        NAMES_TO_IDS.put("queuedPartitionedDrivers", 8);
        THRIFT_NAMES_TO_IDS.put("queuedPartitionedDrivers", 8);
        FIELD_METADATA.put(8, QUEUED_PARTITIONED_DRIVERS_FIELD_DESC);
        NAMES_TO_IDS.put("runningPartitionedDrivers", 9);
        THRIFT_NAMES_TO_IDS.put("runningPartitionedDrivers", 9);
        FIELD_METADATA.put(9, RUNNING_PARTITIONED_DRIVERS_FIELD_DESC);
        NAMES_TO_IDS.put("outputBufferUtilization", 10);
        THRIFT_NAMES_TO_IDS.put("outputBufferUtilization", 10);
        FIELD_METADATA.put(10, OUTPUT_BUFFER_UTILIZATION_FIELD_DESC);
        NAMES_TO_IDS.put("outputBufferOverutilized", 11);
        THRIFT_NAMES_TO_IDS.put("outputBufferOverutilized", 11);
        FIELD_METADATA.put(11, OUTPUT_BUFFER_OVERUTILIZED_FIELD_DESC);
        NAMES_TO_IDS.put("physicalWrittenDataSizeInBytes", 12);
        THRIFT_NAMES_TO_IDS.put("physicalWrittenDataSizeInBytes", 12);
        FIELD_METADATA.put(12, PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES_FIELD_DESC);
        NAMES_TO_IDS.put("memoryReservationInBytes", 13);
        THRIFT_NAMES_TO_IDS.put("memoryReservationInBytes", 13);
        FIELD_METADATA.put(13, MEMORY_RESERVATION_IN_BYTES_FIELD_DESC);
        NAMES_TO_IDS.put("systemMemoryReservationInBytes", 14);
        THRIFT_NAMES_TO_IDS.put("systemMemoryReservationInBytes", 14);
        FIELD_METADATA.put(14, SYSTEM_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC);
        NAMES_TO_IDS.put("peakNodeTotalMemoryReservationInBytes", 15);
        THRIFT_NAMES_TO_IDS.put("peakNodeTotalMemoryReservationInBytes", 15);
        FIELD_METADATA.put(15, PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC);
        NAMES_TO_IDS.put("fullGcCount", 16);
        THRIFT_NAMES_TO_IDS.put("fullGcCount", 16);
        FIELD_METADATA.put(16, FULL_GC_COUNT_FIELD_DESC);
        NAMES_TO_IDS.put("fullGcTimeInMillis", 17);
        THRIFT_NAMES_TO_IDS.put("fullGcTimeInMillis", 17);
        FIELD_METADATA.put(17, FULL_GC_TIME_IN_MILLIS_FIELD_DESC);
        NAMES_TO_IDS.put("totalCpuTimeInNanos", 18);
        THRIFT_NAMES_TO_IDS.put("totalCpuTimeInNanos", 18);
        FIELD_METADATA.put(18, TOTAL_CPU_TIME_IN_NANOS_FIELD_DESC);
        NAMES_TO_IDS.put("taskAgeInMillis", 19);
        THRIFT_NAMES_TO_IDS.put("taskAgeInMillis", 19);
        FIELD_METADATA.put(19, TASK_AGE_IN_MILLIS_FIELD_DESC);
        NAMES_TO_IDS.put("queuedPartitionedSplitsWeight", 20);
        THRIFT_NAMES_TO_IDS.put("queuedPartitionedSplitsWeight", 20);
        FIELD_METADATA.put(20, QUEUED_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC);
        NAMES_TO_IDS.put("runningPartitionedSplitsWeight", 21);
        THRIFT_NAMES_TO_IDS.put("runningPartitionedSplitsWeight", 21);
        FIELD_METADATA.put(21, RUNNING_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC);
    }

    @com.facebook.swift.codec.ThriftField(value = 1, name = "taskInstanceIdLeastSignificantBits", requiredness = Requiredness.NONE)
    public long getTaskInstanceIdLeastSignificantBits() {return taskInstanceIdLeastSignificantBits;}

    @com.facebook.swift.codec.ThriftField(value = 2, name = "taskInstanceIdMostSignificantBits", requiredness = Requiredness.NONE)
    public long getTaskInstanceIdMostSignificantBits() {return taskInstanceIdMostSignificantBits;}

    @com.facebook.swift.codec.ThriftField(value = 3, name = "version", requiredness = Requiredness.NONE)
    public long getVersion() {return version;}

    @Nullable
    @com.facebook.swift.codec.ThriftField(value = 4, name = "state", requiredness = Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftTaskState getState() {return state;}

    @Nullable
    @com.facebook.swift.codec.ThriftField(value = 5, name = "self", requiredness = Requiredness.NONE)
    public String getSelf() {return self;}

    @Nullable
    @com.facebook.swift.codec.ThriftField(value = 6, name = "completedDriverGroups", requiredness = Requiredness.NONE)
    public Set<com.facebook.presto.common.experimental.auto_gen.ThriftLifespan> getCompletedDriverGroups() {return completedDriverGroups;}

    @Nullable
    @com.facebook.swift.codec.ThriftField(value = 7, name = "failures", requiredness = Requiredness.NONE)
    public List<com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo> getFailures() {return failures;}

    @com.facebook.swift.codec.ThriftField(value = 8, name = "queuedPartitionedDrivers", requiredness = Requiredness.NONE)
    public int getQueuedPartitionedDrivers() {return queuedPartitionedDrivers;}

    @com.facebook.swift.codec.ThriftField(value = 9, name = "runningPartitionedDrivers", requiredness = Requiredness.NONE)
    public int getRunningPartitionedDrivers() {return runningPartitionedDrivers;}

    @com.facebook.swift.codec.ThriftField(value = 10, name = "outputBufferUtilization", requiredness = Requiredness.NONE)
    public double getOutputBufferUtilization() {return outputBufferUtilization;}

    @com.facebook.swift.codec.ThriftField(value = 11, name = "outputBufferOverutilized", requiredness = Requiredness.NONE)
    public boolean isOutputBufferOverutilized() {return outputBufferOverutilized;}

    @com.facebook.swift.codec.ThriftField(value = 12, name = "physicalWrittenDataSizeInBytes", requiredness = Requiredness.NONE)
    public long getPhysicalWrittenDataSizeInBytes() {return physicalWrittenDataSizeInBytes;}

    @com.facebook.swift.codec.ThriftField(value = 13, name = "memoryReservationInBytes", requiredness = Requiredness.NONE)
    public long getMemoryReservationInBytes() {return memoryReservationInBytes;}

    @com.facebook.swift.codec.ThriftField(value = 14, name = "systemMemoryReservationInBytes", requiredness = Requiredness.NONE)
    public long getSystemMemoryReservationInBytes() {return systemMemoryReservationInBytes;}

    @com.facebook.swift.codec.ThriftField(value = 15, name = "peakNodeTotalMemoryReservationInBytes", requiredness = Requiredness.NONE)
    public long getPeakNodeTotalMemoryReservationInBytes() {return peakNodeTotalMemoryReservationInBytes;}

    @com.facebook.swift.codec.ThriftField(value = 16, name = "fullGcCount", requiredness = Requiredness.NONE)
    public long getFullGcCount() {return fullGcCount;}

    @com.facebook.swift.codec.ThriftField(value = 17, name = "fullGcTimeInMillis", requiredness = Requiredness.NONE)
    public long getFullGcTimeInMillis() {return fullGcTimeInMillis;}

    @com.facebook.swift.codec.ThriftField(value = 18, name = "totalCpuTimeInNanos", requiredness = Requiredness.NONE)
    public long getTotalCpuTimeInNanos() {return totalCpuTimeInNanos;}

    @com.facebook.swift.codec.ThriftField(value = 19, name = "taskAgeInMillis", requiredness = Requiredness.NONE)
    public long getTaskAgeInMillis() {return taskAgeInMillis;}

    @com.facebook.swift.codec.ThriftField(value = 20, name = "queuedPartitionedSplitsWeight", requiredness = Requiredness.NONE)
    public long getQueuedPartitionedSplitsWeight() {return queuedPartitionedSplitsWeight;}

    @com.facebook.swift.codec.ThriftField(value = 21, name = "runningPartitionedSplitsWeight", requiredness = Requiredness.NONE)
    public long getRunningPartitionedSplitsWeight() {return runningPartitionedSplitsWeight;}

    @java.lang.Override
    public String toString()
    {
        ToStringHelper helper = toStringHelper(this);
        helper.add("taskInstanceIdLeastSignificantBits", taskInstanceIdLeastSignificantBits);
        helper.add("taskInstanceIdMostSignificantBits", taskInstanceIdMostSignificantBits);
        helper.add("version", version);
        helper.add("state", state);
        helper.add("self", self);
        helper.add("completedDriverGroups", completedDriverGroups);
        helper.add("failures", failures);
        helper.add("queuedPartitionedDrivers", queuedPartitionedDrivers);
        helper.add("runningPartitionedDrivers", runningPartitionedDrivers);
        helper.add("outputBufferUtilization", outputBufferUtilization);
        helper.add("outputBufferOverutilized", outputBufferOverutilized);
        helper.add("physicalWrittenDataSizeInBytes", physicalWrittenDataSizeInBytes);
        helper.add("memoryReservationInBytes", memoryReservationInBytes);
        helper.add("systemMemoryReservationInBytes", systemMemoryReservationInBytes);
        helper.add("peakNodeTotalMemoryReservationInBytes", peakNodeTotalMemoryReservationInBytes);
        helper.add("fullGcCount", fullGcCount);
        helper.add("fullGcTimeInMillis", fullGcTimeInMillis);
        helper.add("totalCpuTimeInNanos", totalCpuTimeInNanos);
        helper.add("taskAgeInMillis", taskAgeInMillis);
        helper.add("queuedPartitionedSplitsWeight", queuedPartitionedSplitsWeight);
        helper.add("runningPartitionedSplitsWeight", runningPartitionedSplitsWeight);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o)
    {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ThriftTaskStatus other = (ThriftTaskStatus) o;

        return
                Objects.equals(taskInstanceIdLeastSignificantBits, other.taskInstanceIdLeastSignificantBits) &&
                        Objects.equals(taskInstanceIdMostSignificantBits, other.taskInstanceIdMostSignificantBits) &&
                        Objects.equals(version, other.version) &&
                        Objects.equals(state, other.state) &&
                        Objects.equals(self, other.self) &&
                        Objects.equals(completedDriverGroups, other.completedDriverGroups) &&
                        Objects.equals(failures, other.failures) &&
                        Objects.equals(queuedPartitionedDrivers, other.queuedPartitionedDrivers) &&
                        Objects.equals(runningPartitionedDrivers, other.runningPartitionedDrivers) &&
                        Objects.equals(outputBufferUtilization, other.outputBufferUtilization) &&
                        Objects.equals(outputBufferOverutilized, other.outputBufferOverutilized) &&
                        Objects.equals(physicalWrittenDataSizeInBytes, other.physicalWrittenDataSizeInBytes) &&
                        Objects.equals(memoryReservationInBytes, other.memoryReservationInBytes) &&
                        Objects.equals(systemMemoryReservationInBytes, other.systemMemoryReservationInBytes) &&
                        Objects.equals(peakNodeTotalMemoryReservationInBytes, other.peakNodeTotalMemoryReservationInBytes) &&
                        Objects.equals(fullGcCount, other.fullGcCount) &&
                        Objects.equals(fullGcTimeInMillis, other.fullGcTimeInMillis) &&
                        Objects.equals(totalCpuTimeInNanos, other.totalCpuTimeInNanos) &&
                        Objects.equals(taskAgeInMillis, other.taskAgeInMillis) &&
                        Objects.equals(queuedPartitionedSplitsWeight, other.queuedPartitionedSplitsWeight) &&
                        Objects.equals(runningPartitionedSplitsWeight, other.runningPartitionedSplitsWeight) &&
                        true;
    }

    @java.lang.Override
    public int hashCode()
    {
        return Arrays.deepHashCode(new java.lang.Object[] {
                taskInstanceIdLeastSignificantBits,
                taskInstanceIdMostSignificantBits,
                version,
                state,
                self,
                completedDriverGroups,
                failures,
                queuedPartitionedDrivers,
                runningPartitionedDrivers,
                outputBufferUtilization,
                outputBufferOverutilized,
                physicalWrittenDataSizeInBytes,
                memoryReservationInBytes,
                systemMemoryReservationInBytes,
                peakNodeTotalMemoryReservationInBytes,
                fullGcCount,
                fullGcTimeInMillis,
                totalCpuTimeInNanos,
                taskAgeInMillis,
                queuedPartitionedSplitsWeight,
                runningPartitionedSplitsWeight
        });
    }

    public static com.facebook.thrift.payload.Reader<ThriftTaskStatus> asReader()
    {
        return ThriftTaskStatus::read0;
    }

    public static ThriftTaskStatus read0(TProtocol oprot)
            throws TException
    {
        TField __field;
//        oprot.readStructBegin(ThriftTaskStatus.NAMES_TO_IDS, ThriftTaskStatus.THRIFT_NAMES_TO_IDS, ThriftTaskStatus.FIELD_METADATA);
        oprot.readStructBegin();
        ThriftTaskStatus.Builder builder = new ThriftTaskStatus.Builder();
        while (true) {
            __field = oprot.readFieldBegin();
            if (__field.type == TType.STOP) {
                break;
            }
            switch (__field.id) {
                case _TASKINSTANCEIDLEASTSIGNIFICANTBITS:
                    if (__field.type == TType.I64) {
                        long taskInstanceIdLeastSignificantBits = oprot.readI64();
                        builder.setTaskInstanceIdLeastSignificantBits(taskInstanceIdLeastSignificantBits);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _TASKINSTANCEIDMOSTSIGNIFICANTBITS:
                    if (__field.type == TType.I64) {
                        long taskInstanceIdMostSignificantBits = oprot.readI64();
                        builder.setTaskInstanceIdMostSignificantBits(taskInstanceIdMostSignificantBits);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _VERSION:
                    if (__field.type == TType.I64) {
                        long version = oprot.readI64();
                        builder.setVersion(version);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _STATE:
                    if (__field.type == TType.I32) {
                        com.facebook.presto.common.experimental.auto_gen.ThriftTaskState state = com.facebook.presto.common.experimental.auto_gen.ThriftTaskState.fromInteger(oprot.readI32());
                        builder.setState(state);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _SELF:
                    if (__field.type == TType.STRING) {
                        String self = oprot.readString();
                        builder.setSelf(self);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _COMPLETEDDRIVERGROUPS:
                    if (__field.type == TType.SET) {
                        Set<com.facebook.presto.common.experimental.auto_gen.ThriftLifespan> completedDriverGroups;
                        {
                            TSet _set = oprot.readSetBegin();
                            completedDriverGroups = new HashSet<com.facebook.presto.common.experimental.auto_gen.ThriftLifespan>(Math.max(0, _set.size));
                            for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {

                                com.facebook.presto.common.experimental.auto_gen.ThriftLifespan _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftLifespan.read0(oprot);
                                completedDriverGroups.add(_value1);
                            }
                            oprot.readSetEnd();
                        }
                        builder.setCompletedDriverGroups(completedDriverGroups);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _FAILURES:
                    if (__field.type == TType.LIST) {
                        List<com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo> failures;
                        {
                            TList _list = oprot.readListBegin();
                            failures = new ArrayList<com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo>(Math.max(0, _list.size));
                            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {

                                com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo.read0(oprot);
                                failures.add(_value1);
                            }
                            oprot.readListEnd();
                        }
                        builder.setFailures(failures);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _QUEUEDPARTITIONEDDRIVERS:
                    if (__field.type == TType.I32) {
                        int queuedPartitionedDrivers = oprot.readI32();
                        builder.setQueuedPartitionedDrivers(queuedPartitionedDrivers);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _RUNNINGPARTITIONEDDRIVERS:
                    if (__field.type == TType.I32) {
                        int runningPartitionedDrivers = oprot.readI32();
                        builder.setRunningPartitionedDrivers(runningPartitionedDrivers);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _OUTPUTBUFFERUTILIZATION:
                    if (__field.type == TType.DOUBLE) {
                        double outputBufferUtilization = oprot.readDouble();
                        builder.setOutputBufferUtilization(outputBufferUtilization);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _OUTPUTBUFFEROVERUTILIZED:
                    if (__field.type == TType.BOOL) {
                        boolean outputBufferOverutilized = oprot.readBool();
                        builder.setOutputBufferOverutilized(outputBufferOverutilized);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _PHYSICALWRITTENDATASIZEINBYTES:
                    if (__field.type == TType.I64) {
                        long physicalWrittenDataSizeInBytes = oprot.readI64();
                        builder.setPhysicalWrittenDataSizeInBytes(physicalWrittenDataSizeInBytes);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _MEMORYRESERVATIONINBYTES:
                    if (__field.type == TType.I64) {
                        long memoryReservationInBytes = oprot.readI64();
                        builder.setMemoryReservationInBytes(memoryReservationInBytes);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _SYSTEMMEMORYRESERVATIONINBYTES:
                    if (__field.type == TType.I64) {
                        long systemMemoryReservationInBytes = oprot.readI64();
                        builder.setSystemMemoryReservationInBytes(systemMemoryReservationInBytes);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _PEAKNODETOTALMEMORYRESERVATIONINBYTES:
                    if (__field.type == TType.I64) {
                        long peakNodeTotalMemoryReservationInBytes = oprot.readI64();
                        builder.setPeakNodeTotalMemoryReservationInBytes(peakNodeTotalMemoryReservationInBytes);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _FULLGCCOUNT:
                    if (__field.type == TType.I64) {
                        long fullGcCount = oprot.readI64();
                        builder.setFullGcCount(fullGcCount);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _FULLGCTIMEINMILLIS:
                    if (__field.type == TType.I64) {
                        long fullGcTimeInMillis = oprot.readI64();
                        builder.setFullGcTimeInMillis(fullGcTimeInMillis);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _TOTALCPUTIMEINNANOS:
                    if (__field.type == TType.I64) {
                        long totalCpuTimeInNanos = oprot.readI64();
                        builder.setTotalCpuTimeInNanos(totalCpuTimeInNanos);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _TASKAGEINMILLIS:
                    if (__field.type == TType.I64) {
                        long taskAgeInMillis = oprot.readI64();
                        builder.setTaskAgeInMillis(taskAgeInMillis);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _QUEUEDPARTITIONEDSPLITSWEIGHT:
                    if (__field.type == TType.I64) {
                        long queuedPartitionedSplitsWeight = oprot.readI64();
                        builder.setQueuedPartitionedSplitsWeight(queuedPartitionedSplitsWeight);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                case _RUNNINGPARTITIONEDSPLITSWEIGHT:
                    if (__field.type == TType.I64) {
                        long runningPartitionedSplitsWeight = oprot.readI64();
                        builder.setRunningPartitionedSplitsWeight(runningPartitionedSplitsWeight);
                    }
                    else {
                        TProtocolUtil.skip(oprot, __field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(oprot, __field.type);
                    break;
            }
            oprot.readFieldEnd();
        }
        oprot.readStructEnd();
        return builder.build();
    }

    public void write0(TProtocol oprot)
            throws TException
    {
        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS_FIELD_DESC);
        oprot.writeI64(this.taskInstanceIdLeastSignificantBits);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS_FIELD_DESC);
        oprot.writeI64(this.taskInstanceIdMostSignificantBits);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(this.version);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(this.state == null ? 0 : com.facebook.thrift.util.EnumUtil.getValue(this.state));
        oprot.writeFieldEnd();
        if (self != null) {
            oprot.writeFieldBegin(SELF_FIELD_DESC);
            oprot.writeString(this.self);
            oprot.writeFieldEnd();
        }
        if (completedDriverGroups != null) {
            oprot.writeFieldBegin(COMPLETED_DRIVER_GROUPS_FIELD_DESC);
            Set<com.facebook.presto.common.experimental.auto_gen.ThriftLifespan> _iter0 = completedDriverGroups;
            oprot.writeSetBegin(new TSet(TType.STRUCT, _iter0.size()));
            for (com.facebook.presto.common.experimental.auto_gen.ThriftLifespan _iter1 : _iter0) {
                _iter1.write0(oprot);
            }
            oprot.writeSetEnd();
            oprot.writeFieldEnd();
        }
        if (failures != null) {
            oprot.writeFieldBegin(FAILURES_FIELD_DESC);
            List<com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo> _iter0 = failures;
            oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (com.facebook.presto.common.experimental.auto_gen.ThriftExecutionFailureInfo _iter1 : _iter0) {
                _iter1.write0(oprot);
            }
            oprot.writeListEnd();
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(QUEUED_PARTITIONED_DRIVERS_FIELD_DESC);
        oprot.writeI32(this.queuedPartitionedDrivers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RUNNING_PARTITIONED_DRIVERS_FIELD_DESC);
        oprot.writeI32(this.runningPartitionedDrivers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OUTPUT_BUFFER_UTILIZATION_FIELD_DESC);
        oprot.writeDouble(this.outputBufferUtilization);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OUTPUT_BUFFER_OVERUTILIZED_FIELD_DESC);
        oprot.writeBool(this.outputBufferOverutilized);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES_FIELD_DESC);
        oprot.writeI64(this.physicalWrittenDataSizeInBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MEMORY_RESERVATION_IN_BYTES_FIELD_DESC);
        oprot.writeI64(this.memoryReservationInBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SYSTEM_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC);
        oprot.writeI64(this.systemMemoryReservationInBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC);
        oprot.writeI64(this.peakNodeTotalMemoryReservationInBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FULL_GC_COUNT_FIELD_DESC);
        oprot.writeI64(this.fullGcCount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FULL_GC_TIME_IN_MILLIS_FIELD_DESC);
        oprot.writeI64(this.fullGcTimeInMillis);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOTAL_CPU_TIME_IN_NANOS_FIELD_DESC);
        oprot.writeI64(this.totalCpuTimeInNanos);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TASK_AGE_IN_MILLIS_FIELD_DESC);
        oprot.writeI64(this.taskAgeInMillis);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUEUED_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC);
        oprot.writeI64(this.queuedPartitionedSplitsWeight);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RUNNING_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC);
        oprot.writeI64(this.runningPartitionedSplitsWeight);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    private static class _ThriftTaskStatusLazy
    {
        private static final ThriftTaskStatus _DEFAULT = new ThriftTaskStatus.Builder().build();
    }

    public static ThriftTaskStatus defaultInstance()
    {
        return _ThriftTaskStatusLazy._DEFAULT;
    }
}
