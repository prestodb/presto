/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftTupleDomain", builder=ThriftTupleDomain.Builder.class)
public final class ThriftTupleDomain implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftTupleDomain(
        @com.facebook.swift.codec.ThriftField(value=1, name="keyClassName", requiredness=Requiredness.NONE) final String keyClassName,
        @com.facebook.swift.codec.ThriftField(value=2, name="domains", requiredness=Requiredness.OPTIONAL) final Map<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain> domains
    ) {
        this.keyClassName = keyClassName;
        this.domains = domains;
    }
    
    @ThriftConstructor
    protected ThriftTupleDomain() {
      this.keyClassName = null;
      this.domains = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftTupleDomain other) {
      return new Builder(other);
    }

    public static class Builder {
        private String keyClassName = null;
        private Map<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain> domains = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="keyClassName", requiredness=Requiredness.NONE)    public Builder setKeyClassName(String keyClassName) {
            this.keyClassName = keyClassName;
            return this;
        }
    
        public String getKeyClassName() { return keyClassName; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="domains", requiredness=Requiredness.OPTIONAL)    public Builder setDomains(Map<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain> domains) {
            this.domains = domains;
            return this;
        }
    
        public Map<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain> getDomains() { return domains; }
    
        public Builder() { }
        public Builder(ThriftTupleDomain other) {
            this.keyClassName = other.keyClassName;
            this.domains = other.domains;
        }
    
        @ThriftConstructor
        public ThriftTupleDomain build() {
            ThriftTupleDomain result = new ThriftTupleDomain (
                this.keyClassName,
                this.domains
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftTupleDomain");
    private final String keyClassName;
    public static final int _KEYCLASSNAME = 1;
    private static final TField KEY_CLASS_NAME_FIELD_DESC = new TField("keyClassName", TType.STRING, (short)1);
        private final Map<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain> domains;
    public static final int _DOMAINS = 2;
    private static final TField DOMAINS_FIELD_DESC = new TField("domains", TType.MAP, (short)2);
    static {
      NAMES_TO_IDS.put("keyClassName", 1);
      THRIFT_NAMES_TO_IDS.put("keyClassName", 1);
      FIELD_METADATA.put(1, KEY_CLASS_NAME_FIELD_DESC);
      NAMES_TO_IDS.put("domains", 2);
      THRIFT_NAMES_TO_IDS.put("domains", 2);
      FIELD_METADATA.put(2, DOMAINS_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="keyClassName", requiredness=Requiredness.NONE)
    public String getKeyClassName() { return keyClassName; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="domains", requiredness=Requiredness.OPTIONAL)
    public Map<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain> getDomains() { return domains; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("keyClassName", keyClassName);
        helper.add("domains", domains);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftTupleDomain other = (ThriftTupleDomain)o;
    
        return
            Objects.equals(keyClassName, other.keyClassName) &&
            Objects.equals(domains, other.domains) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            keyClassName,
            domains
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftTupleDomain> asReader() {
      return ThriftTupleDomain::read0;
    }
    
    public static ThriftTupleDomain read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftTupleDomain.NAMES_TO_IDS, ThriftTupleDomain.THRIFT_NAMES_TO_IDS, ThriftTupleDomain.FIELD_METADATA);
      ThriftTupleDomain.Builder builder = new ThriftTupleDomain.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _KEYCLASSNAME:
          if (__field.type == TType.STRING) {
            String keyClassName = oprot.readString();
            builder.setKeyClassName(keyClassName);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _DOMAINS:
          if (__field.type == TType.MAP) {
            Map<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain> domains;
                {
                TMap _map = oprot.readMapBegin();
                domains = new HashMap<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    com.facebook.presto.common.experimental.auto_gen.BinaryWrapper _key1 = com.facebook.presto.common.experimental.auto_gen.BinaryWrapper.read0(oprot);
                    com.facebook.presto.common.experimental.auto_gen.ThriftDomain _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftDomain.read0(oprot);
                    domains.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setDomains(domains);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (keyClassName != null) {
        oprot.writeFieldBegin(KEY_CLASS_NAME_FIELD_DESC);
        oprot.writeString(this.keyClassName);
        oprot.writeFieldEnd();
      }
      if (domains != null) {
        oprot.writeFieldBegin(DOMAINS_FIELD_DESC);
        Map<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain>  _iter0 = domains;
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.STRUCT, _iter0.size()));
            for (Map.Entry<com.facebook.presto.common.experimental.auto_gen.BinaryWrapper, com.facebook.presto.common.experimental.auto_gen.ThriftDomain> _iter1 : _iter0.entrySet()) {
              _iter1.getKey().write0(oprot);
              _iter1.getValue().write0(oprot);
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftTupleDomainLazy {
        private static final ThriftTupleDomain _DEFAULT = new ThriftTupleDomain.Builder().build();
    }
    
    public static ThriftTupleDomain defaultInstance() {
        return  _ThriftTupleDomainLazy._DEFAULT;
    }
}
