/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftBaseHiveTableLayoutHandle", builder=ThriftBaseHiveTableLayoutHandle.Builder.class)
public final class ThriftBaseHiveTableLayoutHandle implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftBaseHiveTableLayoutHandle(
        @com.facebook.swift.codec.ThriftField(value=1, name="partitionColumns", requiredness=Requiredness.NONE) final List<com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle> partitionColumns,
        @com.facebook.swift.codec.ThriftField(value=2, name="domainPredicate", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain domainPredicate,
        @com.facebook.swift.codec.ThriftField(value=3, name="remainingPredicate", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftRowExpression remainingPredicate,
        @com.facebook.swift.codec.ThriftField(value=4, name="pushdownFilterEnabled", requiredness=Requiredness.NONE) final boolean pushdownFilterEnabled,
        @com.facebook.swift.codec.ThriftField(value=5, name="partitionColumnPredicate", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain partitionColumnPredicate,
        @com.facebook.swift.codec.ThriftField(value=6, name="partitions", requiredness=Requiredness.OPTIONAL) final List<com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition> partitions
    ) {
        this.partitionColumns = partitionColumns;
        this.domainPredicate = domainPredicate;
        this.remainingPredicate = remainingPredicate;
        this.pushdownFilterEnabled = pushdownFilterEnabled;
        this.partitionColumnPredicate = partitionColumnPredicate;
        this.partitions = partitions;
    }
    
    @ThriftConstructor
    protected ThriftBaseHiveTableLayoutHandle() {
      this.partitionColumns = null;
      this.domainPredicate = null;
      this.remainingPredicate = null;
      this.pushdownFilterEnabled = false;
      this.partitionColumnPredicate = null;
      this.partitions = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftBaseHiveTableLayoutHandle other) {
      return new Builder(other);
    }

    public static class Builder {
        private List<com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle> partitionColumns = null;
        private com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain domainPredicate = null;
        private com.facebook.presto.common.experimental.auto_gen.ThriftRowExpression remainingPredicate = null;
        private boolean pushdownFilterEnabled = false;
        private com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain partitionColumnPredicate = null;
        private List<com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition> partitions = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="partitionColumns", requiredness=Requiredness.NONE)    public Builder setPartitionColumns(List<com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle> partitionColumns) {
            this.partitionColumns = partitionColumns;
            return this;
        }
    
        public List<com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle> getPartitionColumns() { return partitionColumns; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="domainPredicate", requiredness=Requiredness.NONE)    public Builder setDomainPredicate(com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain domainPredicate) {
            this.domainPredicate = domainPredicate;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain getDomainPredicate() { return domainPredicate; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="remainingPredicate", requiredness=Requiredness.NONE)    public Builder setRemainingPredicate(com.facebook.presto.common.experimental.auto_gen.ThriftRowExpression remainingPredicate) {
            this.remainingPredicate = remainingPredicate;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftRowExpression getRemainingPredicate() { return remainingPredicate; }
    
            @com.facebook.swift.codec.ThriftField(value=4, name="pushdownFilterEnabled", requiredness=Requiredness.NONE)    public Builder setPushdownFilterEnabled(boolean pushdownFilterEnabled) {
            this.pushdownFilterEnabled = pushdownFilterEnabled;
            return this;
        }
    
        public boolean isPushdownFilterEnabled() { return pushdownFilterEnabled; }
    
            @com.facebook.swift.codec.ThriftField(value=5, name="partitionColumnPredicate", requiredness=Requiredness.NONE)    public Builder setPartitionColumnPredicate(com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain partitionColumnPredicate) {
            this.partitionColumnPredicate = partitionColumnPredicate;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain getPartitionColumnPredicate() { return partitionColumnPredicate; }
    
            @com.facebook.swift.codec.ThriftField(value=6, name="partitions", requiredness=Requiredness.OPTIONAL)    public Builder setPartitions(List<com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition> partitions) {
            this.partitions = partitions;
            return this;
        }
    
        public List<com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition> getPartitions() { return partitions; }
    
        public Builder() { }
        public Builder(ThriftBaseHiveTableLayoutHandle other) {
            this.partitionColumns = other.partitionColumns;
            this.domainPredicate = other.domainPredicate;
            this.remainingPredicate = other.remainingPredicate;
            this.pushdownFilterEnabled = other.pushdownFilterEnabled;
            this.partitionColumnPredicate = other.partitionColumnPredicate;
            this.partitions = other.partitions;
        }
    
        @ThriftConstructor
        public ThriftBaseHiveTableLayoutHandle build() {
            ThriftBaseHiveTableLayoutHandle result = new ThriftBaseHiveTableLayoutHandle (
                this.partitionColumns,
                this.domainPredicate,
                this.remainingPredicate,
                this.pushdownFilterEnabled,
                this.partitionColumnPredicate,
                this.partitions
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftBaseHiveTableLayoutHandle");
    private final List<com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle> partitionColumns;
    public static final int _PARTITIONCOLUMNS = 1;
    private static final TField PARTITION_COLUMNS_FIELD_DESC = new TField("partitionColumns", TType.LIST, (short)1);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain domainPredicate;
    public static final int _DOMAINPREDICATE = 2;
    private static final TField DOMAIN_PREDICATE_FIELD_DESC = new TField("domainPredicate", TType.STRUCT, (short)2);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftRowExpression remainingPredicate;
    public static final int _REMAININGPREDICATE = 3;
    private static final TField REMAINING_PREDICATE_FIELD_DESC = new TField("remainingPredicate", TType.STRUCT, (short)3);
        private final boolean pushdownFilterEnabled;
    public static final int _PUSHDOWNFILTERENABLED = 4;
    private static final TField PUSHDOWN_FILTER_ENABLED_FIELD_DESC = new TField("pushdownFilterEnabled", TType.BOOL, (short)4);
        private final com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain partitionColumnPredicate;
    public static final int _PARTITIONCOLUMNPREDICATE = 5;
    private static final TField PARTITION_COLUMN_PREDICATE_FIELD_DESC = new TField("partitionColumnPredicate", TType.STRUCT, (short)5);
        private final List<com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition> partitions;
    public static final int _PARTITIONS = 6;
    private static final TField PARTITIONS_FIELD_DESC = new TField("partitions", TType.LIST, (short)6);
    static {
      NAMES_TO_IDS.put("partitionColumns", 1);
      THRIFT_NAMES_TO_IDS.put("partitionColumns", 1);
      FIELD_METADATA.put(1, PARTITION_COLUMNS_FIELD_DESC);
      NAMES_TO_IDS.put("domainPredicate", 2);
      THRIFT_NAMES_TO_IDS.put("domainPredicate", 2);
      FIELD_METADATA.put(2, DOMAIN_PREDICATE_FIELD_DESC);
      NAMES_TO_IDS.put("remainingPredicate", 3);
      THRIFT_NAMES_TO_IDS.put("remainingPredicate", 3);
      FIELD_METADATA.put(3, REMAINING_PREDICATE_FIELD_DESC);
      NAMES_TO_IDS.put("pushdownFilterEnabled", 4);
      THRIFT_NAMES_TO_IDS.put("pushdownFilterEnabled", 4);
      FIELD_METADATA.put(4, PUSHDOWN_FILTER_ENABLED_FIELD_DESC);
      NAMES_TO_IDS.put("partitionColumnPredicate", 5);
      THRIFT_NAMES_TO_IDS.put("partitionColumnPredicate", 5);
      FIELD_METADATA.put(5, PARTITION_COLUMN_PREDICATE_FIELD_DESC);
      NAMES_TO_IDS.put("partitions", 6);
      THRIFT_NAMES_TO_IDS.put("partitions", 6);
      FIELD_METADATA.put(6, PARTITIONS_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="partitionColumns", requiredness=Requiredness.NONE)
    public List<com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle> getPartitionColumns() { return partitionColumns; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="domainPredicate", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain getDomainPredicate() { return domainPredicate; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=3, name="remainingPredicate", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftRowExpression getRemainingPredicate() { return remainingPredicate; }

    
    
    @com.facebook.swift.codec.ThriftField(value=4, name="pushdownFilterEnabled", requiredness=Requiredness.NONE)
    public boolean isPushdownFilterEnabled() { return pushdownFilterEnabled; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=5, name="partitionColumnPredicate", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain getPartitionColumnPredicate() { return partitionColumnPredicate; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=6, name="partitions", requiredness=Requiredness.OPTIONAL)
    public List<com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition> getPartitions() { return partitions; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("partitionColumns", partitionColumns);
        helper.add("domainPredicate", domainPredicate);
        helper.add("remainingPredicate", remainingPredicate);
        helper.add("pushdownFilterEnabled", pushdownFilterEnabled);
        helper.add("partitionColumnPredicate", partitionColumnPredicate);
        helper.add("partitions", partitions);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftBaseHiveTableLayoutHandle other = (ThriftBaseHiveTableLayoutHandle)o;
    
        return
            Objects.equals(partitionColumns, other.partitionColumns) &&
            Objects.equals(domainPredicate, other.domainPredicate) &&
            Objects.equals(remainingPredicate, other.remainingPredicate) &&
            Objects.equals(pushdownFilterEnabled, other.pushdownFilterEnabled) &&
            Objects.equals(partitionColumnPredicate, other.partitionColumnPredicate) &&
            Objects.equals(partitions, other.partitions) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            partitionColumns,
            domainPredicate,
            remainingPredicate,
            pushdownFilterEnabled,
            partitionColumnPredicate,
            partitions
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftBaseHiveTableLayoutHandle> asReader() {
      return ThriftBaseHiveTableLayoutHandle::read0;
    }
    
    public static ThriftBaseHiveTableLayoutHandle read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftBaseHiveTableLayoutHandle.NAMES_TO_IDS, ThriftBaseHiveTableLayoutHandle.THRIFT_NAMES_TO_IDS, ThriftBaseHiveTableLayoutHandle.FIELD_METADATA);
      ThriftBaseHiveTableLayoutHandle.Builder builder = new ThriftBaseHiveTableLayoutHandle.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _PARTITIONCOLUMNS:
          if (__field.type == TType.LIST) {
            List<com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle> partitionColumns;
                {
                TList _list = oprot.readListBegin();
                partitionColumns = new ArrayList<com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle>(Math.max(0, _list.size));
                for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                    
                    com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle.read0(oprot);
                    partitionColumns.add(_value1);
                }
                oprot.readListEnd();
                }
            builder.setPartitionColumns(partitionColumns);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _DOMAINPREDICATE:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain domainPredicate = com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain.read0(oprot);
            builder.setDomainPredicate(domainPredicate);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _REMAININGPREDICATE:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftRowExpression remainingPredicate = com.facebook.presto.common.experimental.auto_gen.ThriftRowExpression.read0(oprot);
            builder.setRemainingPredicate(remainingPredicate);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _PUSHDOWNFILTERENABLED:
          if (__field.type == TType.BOOL) {
            boolean pushdownFilterEnabled = oprot.readBool();
            builder.setPushdownFilterEnabled(pushdownFilterEnabled);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _PARTITIONCOLUMNPREDICATE:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain partitionColumnPredicate = com.facebook.presto.common.experimental.auto_gen.ThriftTupleDomain.read0(oprot);
            builder.setPartitionColumnPredicate(partitionColumnPredicate);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _PARTITIONS:
          if (__field.type == TType.LIST) {
            List<com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition> partitions;
                {
                TList _list = oprot.readListBegin();
                partitions = new ArrayList<com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition>(Math.max(0, _list.size));
                for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                    
                    com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition.read0(oprot);
                    partitions.add(_value1);
                }
                oprot.readListEnd();
                }
            builder.setPartitions(partitions);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (partitionColumns != null) {
        oprot.writeFieldBegin(PARTITION_COLUMNS_FIELD_DESC);
        List<com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle> _iter0 = partitionColumns;
        oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (com.facebook.presto.common.experimental.auto_gen.ThriftBaseHiveColumnHandle _iter1 : _iter0) {
              _iter1.write0(oprot);
            }
            oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (domainPredicate != null) {
        oprot.writeFieldBegin(DOMAIN_PREDICATE_FIELD_DESC);
        this.domainPredicate.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (remainingPredicate != null) {
        oprot.writeFieldBegin(REMAINING_PREDICATE_FIELD_DESC);
        this.remainingPredicate.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PUSHDOWN_FILTER_ENABLED_FIELD_DESC);
      oprot.writeBool(this.pushdownFilterEnabled);
      oprot.writeFieldEnd();
      if (partitionColumnPredicate != null) {
        oprot.writeFieldBegin(PARTITION_COLUMN_PREDICATE_FIELD_DESC);
        this.partitionColumnPredicate.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (partitions != null) {
        oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
        List<com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition>  _iter0 = partitions;
        oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (com.facebook.presto.common.experimental.auto_gen.ThriftHivePartition _iter1 : _iter0) {
              _iter1.write0(oprot);
            }
            oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftBaseHiveTableLayoutHandleLazy {
        private static final ThriftBaseHiveTableLayoutHandle _DEFAULT = new ThriftBaseHiveTableLayoutHandle.Builder().build();
    }
    
    public static ThriftBaseHiveTableLayoutHandle defaultInstance() {
        return  _ThriftBaseHiveTableLayoutHandleLazy._DEFAULT;
    }
}
