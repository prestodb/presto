/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.facebook.presto.common.experimental.auto_gen;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.fbthrift.*;
import org.apache.fbthrift.transport.*;
import org.apache.fbthrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="ThriftSqlFunctionId", builder=ThriftSqlFunctionId.Builder.class)
public final class ThriftSqlFunctionId implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public ThriftSqlFunctionId(
        @com.facebook.swift.codec.ThriftField(value=1, name="functionName", requiredness=Requiredness.NONE) final com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName functionName,
        @com.facebook.swift.codec.ThriftField(value=2, name="argumentTypes", requiredness=Requiredness.NONE) final List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature> argumentTypes
    ) {
        this.functionName = functionName;
        this.argumentTypes = argumentTypes;
    }
    
    @ThriftConstructor
    protected ThriftSqlFunctionId() {
      this.functionName = null;
      this.argumentTypes = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(ThriftSqlFunctionId other) {
      return new Builder(other);
    }

    public static class Builder {
        private com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName functionName = null;
        private List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature> argumentTypes = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="functionName", requiredness=Requiredness.NONE)    public Builder setFunctionName(com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName functionName) {
            this.functionName = functionName;
            return this;
        }
    
        public com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName getFunctionName() { return functionName; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="argumentTypes", requiredness=Requiredness.NONE)    public Builder setArgumentTypes(List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature> argumentTypes) {
            this.argumentTypes = argumentTypes;
            return this;
        }
    
        public List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature> getArgumentTypes() { return argumentTypes; }
    
        public Builder() { }
        public Builder(ThriftSqlFunctionId other) {
            this.functionName = other.functionName;
            this.argumentTypes = other.argumentTypes;
        }
    
        @ThriftConstructor
        public ThriftSqlFunctionId build() {
            ThriftSqlFunctionId result = new ThriftSqlFunctionId (
                this.functionName,
                this.argumentTypes
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("ThriftSqlFunctionId");
    private final com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName functionName;
    public static final int _FUNCTIONNAME = 1;
    private static final TField FUNCTION_NAME_FIELD_DESC = new TField("functionName", TType.STRUCT, (short)1);
        private final List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature> argumentTypes;
    public static final int _ARGUMENTTYPES = 2;
    private static final TField ARGUMENT_TYPES_FIELD_DESC = new TField("argumentTypes", TType.LIST, (short)2);
    static {
      NAMES_TO_IDS.put("functionName", 1);
      THRIFT_NAMES_TO_IDS.put("functionName", 1);
      FIELD_METADATA.put(1, FUNCTION_NAME_FIELD_DESC);
      NAMES_TO_IDS.put("argumentTypes", 2);
      THRIFT_NAMES_TO_IDS.put("argumentTypes", 2);
      FIELD_METADATA.put(2, ARGUMENT_TYPES_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="functionName", requiredness=Requiredness.NONE)
    public com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName getFunctionName() { return functionName; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="argumentTypes", requiredness=Requiredness.NONE)
    public List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature> getArgumentTypes() { return argumentTypes; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("functionName", functionName);
        helper.add("argumentTypes", argumentTypes);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ThriftSqlFunctionId other = (ThriftSqlFunctionId)o;
    
        return
            Objects.equals(functionName, other.functionName) &&
            Objects.equals(argumentTypes, other.argumentTypes) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            functionName,
            argumentTypes
        });
    }

    
    public static com.facebook.thrift.payload.Reader<ThriftSqlFunctionId> asReader() {
      return ThriftSqlFunctionId::read0;
    }
    
    public static ThriftSqlFunctionId read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(ThriftSqlFunctionId.NAMES_TO_IDS, ThriftSqlFunctionId.THRIFT_NAMES_TO_IDS, ThriftSqlFunctionId.FIELD_METADATA);
      ThriftSqlFunctionId.Builder builder = new ThriftSqlFunctionId.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _FUNCTIONNAME:
          if (__field.type == TType.STRUCT) {
            com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName functionName = com.facebook.presto.common.experimental.auto_gen.ThriftQualifiedObjectName.read0(oprot);
            builder.setFunctionName(functionName);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ARGUMENTTYPES:
          if (__field.type == TType.LIST) {
            List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature> argumentTypes;
                {
                TList _list = oprot.readListBegin();
                argumentTypes = new ArrayList<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature>(Math.max(0, _list.size));
                for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                    
                    com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature _value1 = com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature.read0(oprot);
                    argumentTypes.add(_value1);
                }
                oprot.readListEnd();
                }
            builder.setArgumentTypes(argumentTypes);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (functionName != null) {
        oprot.writeFieldBegin(FUNCTION_NAME_FIELD_DESC);
        this.functionName.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (argumentTypes != null) {
        oprot.writeFieldBegin(ARGUMENT_TYPES_FIELD_DESC);
        List<com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature> _iter0 = argumentTypes;
        oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
            for (com.facebook.presto.common.experimental.auto_gen.ThriftTypeSignature _iter1 : _iter0) {
              _iter1.write0(oprot);
            }
            oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _ThriftSqlFunctionIdLazy {
        private static final ThriftSqlFunctionId _DEFAULT = new ThriftSqlFunctionId.Builder().build();
    }
    
    public static ThriftSqlFunctionId defaultInstance() {
        return  _ThriftSqlFunctionIdLazy._DEFAULT;
    }
}
