openapi: 3.0.0
info:
  title: Presto Expression API
  description: API for evaluating and simplifying row expressions in Presto
  version: "1"
servers:
  - url: http://localhost:8080
    description: Presto endpoint when running locally
paths:
  /v1/expressions:
    post:
      summary: Simplify the list of row expressions
      description: This endpoint takes in a list of row expressions and attempts to simplify them to their simplest logical equivalent expression.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowExpressions'
        required: true
      responses:
        '200':
          description: Results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowExpressions'
components:
  schemas:
    RowExpressions:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/RowExpression"
    RowExpression:
      oneOf:
        - $ref: "#/components/schemas/ConstantExpression"
        - $ref: "#/components/schemas/VariableReferenceExpression"
        - $ref: "#/components/schemas/InputReferenceExpression"
        - $ref: "#/components/schemas/LambdaDefinitionExpression"
        - $ref: "#/components/schemas/SpecialFormExpression"
        - $ref: "#/components/schemas/CallExpression"
    RowExpressionParent:
      type: object
      properties:
        sourceLocation:
           $ref: "#/components/schemas/SourceLocation"
    SourceLocation:
      description: The source location of the row expression in the original query, referencing the line and the column of the query.
      type: object
      properties:
        line:
          type: integer
        column:
          type: integer
    ConstantExpression:
      description: A constant expression is a row expression that represents a constant value.  The value attribute is the constant value.
      allOf:
        - $ref: "#/components/schemas/RowExpressionParent"
        - type: object
          properties:
            "@type":
              type: string
              enum : ["constant"]
            typeSignature:
              type: string
            valueBlock:
              type: string
    VariableReferenceExpression:
      description: A variable reference expression is a row expression that represents a reference to a variable.  The name attribute indicates the name of the variable.
      allOf:
        - $ref: "#/components/schemas/RowExpressionParent"
        - type: object
          properties:
            "@type":
              type: string
              enum : ["variable"]
            typeSignature:
              type: string
            name:
              type: string
    InputReferenceExpression:
      description: >
        An input reference expression is a row expression that represents a reference to a column in the input schema.  The field attribute indicates the index of the column in the
        input schema.
      allOf:
        - $ref: "#/components/schemas/RowExpressionParent"
        - type: object
          properties:
            "@type":
              type: string
              enum : ["input"]
            typeSignature:
              type: string
            field:
                type: integer
    LambdaDefinitionExpression:
      description: >
        A lambda definition expression is a row expression that represents a lambda function.  The lambda function is defined by a list of argument types, a list of argument names, 
        and a body expression.
      allOf:
        - $ref: "#/components/schemas/RowExpressionParent"
        - type: object
          properties:
            "@type":
              type: string
              enum : ["lambda"]
            argumentTypeSignatures:
              type: array
              items:
                type: string
            arguments:
              type: array
              items:
                type: string
            body:
              $ref: "#/components/schemas/RowExpression"
    SpecialFormExpression:
      description: >
        A special form expression is a row expression that represents a special language construct.  The form attribute indicates the specific form of the special form,
        which is a well known list, and with each having special semantics.  The arguments attribute is a list of row expressions that are the arguments to the special form, with
        each form taking in a specific number of arguments.
      allOf:
        - $ref: "#/components/schemas/RowExpressionParent"
        - type: object
          properties:
            "@type":
              type: string
              enum : ["special"]
            form:
                type: string
                enum: ["IF","NULL_IF","SWITCH","WHEN","IS_NULL","COALESCE","IN","AND","OR","DEREFERENCE","ROW_CONSTRUCTOR","BIND"]
            returnTypeSignature:
              type: string
            arguments:
              type: array
              items:
                  $ref: "#/components/schemas/RowExpression"
    CallExpression:
      description: >
          A call expression is a row expression that represents a call to a function.  The functionHandle attribute is an opaque handle to the function that is being called.
          The arguments attribute is a list of row expressions that are the arguments to the function.
      allOf:
        - $ref: "#/components/schemas/RowExpressionParent"
        - type: object
          properties:
            "@type":
              type: string
              enum : ["call"]
            displayName:
              type: string
            functionHandle:
              $ref: "#/components/schemas/FunctionHandle"
            returnTypeSignature:
              type: string
            arguments:
              type: array
              items:
                $ref: "#/components/schemas/RowExpression"
    FunctionHandle:
      description: An opaque handle to a function that may be invoked.  This is interpreted by the registered function namespace manager.
      anyOf:
        - $ref: "#/components/schemas/OpaqueFunctionHandle"
        - $ref: "#/components/schemas/SqlFunctionHandle"
    OpaqueFunctionHandle:
      type: object
      properties: {} # any opaque object may be passed and interpreted by a function namespace manager
    SqlFunctionHandle:
      type: object
      properties:
        functionId:
          type: string
        version:
          type: string
