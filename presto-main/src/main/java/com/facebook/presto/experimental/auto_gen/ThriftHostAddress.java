/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.21.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.facebook.presto.experimental.auto_gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-03-13")
public class ThriftHostAddress
        implements org.apache.thrift.TBase<ThriftHostAddress, ThriftHostAddress._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftHostAddress>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftHostAddress");

    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftHostAddressStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftHostAddressTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String host; // required
    public int port; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields
            implements org.apache.thrift.TFieldIdEnum
    {
        HOST((short) 1, "host"),
        PORT((short) 2, "port");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId) {
                case 1: // HOST
                    return HOST;
                case 2: // PORT
                    return PORT;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
          if (fields == null) {
            throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
          }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId()
        {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftHostAddress.class, metaDataMap);
    }

    public ThriftHostAddress()
    {
    }

    public ThriftHostAddress(
            java.lang.String host,
            int port)
    {
        this();
        this.host = host;
        this.port = port;
        setPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftHostAddress(ThriftHostAddress other)
    {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetHost()) {
            this.host = other.host;
        }
        this.port = other.port;
    }

    @Override
    public ThriftHostAddress deepCopy()
    {
        return new ThriftHostAddress(this);
    }

    @Override
    public void clear()
    {
        this.host = null;
        setPortIsSet(false);
        this.port = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getHost()
    {
        return this.host;
    }

    public ThriftHostAddress setHost(@org.apache.thrift.annotation.Nullable java.lang.String host)
    {
        this.host = host;
        return this;
    }

    public void unsetHost()
    {
        this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost()
    {
        return this.host != null;
    }

    public void setHostIsSet(boolean value)
    {
        if (!value) {
            this.host = null;
        }
    }

    public int getPort()
    {
        return this.port;
    }

    public ThriftHostAddress setPort(int port)
    {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value)
    {
        switch (field) {
            case HOST:
                if (value == null) {
                    unsetHost();
                }
                else {
                    setHost((java.lang.String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                }
                else {
                    setPort((java.lang.Integer) value);
                }
                break;
        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field)
    {
        switch (field) {
            case HOST:
                return getHost();

            case PORT:
                return getPort();
        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field)
    {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case HOST:
                return isSetHost();
            case PORT:
                return isSetPort();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that)
    {
      if (that instanceof ThriftHostAddress) {
        return this.equals((ThriftHostAddress) that);
      }
        return false;
    }

    public boolean equals(ThriftHostAddress that)
    {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

        boolean this_present_host = true && this.isSetHost();
        boolean that_present_host = true && that.isSetHost();
        if (this_present_host || that_present_host) {
          if (!(this_present_host && that_present_host)) {
            return false;
          }
          if (!this.host.equals(that.host)) {
            return false;
          }
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
          if (!(this_present_port && that_present_port)) {
            return false;
          }
          if (this.port != that.port) {
            return false;
          }
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
      if (isSetHost()) {
        hashCode = hashCode * 8191 + host.hashCode();
      }

        hashCode = hashCode * 8191 + port;

        return hashCode;
    }

    @Override
    public int compareTo(ThriftHostAddress other)
    {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetHost(), other.isSetHost());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHost()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetPort(), other.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
    {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
    {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString()
    {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftHostAddress(");
        boolean first = true;

        sb.append("host:");
        if (this.host == null) {
            sb.append("null");
        }
        else {
            sb.append(this.host);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("port:");
        sb.append(this.port);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate()
            throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out)
            throws java.io.IOException
    {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, java.lang.ClassNotFoundException
    {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftHostAddressStandardSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftHostAddressStandardScheme getScheme()
        {
            return new ThriftHostAddressStandardScheme();
        }
    }

    private static class ThriftHostAddressStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<ThriftHostAddress>
    {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftHostAddress struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // HOST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.host = iprot.readString();
                            struct.setHostIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftHostAddress struct)
                throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.host != null) {
                oprot.writeFieldBegin(HOST_FIELD_DESC);
                oprot.writeString(struct.host);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class ThriftHostAddressTupleSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftHostAddressTupleScheme getScheme()
        {
            return new ThriftHostAddressTupleScheme();
        }
    }

    private static class ThriftHostAddressTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<ThriftHostAddress>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftHostAddress struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetHost()) {
                optionals.set(0);
            }
            if (struct.isSetPort()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetHost()) {
                oprot.writeString(struct.host);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftHostAddress struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
            }
            if (incoming.get(1)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
    {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

