/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.21.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.facebook.presto.experimental.auto_gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-03-13")
public class ThriftErrorLocation
        implements org.apache.thrift.TBase<ThriftErrorLocation, ThriftErrorLocation._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftErrorLocation>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftErrorLocation");

    private static final org.apache.thrift.protocol.TField LINE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNumber", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField COLUMN_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNumber", org.apache.thrift.protocol.TType.I32, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftErrorLocationStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftErrorLocationTupleSchemeFactory();

    public int lineNumber; // required
    public int columnNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields
            implements org.apache.thrift.TFieldIdEnum
    {
        LINE_NUMBER((short) 1, "lineNumber"),
        COLUMN_NUMBER((short) 2, "columnNumber");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId) {
                case 1: // LINE_NUMBER
                    return LINE_NUMBER;
                case 2: // COLUMN_NUMBER
                    return COLUMN_NUMBER;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
          if (fields == null) {
            throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
          }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId()
        {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __LINENUMBER_ISSET_ID = 0;
    private static final int __COLUMNNUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.LINE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lineNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.COLUMN_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("columnNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftErrorLocation.class, metaDataMap);
    }

    public ThriftErrorLocation()
    {
    }

    public ThriftErrorLocation(
            int lineNumber,
            int columnNumber)
    {
        this();
        this.lineNumber = lineNumber;
        setLineNumberIsSet(true);
        this.columnNumber = columnNumber;
        setColumnNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftErrorLocation(ThriftErrorLocation other)
    {
        __isset_bitfield = other.__isset_bitfield;
        this.lineNumber = other.lineNumber;
        this.columnNumber = other.columnNumber;
    }

    @Override
    public ThriftErrorLocation deepCopy()
    {
        return new ThriftErrorLocation(this);
    }

    @Override
    public void clear()
    {
        setLineNumberIsSet(false);
        this.lineNumber = 0;
        setColumnNumberIsSet(false);
        this.columnNumber = 0;
    }

    public int getLineNumber()
    {
        return this.lineNumber;
    }

    public ThriftErrorLocation setLineNumber(int lineNumber)
    {
        this.lineNumber = lineNumber;
        setLineNumberIsSet(true);
        return this;
    }

    public void unsetLineNumber()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    /** Returns true if field lineNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetLineNumber()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    public void setLineNumberIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINENUMBER_ISSET_ID, value);
    }

    public int getColumnNumber()
    {
        return this.columnNumber;
    }

    public ThriftErrorLocation setColumnNumber(int columnNumber)
    {
        this.columnNumber = columnNumber;
        setColumnNumberIsSet(true);
        return this;
    }

    public void unsetColumnNumber()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
    }

    /** Returns true if field columnNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnNumber()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
    }

    public void setColumnNumberIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value)
    {
        switch (field) {
            case LINE_NUMBER:
                if (value == null) {
                    unsetLineNumber();
                }
                else {
                    setLineNumber((java.lang.Integer) value);
                }
                break;

            case COLUMN_NUMBER:
                if (value == null) {
                    unsetColumnNumber();
                }
                else {
                    setColumnNumber((java.lang.Integer) value);
                }
                break;
        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field)
    {
        switch (field) {
            case LINE_NUMBER:
                return getLineNumber();

            case COLUMN_NUMBER:
                return getColumnNumber();
        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field)
    {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case LINE_NUMBER:
                return isSetLineNumber();
            case COLUMN_NUMBER:
                return isSetColumnNumber();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that)
    {
      if (that instanceof ThriftErrorLocation) {
        return this.equals((ThriftErrorLocation) that);
      }
        return false;
    }

    public boolean equals(ThriftErrorLocation that)
    {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

        boolean this_present_lineNumber = true;
        boolean that_present_lineNumber = true;
        if (this_present_lineNumber || that_present_lineNumber) {
          if (!(this_present_lineNumber && that_present_lineNumber)) {
            return false;
          }
          if (this.lineNumber != that.lineNumber) {
            return false;
          }
        }

        boolean this_present_columnNumber = true;
        boolean that_present_columnNumber = true;
        if (this_present_columnNumber || that_present_columnNumber) {
          if (!(this_present_columnNumber && that_present_columnNumber)) {
            return false;
          }
          if (this.columnNumber != that.columnNumber) {
            return false;
          }
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        int hashCode = 1;

        hashCode = hashCode * 8191 + lineNumber;

        hashCode = hashCode * 8191 + columnNumber;

        return hashCode;
    }

    @Override
    public int compareTo(ThriftErrorLocation other)
    {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetLineNumber(), other.isSetLineNumber());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLineNumber()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNumber, other.lineNumber);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetColumnNumber(), other.isSetColumnNumber());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetColumnNumber()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNumber, other.columnNumber);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
    {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
    {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString()
    {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftErrorLocation(");
        boolean first = true;

        sb.append("lineNumber:");
        sb.append(this.lineNumber);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("columnNumber:");
        sb.append(this.columnNumber);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate()
            throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out)
            throws java.io.IOException
    {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, java.lang.ClassNotFoundException
    {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftErrorLocationStandardSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftErrorLocationStandardScheme getScheme()
        {
            return new ThriftErrorLocationStandardScheme();
        }
    }

    private static class ThriftErrorLocationStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<ThriftErrorLocation>
    {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftErrorLocation struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // LINE_NUMBER
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.lineNumber = iprot.readI32();
                            struct.setLineNumberIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // COLUMN_NUMBER
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.columnNumber = iprot.readI32();
                            struct.setColumnNumberIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftErrorLocation struct)
                throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(LINE_NUMBER_FIELD_DESC);
            oprot.writeI32(struct.lineNumber);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(COLUMN_NUMBER_FIELD_DESC);
            oprot.writeI32(struct.columnNumber);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class ThriftErrorLocationTupleSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftErrorLocationTupleScheme getScheme()
        {
            return new ThriftErrorLocationTupleScheme();
        }
    }

    private static class ThriftErrorLocationTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<ThriftErrorLocation>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftErrorLocation struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetLineNumber()) {
                optionals.set(0);
            }
            if (struct.isSetColumnNumber()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetLineNumber()) {
                oprot.writeI32(struct.lineNumber);
            }
            if (struct.isSetColumnNumber()) {
                oprot.writeI32(struct.columnNumber);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftErrorLocation struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.lineNumber = iprot.readI32();
                struct.setLineNumberIsSet(true);
            }
            if (incoming.get(1)) {
                struct.columnNumber = iprot.readI32();
                struct.setColumnNumberIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
    {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

