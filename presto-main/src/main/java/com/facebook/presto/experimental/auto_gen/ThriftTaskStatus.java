/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.21.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.facebook.presto.experimental.auto_gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-03-13")
public class ThriftTaskStatus
        implements org.apache.thrift.TBase<ThriftTaskStatus, ThriftTaskStatus._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftTaskStatus>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftTaskStatus");

    private static final org.apache.thrift.protocol.TField TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskInstanceIdLeastSignificantBits", org.apache.thrift.protocol.TType.I64, (short) 1);
    private static final org.apache.thrift.protocol.TField TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskInstanceIdMostSignificantBits", org.apache.thrift.protocol.TType.I64, (short) 2);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField SELF_FIELD_DESC = new org.apache.thrift.protocol.TField("self", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField COMPLETED_DRIVER_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("completedDriverGroups", org.apache.thrift.protocol.TType.SET, (short) 6);
    private static final org.apache.thrift.protocol.TField FAILURES_FIELD_DESC = new org.apache.thrift.protocol.TField("failures", org.apache.thrift.protocol.TType.LIST, (short) 7);
    private static final org.apache.thrift.protocol.TField QUEUED_PARTITIONED_DRIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("queuedPartitionedDrivers", org.apache.thrift.protocol.TType.I32, (short) 8);
    private static final org.apache.thrift.protocol.TField RUNNING_PARTITIONED_DRIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("runningPartitionedDrivers", org.apache.thrift.protocol.TType.I32, (short) 9);
    private static final org.apache.thrift.protocol.TField OUTPUT_BUFFER_UTILIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("outputBufferUtilization", org.apache.thrift.protocol.TType.DOUBLE, (short) 10);
    private static final org.apache.thrift.protocol.TField OUTPUT_BUFFER_OVERUTILIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("outputBufferOverutilized", org.apache.thrift.protocol.TType.BOOL, (short) 11);
    private static final org.apache.thrift.protocol.TField PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("physicalWrittenDataSizeInBytes", org.apache.thrift.protocol.TType.I64, (short) 12);
    private static final org.apache.thrift.protocol.TField MEMORY_RESERVATION_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryReservationInBytes", org.apache.thrift.protocol.TType.I64, (short) 13);
    private static final org.apache.thrift.protocol.TField SYSTEM_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("systemMemoryReservationInBytes", org.apache.thrift.protocol.TType.I64, (short) 14);
    private static final org.apache.thrift.protocol.TField PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("peakNodeTotalMemoryReservationInBytes", org.apache.thrift.protocol.TType.I64, (short) 15);
    private static final org.apache.thrift.protocol.TField FULL_GC_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("fullGcCount", org.apache.thrift.protocol.TType.I64, (short) 16);
    private static final org.apache.thrift.protocol.TField FULL_GC_TIME_IN_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("fullGcTimeInMillis", org.apache.thrift.protocol.TType.I64, (short) 17);
    private static final org.apache.thrift.protocol.TField TOTAL_CPU_TIME_IN_NANOS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCpuTimeInNanos", org.apache.thrift.protocol.TType.I64, (short) 18);
    private static final org.apache.thrift.protocol.TField TASK_AGE_IN_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskAgeInMillis", org.apache.thrift.protocol.TType.I64, (short) 19);
    private static final org.apache.thrift.protocol.TField QUEUED_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("queuedPartitionedSplitsWeight", org.apache.thrift.protocol.TType.I64, (short) 20);
    private static final org.apache.thrift.protocol.TField RUNNING_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("runningPartitionedSplitsWeight", org.apache.thrift.protocol.TType.I64, (short) 21);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftTaskStatusStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftTaskStatusTupleSchemeFactory();

    public long taskInstanceIdLeastSignificantBits; // required
    public long taskInstanceIdMostSignificantBits; // required
    public long version; // required
    /**
     *
     * @see ThriftTaskState
     */
    public @org.apache.thrift.annotation.Nullable ThriftTaskState state; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String self; // required
    public @org.apache.thrift.annotation.Nullable java.util.Set<ThriftLifespan> completedDriverGroups; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<ThriftExecutionFailureInfo> failures; // required
    public int queuedPartitionedDrivers; // required
    public int runningPartitionedDrivers; // required
    public double outputBufferUtilization; // required
    public boolean outputBufferOverutilized; // required
    public long physicalWrittenDataSizeInBytes; // required
    public long memoryReservationInBytes; // required
    public long systemMemoryReservationInBytes; // required
    public long peakNodeTotalMemoryReservationInBytes; // required
    public long fullGcCount; // required
    public long fullGcTimeInMillis; // required
    public long totalCpuTimeInNanos; // required
    public long taskAgeInMillis; // required
    public long queuedPartitionedSplitsWeight; // required
    public long runningPartitionedSplitsWeight; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields
            implements org.apache.thrift.TFieldIdEnum
    {
        TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS((short) 1, "taskInstanceIdLeastSignificantBits"),
        TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS((short) 2, "taskInstanceIdMostSignificantBits"),
        VERSION((short) 3, "version"),
        /**
         *
         * @see ThriftTaskState
         */
        STATE((short) 4, "state"),
        SELF((short) 5, "self"),
        COMPLETED_DRIVER_GROUPS((short) 6, "completedDriverGroups"),
        FAILURES((short) 7, "failures"),
        QUEUED_PARTITIONED_DRIVERS((short) 8, "queuedPartitionedDrivers"),
        RUNNING_PARTITIONED_DRIVERS((short) 9, "runningPartitionedDrivers"),
        OUTPUT_BUFFER_UTILIZATION((short) 10, "outputBufferUtilization"),
        OUTPUT_BUFFER_OVERUTILIZED((short) 11, "outputBufferOverutilized"),
        PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES((short) 12, "physicalWrittenDataSizeInBytes"),
        MEMORY_RESERVATION_IN_BYTES((short) 13, "memoryReservationInBytes"),
        SYSTEM_MEMORY_RESERVATION_IN_BYTES((short) 14, "systemMemoryReservationInBytes"),
        PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES((short) 15, "peakNodeTotalMemoryReservationInBytes"),
        FULL_GC_COUNT((short) 16, "fullGcCount"),
        FULL_GC_TIME_IN_MILLIS((short) 17, "fullGcTimeInMillis"),
        TOTAL_CPU_TIME_IN_NANOS((short) 18, "totalCpuTimeInNanos"),
        TASK_AGE_IN_MILLIS((short) 19, "taskAgeInMillis"),
        QUEUED_PARTITIONED_SPLITS_WEIGHT((short) 20, "queuedPartitionedSplitsWeight"),
        RUNNING_PARTITIONED_SPLITS_WEIGHT((short) 21, "runningPartitionedSplitsWeight");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId) {
                case 1: // TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS
                    return TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS;
                case 2: // TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS
                    return TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS;
                case 3: // VERSION
                    return VERSION;
                case 4: // STATE
                    return STATE;
                case 5: // SELF
                    return SELF;
                case 6: // COMPLETED_DRIVER_GROUPS
                    return COMPLETED_DRIVER_GROUPS;
                case 7: // FAILURES
                    return FAILURES;
                case 8: // QUEUED_PARTITIONED_DRIVERS
                    return QUEUED_PARTITIONED_DRIVERS;
                case 9: // RUNNING_PARTITIONED_DRIVERS
                    return RUNNING_PARTITIONED_DRIVERS;
                case 10: // OUTPUT_BUFFER_UTILIZATION
                    return OUTPUT_BUFFER_UTILIZATION;
                case 11: // OUTPUT_BUFFER_OVERUTILIZED
                    return OUTPUT_BUFFER_OVERUTILIZED;
                case 12: // PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES
                    return PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES;
                case 13: // MEMORY_RESERVATION_IN_BYTES
                    return MEMORY_RESERVATION_IN_BYTES;
                case 14: // SYSTEM_MEMORY_RESERVATION_IN_BYTES
                    return SYSTEM_MEMORY_RESERVATION_IN_BYTES;
                case 15: // PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES
                    return PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES;
                case 16: // FULL_GC_COUNT
                    return FULL_GC_COUNT;
                case 17: // FULL_GC_TIME_IN_MILLIS
                    return FULL_GC_TIME_IN_MILLIS;
                case 18: // TOTAL_CPU_TIME_IN_NANOS
                    return TOTAL_CPU_TIME_IN_NANOS;
                case 19: // TASK_AGE_IN_MILLIS
                    return TASK_AGE_IN_MILLIS;
                case 20: // QUEUED_PARTITIONED_SPLITS_WEIGHT
                    return QUEUED_PARTITIONED_SPLITS_WEIGHT;
                case 21: // RUNNING_PARTITIONED_SPLITS_WEIGHT
                    return RUNNING_PARTITIONED_SPLITS_WEIGHT;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
          if (fields == null) {
            throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
          }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId()
        {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __TASKINSTANCEIDLEASTSIGNIFICANTBITS_ISSET_ID = 0;
    private static final int __TASKINSTANCEIDMOSTSIGNIFICANTBITS_ISSET_ID = 1;
    private static final int __VERSION_ISSET_ID = 2;
    private static final int __QUEUEDPARTITIONEDDRIVERS_ISSET_ID = 3;
    private static final int __RUNNINGPARTITIONEDDRIVERS_ISSET_ID = 4;
    private static final int __OUTPUTBUFFERUTILIZATION_ISSET_ID = 5;
    private static final int __OUTPUTBUFFEROVERUTILIZED_ISSET_ID = 6;
    private static final int __PHYSICALWRITTENDATASIZEINBYTES_ISSET_ID = 7;
    private static final int __MEMORYRESERVATIONINBYTES_ISSET_ID = 8;
    private static final int __SYSTEMMEMORYRESERVATIONINBYTES_ISSET_ID = 9;
    private static final int __PEAKNODETOTALMEMORYRESERVATIONINBYTES_ISSET_ID = 10;
    private static final int __FULLGCCOUNT_ISSET_ID = 11;
    private static final int __FULLGCTIMEINMILLIS_ISSET_ID = 12;
    private static final int __TOTALCPUTIMEINNANOS_ISSET_ID = 13;
    private static final int __TASKAGEINMILLIS_ISSET_ID = 14;
    private static final int __QUEUEDPARTITIONEDSPLITSWEIGHT_ISSET_ID = 15;
    private static final int __RUNNINGPARTITIONEDSPLITSWEIGHT_ISSET_ID = 16;
    private int __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS, new org.apache.thrift.meta_data.FieldMetaData("taskInstanceIdLeastSignificantBits", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS, new org.apache.thrift.meta_data.FieldMetaData("taskInstanceIdMostSignificantBits", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftTaskState.class)));
        tmpMap.put(_Fields.SELF, new org.apache.thrift.meta_data.FieldMetaData("self", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.COMPLETED_DRIVER_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("completedDriverGroups", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftLifespan.class))));
        tmpMap.put(_Fields.FAILURES, new org.apache.thrift.meta_data.FieldMetaData("failures", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftExecutionFailureInfo.class))));
        tmpMap.put(_Fields.QUEUED_PARTITIONED_DRIVERS, new org.apache.thrift.meta_data.FieldMetaData("queuedPartitionedDrivers", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.RUNNING_PARTITIONED_DRIVERS, new org.apache.thrift.meta_data.FieldMetaData("runningPartitionedDrivers", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.OUTPUT_BUFFER_UTILIZATION, new org.apache.thrift.meta_data.FieldMetaData("outputBufferUtilization", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
        tmpMap.put(_Fields.OUTPUT_BUFFER_OVERUTILIZED, new org.apache.thrift.meta_data.FieldMetaData("outputBufferOverutilized", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("physicalWrittenDataSizeInBytes", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.MEMORY_RESERVATION_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("memoryReservationInBytes", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.SYSTEM_MEMORY_RESERVATION_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("systemMemoryReservationInBytes", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("peakNodeTotalMemoryReservationInBytes", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.FULL_GC_COUNT, new org.apache.thrift.meta_data.FieldMetaData("fullGcCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.FULL_GC_TIME_IN_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("fullGcTimeInMillis", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.TOTAL_CPU_TIME_IN_NANOS, new org.apache.thrift.meta_data.FieldMetaData("totalCpuTimeInNanos", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.TASK_AGE_IN_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("taskAgeInMillis", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.QUEUED_PARTITIONED_SPLITS_WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("queuedPartitionedSplitsWeight", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.RUNNING_PARTITIONED_SPLITS_WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("runningPartitionedSplitsWeight", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftTaskStatus.class, metaDataMap);
    }

    public ThriftTaskStatus()
    {
    }

    public ThriftTaskStatus(
            long taskInstanceIdLeastSignificantBits,
            long taskInstanceIdMostSignificantBits,
            long version,
            ThriftTaskState state,
            java.lang.String self,
            java.util.Set<ThriftLifespan> completedDriverGroups,
            java.util.List<ThriftExecutionFailureInfo> failures,
            int queuedPartitionedDrivers,
            int runningPartitionedDrivers,
            double outputBufferUtilization,
            boolean outputBufferOverutilized,
            long physicalWrittenDataSizeInBytes,
            long memoryReservationInBytes,
            long systemMemoryReservationInBytes,
            long peakNodeTotalMemoryReservationInBytes,
            long fullGcCount,
            long fullGcTimeInMillis,
            long totalCpuTimeInNanos,
            long taskAgeInMillis,
            long queuedPartitionedSplitsWeight,
            long runningPartitionedSplitsWeight)
    {
        this();
        this.taskInstanceIdLeastSignificantBits = taskInstanceIdLeastSignificantBits;
        setTaskInstanceIdLeastSignificantBitsIsSet(true);
        this.taskInstanceIdMostSignificantBits = taskInstanceIdMostSignificantBits;
        setTaskInstanceIdMostSignificantBitsIsSet(true);
        this.version = version;
        setVersionIsSet(true);
        this.state = state;
        this.self = self;
        this.completedDriverGroups = completedDriverGroups;
        this.failures = failures;
        this.queuedPartitionedDrivers = queuedPartitionedDrivers;
        setQueuedPartitionedDriversIsSet(true);
        this.runningPartitionedDrivers = runningPartitionedDrivers;
        setRunningPartitionedDriversIsSet(true);
        this.outputBufferUtilization = outputBufferUtilization;
        setOutputBufferUtilizationIsSet(true);
        this.outputBufferOverutilized = outputBufferOverutilized;
        setOutputBufferOverutilizedIsSet(true);
        this.physicalWrittenDataSizeInBytes = physicalWrittenDataSizeInBytes;
        setPhysicalWrittenDataSizeInBytesIsSet(true);
        this.memoryReservationInBytes = memoryReservationInBytes;
        setMemoryReservationInBytesIsSet(true);
        this.systemMemoryReservationInBytes = systemMemoryReservationInBytes;
        setSystemMemoryReservationInBytesIsSet(true);
        this.peakNodeTotalMemoryReservationInBytes = peakNodeTotalMemoryReservationInBytes;
        setPeakNodeTotalMemoryReservationInBytesIsSet(true);
        this.fullGcCount = fullGcCount;
        setFullGcCountIsSet(true);
        this.fullGcTimeInMillis = fullGcTimeInMillis;
        setFullGcTimeInMillisIsSet(true);
        this.totalCpuTimeInNanos = totalCpuTimeInNanos;
        setTotalCpuTimeInNanosIsSet(true);
        this.taskAgeInMillis = taskAgeInMillis;
        setTaskAgeInMillisIsSet(true);
        this.queuedPartitionedSplitsWeight = queuedPartitionedSplitsWeight;
        setQueuedPartitionedSplitsWeightIsSet(true);
        this.runningPartitionedSplitsWeight = runningPartitionedSplitsWeight;
        setRunningPartitionedSplitsWeightIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftTaskStatus(ThriftTaskStatus other)
    {
        __isset_bitfield = other.__isset_bitfield;
        this.taskInstanceIdLeastSignificantBits = other.taskInstanceIdLeastSignificantBits;
        this.taskInstanceIdMostSignificantBits = other.taskInstanceIdMostSignificantBits;
        this.version = other.version;
        if (other.isSetState()) {
            this.state = other.state;
        }
        if (other.isSetSelf()) {
            this.self = other.self;
        }
        if (other.isSetCompletedDriverGroups()) {
            java.util.Set<ThriftLifespan> __this__completedDriverGroups = new java.util.HashSet<ThriftLifespan>(other.completedDriverGroups.size());
            for (ThriftLifespan other_element : other.completedDriverGroups) {
                __this__completedDriverGroups.add(new ThriftLifespan(other_element));
            }
            this.completedDriverGroups = __this__completedDriverGroups;
        }
        if (other.isSetFailures()) {
            java.util.List<ThriftExecutionFailureInfo> __this__failures = new java.util.ArrayList<ThriftExecutionFailureInfo>(other.failures.size());
            for (ThriftExecutionFailureInfo other_element : other.failures) {
                __this__failures.add(new ThriftExecutionFailureInfo(other_element));
            }
            this.failures = __this__failures;
        }
        this.queuedPartitionedDrivers = other.queuedPartitionedDrivers;
        this.runningPartitionedDrivers = other.runningPartitionedDrivers;
        this.outputBufferUtilization = other.outputBufferUtilization;
        this.outputBufferOverutilized = other.outputBufferOverutilized;
        this.physicalWrittenDataSizeInBytes = other.physicalWrittenDataSizeInBytes;
        this.memoryReservationInBytes = other.memoryReservationInBytes;
        this.systemMemoryReservationInBytes = other.systemMemoryReservationInBytes;
        this.peakNodeTotalMemoryReservationInBytes = other.peakNodeTotalMemoryReservationInBytes;
        this.fullGcCount = other.fullGcCount;
        this.fullGcTimeInMillis = other.fullGcTimeInMillis;
        this.totalCpuTimeInNanos = other.totalCpuTimeInNanos;
        this.taskAgeInMillis = other.taskAgeInMillis;
        this.queuedPartitionedSplitsWeight = other.queuedPartitionedSplitsWeight;
        this.runningPartitionedSplitsWeight = other.runningPartitionedSplitsWeight;
    }

    @Override
    public ThriftTaskStatus deepCopy()
    {
        return new ThriftTaskStatus(this);
    }

    @Override
    public void clear()
    {
        setTaskInstanceIdLeastSignificantBitsIsSet(false);
        this.taskInstanceIdLeastSignificantBits = 0;
        setTaskInstanceIdMostSignificantBitsIsSet(false);
        this.taskInstanceIdMostSignificantBits = 0;
        setVersionIsSet(false);
        this.version = 0;
        this.state = null;
        this.self = null;
        this.completedDriverGroups = null;
        this.failures = null;
        setQueuedPartitionedDriversIsSet(false);
        this.queuedPartitionedDrivers = 0;
        setRunningPartitionedDriversIsSet(false);
        this.runningPartitionedDrivers = 0;
        setOutputBufferUtilizationIsSet(false);
        this.outputBufferUtilization = 0.0;
        setOutputBufferOverutilizedIsSet(false);
        this.outputBufferOverutilized = false;
        setPhysicalWrittenDataSizeInBytesIsSet(false);
        this.physicalWrittenDataSizeInBytes = 0;
        setMemoryReservationInBytesIsSet(false);
        this.memoryReservationInBytes = 0;
        setSystemMemoryReservationInBytesIsSet(false);
        this.systemMemoryReservationInBytes = 0;
        setPeakNodeTotalMemoryReservationInBytesIsSet(false);
        this.peakNodeTotalMemoryReservationInBytes = 0;
        setFullGcCountIsSet(false);
        this.fullGcCount = 0;
        setFullGcTimeInMillisIsSet(false);
        this.fullGcTimeInMillis = 0;
        setTotalCpuTimeInNanosIsSet(false);
        this.totalCpuTimeInNanos = 0;
        setTaskAgeInMillisIsSet(false);
        this.taskAgeInMillis = 0;
        setQueuedPartitionedSplitsWeightIsSet(false);
        this.queuedPartitionedSplitsWeight = 0;
        setRunningPartitionedSplitsWeightIsSet(false);
        this.runningPartitionedSplitsWeight = 0;
    }

    public long getTaskInstanceIdLeastSignificantBits()
    {
        return this.taskInstanceIdLeastSignificantBits;
    }

    public ThriftTaskStatus setTaskInstanceIdLeastSignificantBits(long taskInstanceIdLeastSignificantBits)
    {
        this.taskInstanceIdLeastSignificantBits = taskInstanceIdLeastSignificantBits;
        setTaskInstanceIdLeastSignificantBitsIsSet(true);
        return this;
    }

    public void unsetTaskInstanceIdLeastSignificantBits()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKINSTANCEIDLEASTSIGNIFICANTBITS_ISSET_ID);
    }

    /** Returns true if field taskInstanceIdLeastSignificantBits is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskInstanceIdLeastSignificantBits()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKINSTANCEIDLEASTSIGNIFICANTBITS_ISSET_ID);
    }

    public void setTaskInstanceIdLeastSignificantBitsIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKINSTANCEIDLEASTSIGNIFICANTBITS_ISSET_ID, value);
    }

    public long getTaskInstanceIdMostSignificantBits()
    {
        return this.taskInstanceIdMostSignificantBits;
    }

    public ThriftTaskStatus setTaskInstanceIdMostSignificantBits(long taskInstanceIdMostSignificantBits)
    {
        this.taskInstanceIdMostSignificantBits = taskInstanceIdMostSignificantBits;
        setTaskInstanceIdMostSignificantBitsIsSet(true);
        return this;
    }

    public void unsetTaskInstanceIdMostSignificantBits()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKINSTANCEIDMOSTSIGNIFICANTBITS_ISSET_ID);
    }

    /** Returns true if field taskInstanceIdMostSignificantBits is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskInstanceIdMostSignificantBits()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKINSTANCEIDMOSTSIGNIFICANTBITS_ISSET_ID);
    }

    public void setTaskInstanceIdMostSignificantBitsIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKINSTANCEIDMOSTSIGNIFICANTBITS_ISSET_ID, value);
    }

    public long getVersion()
    {
        return this.version;
    }

    public ThriftTaskStatus setVersion(long version)
    {
        this.version = version;
        setVersionIsSet(true);
        return this;
    }

    public void unsetVersion()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    /**
     *
     * @see ThriftTaskState
     */
    @org.apache.thrift.annotation.Nullable
    public ThriftTaskState getState()
    {
        return this.state;
    }

    /**
     *
     * @see ThriftTaskState
     */
    public ThriftTaskStatus setState(@org.apache.thrift.annotation.Nullable ThriftTaskState state)
    {
        this.state = state;
        return this;
    }

    public void unsetState()
    {
        this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState()
    {
        return this.state != null;
    }

    public void setStateIsSet(boolean value)
    {
        if (!value) {
            this.state = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSelf()
    {
        return this.self;
    }

    public ThriftTaskStatus setSelf(@org.apache.thrift.annotation.Nullable java.lang.String self)
    {
        this.self = self;
        return this;
    }

    public void unsetSelf()
    {
        this.self = null;
    }

    /** Returns true if field self is set (has been assigned a value) and false otherwise */
    public boolean isSetSelf()
    {
        return this.self != null;
    }

    public void setSelfIsSet(boolean value)
    {
        if (!value) {
            this.self = null;
        }
    }

    public int getCompletedDriverGroupsSize()
    {
        return (this.completedDriverGroups == null) ? 0 : this.completedDriverGroups.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ThriftLifespan> getCompletedDriverGroupsIterator()
    {
        return (this.completedDriverGroups == null) ? null : this.completedDriverGroups.iterator();
    }

    public void addToCompletedDriverGroups(ThriftLifespan elem)
    {
        if (this.completedDriverGroups == null) {
            this.completedDriverGroups = new java.util.HashSet<ThriftLifespan>();
        }
        this.completedDriverGroups.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<ThriftLifespan> getCompletedDriverGroups()
    {
        return this.completedDriverGroups;
    }

    public ThriftTaskStatus setCompletedDriverGroups(@org.apache.thrift.annotation.Nullable java.util.Set<ThriftLifespan> completedDriverGroups)
    {
        this.completedDriverGroups = completedDriverGroups;
        return this;
    }

    public void unsetCompletedDriverGroups()
    {
        this.completedDriverGroups = null;
    }

    /** Returns true if field completedDriverGroups is set (has been assigned a value) and false otherwise */
    public boolean isSetCompletedDriverGroups()
    {
        return this.completedDriverGroups != null;
    }

    public void setCompletedDriverGroupsIsSet(boolean value)
    {
        if (!value) {
            this.completedDriverGroups = null;
        }
    }

    public int getFailuresSize()
    {
        return (this.failures == null) ? 0 : this.failures.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ThriftExecutionFailureInfo> getFailuresIterator()
    {
        return (this.failures == null) ? null : this.failures.iterator();
    }

    public void addToFailures(ThriftExecutionFailureInfo elem)
    {
        if (this.failures == null) {
            this.failures = new java.util.ArrayList<ThriftExecutionFailureInfo>();
        }
        this.failures.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ThriftExecutionFailureInfo> getFailures()
    {
        return this.failures;
    }

    public ThriftTaskStatus setFailures(@org.apache.thrift.annotation.Nullable java.util.List<ThriftExecutionFailureInfo> failures)
    {
        this.failures = failures;
        return this;
    }

    public void unsetFailures()
    {
        this.failures = null;
    }

    /** Returns true if field failures is set (has been assigned a value) and false otherwise */
    public boolean isSetFailures()
    {
        return this.failures != null;
    }

    public void setFailuresIsSet(boolean value)
    {
        if (!value) {
            this.failures = null;
        }
    }

    public int getQueuedPartitionedDrivers()
    {
        return this.queuedPartitionedDrivers;
    }

    public ThriftTaskStatus setQueuedPartitionedDrivers(int queuedPartitionedDrivers)
    {
        this.queuedPartitionedDrivers = queuedPartitionedDrivers;
        setQueuedPartitionedDriversIsSet(true);
        return this;
    }

    public void unsetQueuedPartitionedDrivers()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUEUEDPARTITIONEDDRIVERS_ISSET_ID);
    }

    /** Returns true if field queuedPartitionedDrivers is set (has been assigned a value) and false otherwise */
    public boolean isSetQueuedPartitionedDrivers()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUEUEDPARTITIONEDDRIVERS_ISSET_ID);
    }

    public void setQueuedPartitionedDriversIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUEUEDPARTITIONEDDRIVERS_ISSET_ID, value);
    }

    public int getRunningPartitionedDrivers()
    {
        return this.runningPartitionedDrivers;
    }

    public ThriftTaskStatus setRunningPartitionedDrivers(int runningPartitionedDrivers)
    {
        this.runningPartitionedDrivers = runningPartitionedDrivers;
        setRunningPartitionedDriversIsSet(true);
        return this;
    }

    public void unsetRunningPartitionedDrivers()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNNINGPARTITIONEDDRIVERS_ISSET_ID);
    }

    /** Returns true if field runningPartitionedDrivers is set (has been assigned a value) and false otherwise */
    public boolean isSetRunningPartitionedDrivers()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNNINGPARTITIONEDDRIVERS_ISSET_ID);
    }

    public void setRunningPartitionedDriversIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNNINGPARTITIONEDDRIVERS_ISSET_ID, value);
    }

    public double getOutputBufferUtilization()
    {
        return this.outputBufferUtilization;
    }

    public ThriftTaskStatus setOutputBufferUtilization(double outputBufferUtilization)
    {
        this.outputBufferUtilization = outputBufferUtilization;
        setOutputBufferUtilizationIsSet(true);
        return this;
    }

    public void unsetOutputBufferUtilization()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUTBUFFERUTILIZATION_ISSET_ID);
    }

    /** Returns true if field outputBufferUtilization is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputBufferUtilization()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUTBUFFERUTILIZATION_ISSET_ID);
    }

    public void setOutputBufferUtilizationIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUTBUFFERUTILIZATION_ISSET_ID, value);
    }

    public boolean isOutputBufferOverutilized()
    {
        return this.outputBufferOverutilized;
    }

    public ThriftTaskStatus setOutputBufferOverutilized(boolean outputBufferOverutilized)
    {
        this.outputBufferOverutilized = outputBufferOverutilized;
        setOutputBufferOverutilizedIsSet(true);
        return this;
    }

    public void unsetOutputBufferOverutilized()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUTBUFFEROVERUTILIZED_ISSET_ID);
    }

    /** Returns true if field outputBufferOverutilized is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputBufferOverutilized()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUTBUFFEROVERUTILIZED_ISSET_ID);
    }

    public void setOutputBufferOverutilizedIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUTBUFFEROVERUTILIZED_ISSET_ID, value);
    }

    public long getPhysicalWrittenDataSizeInBytes()
    {
        return this.physicalWrittenDataSizeInBytes;
    }

    public ThriftTaskStatus setPhysicalWrittenDataSizeInBytes(long physicalWrittenDataSizeInBytes)
    {
        this.physicalWrittenDataSizeInBytes = physicalWrittenDataSizeInBytes;
        setPhysicalWrittenDataSizeInBytesIsSet(true);
        return this;
    }

    public void unsetPhysicalWrittenDataSizeInBytes()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PHYSICALWRITTENDATASIZEINBYTES_ISSET_ID);
    }

    /** Returns true if field physicalWrittenDataSizeInBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetPhysicalWrittenDataSizeInBytes()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PHYSICALWRITTENDATASIZEINBYTES_ISSET_ID);
    }

    public void setPhysicalWrittenDataSizeInBytesIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PHYSICALWRITTENDATASIZEINBYTES_ISSET_ID, value);
    }

    public long getMemoryReservationInBytes()
    {
        return this.memoryReservationInBytes;
    }

    public ThriftTaskStatus setMemoryReservationInBytes(long memoryReservationInBytes)
    {
        this.memoryReservationInBytes = memoryReservationInBytes;
        setMemoryReservationInBytesIsSet(true);
        return this;
    }

    public void unsetMemoryReservationInBytes()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMORYRESERVATIONINBYTES_ISSET_ID);
    }

    /** Returns true if field memoryReservationInBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetMemoryReservationInBytes()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMORYRESERVATIONINBYTES_ISSET_ID);
    }

    public void setMemoryReservationInBytesIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMORYRESERVATIONINBYTES_ISSET_ID, value);
    }

    public long getSystemMemoryReservationInBytes()
    {
        return this.systemMemoryReservationInBytes;
    }

    public ThriftTaskStatus setSystemMemoryReservationInBytes(long systemMemoryReservationInBytes)
    {
        this.systemMemoryReservationInBytes = systemMemoryReservationInBytes;
        setSystemMemoryReservationInBytesIsSet(true);
        return this;
    }

    public void unsetSystemMemoryReservationInBytes()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYSTEMMEMORYRESERVATIONINBYTES_ISSET_ID);
    }

    /** Returns true if field systemMemoryReservationInBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemMemoryReservationInBytes()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYSTEMMEMORYRESERVATIONINBYTES_ISSET_ID);
    }

    public void setSystemMemoryReservationInBytesIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYSTEMMEMORYRESERVATIONINBYTES_ISSET_ID, value);
    }

    public long getPeakNodeTotalMemoryReservationInBytes()
    {
        return this.peakNodeTotalMemoryReservationInBytes;
    }

    public ThriftTaskStatus setPeakNodeTotalMemoryReservationInBytes(long peakNodeTotalMemoryReservationInBytes)
    {
        this.peakNodeTotalMemoryReservationInBytes = peakNodeTotalMemoryReservationInBytes;
        setPeakNodeTotalMemoryReservationInBytesIsSet(true);
        return this;
    }

    public void unsetPeakNodeTotalMemoryReservationInBytes()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PEAKNODETOTALMEMORYRESERVATIONINBYTES_ISSET_ID);
    }

    /** Returns true if field peakNodeTotalMemoryReservationInBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetPeakNodeTotalMemoryReservationInBytes()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PEAKNODETOTALMEMORYRESERVATIONINBYTES_ISSET_ID);
    }

    public void setPeakNodeTotalMemoryReservationInBytesIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PEAKNODETOTALMEMORYRESERVATIONINBYTES_ISSET_ID, value);
    }

    public long getFullGcCount()
    {
        return this.fullGcCount;
    }

    public ThriftTaskStatus setFullGcCount(long fullGcCount)
    {
        this.fullGcCount = fullGcCount;
        setFullGcCountIsSet(true);
        return this;
    }

    public void unsetFullGcCount()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FULLGCCOUNT_ISSET_ID);
    }

    /** Returns true if field fullGcCount is set (has been assigned a value) and false otherwise */
    public boolean isSetFullGcCount()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FULLGCCOUNT_ISSET_ID);
    }

    public void setFullGcCountIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FULLGCCOUNT_ISSET_ID, value);
    }

    public long getFullGcTimeInMillis()
    {
        return this.fullGcTimeInMillis;
    }

    public ThriftTaskStatus setFullGcTimeInMillis(long fullGcTimeInMillis)
    {
        this.fullGcTimeInMillis = fullGcTimeInMillis;
        setFullGcTimeInMillisIsSet(true);
        return this;
    }

    public void unsetFullGcTimeInMillis()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FULLGCTIMEINMILLIS_ISSET_ID);
    }

    /** Returns true if field fullGcTimeInMillis is set (has been assigned a value) and false otherwise */
    public boolean isSetFullGcTimeInMillis()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FULLGCTIMEINMILLIS_ISSET_ID);
    }

    public void setFullGcTimeInMillisIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FULLGCTIMEINMILLIS_ISSET_ID, value);
    }

    public long getTotalCpuTimeInNanos()
    {
        return this.totalCpuTimeInNanos;
    }

    public ThriftTaskStatus setTotalCpuTimeInNanos(long totalCpuTimeInNanos)
    {
        this.totalCpuTimeInNanos = totalCpuTimeInNanos;
        setTotalCpuTimeInNanosIsSet(true);
        return this;
    }

    public void unsetTotalCpuTimeInNanos()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALCPUTIMEINNANOS_ISSET_ID);
    }

    /** Returns true if field totalCpuTimeInNanos is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalCpuTimeInNanos()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALCPUTIMEINNANOS_ISSET_ID);
    }

    public void setTotalCpuTimeInNanosIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALCPUTIMEINNANOS_ISSET_ID, value);
    }

    public long getTaskAgeInMillis()
    {
        return this.taskAgeInMillis;
    }

    public ThriftTaskStatus setTaskAgeInMillis(long taskAgeInMillis)
    {
        this.taskAgeInMillis = taskAgeInMillis;
        setTaskAgeInMillisIsSet(true);
        return this;
    }

    public void unsetTaskAgeInMillis()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKAGEINMILLIS_ISSET_ID);
    }

    /** Returns true if field taskAgeInMillis is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskAgeInMillis()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKAGEINMILLIS_ISSET_ID);
    }

    public void setTaskAgeInMillisIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKAGEINMILLIS_ISSET_ID, value);
    }

    public long getQueuedPartitionedSplitsWeight()
    {
        return this.queuedPartitionedSplitsWeight;
    }

    public ThriftTaskStatus setQueuedPartitionedSplitsWeight(long queuedPartitionedSplitsWeight)
    {
        this.queuedPartitionedSplitsWeight = queuedPartitionedSplitsWeight;
        setQueuedPartitionedSplitsWeightIsSet(true);
        return this;
    }

    public void unsetQueuedPartitionedSplitsWeight()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUEUEDPARTITIONEDSPLITSWEIGHT_ISSET_ID);
    }

    /** Returns true if field queuedPartitionedSplitsWeight is set (has been assigned a value) and false otherwise */
    public boolean isSetQueuedPartitionedSplitsWeight()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUEUEDPARTITIONEDSPLITSWEIGHT_ISSET_ID);
    }

    public void setQueuedPartitionedSplitsWeightIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUEUEDPARTITIONEDSPLITSWEIGHT_ISSET_ID, value);
    }

    public long getRunningPartitionedSplitsWeight()
    {
        return this.runningPartitionedSplitsWeight;
    }

    public ThriftTaskStatus setRunningPartitionedSplitsWeight(long runningPartitionedSplitsWeight)
    {
        this.runningPartitionedSplitsWeight = runningPartitionedSplitsWeight;
        setRunningPartitionedSplitsWeightIsSet(true);
        return this;
    }

    public void unsetRunningPartitionedSplitsWeight()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNNINGPARTITIONEDSPLITSWEIGHT_ISSET_ID);
    }

    /** Returns true if field runningPartitionedSplitsWeight is set (has been assigned a value) and false otherwise */
    public boolean isSetRunningPartitionedSplitsWeight()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNNINGPARTITIONEDSPLITSWEIGHT_ISSET_ID);
    }

    public void setRunningPartitionedSplitsWeightIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNNINGPARTITIONEDSPLITSWEIGHT_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value)
    {
        switch (field) {
            case TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS:
                if (value == null) {
                    unsetTaskInstanceIdLeastSignificantBits();
                }
                else {
                    setTaskInstanceIdLeastSignificantBits((java.lang.Long) value);
                }
                break;

            case TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS:
                if (value == null) {
                    unsetTaskInstanceIdMostSignificantBits();
                }
                else {
                    setTaskInstanceIdMostSignificantBits((java.lang.Long) value);
                }
                break;

            case VERSION:
                if (value == null) {
                    unsetVersion();
                }
                else {
                    setVersion((java.lang.Long) value);
                }
                break;

            case STATE:
                if (value == null) {
                    unsetState();
                }
                else {
                    setState((ThriftTaskState) value);
                }
                break;

            case SELF:
                if (value == null) {
                    unsetSelf();
                }
                else {
                    setSelf((java.lang.String) value);
                }
                break;

            case COMPLETED_DRIVER_GROUPS:
                if (value == null) {
                    unsetCompletedDriverGroups();
                }
                else {
                    setCompletedDriverGroups((java.util.Set<ThriftLifespan>) value);
                }
                break;

            case FAILURES:
                if (value == null) {
                    unsetFailures();
                }
                else {
                    setFailures((java.util.List<ThriftExecutionFailureInfo>) value);
                }
                break;

            case QUEUED_PARTITIONED_DRIVERS:
                if (value == null) {
                    unsetQueuedPartitionedDrivers();
                }
                else {
                    setQueuedPartitionedDrivers((java.lang.Integer) value);
                }
                break;

            case RUNNING_PARTITIONED_DRIVERS:
                if (value == null) {
                    unsetRunningPartitionedDrivers();
                }
                else {
                    setRunningPartitionedDrivers((java.lang.Integer) value);
                }
                break;

            case OUTPUT_BUFFER_UTILIZATION:
                if (value == null) {
                    unsetOutputBufferUtilization();
                }
                else {
                    setOutputBufferUtilization((java.lang.Double) value);
                }
                break;

            case OUTPUT_BUFFER_OVERUTILIZED:
                if (value == null) {
                    unsetOutputBufferOverutilized();
                }
                else {
                    setOutputBufferOverutilized((java.lang.Boolean) value);
                }
                break;

            case PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES:
                if (value == null) {
                    unsetPhysicalWrittenDataSizeInBytes();
                }
                else {
                    setPhysicalWrittenDataSizeInBytes((java.lang.Long) value);
                }
                break;

            case MEMORY_RESERVATION_IN_BYTES:
                if (value == null) {
                    unsetMemoryReservationInBytes();
                }
                else {
                    setMemoryReservationInBytes((java.lang.Long) value);
                }
                break;

            case SYSTEM_MEMORY_RESERVATION_IN_BYTES:
                if (value == null) {
                    unsetSystemMemoryReservationInBytes();
                }
                else {
                    setSystemMemoryReservationInBytes((java.lang.Long) value);
                }
                break;

            case PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES:
                if (value == null) {
                    unsetPeakNodeTotalMemoryReservationInBytes();
                }
                else {
                    setPeakNodeTotalMemoryReservationInBytes((java.lang.Long) value);
                }
                break;

            case FULL_GC_COUNT:
                if (value == null) {
                    unsetFullGcCount();
                }
                else {
                    setFullGcCount((java.lang.Long) value);
                }
                break;

            case FULL_GC_TIME_IN_MILLIS:
                if (value == null) {
                    unsetFullGcTimeInMillis();
                }
                else {
                    setFullGcTimeInMillis((java.lang.Long) value);
                }
                break;

            case TOTAL_CPU_TIME_IN_NANOS:
                if (value == null) {
                    unsetTotalCpuTimeInNanos();
                }
                else {
                    setTotalCpuTimeInNanos((java.lang.Long) value);
                }
                break;

            case TASK_AGE_IN_MILLIS:
                if (value == null) {
                    unsetTaskAgeInMillis();
                }
                else {
                    setTaskAgeInMillis((java.lang.Long) value);
                }
                break;

            case QUEUED_PARTITIONED_SPLITS_WEIGHT:
                if (value == null) {
                    unsetQueuedPartitionedSplitsWeight();
                }
                else {
                    setQueuedPartitionedSplitsWeight((java.lang.Long) value);
                }
                break;

            case RUNNING_PARTITIONED_SPLITS_WEIGHT:
                if (value == null) {
                    unsetRunningPartitionedSplitsWeight();
                }
                else {
                    setRunningPartitionedSplitsWeight((java.lang.Long) value);
                }
                break;
        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field)
    {
        switch (field) {
            case TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS:
                return getTaskInstanceIdLeastSignificantBits();

            case TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS:
                return getTaskInstanceIdMostSignificantBits();

            case VERSION:
                return getVersion();

            case STATE:
                return getState();

            case SELF:
                return getSelf();

            case COMPLETED_DRIVER_GROUPS:
                return getCompletedDriverGroups();

            case FAILURES:
                return getFailures();

            case QUEUED_PARTITIONED_DRIVERS:
                return getQueuedPartitionedDrivers();

            case RUNNING_PARTITIONED_DRIVERS:
                return getRunningPartitionedDrivers();

            case OUTPUT_BUFFER_UTILIZATION:
                return getOutputBufferUtilization();

            case OUTPUT_BUFFER_OVERUTILIZED:
                return isOutputBufferOverutilized();

            case PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES:
                return getPhysicalWrittenDataSizeInBytes();

            case MEMORY_RESERVATION_IN_BYTES:
                return getMemoryReservationInBytes();

            case SYSTEM_MEMORY_RESERVATION_IN_BYTES:
                return getSystemMemoryReservationInBytes();

            case PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES:
                return getPeakNodeTotalMemoryReservationInBytes();

            case FULL_GC_COUNT:
                return getFullGcCount();

            case FULL_GC_TIME_IN_MILLIS:
                return getFullGcTimeInMillis();

            case TOTAL_CPU_TIME_IN_NANOS:
                return getTotalCpuTimeInNanos();

            case TASK_AGE_IN_MILLIS:
                return getTaskAgeInMillis();

            case QUEUED_PARTITIONED_SPLITS_WEIGHT:
                return getQueuedPartitionedSplitsWeight();

            case RUNNING_PARTITIONED_SPLITS_WEIGHT:
                return getRunningPartitionedSplitsWeight();
        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field)
    {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS:
                return isSetTaskInstanceIdLeastSignificantBits();
            case TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS:
                return isSetTaskInstanceIdMostSignificantBits();
            case VERSION:
                return isSetVersion();
            case STATE:
                return isSetState();
            case SELF:
                return isSetSelf();
            case COMPLETED_DRIVER_GROUPS:
                return isSetCompletedDriverGroups();
            case FAILURES:
                return isSetFailures();
            case QUEUED_PARTITIONED_DRIVERS:
                return isSetQueuedPartitionedDrivers();
            case RUNNING_PARTITIONED_DRIVERS:
                return isSetRunningPartitionedDrivers();
            case OUTPUT_BUFFER_UTILIZATION:
                return isSetOutputBufferUtilization();
            case OUTPUT_BUFFER_OVERUTILIZED:
                return isSetOutputBufferOverutilized();
            case PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES:
                return isSetPhysicalWrittenDataSizeInBytes();
            case MEMORY_RESERVATION_IN_BYTES:
                return isSetMemoryReservationInBytes();
            case SYSTEM_MEMORY_RESERVATION_IN_BYTES:
                return isSetSystemMemoryReservationInBytes();
            case PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES:
                return isSetPeakNodeTotalMemoryReservationInBytes();
            case FULL_GC_COUNT:
                return isSetFullGcCount();
            case FULL_GC_TIME_IN_MILLIS:
                return isSetFullGcTimeInMillis();
            case TOTAL_CPU_TIME_IN_NANOS:
                return isSetTotalCpuTimeInNanos();
            case TASK_AGE_IN_MILLIS:
                return isSetTaskAgeInMillis();
            case QUEUED_PARTITIONED_SPLITS_WEIGHT:
                return isSetQueuedPartitionedSplitsWeight();
            case RUNNING_PARTITIONED_SPLITS_WEIGHT:
                return isSetRunningPartitionedSplitsWeight();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that)
    {
      if (that instanceof ThriftTaskStatus) {
        return this.equals((ThriftTaskStatus) that);
      }
        return false;
    }

    public boolean equals(ThriftTaskStatus that)
    {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

        boolean this_present_taskInstanceIdLeastSignificantBits = true;
        boolean that_present_taskInstanceIdLeastSignificantBits = true;
        if (this_present_taskInstanceIdLeastSignificantBits || that_present_taskInstanceIdLeastSignificantBits) {
          if (!(this_present_taskInstanceIdLeastSignificantBits && that_present_taskInstanceIdLeastSignificantBits)) {
            return false;
          }
          if (this.taskInstanceIdLeastSignificantBits != that.taskInstanceIdLeastSignificantBits) {
            return false;
          }
        }

        boolean this_present_taskInstanceIdMostSignificantBits = true;
        boolean that_present_taskInstanceIdMostSignificantBits = true;
        if (this_present_taskInstanceIdMostSignificantBits || that_present_taskInstanceIdMostSignificantBits) {
          if (!(this_present_taskInstanceIdMostSignificantBits && that_present_taskInstanceIdMostSignificantBits)) {
            return false;
          }
          if (this.taskInstanceIdMostSignificantBits != that.taskInstanceIdMostSignificantBits) {
            return false;
          }
        }

        boolean this_present_version = true;
        boolean that_present_version = true;
        if (this_present_version || that_present_version) {
          if (!(this_present_version && that_present_version)) {
            return false;
          }
          if (this.version != that.version) {
            return false;
          }
        }

        boolean this_present_state = true && this.isSetState();
        boolean that_present_state = true && that.isSetState();
        if (this_present_state || that_present_state) {
          if (!(this_present_state && that_present_state)) {
            return false;
          }
          if (!this.state.equals(that.state)) {
            return false;
          }
        }

        boolean this_present_self = true && this.isSetSelf();
        boolean that_present_self = true && that.isSetSelf();
        if (this_present_self || that_present_self) {
          if (!(this_present_self && that_present_self)) {
            return false;
          }
          if (!this.self.equals(that.self)) {
            return false;
          }
        }

        boolean this_present_completedDriverGroups = true && this.isSetCompletedDriverGroups();
        boolean that_present_completedDriverGroups = true && that.isSetCompletedDriverGroups();
        if (this_present_completedDriverGroups || that_present_completedDriverGroups) {
          if (!(this_present_completedDriverGroups && that_present_completedDriverGroups)) {
            return false;
          }
          if (!this.completedDriverGroups.equals(that.completedDriverGroups)) {
            return false;
          }
        }

        boolean this_present_failures = true && this.isSetFailures();
        boolean that_present_failures = true && that.isSetFailures();
        if (this_present_failures || that_present_failures) {
          if (!(this_present_failures && that_present_failures)) {
            return false;
          }
          if (!this.failures.equals(that.failures)) {
            return false;
          }
        }

        boolean this_present_queuedPartitionedDrivers = true;
        boolean that_present_queuedPartitionedDrivers = true;
        if (this_present_queuedPartitionedDrivers || that_present_queuedPartitionedDrivers) {
          if (!(this_present_queuedPartitionedDrivers && that_present_queuedPartitionedDrivers)) {
            return false;
          }
          if (this.queuedPartitionedDrivers != that.queuedPartitionedDrivers) {
            return false;
          }
        }

        boolean this_present_runningPartitionedDrivers = true;
        boolean that_present_runningPartitionedDrivers = true;
        if (this_present_runningPartitionedDrivers || that_present_runningPartitionedDrivers) {
          if (!(this_present_runningPartitionedDrivers && that_present_runningPartitionedDrivers)) {
            return false;
          }
          if (this.runningPartitionedDrivers != that.runningPartitionedDrivers) {
            return false;
          }
        }

        boolean this_present_outputBufferUtilization = true;
        boolean that_present_outputBufferUtilization = true;
        if (this_present_outputBufferUtilization || that_present_outputBufferUtilization) {
          if (!(this_present_outputBufferUtilization && that_present_outputBufferUtilization)) {
            return false;
          }
          if (this.outputBufferUtilization != that.outputBufferUtilization) {
            return false;
          }
        }

        boolean this_present_outputBufferOverutilized = true;
        boolean that_present_outputBufferOverutilized = true;
        if (this_present_outputBufferOverutilized || that_present_outputBufferOverutilized) {
          if (!(this_present_outputBufferOverutilized && that_present_outputBufferOverutilized)) {
            return false;
          }
          if (this.outputBufferOverutilized != that.outputBufferOverutilized) {
            return false;
          }
        }

        boolean this_present_physicalWrittenDataSizeInBytes = true;
        boolean that_present_physicalWrittenDataSizeInBytes = true;
        if (this_present_physicalWrittenDataSizeInBytes || that_present_physicalWrittenDataSizeInBytes) {
          if (!(this_present_physicalWrittenDataSizeInBytes && that_present_physicalWrittenDataSizeInBytes)) {
            return false;
          }
          if (this.physicalWrittenDataSizeInBytes != that.physicalWrittenDataSizeInBytes) {
            return false;
          }
        }

        boolean this_present_memoryReservationInBytes = true;
        boolean that_present_memoryReservationInBytes = true;
        if (this_present_memoryReservationInBytes || that_present_memoryReservationInBytes) {
          if (!(this_present_memoryReservationInBytes && that_present_memoryReservationInBytes)) {
            return false;
          }
          if (this.memoryReservationInBytes != that.memoryReservationInBytes) {
            return false;
          }
        }

        boolean this_present_systemMemoryReservationInBytes = true;
        boolean that_present_systemMemoryReservationInBytes = true;
        if (this_present_systemMemoryReservationInBytes || that_present_systemMemoryReservationInBytes) {
          if (!(this_present_systemMemoryReservationInBytes && that_present_systemMemoryReservationInBytes)) {
            return false;
          }
          if (this.systemMemoryReservationInBytes != that.systemMemoryReservationInBytes) {
            return false;
          }
        }

        boolean this_present_peakNodeTotalMemoryReservationInBytes = true;
        boolean that_present_peakNodeTotalMemoryReservationInBytes = true;
        if (this_present_peakNodeTotalMemoryReservationInBytes || that_present_peakNodeTotalMemoryReservationInBytes) {
          if (!(this_present_peakNodeTotalMemoryReservationInBytes && that_present_peakNodeTotalMemoryReservationInBytes)) {
            return false;
          }
          if (this.peakNodeTotalMemoryReservationInBytes != that.peakNodeTotalMemoryReservationInBytes) {
            return false;
          }
        }

        boolean this_present_fullGcCount = true;
        boolean that_present_fullGcCount = true;
        if (this_present_fullGcCount || that_present_fullGcCount) {
          if (!(this_present_fullGcCount && that_present_fullGcCount)) {
            return false;
          }
          if (this.fullGcCount != that.fullGcCount) {
            return false;
          }
        }

        boolean this_present_fullGcTimeInMillis = true;
        boolean that_present_fullGcTimeInMillis = true;
        if (this_present_fullGcTimeInMillis || that_present_fullGcTimeInMillis) {
          if (!(this_present_fullGcTimeInMillis && that_present_fullGcTimeInMillis)) {
            return false;
          }
          if (this.fullGcTimeInMillis != that.fullGcTimeInMillis) {
            return false;
          }
        }

        boolean this_present_totalCpuTimeInNanos = true;
        boolean that_present_totalCpuTimeInNanos = true;
        if (this_present_totalCpuTimeInNanos || that_present_totalCpuTimeInNanos) {
          if (!(this_present_totalCpuTimeInNanos && that_present_totalCpuTimeInNanos)) {
            return false;
          }
          if (this.totalCpuTimeInNanos != that.totalCpuTimeInNanos) {
            return false;
          }
        }

        boolean this_present_taskAgeInMillis = true;
        boolean that_present_taskAgeInMillis = true;
        if (this_present_taskAgeInMillis || that_present_taskAgeInMillis) {
          if (!(this_present_taskAgeInMillis && that_present_taskAgeInMillis)) {
            return false;
          }
          if (this.taskAgeInMillis != that.taskAgeInMillis) {
            return false;
          }
        }

        boolean this_present_queuedPartitionedSplitsWeight = true;
        boolean that_present_queuedPartitionedSplitsWeight = true;
        if (this_present_queuedPartitionedSplitsWeight || that_present_queuedPartitionedSplitsWeight) {
          if (!(this_present_queuedPartitionedSplitsWeight && that_present_queuedPartitionedSplitsWeight)) {
            return false;
          }
          if (this.queuedPartitionedSplitsWeight != that.queuedPartitionedSplitsWeight) {
            return false;
          }
        }

        boolean this_present_runningPartitionedSplitsWeight = true;
        boolean that_present_runningPartitionedSplitsWeight = true;
        if (this_present_runningPartitionedSplitsWeight || that_present_runningPartitionedSplitsWeight) {
          if (!(this_present_runningPartitionedSplitsWeight && that_present_runningPartitionedSplitsWeight)) {
            return false;
          }
          if (this.runningPartitionedSplitsWeight != that.runningPartitionedSplitsWeight) {
            return false;
          }
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        int hashCode = 1;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(taskInstanceIdLeastSignificantBits);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(taskInstanceIdMostSignificantBits);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

        hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
      if (isSetState()) {
        hashCode = hashCode * 8191 + state.getValue();
      }

        hashCode = hashCode * 8191 + ((isSetSelf()) ? 131071 : 524287);
      if (isSetSelf()) {
        hashCode = hashCode * 8191 + self.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetCompletedDriverGroups()) ? 131071 : 524287);
      if (isSetCompletedDriverGroups()) {
        hashCode = hashCode * 8191 + completedDriverGroups.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetFailures()) ? 131071 : 524287);
      if (isSetFailures()) {
        hashCode = hashCode * 8191 + failures.hashCode();
      }

        hashCode = hashCode * 8191 + queuedPartitionedDrivers;

        hashCode = hashCode * 8191 + runningPartitionedDrivers;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outputBufferUtilization);

        hashCode = hashCode * 8191 + ((outputBufferOverutilized) ? 131071 : 524287);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(physicalWrittenDataSizeInBytes);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(memoryReservationInBytes);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(systemMemoryReservationInBytes);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(peakNodeTotalMemoryReservationInBytes);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fullGcCount);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fullGcTimeInMillis);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalCpuTimeInNanos);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(taskAgeInMillis);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queuedPartitionedSplitsWeight);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(runningPartitionedSplitsWeight);

        return hashCode;
    }

    @Override
    public int compareTo(ThriftTaskStatus other)
    {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetTaskInstanceIdLeastSignificantBits(), other.isSetTaskInstanceIdLeastSignificantBits());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTaskInstanceIdLeastSignificantBits()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskInstanceIdLeastSignificantBits, other.taskInstanceIdLeastSignificantBits);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetTaskInstanceIdMostSignificantBits(), other.isSetTaskInstanceIdMostSignificantBits());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTaskInstanceIdMostSignificantBits()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskInstanceIdMostSignificantBits, other.taskInstanceIdMostSignificantBits);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetVersion()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetState()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSelf(), other.isSetSelf());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSelf()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.self, other.self);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetCompletedDriverGroups(), other.isSetCompletedDriverGroups());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCompletedDriverGroups()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedDriverGroups, other.completedDriverGroups);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetFailures(), other.isSetFailures());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFailures()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failures, other.failures);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetQueuedPartitionedDrivers(), other.isSetQueuedPartitionedDrivers());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetQueuedPartitionedDrivers()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queuedPartitionedDrivers, other.queuedPartitionedDrivers);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetRunningPartitionedDrivers(), other.isSetRunningPartitionedDrivers());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRunningPartitionedDrivers()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runningPartitionedDrivers, other.runningPartitionedDrivers);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetOutputBufferUtilization(), other.isSetOutputBufferUtilization());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOutputBufferUtilization()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputBufferUtilization, other.outputBufferUtilization);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetOutputBufferOverutilized(), other.isSetOutputBufferOverutilized());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOutputBufferOverutilized()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputBufferOverutilized, other.outputBufferOverutilized);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetPhysicalWrittenDataSizeInBytes(), other.isSetPhysicalWrittenDataSizeInBytes());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPhysicalWrittenDataSizeInBytes()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.physicalWrittenDataSizeInBytes, other.physicalWrittenDataSizeInBytes);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetMemoryReservationInBytes(), other.isSetMemoryReservationInBytes());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMemoryReservationInBytes()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryReservationInBytes, other.memoryReservationInBytes);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSystemMemoryReservationInBytes(), other.isSetSystemMemoryReservationInBytes());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSystemMemoryReservationInBytes()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemMemoryReservationInBytes, other.systemMemoryReservationInBytes);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetPeakNodeTotalMemoryReservationInBytes(), other.isSetPeakNodeTotalMemoryReservationInBytes());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPeakNodeTotalMemoryReservationInBytes()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peakNodeTotalMemoryReservationInBytes, other.peakNodeTotalMemoryReservationInBytes);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetFullGcCount(), other.isSetFullGcCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFullGcCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullGcCount, other.fullGcCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetFullGcTimeInMillis(), other.isSetFullGcTimeInMillis());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFullGcTimeInMillis()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullGcTimeInMillis, other.fullGcTimeInMillis);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetTotalCpuTimeInNanos(), other.isSetTotalCpuTimeInNanos());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTotalCpuTimeInNanos()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCpuTimeInNanos, other.totalCpuTimeInNanos);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetTaskAgeInMillis(), other.isSetTaskAgeInMillis());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTaskAgeInMillis()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskAgeInMillis, other.taskAgeInMillis);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetQueuedPartitionedSplitsWeight(), other.isSetQueuedPartitionedSplitsWeight());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetQueuedPartitionedSplitsWeight()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queuedPartitionedSplitsWeight, other.queuedPartitionedSplitsWeight);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetRunningPartitionedSplitsWeight(), other.isSetRunningPartitionedSplitsWeight());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRunningPartitionedSplitsWeight()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runningPartitionedSplitsWeight, other.runningPartitionedSplitsWeight);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
    {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
    {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString()
    {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftTaskStatus(");
        boolean first = true;

        sb.append("taskInstanceIdLeastSignificantBits:");
        sb.append(this.taskInstanceIdLeastSignificantBits);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("taskInstanceIdMostSignificantBits:");
        sb.append(this.taskInstanceIdMostSignificantBits);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("version:");
        sb.append(this.version);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("state:");
        if (this.state == null) {
            sb.append("null");
        }
        else {
            sb.append(this.state);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("self:");
        if (this.self == null) {
            sb.append("null");
        }
        else {
            sb.append(this.self);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("completedDriverGroups:");
        if (this.completedDriverGroups == null) {
            sb.append("null");
        }
        else {
            sb.append(this.completedDriverGroups);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("failures:");
        if (this.failures == null) {
            sb.append("null");
        }
        else {
            sb.append(this.failures);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("queuedPartitionedDrivers:");
        sb.append(this.queuedPartitionedDrivers);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("runningPartitionedDrivers:");
        sb.append(this.runningPartitionedDrivers);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("outputBufferUtilization:");
        sb.append(this.outputBufferUtilization);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("outputBufferOverutilized:");
        sb.append(this.outputBufferOverutilized);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("physicalWrittenDataSizeInBytes:");
        sb.append(this.physicalWrittenDataSizeInBytes);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("memoryReservationInBytes:");
        sb.append(this.memoryReservationInBytes);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("systemMemoryReservationInBytes:");
        sb.append(this.systemMemoryReservationInBytes);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("peakNodeTotalMemoryReservationInBytes:");
        sb.append(this.peakNodeTotalMemoryReservationInBytes);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("fullGcCount:");
        sb.append(this.fullGcCount);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("fullGcTimeInMillis:");
        sb.append(this.fullGcTimeInMillis);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("totalCpuTimeInNanos:");
        sb.append(this.totalCpuTimeInNanos);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("taskAgeInMillis:");
        sb.append(this.taskAgeInMillis);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("queuedPartitionedSplitsWeight:");
        sb.append(this.queuedPartitionedSplitsWeight);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("runningPartitionedSplitsWeight:");
        sb.append(this.runningPartitionedSplitsWeight);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate()
            throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out)
            throws java.io.IOException
    {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, java.lang.ClassNotFoundException
    {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftTaskStatusStandardSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftTaskStatusStandardScheme getScheme()
        {
            return new ThriftTaskStatusStandardScheme();
        }
    }

    private static class ThriftTaskStatusStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<ThriftTaskStatus>
    {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftTaskStatus struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.taskInstanceIdLeastSignificantBits = iprot.readI64();
                            struct.setTaskInstanceIdLeastSignificantBitsIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.taskInstanceIdMostSignificantBits = iprot.readI64();
                            struct.setTaskInstanceIdMostSignificantBitsIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // VERSION
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.version = iprot.readI64();
                            struct.setVersionIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // STATE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.state = ThriftTaskState.findByValue(iprot.readI32());
                            struct.setStateIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // SELF
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.self = iprot.readString();
                            struct.setSelfIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // COMPLETED_DRIVER_GROUPS
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                                struct.completedDriverGroups = new java.util.HashSet<ThriftLifespan>(2 * _set16.size);
                                @org.apache.thrift.annotation.Nullable ThriftLifespan _elem17;
                                for (int _i18 = 0; _i18 < _set16.size; ++_i18) {
                                    _elem17 = new ThriftLifespan();
                                    _elem17.read(iprot);
                                    struct.completedDriverGroups.add(_elem17);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setCompletedDriverGroupsIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // FAILURES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                                struct.failures = new java.util.ArrayList<ThriftExecutionFailureInfo>(_list19.size);
                                @org.apache.thrift.annotation.Nullable ThriftExecutionFailureInfo _elem20;
                                for (int _i21 = 0; _i21 < _list19.size; ++_i21) {
                                    _elem20 = new ThriftExecutionFailureInfo();
                                    _elem20.read(iprot);
                                    struct.failures.add(_elem20);
                                }
                                iprot.readListEnd();
                            }
                            struct.setFailuresIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // QUEUED_PARTITIONED_DRIVERS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.queuedPartitionedDrivers = iprot.readI32();
                            struct.setQueuedPartitionedDriversIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // RUNNING_PARTITIONED_DRIVERS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.runningPartitionedDrivers = iprot.readI32();
                            struct.setRunningPartitionedDriversIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // OUTPUT_BUFFER_UTILIZATION
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.outputBufferUtilization = iprot.readDouble();
                            struct.setOutputBufferUtilizationIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // OUTPUT_BUFFER_OVERUTILIZED
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.outputBufferOverutilized = iprot.readBool();
                            struct.setOutputBufferOverutilizedIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.physicalWrittenDataSizeInBytes = iprot.readI64();
                            struct.setPhysicalWrittenDataSizeInBytesIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // MEMORY_RESERVATION_IN_BYTES
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.memoryReservationInBytes = iprot.readI64();
                            struct.setMemoryReservationInBytesIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 14: // SYSTEM_MEMORY_RESERVATION_IN_BYTES
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.systemMemoryReservationInBytes = iprot.readI64();
                            struct.setSystemMemoryReservationInBytesIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 15: // PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.peakNodeTotalMemoryReservationInBytes = iprot.readI64();
                            struct.setPeakNodeTotalMemoryReservationInBytesIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 16: // FULL_GC_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.fullGcCount = iprot.readI64();
                            struct.setFullGcCountIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 17: // FULL_GC_TIME_IN_MILLIS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.fullGcTimeInMillis = iprot.readI64();
                            struct.setFullGcTimeInMillisIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 18: // TOTAL_CPU_TIME_IN_NANOS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.totalCpuTimeInNanos = iprot.readI64();
                            struct.setTotalCpuTimeInNanosIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 19: // TASK_AGE_IN_MILLIS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.taskAgeInMillis = iprot.readI64();
                            struct.setTaskAgeInMillisIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 20: // QUEUED_PARTITIONED_SPLITS_WEIGHT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.queuedPartitionedSplitsWeight = iprot.readI64();
                            struct.setQueuedPartitionedSplitsWeightIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 21: // RUNNING_PARTITIONED_SPLITS_WEIGHT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.runningPartitionedSplitsWeight = iprot.readI64();
                            struct.setRunningPartitionedSplitsWeightIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftTaskStatus struct)
                throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(TASK_INSTANCE_ID_LEAST_SIGNIFICANT_BITS_FIELD_DESC);
            oprot.writeI64(struct.taskInstanceIdLeastSignificantBits);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TASK_INSTANCE_ID_MOST_SIGNIFICANT_BITS_FIELD_DESC);
            oprot.writeI64(struct.taskInstanceIdMostSignificantBits);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(VERSION_FIELD_DESC);
            oprot.writeI64(struct.version);
            oprot.writeFieldEnd();
            if (struct.state != null) {
                oprot.writeFieldBegin(STATE_FIELD_DESC);
                oprot.writeI32(struct.state.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.self != null) {
                oprot.writeFieldBegin(SELF_FIELD_DESC);
                oprot.writeString(struct.self);
                oprot.writeFieldEnd();
            }
            if (struct.completedDriverGroups != null) {
                oprot.writeFieldBegin(COMPLETED_DRIVER_GROUPS_FIELD_DESC);
                {
                    oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.completedDriverGroups.size()));
                    for (ThriftLifespan _iter22 : struct.completedDriverGroups) {
                        _iter22.write(oprot);
                    }
                    oprot.writeSetEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.failures != null) {
                oprot.writeFieldBegin(FAILURES_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.failures.size()));
                    for (ThriftExecutionFailureInfo _iter23 : struct.failures) {
                        _iter23.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(QUEUED_PARTITIONED_DRIVERS_FIELD_DESC);
            oprot.writeI32(struct.queuedPartitionedDrivers);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(RUNNING_PARTITIONED_DRIVERS_FIELD_DESC);
            oprot.writeI32(struct.runningPartitionedDrivers);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(OUTPUT_BUFFER_UTILIZATION_FIELD_DESC);
            oprot.writeDouble(struct.outputBufferUtilization);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(OUTPUT_BUFFER_OVERUTILIZED_FIELD_DESC);
            oprot.writeBool(struct.outputBufferOverutilized);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(PHYSICAL_WRITTEN_DATA_SIZE_IN_BYTES_FIELD_DESC);
            oprot.writeI64(struct.physicalWrittenDataSizeInBytes);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(MEMORY_RESERVATION_IN_BYTES_FIELD_DESC);
            oprot.writeI64(struct.memoryReservationInBytes);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(SYSTEM_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC);
            oprot.writeI64(struct.systemMemoryReservationInBytes);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(PEAK_NODE_TOTAL_MEMORY_RESERVATION_IN_BYTES_FIELD_DESC);
            oprot.writeI64(struct.peakNodeTotalMemoryReservationInBytes);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(FULL_GC_COUNT_FIELD_DESC);
            oprot.writeI64(struct.fullGcCount);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(FULL_GC_TIME_IN_MILLIS_FIELD_DESC);
            oprot.writeI64(struct.fullGcTimeInMillis);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TOTAL_CPU_TIME_IN_NANOS_FIELD_DESC);
            oprot.writeI64(struct.totalCpuTimeInNanos);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TASK_AGE_IN_MILLIS_FIELD_DESC);
            oprot.writeI64(struct.taskAgeInMillis);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(QUEUED_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC);
            oprot.writeI64(struct.queuedPartitionedSplitsWeight);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(RUNNING_PARTITIONED_SPLITS_WEIGHT_FIELD_DESC);
            oprot.writeI64(struct.runningPartitionedSplitsWeight);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class ThriftTaskStatusTupleSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftTaskStatusTupleScheme getScheme()
        {
            return new ThriftTaskStatusTupleScheme();
        }
    }

    private static class ThriftTaskStatusTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<ThriftTaskStatus>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftTaskStatus struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetTaskInstanceIdLeastSignificantBits()) {
                optionals.set(0);
            }
            if (struct.isSetTaskInstanceIdMostSignificantBits()) {
                optionals.set(1);
            }
            if (struct.isSetVersion()) {
                optionals.set(2);
            }
            if (struct.isSetState()) {
                optionals.set(3);
            }
            if (struct.isSetSelf()) {
                optionals.set(4);
            }
            if (struct.isSetCompletedDriverGroups()) {
                optionals.set(5);
            }
            if (struct.isSetFailures()) {
                optionals.set(6);
            }
            if (struct.isSetQueuedPartitionedDrivers()) {
                optionals.set(7);
            }
            if (struct.isSetRunningPartitionedDrivers()) {
                optionals.set(8);
            }
            if (struct.isSetOutputBufferUtilization()) {
                optionals.set(9);
            }
            if (struct.isSetOutputBufferOverutilized()) {
                optionals.set(10);
            }
            if (struct.isSetPhysicalWrittenDataSizeInBytes()) {
                optionals.set(11);
            }
            if (struct.isSetMemoryReservationInBytes()) {
                optionals.set(12);
            }
            if (struct.isSetSystemMemoryReservationInBytes()) {
                optionals.set(13);
            }
            if (struct.isSetPeakNodeTotalMemoryReservationInBytes()) {
                optionals.set(14);
            }
            if (struct.isSetFullGcCount()) {
                optionals.set(15);
            }
            if (struct.isSetFullGcTimeInMillis()) {
                optionals.set(16);
            }
            if (struct.isSetTotalCpuTimeInNanos()) {
                optionals.set(17);
            }
            if (struct.isSetTaskAgeInMillis()) {
                optionals.set(18);
            }
            if (struct.isSetQueuedPartitionedSplitsWeight()) {
                optionals.set(19);
            }
            if (struct.isSetRunningPartitionedSplitsWeight()) {
                optionals.set(20);
            }
            oprot.writeBitSet(optionals, 21);
            if (struct.isSetTaskInstanceIdLeastSignificantBits()) {
                oprot.writeI64(struct.taskInstanceIdLeastSignificantBits);
            }
            if (struct.isSetTaskInstanceIdMostSignificantBits()) {
                oprot.writeI64(struct.taskInstanceIdMostSignificantBits);
            }
            if (struct.isSetVersion()) {
                oprot.writeI64(struct.version);
            }
            if (struct.isSetState()) {
                oprot.writeI32(struct.state.getValue());
            }
            if (struct.isSetSelf()) {
                oprot.writeString(struct.self);
            }
            if (struct.isSetCompletedDriverGroups()) {
                {
                    oprot.writeI32(struct.completedDriverGroups.size());
                    for (ThriftLifespan _iter24 : struct.completedDriverGroups) {
                        _iter24.write(oprot);
                    }
                }
            }
            if (struct.isSetFailures()) {
                {
                    oprot.writeI32(struct.failures.size());
                    for (ThriftExecutionFailureInfo _iter25 : struct.failures) {
                        _iter25.write(oprot);
                    }
                }
            }
            if (struct.isSetQueuedPartitionedDrivers()) {
                oprot.writeI32(struct.queuedPartitionedDrivers);
            }
            if (struct.isSetRunningPartitionedDrivers()) {
                oprot.writeI32(struct.runningPartitionedDrivers);
            }
            if (struct.isSetOutputBufferUtilization()) {
                oprot.writeDouble(struct.outputBufferUtilization);
            }
            if (struct.isSetOutputBufferOverutilized()) {
                oprot.writeBool(struct.outputBufferOverutilized);
            }
            if (struct.isSetPhysicalWrittenDataSizeInBytes()) {
                oprot.writeI64(struct.physicalWrittenDataSizeInBytes);
            }
            if (struct.isSetMemoryReservationInBytes()) {
                oprot.writeI64(struct.memoryReservationInBytes);
            }
            if (struct.isSetSystemMemoryReservationInBytes()) {
                oprot.writeI64(struct.systemMemoryReservationInBytes);
            }
            if (struct.isSetPeakNodeTotalMemoryReservationInBytes()) {
                oprot.writeI64(struct.peakNodeTotalMemoryReservationInBytes);
            }
            if (struct.isSetFullGcCount()) {
                oprot.writeI64(struct.fullGcCount);
            }
            if (struct.isSetFullGcTimeInMillis()) {
                oprot.writeI64(struct.fullGcTimeInMillis);
            }
            if (struct.isSetTotalCpuTimeInNanos()) {
                oprot.writeI64(struct.totalCpuTimeInNanos);
            }
            if (struct.isSetTaskAgeInMillis()) {
                oprot.writeI64(struct.taskAgeInMillis);
            }
            if (struct.isSetQueuedPartitionedSplitsWeight()) {
                oprot.writeI64(struct.queuedPartitionedSplitsWeight);
            }
            if (struct.isSetRunningPartitionedSplitsWeight()) {
                oprot.writeI64(struct.runningPartitionedSplitsWeight);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftTaskStatus struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(21);
            if (incoming.get(0)) {
                struct.taskInstanceIdLeastSignificantBits = iprot.readI64();
                struct.setTaskInstanceIdLeastSignificantBitsIsSet(true);
            }
            if (incoming.get(1)) {
                struct.taskInstanceIdMostSignificantBits = iprot.readI64();
                struct.setTaskInstanceIdMostSignificantBitsIsSet(true);
            }
            if (incoming.get(2)) {
                struct.version = iprot.readI64();
                struct.setVersionIsSet(true);
            }
            if (incoming.get(3)) {
                struct.state = ThriftTaskState.findByValue(iprot.readI32());
                struct.setStateIsSet(true);
            }
            if (incoming.get(4)) {
                struct.self = iprot.readString();
                struct.setSelfIsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TSet _set26 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.completedDriverGroups = new java.util.HashSet<ThriftLifespan>(2 * _set26.size);
                    @org.apache.thrift.annotation.Nullable ThriftLifespan _elem27;
                    for (int _i28 = 0; _i28 < _set26.size; ++_i28) {
                        _elem27 = new ThriftLifespan();
                        _elem27.read(iprot);
                        struct.completedDriverGroups.add(_elem27);
                    }
                }
                struct.setCompletedDriverGroupsIsSet(true);
            }
            if (incoming.get(6)) {
                {
                    org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.failures = new java.util.ArrayList<ThriftExecutionFailureInfo>(_list29.size);
                    @org.apache.thrift.annotation.Nullable ThriftExecutionFailureInfo _elem30;
                    for (int _i31 = 0; _i31 < _list29.size; ++_i31) {
                        _elem30 = new ThriftExecutionFailureInfo();
                        _elem30.read(iprot);
                        struct.failures.add(_elem30);
                    }
                }
                struct.setFailuresIsSet(true);
            }
            if (incoming.get(7)) {
                struct.queuedPartitionedDrivers = iprot.readI32();
                struct.setQueuedPartitionedDriversIsSet(true);
            }
            if (incoming.get(8)) {
                struct.runningPartitionedDrivers = iprot.readI32();
                struct.setRunningPartitionedDriversIsSet(true);
            }
            if (incoming.get(9)) {
                struct.outputBufferUtilization = iprot.readDouble();
                struct.setOutputBufferUtilizationIsSet(true);
            }
            if (incoming.get(10)) {
                struct.outputBufferOverutilized = iprot.readBool();
                struct.setOutputBufferOverutilizedIsSet(true);
            }
            if (incoming.get(11)) {
                struct.physicalWrittenDataSizeInBytes = iprot.readI64();
                struct.setPhysicalWrittenDataSizeInBytesIsSet(true);
            }
            if (incoming.get(12)) {
                struct.memoryReservationInBytes = iprot.readI64();
                struct.setMemoryReservationInBytesIsSet(true);
            }
            if (incoming.get(13)) {
                struct.systemMemoryReservationInBytes = iprot.readI64();
                struct.setSystemMemoryReservationInBytesIsSet(true);
            }
            if (incoming.get(14)) {
                struct.peakNodeTotalMemoryReservationInBytes = iprot.readI64();
                struct.setPeakNodeTotalMemoryReservationInBytesIsSet(true);
            }
            if (incoming.get(15)) {
                struct.fullGcCount = iprot.readI64();
                struct.setFullGcCountIsSet(true);
            }
            if (incoming.get(16)) {
                struct.fullGcTimeInMillis = iprot.readI64();
                struct.setFullGcTimeInMillisIsSet(true);
            }
            if (incoming.get(17)) {
                struct.totalCpuTimeInNanos = iprot.readI64();
                struct.setTotalCpuTimeInNanosIsSet(true);
            }
            if (incoming.get(18)) {
                struct.taskAgeInMillis = iprot.readI64();
                struct.setTaskAgeInMillisIsSet(true);
            }
            if (incoming.get(19)) {
                struct.queuedPartitionedSplitsWeight = iprot.readI64();
                struct.setQueuedPartitionedSplitsWeightIsSet(true);
            }
            if (incoming.get(20)) {
                struct.runningPartitionedSplitsWeight = iprot.readI64();
                struct.setRunningPartitionedSplitsWeightIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
    {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

