/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.21.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.facebook.presto.experimental.auto_gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-03-13")
public class ThriftErrorCode
        implements org.apache.thrift.TBase<ThriftErrorCode, ThriftErrorCode._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftErrorCode>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftErrorCode");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField RETRIABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("retriable", org.apache.thrift.protocol.TType.BOOL, (short) 4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftErrorCodeStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftErrorCodeTupleSchemeFactory();

    public int code; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    /**
     *
     * @see ThriftErrorType
     */
    public @org.apache.thrift.annotation.Nullable ThriftErrorType type; // required
    public boolean retriable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields
            implements org.apache.thrift.TFieldIdEnum
    {
        CODE((short) 1, "code"),
        NAME((short) 2, "name"),
        /**
         *
         * @see ThriftErrorType
         */
        TYPE((short) 3, "type"),
        RETRIABLE((short) 4, "retriable");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId) {
                case 1: // CODE
                    return CODE;
                case 2: // NAME
                    return NAME;
                case 3: // TYPE
                    return TYPE;
                case 4: // RETRIABLE
                    return RETRIABLE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
          if (fields == null) {
            throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
          }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId()
        {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __CODE_ISSET_ID = 0;
    private static final int __RETRIABLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftErrorType.class)));
        tmpMap.put(_Fields.RETRIABLE, new org.apache.thrift.meta_data.FieldMetaData("retriable", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftErrorCode.class, metaDataMap);
    }

    public ThriftErrorCode()
    {
    }

    public ThriftErrorCode(
            int code,
            java.lang.String name,
            ThriftErrorType type,
            boolean retriable)
    {
        this();
        this.code = code;
        setCodeIsSet(true);
        this.name = name;
        this.type = type;
        this.retriable = retriable;
        setRetriableIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftErrorCode(ThriftErrorCode other)
    {
        __isset_bitfield = other.__isset_bitfield;
        this.code = other.code;
        if (other.isSetName()) {
            this.name = other.name;
        }
        if (other.isSetType()) {
            this.type = other.type;
        }
        this.retriable = other.retriable;
    }

    @Override
    public ThriftErrorCode deepCopy()
    {
        return new ThriftErrorCode(this);
    }

    @Override
    public void clear()
    {
        setCodeIsSet(false);
        this.code = 0;
        this.name = null;
        this.type = null;
        setRetriableIsSet(false);
        this.retriable = false;
    }

    public int getCode()
    {
        return this.code;
    }

    public ThriftErrorCode setCode(int code)
    {
        this.code = code;
        setCodeIsSet(true);
        return this;
    }

    public void unsetCode()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
    }

    public void setCodeIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName()
    {
        return this.name;
    }

    public ThriftErrorCode setName(@org.apache.thrift.annotation.Nullable java.lang.String name)
    {
        this.name = name;
        return this;
    }

    public void unsetName()
    {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName()
    {
        return this.name != null;
    }

    public void setNameIsSet(boolean value)
    {
        if (!value) {
            this.name = null;
        }
    }

    /**
     *
     * @see ThriftErrorType
     */
    @org.apache.thrift.annotation.Nullable
    public ThriftErrorType getType()
    {
        return this.type;
    }

    /**
     *
     * @see ThriftErrorType
     */
    public ThriftErrorCode setType(@org.apache.thrift.annotation.Nullable ThriftErrorType type)
    {
        this.type = type;
        return this;
    }

    public void unsetType()
    {
        this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType()
    {
        return this.type != null;
    }

    public void setTypeIsSet(boolean value)
    {
        if (!value) {
            this.type = null;
        }
    }

    public boolean isRetriable()
    {
        return this.retriable;
    }

    public ThriftErrorCode setRetriable(boolean retriable)
    {
        this.retriable = retriable;
        setRetriableIsSet(true);
        return this;
    }

    public void unsetRetriable()
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETRIABLE_ISSET_ID);
    }

    /** Returns true if field retriable is set (has been assigned a value) and false otherwise */
    public boolean isSetRetriable()
    {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETRIABLE_ISSET_ID);
    }

    public void setRetriableIsSet(boolean value)
    {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETRIABLE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value)
    {
        switch (field) {
            case CODE:
                if (value == null) {
                    unsetCode();
                }
                else {
                    setCode((java.lang.Integer) value);
                }
                break;

            case NAME:
                if (value == null) {
                    unsetName();
                }
                else {
                    setName((java.lang.String) value);
                }
                break;

            case TYPE:
                if (value == null) {
                    unsetType();
                }
                else {
                    setType((ThriftErrorType) value);
                }
                break;

            case RETRIABLE:
                if (value == null) {
                    unsetRetriable();
                }
                else {
                    setRetriable((java.lang.Boolean) value);
                }
                break;
        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field)
    {
        switch (field) {
            case CODE:
                return getCode();

            case NAME:
                return getName();

            case TYPE:
                return getType();

            case RETRIABLE:
                return isRetriable();
        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field)
    {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case CODE:
                return isSetCode();
            case NAME:
                return isSetName();
            case TYPE:
                return isSetType();
            case RETRIABLE:
                return isSetRetriable();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that)
    {
      if (that instanceof ThriftErrorCode) {
        return this.equals((ThriftErrorCode) that);
      }
        return false;
    }

    public boolean equals(ThriftErrorCode that)
    {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

        boolean this_present_code = true;
        boolean that_present_code = true;
        if (this_present_code || that_present_code) {
          if (!(this_present_code && that_present_code)) {
            return false;
          }
          if (this.code != that.code) {
            return false;
          }
        }

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
          if (!(this_present_name && that_present_name)) {
            return false;
          }
          if (!this.name.equals(that.name)) {
            return false;
          }
        }

        boolean this_present_type = true && this.isSetType();
        boolean that_present_type = true && that.isSetType();
        if (this_present_type || that_present_type) {
          if (!(this_present_type && that_present_type)) {
            return false;
          }
          if (!this.type.equals(that.type)) {
            return false;
          }
        }

        boolean this_present_retriable = true;
        boolean that_present_retriable = true;
        if (this_present_retriable || that_present_retriable) {
          if (!(this_present_retriable && that_present_retriable)) {
            return false;
          }
          if (this.retriable != that.retriable) {
            return false;
          }
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        int hashCode = 1;

        hashCode = hashCode * 8191 + code;

        hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName()) {
        hashCode = hashCode * 8191 + name.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType()) {
        hashCode = hashCode * 8191 + type.getValue();
      }

        hashCode = hashCode * 8191 + ((retriable) ? 131071 : 524287);

        return hashCode;
    }

    @Override
    public int compareTo(ThriftErrorCode other)
    {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetCode(), other.isSetCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetRetriable(), other.isSetRetriable());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRetriable()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retriable, other.retriable);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
    {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
    {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString()
    {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftErrorCode(");
        boolean first = true;

        sb.append("code:");
        sb.append(this.code);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        }
        else {
            sb.append(this.name);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("type:");
        if (this.type == null) {
            sb.append("null");
        }
        else {
            sb.append(this.type);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("retriable:");
        sb.append(this.retriable);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate()
            throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out)
            throws java.io.IOException
    {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, java.lang.ClassNotFoundException
    {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftErrorCodeStandardSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftErrorCodeStandardScheme getScheme()
        {
            return new ThriftErrorCodeStandardScheme();
        }
    }

    private static class ThriftErrorCodeStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<ThriftErrorCode>
    {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftErrorCode struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.code = iprot.readI32();
                            struct.setCodeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.type = ThriftErrorType.findByValue(iprot.readI32());
                            struct.setTypeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // RETRIABLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.retriable = iprot.readBool();
                            struct.setRetriableIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftErrorCode struct)
                throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(CODE_FIELD_DESC);
            oprot.writeI32(struct.code);
            oprot.writeFieldEnd();
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.type != null) {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type.getValue());
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(RETRIABLE_FIELD_DESC);
            oprot.writeBool(struct.retriable);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class ThriftErrorCodeTupleSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftErrorCodeTupleScheme getScheme()
        {
            return new ThriftErrorCodeTupleScheme();
        }
    }

    private static class ThriftErrorCodeTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<ThriftErrorCode>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftErrorCode struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetCode()) {
                optionals.set(0);
            }
            if (struct.isSetName()) {
                optionals.set(1);
            }
            if (struct.isSetType()) {
                optionals.set(2);
            }
            if (struct.isSetRetriable()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetCode()) {
                oprot.writeI32(struct.code);
            }
            if (struct.isSetName()) {
                oprot.writeString(struct.name);
            }
            if (struct.isSetType()) {
                oprot.writeI32(struct.type.getValue());
            }
            if (struct.isSetRetriable()) {
                oprot.writeBool(struct.retriable);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftErrorCode struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.code = iprot.readI32();
                struct.setCodeIsSet(true);
            }
            if (incoming.get(1)) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.type = ThriftErrorType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
            }
            if (incoming.get(3)) {
                struct.retriable = iprot.readBool();
                struct.setRetriableIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
    {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

