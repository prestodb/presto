/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.21.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.facebook.presto.experimental.auto_gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-03-13")
public class ThriftExecutionFailureInfo
        implements org.apache.thrift.TBase<ThriftExecutionFailureInfo, ThriftExecutionFailureInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftExecutionFailureInfo>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftExecutionFailureInfo");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField CAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("cause", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
    private static final org.apache.thrift.protocol.TField SUPPRESSED_FIELD_DESC = new org.apache.thrift.protocol.TField("suppressed", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final org.apache.thrift.protocol.TField STACK_FIELD_DESC = new org.apache.thrift.protocol.TField("stack", org.apache.thrift.protocol.TType.LIST, (short) 5);
    private static final org.apache.thrift.protocol.TField ERROR_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("errorLocation", org.apache.thrift.protocol.TType.STRUCT, (short) 6);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.STRUCT, (short) 7);
    private static final org.apache.thrift.protocol.TField REMOTE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteHost", org.apache.thrift.protocol.TType.STRUCT, (short) 8);
    private static final org.apache.thrift.protocol.TField ERROR_CAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCause", org.apache.thrift.protocol.TType.I32, (short) 9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftExecutionFailureInfoStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftExecutionFailureInfoTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String type; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String message; // required
    public @org.apache.thrift.annotation.Nullable ThriftExecutionFailureInfo cause; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<ThriftExecutionFailureInfo> suppressed; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> stack; // required
    public @org.apache.thrift.annotation.Nullable ThriftErrorLocation errorLocation; // required
    public @org.apache.thrift.annotation.Nullable ThriftErrorCode errorCode; // required
    public @org.apache.thrift.annotation.Nullable ThriftHostAddress remoteHost; // required
    /**
     *
     * @see ThriftErrorCause
     */
    public @org.apache.thrift.annotation.Nullable ThriftErrorCause errorCause; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields
            implements org.apache.thrift.TFieldIdEnum
    {
        TYPE((short) 1, "type"),
        MESSAGE((short) 2, "message"),
        CAUSE((short) 3, "cause"),
        SUPPRESSED((short) 4, "suppressed"),
        STACK((short) 5, "stack"),
        ERROR_LOCATION((short) 6, "errorLocation"),
        ERROR_CODE((short) 7, "errorCode"),
        REMOTE_HOST((short) 8, "remoteHost"),
        /**
         *
         * @see ThriftErrorCause
         */
        ERROR_CAUSE((short) 9, "errorCause");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId) {
                case 1: // TYPE
                    return TYPE;
                case 2: // MESSAGE
                    return MESSAGE;
                case 3: // CAUSE
                    return CAUSE;
                case 4: // SUPPRESSED
                    return SUPPRESSED;
                case 5: // STACK
                    return STACK;
                case 6: // ERROR_LOCATION
                    return ERROR_LOCATION;
                case 7: // ERROR_CODE
                    return ERROR_CODE;
                case 8: // REMOTE_HOST
                    return REMOTE_HOST;
                case 9: // ERROR_CAUSE
                    return ERROR_CAUSE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
          if (fields == null) {
            throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
          }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId()
        {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.CAUSE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CAUSE, new org.apache.thrift.meta_data.FieldMetaData("cause", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftExecutionFailureInfo.class)));
        tmpMap.put(_Fields.SUPPRESSED, new org.apache.thrift.meta_data.FieldMetaData("suppressed", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftExecutionFailureInfo.class))));
        tmpMap.put(_Fields.STACK, new org.apache.thrift.meta_data.FieldMetaData("stack", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.ERROR_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("errorLocation", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftErrorLocation.class)));
        tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftErrorCode.class)));
        tmpMap.put(_Fields.REMOTE_HOST, new org.apache.thrift.meta_data.FieldMetaData("remoteHost", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftHostAddress.class)));
        tmpMap.put(_Fields.ERROR_CAUSE, new org.apache.thrift.meta_data.FieldMetaData("errorCause", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftErrorCause.class)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftExecutionFailureInfo.class, metaDataMap);
    }

    public ThriftExecutionFailureInfo()
    {
    }

    public ThriftExecutionFailureInfo(
            java.lang.String type,
            java.lang.String message,
            java.util.List<ThriftExecutionFailureInfo> suppressed,
            java.util.List<java.lang.String> stack,
            ThriftErrorLocation errorLocation,
            ThriftErrorCode errorCode,
            ThriftHostAddress remoteHost,
            ThriftErrorCause errorCause)
    {
        this();
        this.type = type;
        this.message = message;
        this.suppressed = suppressed;
        this.stack = stack;
        this.errorLocation = errorLocation;
        this.errorCode = errorCode;
        this.remoteHost = remoteHost;
        this.errorCause = errorCause;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftExecutionFailureInfo(ThriftExecutionFailureInfo other)
    {
        if (other.isSetType()) {
            this.type = other.type;
        }
        if (other.isSetMessage()) {
            this.message = other.message;
        }
        if (other.isSetCause()) {
            this.cause = new ThriftExecutionFailureInfo(other.cause);
        }
        if (other.isSetSuppressed()) {
            java.util.List<ThriftExecutionFailureInfo> __this__suppressed = new java.util.ArrayList<ThriftExecutionFailureInfo>(other.suppressed.size());
            for (ThriftExecutionFailureInfo other_element : other.suppressed) {
                __this__suppressed.add(new ThriftExecutionFailureInfo(other_element));
            }
            this.suppressed = __this__suppressed;
        }
        if (other.isSetStack()) {
            java.util.List<java.lang.String> __this__stack = new java.util.ArrayList<java.lang.String>(other.stack);
            this.stack = __this__stack;
        }
        if (other.isSetErrorLocation()) {
            this.errorLocation = new ThriftErrorLocation(other.errorLocation);
        }
        if (other.isSetErrorCode()) {
            this.errorCode = new ThriftErrorCode(other.errorCode);
        }
        if (other.isSetRemoteHost()) {
            this.remoteHost = new ThriftHostAddress(other.remoteHost);
        }
        if (other.isSetErrorCause()) {
            this.errorCause = other.errorCause;
        }
    }

    @Override
    public ThriftExecutionFailureInfo deepCopy()
    {
        return new ThriftExecutionFailureInfo(this);
    }

    @Override
    public void clear()
    {
        this.type = null;
        this.message = null;
        this.cause = null;
        this.suppressed = null;
        this.stack = null;
        this.errorLocation = null;
        this.errorCode = null;
        this.remoteHost = null;
        this.errorCause = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getType()
    {
        return this.type;
    }

    public ThriftExecutionFailureInfo setType(@org.apache.thrift.annotation.Nullable java.lang.String type)
    {
        this.type = type;
        return this;
    }

    public void unsetType()
    {
        this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType()
    {
        return this.type != null;
    }

    public void setTypeIsSet(boolean value)
    {
        if (!value) {
            this.type = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessage()
    {
        return this.message;
    }

    public ThriftExecutionFailureInfo setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message)
    {
        this.message = message;
        return this;
    }

    public void unsetMessage()
    {
        this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage()
    {
        return this.message != null;
    }

    public void setMessageIsSet(boolean value)
    {
        if (!value) {
            this.message = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftExecutionFailureInfo getCause()
    {
        return this.cause;
    }

    public ThriftExecutionFailureInfo setCause(@org.apache.thrift.annotation.Nullable ThriftExecutionFailureInfo cause)
    {
        this.cause = cause;
        return this;
    }

    public void unsetCause()
    {
        this.cause = null;
    }

    /** Returns true if field cause is set (has been assigned a value) and false otherwise */
    public boolean isSetCause()
    {
        return this.cause != null;
    }

    public void setCauseIsSet(boolean value)
    {
        if (!value) {
            this.cause = null;
        }
    }

    public int getSuppressedSize()
    {
        return (this.suppressed == null) ? 0 : this.suppressed.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ThriftExecutionFailureInfo> getSuppressedIterator()
    {
        return (this.suppressed == null) ? null : this.suppressed.iterator();
    }

    public void addToSuppressed(ThriftExecutionFailureInfo elem)
    {
        if (this.suppressed == null) {
            this.suppressed = new java.util.ArrayList<ThriftExecutionFailureInfo>();
        }
        this.suppressed.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ThriftExecutionFailureInfo> getSuppressed()
    {
        return this.suppressed;
    }

    public ThriftExecutionFailureInfo setSuppressed(@org.apache.thrift.annotation.Nullable java.util.List<ThriftExecutionFailureInfo> suppressed)
    {
        this.suppressed = suppressed;
        return this;
    }

    public void unsetSuppressed()
    {
        this.suppressed = null;
    }

    /** Returns true if field suppressed is set (has been assigned a value) and false otherwise */
    public boolean isSetSuppressed()
    {
        return this.suppressed != null;
    }

    public void setSuppressedIsSet(boolean value)
    {
        if (!value) {
            this.suppressed = null;
        }
    }

    public int getStackSize()
    {
        return (this.stack == null) ? 0 : this.stack.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getStackIterator()
    {
        return (this.stack == null) ? null : this.stack.iterator();
    }

    public void addToStack(java.lang.String elem)
    {
        if (this.stack == null) {
            this.stack = new java.util.ArrayList<java.lang.String>();
        }
        this.stack.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getStack()
    {
        return this.stack;
    }

    public ThriftExecutionFailureInfo setStack(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> stack)
    {
        this.stack = stack;
        return this;
    }

    public void unsetStack()
    {
        this.stack = null;
    }

    /** Returns true if field stack is set (has been assigned a value) and false otherwise */
    public boolean isSetStack()
    {
        return this.stack != null;
    }

    public void setStackIsSet(boolean value)
    {
        if (!value) {
            this.stack = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftErrorLocation getErrorLocation()
    {
        return this.errorLocation;
    }

    public ThriftExecutionFailureInfo setErrorLocation(@org.apache.thrift.annotation.Nullable ThriftErrorLocation errorLocation)
    {
        this.errorLocation = errorLocation;
        return this;
    }

    public void unsetErrorLocation()
    {
        this.errorLocation = null;
    }

    /** Returns true if field errorLocation is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorLocation()
    {
        return this.errorLocation != null;
    }

    public void setErrorLocationIsSet(boolean value)
    {
        if (!value) {
            this.errorLocation = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftErrorCode getErrorCode()
    {
        return this.errorCode;
    }

    public ThriftExecutionFailureInfo setErrorCode(@org.apache.thrift.annotation.Nullable ThriftErrorCode errorCode)
    {
        this.errorCode = errorCode;
        return this;
    }

    public void unsetErrorCode()
    {
        this.errorCode = null;
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode()
    {
        return this.errorCode != null;
    }

    public void setErrorCodeIsSet(boolean value)
    {
        if (!value) {
            this.errorCode = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftHostAddress getRemoteHost()
    {
        return this.remoteHost;
    }

    public ThriftExecutionFailureInfo setRemoteHost(@org.apache.thrift.annotation.Nullable ThriftHostAddress remoteHost)
    {
        this.remoteHost = remoteHost;
        return this;
    }

    public void unsetRemoteHost()
    {
        this.remoteHost = null;
    }

    /** Returns true if field remoteHost is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteHost()
    {
        return this.remoteHost != null;
    }

    public void setRemoteHostIsSet(boolean value)
    {
        if (!value) {
            this.remoteHost = null;
        }
    }

    /**
     *
     * @see ThriftErrorCause
     */
    @org.apache.thrift.annotation.Nullable
    public ThriftErrorCause getErrorCause()
    {
        return this.errorCause;
    }

    /**
     *
     * @see ThriftErrorCause
     */
    public ThriftExecutionFailureInfo setErrorCause(@org.apache.thrift.annotation.Nullable ThriftErrorCause errorCause)
    {
        this.errorCause = errorCause;
        return this;
    }

    public void unsetErrorCause()
    {
        this.errorCause = null;
    }

    /** Returns true if field errorCause is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCause()
    {
        return this.errorCause != null;
    }

    public void setErrorCauseIsSet(boolean value)
    {
        if (!value) {
            this.errorCause = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value)
    {
        switch (field) {
            case TYPE:
                if (value == null) {
                    unsetType();
                }
                else {
                    setType((java.lang.String) value);
                }
                break;

            case MESSAGE:
                if (value == null) {
                    unsetMessage();
                }
                else {
                    setMessage((java.lang.String) value);
                }
                break;

            case CAUSE:
                if (value == null) {
                    unsetCause();
                }
                else {
                    setCause((ThriftExecutionFailureInfo) value);
                }
                break;

            case SUPPRESSED:
                if (value == null) {
                    unsetSuppressed();
                }
                else {
                    setSuppressed((java.util.List<ThriftExecutionFailureInfo>) value);
                }
                break;

            case STACK:
                if (value == null) {
                    unsetStack();
                }
                else {
                    setStack((java.util.List<java.lang.String>) value);
                }
                break;

            case ERROR_LOCATION:
                if (value == null) {
                    unsetErrorLocation();
                }
                else {
                    setErrorLocation((ThriftErrorLocation) value);
                }
                break;

            case ERROR_CODE:
                if (value == null) {
                    unsetErrorCode();
                }
                else {
                    setErrorCode((ThriftErrorCode) value);
                }
                break;

            case REMOTE_HOST:
                if (value == null) {
                    unsetRemoteHost();
                }
                else {
                    setRemoteHost((ThriftHostAddress) value);
                }
                break;

            case ERROR_CAUSE:
                if (value == null) {
                    unsetErrorCause();
                }
                else {
                    setErrorCause((ThriftErrorCause) value);
                }
                break;
        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field)
    {
        switch (field) {
            case TYPE:
                return getType();

            case MESSAGE:
                return getMessage();

            case CAUSE:
                return getCause();

            case SUPPRESSED:
                return getSuppressed();

            case STACK:
                return getStack();

            case ERROR_LOCATION:
                return getErrorLocation();

            case ERROR_CODE:
                return getErrorCode();

            case REMOTE_HOST:
                return getRemoteHost();

            case ERROR_CAUSE:
                return getErrorCause();
        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field)
    {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case TYPE:
                return isSetType();
            case MESSAGE:
                return isSetMessage();
            case CAUSE:
                return isSetCause();
            case SUPPRESSED:
                return isSetSuppressed();
            case STACK:
                return isSetStack();
            case ERROR_LOCATION:
                return isSetErrorLocation();
            case ERROR_CODE:
                return isSetErrorCode();
            case REMOTE_HOST:
                return isSetRemoteHost();
            case ERROR_CAUSE:
                return isSetErrorCause();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that)
    {
      if (that instanceof ThriftExecutionFailureInfo) {
        return this.equals((ThriftExecutionFailureInfo) that);
      }
        return false;
    }

    public boolean equals(ThriftExecutionFailureInfo that)
    {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

        boolean this_present_type = true && this.isSetType();
        boolean that_present_type = true && that.isSetType();
        if (this_present_type || that_present_type) {
          if (!(this_present_type && that_present_type)) {
            return false;
          }
          if (!this.type.equals(that.type)) {
            return false;
          }
        }

        boolean this_present_message = true && this.isSetMessage();
        boolean that_present_message = true && that.isSetMessage();
        if (this_present_message || that_present_message) {
          if (!(this_present_message && that_present_message)) {
            return false;
          }
          if (!this.message.equals(that.message)) {
            return false;
          }
        }

        boolean this_present_cause = true && this.isSetCause();
        boolean that_present_cause = true && that.isSetCause();
        if (this_present_cause || that_present_cause) {
          if (!(this_present_cause && that_present_cause)) {
            return false;
          }
          if (!this.cause.equals(that.cause)) {
            return false;
          }
        }

        boolean this_present_suppressed = true && this.isSetSuppressed();
        boolean that_present_suppressed = true && that.isSetSuppressed();
        if (this_present_suppressed || that_present_suppressed) {
          if (!(this_present_suppressed && that_present_suppressed)) {
            return false;
          }
          if (!this.suppressed.equals(that.suppressed)) {
            return false;
          }
        }

        boolean this_present_stack = true && this.isSetStack();
        boolean that_present_stack = true && that.isSetStack();
        if (this_present_stack || that_present_stack) {
          if (!(this_present_stack && that_present_stack)) {
            return false;
          }
          if (!this.stack.equals(that.stack)) {
            return false;
          }
        }

        boolean this_present_errorLocation = true && this.isSetErrorLocation();
        boolean that_present_errorLocation = true && that.isSetErrorLocation();
        if (this_present_errorLocation || that_present_errorLocation) {
          if (!(this_present_errorLocation && that_present_errorLocation)) {
            return false;
          }
          if (!this.errorLocation.equals(that.errorLocation)) {
            return false;
          }
        }

        boolean this_present_errorCode = true && this.isSetErrorCode();
        boolean that_present_errorCode = true && that.isSetErrorCode();
        if (this_present_errorCode || that_present_errorCode) {
          if (!(this_present_errorCode && that_present_errorCode)) {
            return false;
          }
          if (!this.errorCode.equals(that.errorCode)) {
            return false;
          }
        }

        boolean this_present_remoteHost = true && this.isSetRemoteHost();
        boolean that_present_remoteHost = true && that.isSetRemoteHost();
        if (this_present_remoteHost || that_present_remoteHost) {
          if (!(this_present_remoteHost && that_present_remoteHost)) {
            return false;
          }
          if (!this.remoteHost.equals(that.remoteHost)) {
            return false;
          }
        }

        boolean this_present_errorCause = true && this.isSetErrorCause();
        boolean that_present_errorCause = true && that.isSetErrorCause();
        if (this_present_errorCause || that_present_errorCause) {
          if (!(this_present_errorCause && that_present_errorCause)) {
            return false;
          }
          if (!this.errorCause.equals(that.errorCause)) {
            return false;
          }
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType()) {
        hashCode = hashCode * 8191 + type.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
      if (isSetMessage()) {
        hashCode = hashCode * 8191 + message.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetCause()) ? 131071 : 524287);
      if (isSetCause()) {
        hashCode = hashCode * 8191 + cause.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetSuppressed()) ? 131071 : 524287);
      if (isSetSuppressed()) {
        hashCode = hashCode * 8191 + suppressed.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetStack()) ? 131071 : 524287);
      if (isSetStack()) {
        hashCode = hashCode * 8191 + stack.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetErrorLocation()) ? 131071 : 524287);
      if (isSetErrorLocation()) {
        hashCode = hashCode * 8191 + errorLocation.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetErrorCode()) ? 131071 : 524287);
      if (isSetErrorCode()) {
        hashCode = hashCode * 8191 + errorCode.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetRemoteHost()) ? 131071 : 524287);
      if (isSetRemoteHost()) {
        hashCode = hashCode * 8191 + remoteHost.hashCode();
      }

        hashCode = hashCode * 8191 + ((isSetErrorCause()) ? 131071 : 524287);
      if (isSetErrorCause()) {
        hashCode = hashCode * 8191 + errorCause.getValue();
      }

        return hashCode;
    }

    @Override
    public int compareTo(ThriftExecutionFailureInfo other)
    {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetMessage(), other.isSetMessage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMessage()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetCause(), other.isSetCause());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCause()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cause, other.cause);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSuppressed(), other.isSetSuppressed());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSuppressed()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suppressed, other.suppressed);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStack(), other.isSetStack());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStack()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stack, other.stack);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetErrorLocation(), other.isSetErrorLocation());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetErrorLocation()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorLocation, other.errorLocation);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetErrorCode(), other.isSetErrorCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetErrorCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetRemoteHost(), other.isSetRemoteHost());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRemoteHost()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteHost, other.remoteHost);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetErrorCause(), other.isSetErrorCause());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetErrorCause()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCause, other.errorCause);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
    {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
    {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString()
    {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftExecutionFailureInfo(");
        boolean first = true;

        sb.append("type:");
        if (this.type == null) {
            sb.append("null");
        }
        else {
            sb.append(this.type);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("message:");
        if (this.message == null) {
            sb.append("null");
        }
        else {
            sb.append(this.message);
        }
        first = false;
        if (isSetCause()) {
          if (!first) {
            sb.append(", ");
          }
            sb.append("cause:");
            if (this.cause == null) {
                sb.append("null");
            }
            else {
                sb.append(this.cause);
            }
            first = false;
        }
      if (!first) {
        sb.append(", ");
      }
        sb.append("suppressed:");
        if (this.suppressed == null) {
            sb.append("null");
        }
        else {
            sb.append(this.suppressed);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("stack:");
        if (this.stack == null) {
            sb.append("null");
        }
        else {
            sb.append(this.stack);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("errorLocation:");
        if (this.errorLocation == null) {
            sb.append("null");
        }
        else {
            sb.append(this.errorLocation);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("errorCode:");
        if (this.errorCode == null) {
            sb.append("null");
        }
        else {
            sb.append(this.errorCode);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("remoteHost:");
        if (this.remoteHost == null) {
            sb.append("null");
        }
        else {
            sb.append(this.remoteHost);
        }
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("errorCause:");
        if (this.errorCause == null) {
            sb.append("null");
        }
        else {
            sb.append(this.errorCause);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate()
            throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
        if (cause != null) {
            cause.validate();
        }
        if (errorLocation != null) {
            errorLocation.validate();
        }
        if (errorCode != null) {
            errorCode.validate();
        }
        if (remoteHost != null) {
            remoteHost.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out)
            throws java.io.IOException
    {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, java.lang.ClassNotFoundException
    {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftExecutionFailureInfoStandardSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftExecutionFailureInfoStandardScheme getScheme()
        {
            return new ThriftExecutionFailureInfoStandardScheme();
        }
    }

    private static class ThriftExecutionFailureInfoStandardScheme
            extends org.apache.thrift.scheme.StandardScheme<ThriftExecutionFailureInfo>
    {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftExecutionFailureInfo struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.type = iprot.readString();
                            struct.setTypeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // MESSAGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.message = iprot.readString();
                            struct.setMessageIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // CAUSE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.cause = new ThriftExecutionFailureInfo();
                            struct.cause.read(iprot);
                            struct.setCauseIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // SUPPRESSED
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.suppressed = new java.util.ArrayList<ThriftExecutionFailureInfo>(_list0.size);
                                @org.apache.thrift.annotation.Nullable ThriftExecutionFailureInfo _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = new ThriftExecutionFailureInfo();
                                    _elem1.read(iprot);
                                    struct.suppressed.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSuppressedIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // STACK
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                                struct.stack = new java.util.ArrayList<java.lang.String>(_list3.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                                for (int _i5 = 0; _i5 < _list3.size; ++_i5) {
                                    _elem4 = iprot.readString();
                                    struct.stack.add(_elem4);
                                }
                                iprot.readListEnd();
                            }
                            struct.setStackIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // ERROR_LOCATION
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.errorLocation = new ThriftErrorLocation();
                            struct.errorLocation.read(iprot);
                            struct.setErrorLocationIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // ERROR_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.errorCode = new ThriftErrorCode();
                            struct.errorCode.read(iprot);
                            struct.setErrorCodeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // REMOTE_HOST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.remoteHost = new ThriftHostAddress();
                            struct.remoteHost.read(iprot);
                            struct.setRemoteHostIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // ERROR_CAUSE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.errorCause = ThriftErrorCause.findByValue(iprot.readI32());
                            struct.setErrorCauseIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftExecutionFailureInfo struct)
                throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.type != null) {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeString(struct.type);
                oprot.writeFieldEnd();
            }
            if (struct.message != null) {
                oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                oprot.writeString(struct.message);
                oprot.writeFieldEnd();
            }
            if (struct.cause != null) {
                if (struct.isSetCause()) {
                    oprot.writeFieldBegin(CAUSE_FIELD_DESC);
                    struct.cause.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.suppressed != null) {
                oprot.writeFieldBegin(SUPPRESSED_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.suppressed.size()));
                    for (ThriftExecutionFailureInfo _iter6 : struct.suppressed) {
                        _iter6.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.stack != null) {
                oprot.writeFieldBegin(STACK_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stack.size()));
                    for (java.lang.String _iter7 : struct.stack) {
                        oprot.writeString(_iter7);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.errorLocation != null) {
                oprot.writeFieldBegin(ERROR_LOCATION_FIELD_DESC);
                struct.errorLocation.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.errorCode != null) {
                oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
                struct.errorCode.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.remoteHost != null) {
                oprot.writeFieldBegin(REMOTE_HOST_FIELD_DESC);
                struct.remoteHost.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.errorCause != null) {
                oprot.writeFieldBegin(ERROR_CAUSE_FIELD_DESC);
                oprot.writeI32(struct.errorCause.getValue());
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class ThriftExecutionFailureInfoTupleSchemeFactory
            implements org.apache.thrift.scheme.SchemeFactory
    {
        @Override
        public ThriftExecutionFailureInfoTupleScheme getScheme()
        {
            return new ThriftExecutionFailureInfoTupleScheme();
        }
    }

    private static class ThriftExecutionFailureInfoTupleScheme
            extends org.apache.thrift.scheme.TupleScheme<ThriftExecutionFailureInfo>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftExecutionFailureInfo struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetType()) {
                optionals.set(0);
            }
            if (struct.isSetMessage()) {
                optionals.set(1);
            }
            if (struct.isSetCause()) {
                optionals.set(2);
            }
            if (struct.isSetSuppressed()) {
                optionals.set(3);
            }
            if (struct.isSetStack()) {
                optionals.set(4);
            }
            if (struct.isSetErrorLocation()) {
                optionals.set(5);
            }
            if (struct.isSetErrorCode()) {
                optionals.set(6);
            }
            if (struct.isSetRemoteHost()) {
                optionals.set(7);
            }
            if (struct.isSetErrorCause()) {
                optionals.set(8);
            }
            oprot.writeBitSet(optionals, 9);
            if (struct.isSetType()) {
                oprot.writeString(struct.type);
            }
            if (struct.isSetMessage()) {
                oprot.writeString(struct.message);
            }
            if (struct.isSetCause()) {
                struct.cause.write(oprot);
            }
            if (struct.isSetSuppressed()) {
                {
                    oprot.writeI32(struct.suppressed.size());
                    for (ThriftExecutionFailureInfo _iter8 : struct.suppressed) {
                        _iter8.write(oprot);
                    }
                }
            }
            if (struct.isSetStack()) {
                {
                    oprot.writeI32(struct.stack.size());
                    for (java.lang.String _iter9 : struct.stack) {
                        oprot.writeString(_iter9);
                    }
                }
            }
            if (struct.isSetErrorLocation()) {
                struct.errorLocation.write(oprot);
            }
            if (struct.isSetErrorCode()) {
                struct.errorCode.write(oprot);
            }
            if (struct.isSetRemoteHost()) {
                struct.remoteHost.write(oprot);
            }
            if (struct.isSetErrorCause()) {
                oprot.writeI32(struct.errorCause.getValue());
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftExecutionFailureInfo struct)
                throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(9);
            if (incoming.get(0)) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
            }
            if (incoming.get(1)) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
            }
            if (incoming.get(2)) {
                struct.cause = new ThriftExecutionFailureInfo();
                struct.cause.read(iprot);
                struct.setCauseIsSet(true);
            }
            if (incoming.get(3)) {
                {
                    org.apache.thrift.protocol.TList _list10 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.suppressed = new java.util.ArrayList<ThriftExecutionFailureInfo>(_list10.size);
                    @org.apache.thrift.annotation.Nullable ThriftExecutionFailureInfo _elem11;
                    for (int _i12 = 0; _i12 < _list10.size; ++_i12) {
                        _elem11 = new ThriftExecutionFailureInfo();
                        _elem11.read(iprot);
                        struct.suppressed.add(_elem11);
                    }
                }
                struct.setSuppressedIsSet(true);
            }
            if (incoming.get(4)) {
                {
                    org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                    struct.stack = new java.util.ArrayList<java.lang.String>(_list13.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
                    for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
                        _elem14 = iprot.readString();
                        struct.stack.add(_elem14);
                    }
                }
                struct.setStackIsSet(true);
            }
            if (incoming.get(5)) {
                struct.errorLocation = new ThriftErrorLocation();
                struct.errorLocation.read(iprot);
                struct.setErrorLocationIsSet(true);
            }
            if (incoming.get(6)) {
                struct.errorCode = new ThriftErrorCode();
                struct.errorCode.read(iprot);
                struct.setErrorCodeIsSet(true);
            }
            if (incoming.get(7)) {
                struct.remoteHost = new ThriftHostAddress();
                struct.remoteHost.read(iprot);
                struct.setRemoteHostIsSet(true);
            }
            if (incoming.get(8)) {
                struct.errorCause = ThriftErrorCause.findByValue(iprot.readI32());
                struct.setErrorCauseIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
    {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

