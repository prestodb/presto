// Generated from presto/presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import SqlBaseListener from './SqlBaseListener.js';
const serializedATN = [4,1,265,2304,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,
2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,217,8,3,1,
3,1,3,1,3,3,3,222,8,3,1,3,1,3,1,3,1,3,3,3,228,8,3,1,3,1,3,3,3,232,8,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,246,8,3,1,3,1,3,3,3,250,
8,3,1,3,1,3,3,3,254,8,3,1,3,1,3,3,3,258,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
266,8,3,1,3,1,3,3,3,270,8,3,1,3,3,3,273,8,3,1,3,1,3,1,3,1,3,1,3,3,3,280,
8,3,1,3,1,3,1,3,1,3,1,3,5,3,287,8,3,10,3,12,3,290,9,3,1,3,1,3,1,3,3,3,295,
8,3,1,3,1,3,3,3,299,8,3,1,3,1,3,1,3,1,3,3,3,305,8,3,1,3,1,3,1,3,1,3,1,3,
3,3,312,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,321,8,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,3,3,330,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,341,8,3,1,3,
1,3,1,3,1,3,1,3,3,3,348,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,358,8,3,
1,3,1,3,1,3,1,3,1,3,3,3,365,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,373,8,3,1,3,
1,3,1,3,1,3,1,3,1,3,3,3,381,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,389,8,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,399,8,3,1,3,1,3,1,3,1,3,1,3,3,3,406,8,3,
1,3,1,3,1,3,1,3,1,3,1,3,3,3,414,8,3,1,3,1,3,1,3,3,3,419,8,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,3,3,430,8,3,1,3,1,3,1,3,3,3,435,8,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,3,3,446,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
3,3,457,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,467,8,3,10,3,12,3,470,9,
3,1,3,1,3,1,3,3,3,475,8,3,1,3,1,3,1,3,3,3,480,8,3,1,3,1,3,1,3,1,3,3,3,486,
8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,495,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,3,3,506,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,515,8,3,1,3,1,3,1,3,
3,3,520,8,3,1,3,1,3,3,3,524,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,532,8,3,1,3,
1,3,1,3,1,3,1,3,3,3,539,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,548,8,3,1,3,
1,3,1,3,3,3,553,8,3,1,3,3,3,556,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,564,8,3,
10,3,12,3,567,9,3,3,3,569,8,3,1,3,1,3,1,3,1,3,1,3,3,3,576,8,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,3,3,585,8,3,1,3,1,3,1,3,1,3,3,3,591,8,3,1,3,1,3,1,3,3,
3,596,8,3,1,3,1,3,3,3,600,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,608,8,3,10,3,12,
3,611,9,3,3,3,613,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,623,8,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,634,8,3,10,3,12,3,637,9,3,1,3,1,3,1,3,
3,3,642,8,3,1,3,1,3,1,3,3,3,647,8,3,1,3,1,3,1,3,1,3,3,3,653,8,3,1,3,1,3,
1,3,1,3,1,3,5,3,660,8,3,10,3,12,3,663,9,3,1,3,1,3,1,3,3,3,668,8,3,1,3,1,
3,1,3,1,3,1,3,3,3,675,8,3,1,3,1,3,1,3,1,3,5,3,681,8,3,10,3,12,3,684,9,3,
1,3,1,3,3,3,688,8,3,1,3,1,3,3,3,692,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,700,
8,3,1,3,1,3,1,3,1,3,3,3,706,8,3,1,3,1,3,1,3,5,3,711,8,3,10,3,12,3,714,9,
3,1,3,1,3,3,3,718,8,3,1,3,1,3,3,3,722,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,3,3,732,8,3,1,3,3,3,735,8,3,1,3,1,3,3,3,739,8,3,1,3,3,3,742,8,3,1,3,1,
3,1,3,1,3,5,3,748,8,3,10,3,12,3,751,9,3,1,3,1,3,3,3,755,8,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,3,3,780,8,3,1,3,1,3,1,3,1,3,3,3,786,8,3,1,3,1,3,1,3,1,3,3,3,792,
8,3,3,3,794,8,3,1,3,1,3,1,3,1,3,3,3,800,8,3,1,3,1,3,1,3,1,3,3,3,806,8,3,
3,3,808,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,816,8,3,3,3,818,8,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,837,8,3,1,3,
1,3,1,3,3,3,842,8,3,1,3,1,3,1,3,1,3,1,3,3,3,849,8,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,3,3,861,8,3,3,3,863,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
871,8,3,3,3,873,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,5,3,889,8,3,10,3,12,3,892,9,3,3,3,894,8,3,1,3,1,3,3,3,898,8,3,1,3,1,
3,3,3,902,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,
3,918,8,3,10,3,12,3,921,9,3,3,3,923,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,5,3,937,8,3,10,3,12,3,940,9,3,1,3,1,3,3,3,944,8,3,1,3,1,
3,1,3,1,3,3,3,950,8,3,1,3,3,3,953,8,3,1,3,1,3,1,3,1,3,1,3,4,3,960,8,3,11,
3,12,3,961,3,3,964,8,3,1,4,3,4,967,8,4,1,4,1,4,1,5,1,5,3,5,973,8,5,1,5,1,
5,1,5,5,5,978,8,5,10,5,12,5,981,9,5,1,6,1,6,1,6,3,6,986,8,6,1,7,1,7,1,7,
1,7,3,7,992,8,7,1,7,1,7,3,7,996,8,7,1,7,1,7,3,7,1000,8,7,1,8,1,8,1,8,1,8,
3,8,1006,8,8,1,9,1,9,1,9,1,9,5,9,1012,8,9,10,9,12,9,1015,9,9,1,9,1,9,1,10,
1,10,1,10,1,10,1,11,1,11,1,11,1,12,5,12,1027,8,12,10,12,12,12,1030,9,12,
1,13,1,13,1,13,1,13,3,13,1036,8,13,1,14,5,14,1039,8,14,10,14,12,14,1042,
9,14,1,15,1,15,1,16,1,16,3,16,1048,8,16,1,17,1,17,1,17,1,18,1,18,1,18,3,
18,1056,8,18,1,19,1,19,3,19,1060,8,19,1,20,1,20,1,20,3,20,1065,8,20,1,21,
1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1076,8,21,1,22,1,22,1,23,1,
23,1,23,1,23,1,23,1,23,5,23,1086,8,23,10,23,12,23,1089,9,23,3,23,1091,8,
23,1,23,1,23,1,23,3,23,1096,8,23,3,23,1098,8,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,3,23,1107,8,23,3,23,1109,8,23,1,24,1,24,1,24,1,24,1,24,1,24,3,
24,1117,8,24,1,24,1,24,1,24,1,24,3,24,1123,8,24,1,24,5,24,1126,8,24,10,24,
12,24,1129,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,1138,8,25,10,25,
12,25,1141,9,25,1,25,1,25,1,25,1,25,3,25,1147,8,25,1,26,1,26,3,26,1151,8,
26,1,26,1,26,3,26,1155,8,26,1,27,1,27,3,27,1159,8,27,1,27,1,27,1,27,5,27,
1164,8,27,10,27,12,27,1167,9,27,1,27,1,27,1,27,1,27,5,27,1173,8,27,10,27,
12,27,1176,9,27,3,27,1178,8,27,1,27,1,27,3,27,1182,8,27,1,27,1,27,1,27,3,
27,1187,8,27,1,27,1,27,3,27,1191,8,27,1,28,3,28,1194,8,28,1,28,1,28,1,28,
5,28,1199,8,28,10,28,12,28,1202,9,28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,
1210,8,29,10,29,12,29,1213,9,29,3,29,1215,8,29,1,29,1,29,1,29,1,29,1,29,
1,29,5,29,1223,8,29,10,29,12,29,1226,9,29,3,29,1228,8,29,1,29,1,29,1,29,
1,29,1,29,1,29,1,29,5,29,1237,8,29,10,29,12,29,1240,9,29,1,29,1,29,3,29,
1244,8,29,1,30,1,30,1,30,1,30,5,30,1250,8,30,10,30,12,30,1253,9,30,3,30,
1255,8,30,1,30,1,30,3,30,1259,8,30,1,31,1,31,3,31,1263,8,31,1,31,1,31,1,
31,1,31,1,31,1,32,1,32,1,33,1,33,3,33,1274,8,33,1,33,3,33,1277,8,33,1,33,
1,33,1,33,1,33,1,33,3,33,1284,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1303,8,34,5,34,1305,
8,34,10,34,12,34,1308,9,34,1,35,3,35,1311,8,35,1,35,1,35,3,35,1315,8,35,
1,35,1,35,3,35,1319,8,35,1,35,1,35,3,35,1323,8,35,3,35,1325,8,35,1,36,1,
36,1,36,1,36,1,36,1,36,1,36,5,36,1334,8,36,10,36,12,36,1337,9,36,1,36,1,
36,3,36,1341,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1350,8,37,1,38,
1,38,1,39,1,39,3,39,1356,8,39,1,39,1,39,3,39,1360,8,39,3,39,1362,8,39,1,
40,1,40,1,40,1,40,5,40,1368,8,40,10,40,12,40,1371,9,40,1,40,1,40,1,41,1,
41,3,41,1377,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,1388,
8,41,10,41,12,41,1391,9,41,1,41,1,41,1,41,3,41,1396,8,41,1,41,1,41,1,41,
1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1412,8,41,1,
42,1,42,1,43,1,43,1,43,3,43,1419,8,43,1,43,1,43,3,43,1423,8,43,1,43,1,43,
1,43,1,43,1,43,1,43,5,43,1431,8,43,10,43,12,43,1434,9,43,1,44,1,44,1,44,
1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1446,8,44,1,44,1,44,1,44,1,44,1,
44,1,44,3,44,1454,8,44,1,44,1,44,1,44,1,44,1,44,5,44,1461,8,44,10,44,12,
44,1464,9,44,1,44,1,44,1,44,3,44,1469,8,44,1,44,1,44,1,44,1,44,1,44,1,44,
3,44,1477,8,44,1,44,1,44,1,44,1,44,3,44,1483,8,44,1,44,1,44,3,44,1487,8,
44,1,44,1,44,1,44,3,44,1492,8,44,1,44,1,44,1,44,3,44,1497,8,44,1,45,1,45,
1,45,1,45,3,45,1503,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
45,1,45,1,45,5,45,1517,8,45,10,45,12,45,1520,9,45,1,46,1,46,1,46,1,46,1,
46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
1,46,1,46,1,46,1,46,1,46,4,46,1546,8,46,11,46,12,46,1547,1,46,1,46,1,46,
1,46,1,46,1,46,1,46,5,46,1557,8,46,10,46,12,46,1560,9,46,1,46,1,46,1,46,
1,46,1,46,1,46,1,46,3,46,1569,8,46,1,46,3,46,1572,8,46,1,46,1,46,1,46,3,
46,1577,8,46,1,46,1,46,1,46,5,46,1582,8,46,10,46,12,46,1585,9,46,3,46,1587,
8,46,1,46,1,46,1,46,1,46,1,46,5,46,1594,8,46,10,46,12,46,1597,9,46,3,46,
1599,8,46,1,46,1,46,3,46,1603,8,46,1,46,3,46,1606,8,46,1,46,3,46,1609,8,
46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,5,46,1619,8,46,10,46,12,46,1622,
9,46,3,46,1624,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
46,1,46,1,46,1,46,1,46,4,46,1641,8,46,11,46,12,46,1642,1,46,1,46,3,46,1647,
8,46,1,46,1,46,1,46,1,46,4,46,1653,8,46,11,46,12,46,1654,1,46,1,46,3,46,
1659,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,5,46,1682,8,46,10,46,12,46,1685,
9,46,3,46,1687,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1696,8,46,1,
46,1,46,1,46,1,46,3,46,1702,8,46,1,46,1,46,1,46,1,46,3,46,1708,8,46,1,46,
1,46,1,46,1,46,3,46,1714,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,
46,1724,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1733,8,46,1,46,1,46,
1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
46,1,46,5,46,1753,8,46,10,46,12,46,1756,9,46,3,46,1758,8,46,1,46,3,46,1761,
8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,5,46,1771,8,46,10,46,12,46,
1774,9,46,1,47,1,47,1,47,1,47,3,47,1780,8,47,3,47,1782,8,47,1,48,1,48,1,
48,1,48,3,48,1788,8,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1796,8,49,1,50,
1,50,1,51,1,51,1,52,1,52,1,53,1,53,3,53,1806,8,53,1,53,1,53,1,53,1,53,3,
53,1812,8,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,5,56,1822,8,56,10,56,
12,56,1825,9,56,3,56,1827,8,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
5,57,1852,8,57,10,57,12,57,1855,9,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
5,57,1864,8,57,10,57,12,57,1867,9,57,1,57,1,57,3,57,1871,8,57,1,57,1,57,
1,57,1,57,1,57,3,57,1878,8,57,1,57,1,57,5,57,1882,8,57,10,57,12,57,1885,
9,57,1,58,1,58,1,58,1,58,1,58,5,58,1892,8,58,10,58,12,58,1895,9,58,3,58,
1897,8,58,1,58,1,58,1,58,1,58,5,58,1903,8,58,10,58,12,58,1906,9,58,3,58,
1908,8,58,1,58,1,58,1,59,1,59,1,59,3,59,1915,8,59,1,59,1,59,1,59,3,59,1920,
8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,1929,8,60,10,60,12,60,1932,
9,60,3,60,1934,8,60,1,60,1,60,3,60,1938,8,60,3,60,1940,8,60,1,60,1,60,1,
60,1,60,1,60,1,60,3,60,1948,8,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,1956,
8,60,10,60,12,60,1959,9,60,1,60,1,60,1,60,3,60,1964,8,60,3,60,1966,8,60,
1,61,1,61,1,61,1,61,1,61,3,61,1973,8,61,1,61,1,61,3,61,1977,8,61,3,61,1979,
8,61,1,61,1,61,1,61,1,61,1,61,3,61,1986,8,61,1,61,1,61,3,61,1990,8,61,3,
61,1992,8,61,3,61,1994,8,61,1,62,1,62,1,62,1,62,1,62,5,62,2001,8,62,10,62,
12,62,2004,9,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,2014,8,62,1,
63,1,63,3,63,2018,8,63,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2026,8,64,10,64,
12,64,2029,9,64,1,64,1,64,1,65,1,65,3,65,2035,8,65,1,66,1,66,1,66,1,66,3,
66,2041,8,66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,
1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,69,2067,8,
69,10,69,12,69,2070,9,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,
69,2081,8,69,10,69,12,69,2084,9,69,1,69,1,69,3,69,2088,8,69,1,69,1,69,1,
69,1,69,1,69,5,69,2095,8,69,10,69,12,69,2098,9,69,1,69,1,69,3,69,2102,8,
69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,5,70,2111,8,70,10,70,12,70,2114,9,
70,3,70,2116,8,70,1,70,1,70,1,70,1,70,1,70,5,70,2123,8,70,10,70,12,70,2126,
9,70,3,70,2128,8,70,1,70,3,70,2131,8,70,1,70,1,70,1,71,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
1,71,1,71,1,71,1,71,1,71,3,71,2159,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,3,72,2170,8,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,3,74,
2180,8,74,1,75,1,75,1,75,1,75,1,75,3,75,2187,8,75,1,76,1,76,1,76,1,76,1,
76,1,76,1,76,3,76,2196,8,76,1,77,1,77,1,77,1,77,1,77,3,77,2203,8,77,1,78,
1,78,1,78,1,78,3,78,2209,8,78,1,79,1,79,1,79,5,79,2214,8,79,10,79,12,79,
2217,9,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,3,81,2227,8,81,1,82,1,
82,1,82,3,82,2232,8,82,1,83,1,83,1,83,1,83,1,83,3,83,2239,8,83,1,84,1,84,
1,84,5,84,2244,8,84,10,84,12,84,2247,9,84,1,85,1,85,1,85,1,85,1,85,3,85,
2254,8,85,1,86,1,86,1,86,3,86,2259,8,86,1,87,1,87,3,87,2263,8,87,1,88,1,
88,1,88,1,88,1,89,1,89,1,89,3,89,2272,8,89,1,90,1,90,1,90,3,90,2277,8,90,
1,91,5,91,2280,8,91,10,91,12,91,2283,9,91,1,92,1,92,1,92,3,92,2288,8,92,
1,93,1,93,1,93,3,93,2293,8,93,1,94,1,94,1,95,1,95,1,95,3,95,2300,8,95,1,
96,1,96,1,96,0,6,48,68,86,90,92,114,97,0,2,4,6,8,10,12,14,16,18,20,22,24,
26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
190,192,0,25,2,0,27,27,171,171,2,0,51,51,104,104,2,0,81,81,96,96,2,0,68,
68,97,97,1,0,180,181,2,0,12,12,251,251,2,0,67,67,217,217,2,0,19,19,53,53,
2,0,77,77,113,113,2,0,12,12,58,58,2,0,22,22,197,197,1,0,242,243,1,0,244,
246,1,0,236,241,3,0,12,12,16,16,192,192,2,0,74,74,210,210,5,0,49,49,93,93,
126,127,184,184,234,234,1,0,130,133,2,0,78,78,155,155,3,0,88,88,108,108,
204,204,4,0,59,59,105,105,121,121,224,224,2,0,144,144,233,233,3,0,198,199,
207,207,227,227,2,0,57,57,63,63,52,0,10,12,14,14,16,17,19,22,25,27,30,35,
38,38,41,41,43,43,47,49,51,51,53,53,55,57,59,59,62,63,65,65,68,68,71,71,
73,73,75,78,80,80,83,88,91,91,93,95,97,97,99,99,102,102,104,105,107,108,
110,114,116,116,118,118,121,128,130,135,139,142,144,145,148,148,150,155,
157,162,164,174,176,178,180,185,187,199,201,204,206,209,211,213,215,216,
218,218,220,222,224,224,226,228,232,235,2651,0,194,1,0,0,0,2,197,1,0,0,0,
4,200,1,0,0,0,6,963,1,0,0,0,8,966,1,0,0,0,10,970,1,0,0,0,12,985,1,0,0,0,
14,987,1,0,0,0,16,1001,1,0,0,0,18,1007,1,0,0,0,20,1018,1,0,0,0,22,1022,1,
0,0,0,24,1028,1,0,0,0,26,1035,1,0,0,0,28,1040,1,0,0,0,30,1043,1,0,0,0,32,
1047,1,0,0,0,34,1049,1,0,0,0,36,1052,1,0,0,0,38,1059,1,0,0,0,40,1064,1,0,
0,0,42,1075,1,0,0,0,44,1077,1,0,0,0,46,1079,1,0,0,0,48,1110,1,0,0,0,50,1146,
1,0,0,0,52,1148,1,0,0,0,54,1156,1,0,0,0,56,1193,1,0,0,0,58,1243,1,0,0,0,
60,1258,1,0,0,0,62,1260,1,0,0,0,64,1269,1,0,0,0,66,1283,1,0,0,0,68,1285,
1,0,0,0,70,1324,1,0,0,0,72,1340,1,0,0,0,74,1342,1,0,0,0,76,1351,1,0,0,0,
78,1353,1,0,0,0,80,1363,1,0,0,0,82,1411,1,0,0,0,84,1413,1,0,0,0,86,1422,
1,0,0,0,88,1496,1,0,0,0,90,1502,1,0,0,0,92,1760,1,0,0,0,94,1781,1,0,0,0,
96,1787,1,0,0,0,98,1795,1,0,0,0,100,1797,1,0,0,0,102,1799,1,0,0,0,104,1801,
1,0,0,0,106,1803,1,0,0,0,108,1813,1,0,0,0,110,1815,1,0,0,0,112,1817,1,0,
0,0,114,1877,1,0,0,0,116,1886,1,0,0,0,118,1914,1,0,0,0,120,1921,1,0,0,0,
122,1993,1,0,0,0,124,2013,1,0,0,0,126,2015,1,0,0,0,128,2019,1,0,0,0,130,
2034,1,0,0,0,132,2040,1,0,0,0,134,2042,1,0,0,0,136,2047,1,0,0,0,138,2101,
1,0,0,0,140,2103,1,0,0,0,142,2158,1,0,0,0,144,2169,1,0,0,0,146,2171,1,0,
0,0,148,2179,1,0,0,0,150,2186,1,0,0,0,152,2195,1,0,0,0,154,2202,1,0,0,0,
156,2208,1,0,0,0,158,2210,1,0,0,0,160,2218,1,0,0,0,162,2226,1,0,0,0,164,
2231,1,0,0,0,166,2238,1,0,0,0,168,2240,1,0,0,0,170,2253,1,0,0,0,172,2258,
1,0,0,0,174,2262,1,0,0,0,176,2264,1,0,0,0,178,2268,1,0,0,0,180,2276,1,0,
0,0,182,2281,1,0,0,0,184,2287,1,0,0,0,186,2292,1,0,0,0,188,2294,1,0,0,0,
190,2299,1,0,0,0,192,2301,1,0,0,0,194,195,3,6,3,0,195,196,5,0,0,1,196,1,
1,0,0,0,197,198,3,84,42,0,198,199,5,0,0,1,199,3,1,0,0,0,200,201,3,32,16,
0,201,202,5,0,0,1,202,5,1,0,0,0,203,964,3,8,4,0,204,205,5,221,0,0,205,964,
3,170,85,0,206,207,5,221,0,0,207,208,3,170,85,0,208,209,5,1,0,0,209,210,
3,170,85,0,210,964,1,0,0,0,211,212,5,37,0,0,212,216,5,182,0,0,213,214,5,
94,0,0,214,215,5,137,0,0,215,217,5,70,0,0,216,213,1,0,0,0,216,217,1,0,0,
0,217,218,1,0,0,0,218,221,3,158,79,0,219,220,5,231,0,0,220,222,3,18,9,0,
221,219,1,0,0,0,221,222,1,0,0,0,222,964,1,0,0,0,223,224,5,60,0,0,224,227,
5,182,0,0,225,226,5,94,0,0,226,228,5,70,0,0,227,225,1,0,0,0,227,228,1,0,
0,0,228,229,1,0,0,0,229,231,3,158,79,0,230,232,7,0,0,0,231,230,1,0,0,0,231,
232,1,0,0,0,232,964,1,0,0,0,233,234,5,13,0,0,234,235,5,182,0,0,235,236,3,
158,79,0,236,237,5,166,0,0,237,238,5,208,0,0,238,239,3,170,85,0,239,964,
1,0,0,0,240,241,5,37,0,0,241,245,5,200,0,0,242,243,5,94,0,0,243,244,5,137,
0,0,244,246,5,70,0,0,245,242,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,
249,3,158,79,0,248,250,3,80,40,0,249,248,1,0,0,0,249,250,1,0,0,0,250,253,
1,0,0,0,251,252,5,33,0,0,252,254,3,94,47,0,253,251,1,0,0,0,253,254,1,0,0,
0,254,257,1,0,0,0,255,256,5,231,0,0,256,258,3,18,9,0,257,255,1,0,0,0,257,
258,1,0,0,0,258,259,1,0,0,0,259,265,5,18,0,0,260,266,3,8,4,0,261,262,5,2,
0,0,262,263,3,8,4,0,263,264,5,3,0,0,264,266,1,0,0,0,265,260,1,0,0,0,265,
261,1,0,0,0,266,272,1,0,0,0,267,269,5,231,0,0,268,270,5,134,0,0,269,268,
1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,273,5,47,0,0,272,267,1,0,0,0,
272,273,1,0,0,0,273,964,1,0,0,0,274,275,5,37,0,0,275,279,5,200,0,0,276,277,
5,94,0,0,277,278,5,137,0,0,278,280,5,70,0,0,279,276,1,0,0,0,279,280,1,0,
0,0,280,281,1,0,0,0,281,282,3,158,79,0,282,283,5,2,0,0,283,288,3,12,6,0,
284,285,5,4,0,0,285,287,3,12,6,0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,
1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,294,5,3,0,0,
292,293,5,33,0,0,293,295,3,94,47,0,294,292,1,0,0,0,294,295,1,0,0,0,295,298,
1,0,0,0,296,297,5,231,0,0,297,299,3,18,9,0,298,296,1,0,0,0,298,299,1,0,0,
0,299,964,1,0,0,0,300,301,5,60,0,0,301,304,5,200,0,0,302,303,5,94,0,0,303,
305,5,70,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,964,3,158,
79,0,307,308,5,100,0,0,308,309,5,103,0,0,309,311,3,158,79,0,310,312,3,80,
40,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,3,8,4,0,314,
964,1,0,0,0,315,316,5,52,0,0,316,317,5,81,0,0,317,320,3,158,79,0,318,319,
5,230,0,0,319,321,3,86,43,0,320,318,1,0,0,0,320,321,1,0,0,0,321,964,1,0,
0,0,322,323,5,211,0,0,323,324,5,200,0,0,324,964,3,158,79,0,325,326,5,13,
0,0,326,329,5,200,0,0,327,328,5,94,0,0,328,330,5,70,0,0,329,327,1,0,0,0,
329,330,1,0,0,0,330,331,1,0,0,0,331,332,3,158,79,0,332,333,5,166,0,0,333,
334,5,208,0,0,334,335,3,158,79,0,335,964,1,0,0,0,336,337,5,13,0,0,337,340,
5,200,0,0,338,339,5,94,0,0,339,341,5,70,0,0,340,338,1,0,0,0,340,341,1,0,
0,0,341,342,1,0,0,0,342,343,3,158,79,0,343,344,5,166,0,0,344,347,5,31,0,
0,345,346,5,94,0,0,346,348,5,70,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,
349,1,0,0,0,349,350,3,170,85,0,350,351,5,208,0,0,351,352,3,170,85,0,352,
964,1,0,0,0,353,354,5,13,0,0,354,357,5,200,0,0,355,356,5,94,0,0,356,358,
5,70,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,3,158,79,
0,360,361,5,60,0,0,361,364,5,31,0,0,362,363,5,94,0,0,363,365,5,70,0,0,364,
362,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,367,3,158,79,0,367,964,1,
0,0,0,368,369,5,13,0,0,369,372,5,200,0,0,370,371,5,94,0,0,371,373,5,70,0,
0,372,370,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,375,3,158,79,0,375,
376,5,10,0,0,376,380,5,31,0,0,377,378,5,94,0,0,378,379,5,137,0,0,379,381,
5,70,0,0,380,377,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,3,14,7,
0,383,964,1,0,0,0,384,385,5,13,0,0,385,388,5,200,0,0,386,387,5,94,0,0,387,
389,5,70,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,3,158,
79,0,391,392,5,10,0,0,392,393,3,174,87,0,393,964,1,0,0,0,394,395,5,13,0,
0,395,398,5,200,0,0,396,397,5,94,0,0,397,399,5,70,0,0,398,396,1,0,0,0,398,
399,1,0,0,0,399,400,1,0,0,0,400,401,3,158,79,0,401,402,5,60,0,0,402,405,
5,36,0,0,403,404,5,94,0,0,404,406,5,70,0,0,405,403,1,0,0,0,405,406,1,0,0,
0,406,407,1,0,0,0,407,408,3,170,85,0,408,964,1,0,0,0,409,410,5,13,0,0,410,
413,5,200,0,0,411,412,5,94,0,0,412,414,5,70,0,0,413,411,1,0,0,0,413,414,
1,0,0,0,414,415,1,0,0,0,415,416,3,158,79,0,416,418,5,13,0,0,417,419,5,31,
0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,421,3,170,85,0,421,
422,5,189,0,0,422,423,5,137,0,0,423,424,5,138,0,0,424,964,1,0,0,0,425,426,
5,13,0,0,426,429,5,200,0,0,427,428,5,94,0,0,428,430,5,70,0,0,429,427,1,0,
0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,3,158,79,0,432,434,5,13,0,0,
433,435,5,31,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,437,
3,170,85,0,437,438,5,60,0,0,438,439,5,137,0,0,439,440,5,138,0,0,440,964,
1,0,0,0,441,442,5,13,0,0,442,445,5,200,0,0,443,444,5,94,0,0,444,446,5,70,
0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,448,3,158,79,0,448,
449,5,189,0,0,449,450,5,159,0,0,450,451,3,18,9,0,451,964,1,0,0,0,452,453,
5,14,0,0,453,456,3,158,79,0,454,455,5,231,0,0,455,457,3,18,9,0,456,454,1,
0,0,0,456,457,1,0,0,0,457,964,1,0,0,0,458,459,5,37,0,0,459,460,5,213,0,0,
460,461,3,158,79,0,461,474,5,18,0,0,462,463,5,2,0,0,463,468,3,22,11,0,464,
465,5,4,0,0,465,467,3,22,11,0,466,464,1,0,0,0,467,470,1,0,0,0,468,466,1,
0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,468,1,0,0,0,471,472,5,3,0,0,472,
475,1,0,0,0,473,475,3,114,57,0,474,462,1,0,0,0,474,473,1,0,0,0,475,964,1,
0,0,0,476,479,5,37,0,0,477,478,5,146,0,0,478,480,5,168,0,0,479,477,1,0,0,
0,479,480,1,0,0,0,480,481,1,0,0,0,481,482,5,228,0,0,482,485,3,158,79,0,483,
484,5,185,0,0,484,486,7,1,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,487,1,
0,0,0,487,488,5,18,0,0,488,489,3,8,4,0,489,964,1,0,0,0,490,491,5,13,0,0,
491,494,5,228,0,0,492,493,5,94,0,0,493,495,5,70,0,0,494,492,1,0,0,0,494,
495,1,0,0,0,495,496,1,0,0,0,496,497,3,158,79,0,497,498,5,166,0,0,498,499,
5,208,0,0,499,500,3,158,79,0,500,964,1,0,0,0,501,502,5,60,0,0,502,505,5,
228,0,0,503,504,5,94,0,0,504,506,5,70,0,0,505,503,1,0,0,0,505,506,1,0,0,
0,506,507,1,0,0,0,507,964,3,158,79,0,508,509,5,37,0,0,509,510,5,124,0,0,
510,514,5,228,0,0,511,512,5,94,0,0,512,513,5,137,0,0,513,515,5,70,0,0,514,
511,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,519,3,158,79,0,517,518,5,
33,0,0,518,520,3,94,47,0,519,517,1,0,0,0,519,520,1,0,0,0,520,523,1,0,0,0,
521,522,5,231,0,0,522,524,3,18,9,0,523,521,1,0,0,0,523,524,1,0,0,0,524,525,
1,0,0,0,525,531,5,18,0,0,526,532,3,8,4,0,527,528,5,2,0,0,528,529,3,8,4,0,
529,530,5,3,0,0,530,532,1,0,0,0,531,526,1,0,0,0,531,527,1,0,0,0,532,964,
1,0,0,0,533,534,5,60,0,0,534,535,5,124,0,0,535,538,5,228,0,0,536,537,5,94,
0,0,537,539,5,70,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,
964,3,158,79,0,541,542,5,164,0,0,542,543,5,124,0,0,543,544,5,228,0,0,544,
547,3,158,79,0,545,546,5,230,0,0,546,548,3,86,43,0,547,545,1,0,0,0,547,548,
1,0,0,0,548,964,1,0,0,0,549,552,5,37,0,0,550,551,5,146,0,0,551,553,5,168,
0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,556,5,203,0,0,555,
554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,5,83,0,0,558,559,3,158,
79,0,559,568,5,2,0,0,560,565,3,22,11,0,561,562,5,4,0,0,562,564,3,22,11,0,
563,561,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,569,
1,0,0,0,567,565,1,0,0,0,568,560,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,
570,571,5,3,0,0,571,572,5,173,0,0,572,575,3,114,57,0,573,574,5,33,0,0,574,
576,3,94,47,0,575,573,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,578,3,
24,12,0,578,579,3,32,16,0,579,964,1,0,0,0,580,581,5,13,0,0,581,582,5,83,
0,0,582,584,3,158,79,0,583,585,3,112,56,0,584,583,1,0,0,0,584,585,1,0,0,
0,585,586,1,0,0,0,586,587,3,28,14,0,587,964,1,0,0,0,588,590,5,60,0,0,589,
591,5,203,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,595,5,
83,0,0,593,594,5,94,0,0,594,596,5,70,0,0,595,593,1,0,0,0,595,596,1,0,0,0,
596,597,1,0,0,0,597,599,3,158,79,0,598,600,3,112,56,0,599,598,1,0,0,0,599,
600,1,0,0,0,600,964,1,0,0,0,601,602,5,25,0,0,602,603,3,158,79,0,603,612,
5,2,0,0,604,609,3,154,77,0,605,606,5,4,0,0,606,608,3,154,77,0,607,605,1,
0,0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,613,1,0,0,0,611,
609,1,0,0,0,612,604,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,5,3,
0,0,615,964,1,0,0,0,616,617,5,37,0,0,617,618,5,176,0,0,618,622,3,170,85,
0,619,620,5,231,0,0,620,621,5,11,0,0,621,623,3,164,82,0,622,619,1,0,0,0,
622,623,1,0,0,0,623,964,1,0,0,0,624,625,5,60,0,0,625,626,5,176,0,0,626,964,
3,170,85,0,627,628,5,85,0,0,628,629,3,168,84,0,629,630,5,208,0,0,630,635,
3,166,83,0,631,632,5,4,0,0,632,634,3,166,83,0,633,631,1,0,0,0,634,637,1,
0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,641,1,0,0,0,637,635,1,0,0,0,638,
639,5,231,0,0,639,640,5,11,0,0,640,642,5,145,0,0,641,638,1,0,0,0,641,642,
1,0,0,0,642,646,1,0,0,0,643,644,5,86,0,0,644,645,5,24,0,0,645,647,3,164,
82,0,646,643,1,0,0,0,646,647,1,0,0,0,647,964,1,0,0,0,648,652,5,174,0,0,649,
650,5,11,0,0,650,651,5,145,0,0,651,653,5,79,0,0,652,649,1,0,0,0,652,653,
1,0,0,0,653,654,1,0,0,0,654,655,3,168,84,0,655,656,5,81,0,0,656,661,3,166,
83,0,657,658,5,4,0,0,658,660,3,166,83,0,659,657,1,0,0,0,660,663,1,0,0,0,
661,659,1,0,0,0,661,662,1,0,0,0,662,667,1,0,0,0,663,661,1,0,0,0,664,665,
5,86,0,0,665,666,5,24,0,0,666,668,3,164,82,0,667,664,1,0,0,0,667,668,1,0,
0,0,668,964,1,0,0,0,669,670,5,189,0,0,670,674,5,176,0,0,671,675,5,12,0,0,
672,675,5,135,0,0,673,675,3,170,85,0,674,671,1,0,0,0,674,672,1,0,0,0,674,
673,1,0,0,0,675,964,1,0,0,0,676,687,5,85,0,0,677,682,3,156,78,0,678,679,
5,4,0,0,679,681,3,156,78,0,680,678,1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,
0,682,683,1,0,0,0,683,688,1,0,0,0,684,682,1,0,0,0,685,686,5,12,0,0,686,688,
5,158,0,0,687,677,1,0,0,0,687,685,1,0,0,0,688,689,1,0,0,0,689,691,5,143,
0,0,690,692,5,200,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,
694,3,158,79,0,694,695,5,208,0,0,695,699,3,166,83,0,696,697,5,231,0,0,697,
698,5,85,0,0,698,700,5,145,0,0,699,696,1,0,0,0,699,700,1,0,0,0,700,964,1,
0,0,0,701,705,5,174,0,0,702,703,5,85,0,0,703,704,5,145,0,0,704,706,5,79,
0,0,705,702,1,0,0,0,705,706,1,0,0,0,706,717,1,0,0,0,707,712,3,156,78,0,708,
709,5,4,0,0,709,711,3,156,78,0,710,708,1,0,0,0,711,714,1,0,0,0,712,710,1,
0,0,0,712,713,1,0,0,0,713,718,1,0,0,0,714,712,1,0,0,0,715,716,5,12,0,0,716,
718,5,158,0,0,717,707,1,0,0,0,717,715,1,0,0,0,718,719,1,0,0,0,719,721,5,
143,0,0,720,722,5,200,0,0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,
0,723,724,3,158,79,0,724,725,5,81,0,0,725,726,3,166,83,0,726,964,1,0,0,0,
727,728,5,191,0,0,728,734,5,87,0,0,729,731,5,143,0,0,730,732,5,200,0,0,731,
730,1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,735,3,158,79,0,734,729,1,
0,0,0,734,735,1,0,0,0,735,964,1,0,0,0,736,738,5,71,0,0,737,739,5,14,0,0,
738,737,1,0,0,0,738,739,1,0,0,0,739,741,1,0,0,0,740,742,5,226,0,0,741,740,
1,0,0,0,741,742,1,0,0,0,742,754,1,0,0,0,743,744,5,2,0,0,744,749,3,148,74,
0,745,746,5,4,0,0,746,748,3,148,74,0,747,745,1,0,0,0,748,751,1,0,0,0,749,
747,1,0,0,0,749,750,1,0,0,0,750,752,1,0,0,0,751,749,1,0,0,0,752,753,5,3,
0,0,753,755,1,0,0,0,754,743,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,
964,3,6,3,0,757,758,5,191,0,0,758,759,5,37,0,0,759,760,5,200,0,0,760,964,
3,158,79,0,761,762,5,191,0,0,762,763,5,37,0,0,763,764,5,182,0,0,764,964,
3,158,79,0,765,766,5,191,0,0,766,767,5,37,0,0,767,768,5,228,0,0,768,964,
3,158,79,0,769,770,5,191,0,0,770,771,5,37,0,0,771,772,5,124,0,0,772,773,
5,228,0,0,773,964,3,158,79,0,774,775,5,191,0,0,775,776,5,37,0,0,776,777,
5,83,0,0,777,779,3,158,79,0,778,780,3,112,56,0,779,778,1,0,0,0,779,780,1,
0,0,0,780,964,1,0,0,0,781,782,5,191,0,0,782,785,5,201,0,0,783,784,7,2,0,
0,784,786,3,158,79,0,785,783,1,0,0,0,785,786,1,0,0,0,786,793,1,0,0,0,787,
788,5,117,0,0,788,791,3,94,47,0,789,790,5,66,0,0,790,792,3,94,47,0,791,789,
1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,787,1,0,0,0,793,794,1,0,0,0,
794,964,1,0,0,0,795,796,5,191,0,0,796,799,5,183,0,0,797,798,7,2,0,0,798,
800,3,170,85,0,799,797,1,0,0,0,799,800,1,0,0,0,800,807,1,0,0,0,801,802,5,
117,0,0,802,805,3,94,47,0,803,804,5,66,0,0,804,806,3,94,47,0,805,803,1,0,
0,0,805,806,1,0,0,0,806,808,1,0,0,0,807,801,1,0,0,0,807,808,1,0,0,0,808,
964,1,0,0,0,809,810,5,191,0,0,810,817,5,30,0,0,811,812,5,117,0,0,812,815,
3,94,47,0,813,814,5,66,0,0,814,816,3,94,47,0,815,813,1,0,0,0,815,816,1,0,
0,0,816,818,1,0,0,0,817,811,1,0,0,0,817,818,1,0,0,0,818,964,1,0,0,0,819,
820,5,191,0,0,820,821,5,32,0,0,821,822,7,2,0,0,822,964,3,158,79,0,823,824,
5,191,0,0,824,825,5,195,0,0,825,826,5,79,0,0,826,964,3,158,79,0,827,828,
5,191,0,0,828,829,5,195,0,0,829,830,5,79,0,0,830,831,5,2,0,0,831,832,3,54,
27,0,832,833,5,3,0,0,833,964,1,0,0,0,834,836,5,191,0,0,835,837,5,41,0,0,
836,835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,841,5,177,0,0,839,840,
7,2,0,0,840,842,3,170,85,0,841,839,1,0,0,0,841,842,1,0,0,0,842,964,1,0,0,
0,843,844,5,191,0,0,844,845,5,176,0,0,845,848,5,87,0,0,846,847,7,2,0,0,847,
849,3,170,85,0,848,846,1,0,0,0,848,849,1,0,0,0,849,964,1,0,0,0,850,851,5,
54,0,0,851,964,3,158,79,0,852,853,5,53,0,0,853,964,3,158,79,0,854,855,5,
191,0,0,855,862,5,84,0,0,856,857,5,117,0,0,857,860,3,94,47,0,858,859,5,66,
0,0,859,861,3,94,47,0,860,858,1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,
856,1,0,0,0,862,863,1,0,0,0,863,964,1,0,0,0,864,865,5,191,0,0,865,872,5,
188,0,0,866,867,5,117,0,0,867,870,3,94,47,0,868,869,5,66,0,0,869,871,3,94,
47,0,870,868,1,0,0,0,870,871,1,0,0,0,871,873,1,0,0,0,872,866,1,0,0,0,872,
873,1,0,0,0,873,964,1,0,0,0,874,875,5,189,0,0,875,876,5,188,0,0,876,877,
3,158,79,0,877,878,5,236,0,0,878,879,3,84,42,0,879,964,1,0,0,0,880,881,5,
169,0,0,881,882,5,188,0,0,882,964,3,158,79,0,883,884,5,194,0,0,884,893,5,
209,0,0,885,890,3,150,75,0,886,887,5,4,0,0,887,889,3,150,75,0,888,886,1,
0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,894,1,0,0,0,892,
890,1,0,0,0,893,885,1,0,0,0,893,894,1,0,0,0,894,964,1,0,0,0,895,897,5,34,
0,0,896,898,5,232,0,0,897,896,1,0,0,0,897,898,1,0,0,0,898,964,1,0,0,0,899,
901,5,178,0,0,900,902,5,232,0,0,901,900,1,0,0,0,901,902,1,0,0,0,902,964,
1,0,0,0,903,904,5,156,0,0,904,905,3,170,85,0,905,906,5,81,0,0,906,907,3,
6,3,0,907,964,1,0,0,0,908,909,5,50,0,0,909,910,5,156,0,0,910,964,3,170,85,
0,911,912,5,69,0,0,912,922,3,170,85,0,913,914,5,223,0,0,914,919,3,84,42,
0,915,916,5,4,0,0,916,918,3,84,42,0,917,915,1,0,0,0,918,921,1,0,0,0,919,
917,1,0,0,0,919,920,1,0,0,0,920,923,1,0,0,0,921,919,1,0,0,0,922,913,1,0,
0,0,922,923,1,0,0,0,923,964,1,0,0,0,924,925,5,54,0,0,925,926,5,99,0,0,926,
964,3,170,85,0,927,928,5,54,0,0,928,929,5,150,0,0,929,964,3,170,85,0,930,
931,5,220,0,0,931,932,3,158,79,0,932,933,5,189,0,0,933,938,3,146,73,0,934,
935,5,4,0,0,935,937,3,146,73,0,936,934,1,0,0,0,937,940,1,0,0,0,938,936,1,
0,0,0,938,939,1,0,0,0,939,943,1,0,0,0,940,938,1,0,0,0,941,942,5,230,0,0,
942,944,3,86,43,0,943,941,1,0,0,0,943,944,1,0,0,0,944,964,1,0,0,0,945,946,
5,125,0,0,946,947,5,103,0,0,947,952,3,158,79,0,948,950,5,18,0,0,949,948,
1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,953,3,170,85,0,952,949,1,0,0,
0,952,953,1,0,0,0,953,954,1,0,0,0,954,955,5,223,0,0,955,956,3,68,34,0,956,
957,5,143,0,0,957,959,3,84,42,0,958,960,3,138,69,0,959,958,1,0,0,0,960,961,
1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,964,1,0,0,0,963,203,1,0,0,0,
963,204,1,0,0,0,963,206,1,0,0,0,963,211,1,0,0,0,963,223,1,0,0,0,963,233,
1,0,0,0,963,240,1,0,0,0,963,274,1,0,0,0,963,300,1,0,0,0,963,307,1,0,0,0,
963,315,1,0,0,0,963,322,1,0,0,0,963,325,1,0,0,0,963,336,1,0,0,0,963,353,
1,0,0,0,963,368,1,0,0,0,963,384,1,0,0,0,963,394,1,0,0,0,963,409,1,0,0,0,
963,425,1,0,0,0,963,441,1,0,0,0,963,452,1,0,0,0,963,458,1,0,0,0,963,476,
1,0,0,0,963,490,1,0,0,0,963,501,1,0,0,0,963,508,1,0,0,0,963,533,1,0,0,0,
963,541,1,0,0,0,963,549,1,0,0,0,963,580,1,0,0,0,963,588,1,0,0,0,963,601,
1,0,0,0,963,616,1,0,0,0,963,624,1,0,0,0,963,627,1,0,0,0,963,648,1,0,0,0,
963,669,1,0,0,0,963,676,1,0,0,0,963,701,1,0,0,0,963,727,1,0,0,0,963,736,
1,0,0,0,963,757,1,0,0,0,963,761,1,0,0,0,963,765,1,0,0,0,963,769,1,0,0,0,
963,774,1,0,0,0,963,781,1,0,0,0,963,795,1,0,0,0,963,809,1,0,0,0,963,819,
1,0,0,0,963,823,1,0,0,0,963,827,1,0,0,0,963,834,1,0,0,0,963,843,1,0,0,0,
963,850,1,0,0,0,963,852,1,0,0,0,963,854,1,0,0,0,963,864,1,0,0,0,963,874,
1,0,0,0,963,880,1,0,0,0,963,883,1,0,0,0,963,895,1,0,0,0,963,899,1,0,0,0,
963,903,1,0,0,0,963,908,1,0,0,0,963,911,1,0,0,0,963,924,1,0,0,0,963,927,
1,0,0,0,963,930,1,0,0,0,963,945,1,0,0,0,964,7,1,0,0,0,965,967,3,10,5,0,966,
965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,969,3,46,23,0,969,9,1,0,
0,0,970,972,5,231,0,0,971,973,5,163,0,0,972,971,1,0,0,0,972,973,1,0,0,0,
973,974,1,0,0,0,974,979,3,62,31,0,975,976,5,4,0,0,976,978,3,62,31,0,977,
975,1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,11,1,0,0,
0,981,979,1,0,0,0,982,986,3,174,87,0,983,986,3,14,7,0,984,986,3,16,8,0,985,
982,1,0,0,0,985,983,1,0,0,0,985,984,1,0,0,0,986,13,1,0,0,0,987,988,3,170,
85,0,988,991,3,114,57,0,989,990,5,137,0,0,990,992,5,138,0,0,991,989,1,0,
0,0,991,992,1,0,0,0,992,995,1,0,0,0,993,994,5,33,0,0,994,996,3,94,47,0,995,
993,1,0,0,0,995,996,1,0,0,0,996,999,1,0,0,0,997,998,5,231,0,0,998,1000,3,
18,9,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,15,1,0,0,0,1001,1002,5,117,
0,0,1002,1005,3,158,79,0,1003,1004,7,3,0,0,1004,1006,5,159,0,0,1005,1003,
1,0,0,0,1005,1006,1,0,0,0,1006,17,1,0,0,0,1007,1008,5,2,0,0,1008,1013,3,
20,10,0,1009,1010,5,4,0,0,1010,1012,3,20,10,0,1011,1009,1,0,0,0,1012,1015,
1,0,0,0,1013,1011,1,0,0,0,1013,1014,1,0,0,0,1014,1016,1,0,0,0,1015,1013,
1,0,0,0,1016,1017,5,3,0,0,1017,19,1,0,0,0,1018,1019,3,170,85,0,1019,1020,
5,236,0,0,1020,1021,3,84,42,0,1021,21,1,0,0,0,1022,1023,3,170,85,0,1023,
1024,3,114,57,0,1024,23,1,0,0,0,1025,1027,3,26,13,0,1026,1025,1,0,0,0,1027,
1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,25,1,0,0,0,1030,1028,
1,0,0,0,1031,1032,5,112,0,0,1032,1036,3,38,19,0,1033,1036,3,40,20,0,1034,
1036,3,42,21,0,1035,1031,1,0,0,0,1035,1033,1,0,0,0,1035,1034,1,0,0,0,1036,
27,1,0,0,0,1037,1039,3,30,15,0,1038,1037,1,0,0,0,1039,1042,1,0,0,0,1040,
1038,1,0,0,0,1040,1041,1,0,0,0,1041,29,1,0,0,0,1042,1040,1,0,0,0,1043,1044,
3,42,21,0,1044,31,1,0,0,0,1045,1048,3,34,17,0,1046,1048,3,36,18,0,1047,1045,
1,0,0,0,1047,1046,1,0,0,0,1048,33,1,0,0,0,1049,1050,5,172,0,0,1050,1051,
3,84,42,0,1051,35,1,0,0,0,1052,1055,5,73,0,0,1053,1054,5,128,0,0,1054,1056,
3,44,22,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,37,1,0,0,0,1057,1060,
5,193,0,0,1058,1060,3,170,85,0,1059,1057,1,0,0,0,1059,1058,1,0,0,0,1060,
39,1,0,0,0,1061,1065,5,56,0,0,1062,1063,5,137,0,0,1063,1065,5,56,0,0,1064,
1061,1,0,0,0,1064,1062,1,0,0,0,1065,41,1,0,0,0,1066,1067,5,173,0,0,1067,
1068,5,138,0,0,1068,1069,5,143,0,0,1069,1070,5,138,0,0,1070,1076,5,99,0,
0,1071,1072,5,26,0,0,1072,1073,5,143,0,0,1073,1074,5,138,0,0,1074,1076,5,
99,0,0,1075,1066,1,0,0,0,1075,1071,1,0,0,0,1076,43,1,0,0,0,1077,1078,3,170,
85,0,1078,45,1,0,0,0,1079,1090,3,48,24,0,1080,1081,5,147,0,0,1081,1082,5,
24,0,0,1082,1087,3,52,26,0,1083,1084,5,4,0,0,1084,1086,3,52,26,0,1085,1083,
1,0,0,0,1086,1089,1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1091,
1,0,0,0,1089,1087,1,0,0,0,1090,1080,1,0,0,0,1090,1091,1,0,0,0,1091,1097,
1,0,0,0,1092,1093,5,142,0,0,1093,1095,5,251,0,0,1094,1096,7,4,0,0,1095,1094,
1,0,0,0,1095,1096,1,0,0,0,1096,1098,1,0,0,0,1097,1092,1,0,0,0,1097,1098,
1,0,0,0,1098,1108,1,0,0,0,1099,1100,5,118,0,0,1100,1107,7,5,0,0,1101,1102,
5,75,0,0,1102,1103,5,77,0,0,1103,1104,5,251,0,0,1104,1105,5,181,0,0,1105,
1107,5,144,0,0,1106,1099,1,0,0,0,1106,1101,1,0,0,0,1107,1109,1,0,0,0,1108,
1106,1,0,0,0,1108,1109,1,0,0,0,1109,47,1,0,0,0,1110,1111,6,24,-1,0,1111,
1112,3,50,25,0,1112,1127,1,0,0,0,1113,1114,10,2,0,0,1114,1116,5,101,0,0,
1115,1117,3,64,32,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,1,0,0,
0,1118,1126,3,48,24,3,1119,1120,10,1,0,0,1120,1122,7,6,0,0,1121,1123,3,64,
32,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,0,1124,1126,3,48,
24,2,1125,1113,1,0,0,0,1125,1119,1,0,0,0,1126,1129,1,0,0,0,1127,1125,1,0,
0,0,1127,1128,1,0,0,0,1128,49,1,0,0,0,1129,1127,1,0,0,0,1130,1147,3,54,27,
0,1131,1132,5,200,0,0,1132,1147,3,158,79,0,1133,1134,5,225,0,0,1134,1139,
3,84,42,0,1135,1136,5,4,0,0,1136,1138,3,84,42,0,1137,1135,1,0,0,0,1138,1141,
1,0,0,0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,1147,1,0,0,0,1141,1139,
1,0,0,0,1142,1143,5,2,0,0,1143,1144,3,46,23,0,1144,1145,5,3,0,0,1145,1147,
1,0,0,0,1146,1130,1,0,0,0,1146,1131,1,0,0,0,1146,1133,1,0,0,0,1146,1142,
1,0,0,0,1147,51,1,0,0,0,1148,1150,3,84,42,0,1149,1151,7,7,0,0,1150,1149,
1,0,0,0,1150,1151,1,0,0,0,1151,1154,1,0,0,0,1152,1153,5,140,0,0,1153,1155,
7,8,0,0,1154,1152,1,0,0,0,1154,1155,1,0,0,0,1155,53,1,0,0,0,1156,1158,5,
186,0,0,1157,1159,3,64,32,0,1158,1157,1,0,0,0,1158,1159,1,0,0,0,1159,1160,
1,0,0,0,1160,1165,3,66,33,0,1161,1162,5,4,0,0,1162,1164,3,66,33,0,1163,1161,
1,0,0,0,1164,1167,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,1177,
1,0,0,0,1167,1165,1,0,0,0,1168,1169,5,81,0,0,1169,1174,3,68,34,0,1170,1171,
5,4,0,0,1171,1173,3,68,34,0,1172,1170,1,0,0,0,1173,1176,1,0,0,0,1174,1172,
1,0,0,0,1174,1175,1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1177,1168,
1,0,0,0,1177,1178,1,0,0,0,1178,1181,1,0,0,0,1179,1180,5,230,0,0,1180,1182,
3,86,43,0,1181,1179,1,0,0,0,1181,1182,1,0,0,0,1182,1186,1,0,0,0,1183,1184,
5,89,0,0,1184,1185,5,24,0,0,1185,1187,3,56,28,0,1186,1183,1,0,0,0,1186,1187,
1,0,0,0,1187,1190,1,0,0,0,1188,1189,5,92,0,0,1189,1191,3,86,43,0,1190,1188,
1,0,0,0,1190,1191,1,0,0,0,1191,55,1,0,0,0,1192,1194,3,64,32,0,1193,1192,
1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1200,3,58,29,0,1196,1197,
5,4,0,0,1197,1199,3,58,29,0,1198,1196,1,0,0,0,1199,1202,1,0,0,0,1200,1198,
1,0,0,0,1200,1201,1,0,0,0,1201,57,1,0,0,0,1202,1200,1,0,0,0,1203,1244,3,
60,30,0,1204,1205,5,179,0,0,1205,1214,5,2,0,0,1206,1211,3,84,42,0,1207,1208,
5,4,0,0,1208,1210,3,84,42,0,1209,1207,1,0,0,0,1210,1213,1,0,0,0,1211,1209,
1,0,0,0,1211,1212,1,0,0,0,1212,1215,1,0,0,0,1213,1211,1,0,0,0,1214,1206,
1,0,0,0,1214,1215,1,0,0,0,1215,1216,1,0,0,0,1216,1244,5,3,0,0,1217,1218,
5,40,0,0,1218,1227,5,2,0,0,1219,1224,3,84,42,0,1220,1221,5,4,0,0,1221,1223,
3,84,42,0,1222,1220,1,0,0,0,1223,1226,1,0,0,0,1224,1222,1,0,0,0,1224,1225,
1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1227,1219,1,0,0,0,1227,1228,
1,0,0,0,1228,1229,1,0,0,0,1229,1244,5,3,0,0,1230,1231,5,90,0,0,1231,1232,
5,190,0,0,1232,1233,5,2,0,0,1233,1238,3,60,30,0,1234,1235,5,4,0,0,1235,1237,
3,60,30,0,1236,1234,1,0,0,0,1237,1240,1,0,0,0,1238,1236,1,0,0,0,1238,1239,
1,0,0,0,1239,1241,1,0,0,0,1240,1238,1,0,0,0,1241,1242,5,3,0,0,1242,1244,
1,0,0,0,1243,1203,1,0,0,0,1243,1204,1,0,0,0,1243,1217,1,0,0,0,1243,1230,
1,0,0,0,1244,59,1,0,0,0,1245,1254,5,2,0,0,1246,1251,3,84,42,0,1247,1248,
5,4,0,0,1248,1250,3,84,42,0,1249,1247,1,0,0,0,1250,1253,1,0,0,0,1251,1249,
1,0,0,0,1251,1252,1,0,0,0,1252,1255,1,0,0,0,1253,1251,1,0,0,0,1254,1246,
1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1259,5,3,0,0,1257,1259,
3,84,42,0,1258,1245,1,0,0,0,1258,1257,1,0,0,0,1259,61,1,0,0,0,1260,1262,
3,170,85,0,1261,1263,3,80,40,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,
1264,1,0,0,0,1264,1265,5,18,0,0,1265,1266,5,2,0,0,1266,1267,3,8,4,0,1267,
1268,5,3,0,0,1268,63,1,0,0,0,1269,1270,7,9,0,0,1270,65,1,0,0,0,1271,1276,
3,84,42,0,1272,1274,5,18,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1275,
1,0,0,0,1275,1277,3,170,85,0,1276,1273,1,0,0,0,1276,1277,1,0,0,0,1277,1284,
1,0,0,0,1278,1279,3,158,79,0,1279,1280,5,1,0,0,1280,1281,5,244,0,0,1281,
1284,1,0,0,0,1282,1284,5,244,0,0,1283,1271,1,0,0,0,1283,1278,1,0,0,0,1283,
1282,1,0,0,0,1284,67,1,0,0,0,1285,1286,6,34,-1,0,1286,1287,3,74,37,0,1287,
1306,1,0,0,0,1288,1302,10,2,0,0,1289,1290,5,39,0,0,1290,1291,5,109,0,0,1291,
1303,3,74,37,0,1292,1293,3,70,35,0,1293,1294,5,109,0,0,1294,1295,3,68,34,
0,1295,1296,3,72,36,0,1296,1303,1,0,0,0,1297,1298,5,129,0,0,1298,1299,3,
70,35,0,1299,1300,5,109,0,0,1300,1301,3,74,37,0,1301,1303,1,0,0,0,1302,1289,
1,0,0,0,1302,1292,1,0,0,0,1302,1297,1,0,0,0,1303,1305,1,0,0,0,1304,1288,
1,0,0,0,1305,1308,1,0,0,0,1306,1304,1,0,0,0,1306,1307,1,0,0,0,1307,69,1,
0,0,0,1308,1306,1,0,0,0,1309,1311,5,98,0,0,1310,1309,1,0,0,0,1310,1311,1,
0,0,0,1311,1325,1,0,0,0,1312,1314,5,115,0,0,1313,1315,5,149,0,0,1314,1313,
1,0,0,0,1314,1315,1,0,0,0,1315,1325,1,0,0,0,1316,1318,5,175,0,0,1317,1319,
5,149,0,0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,1325,1,0,0,0,1320,1322,
5,82,0,0,1321,1323,5,149,0,0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,1325,
1,0,0,0,1324,1310,1,0,0,0,1324,1312,1,0,0,0,1324,1316,1,0,0,0,1324,1320,
1,0,0,0,1325,71,1,0,0,0,1326,1327,5,143,0,0,1327,1341,3,86,43,0,1328,1329,
5,223,0,0,1329,1330,5,2,0,0,1330,1335,3,170,85,0,1331,1332,5,4,0,0,1332,
1334,3,170,85,0,1333,1331,1,0,0,0,1334,1337,1,0,0,0,1335,1333,1,0,0,0,1335,
1336,1,0,0,0,1336,1338,1,0,0,0,1337,1335,1,0,0,0,1338,1339,5,3,0,0,1339,
1341,1,0,0,0,1340,1326,1,0,0,0,1340,1328,1,0,0,0,1341,73,1,0,0,0,1342,1349,
3,78,39,0,1343,1344,5,202,0,0,1344,1345,3,76,38,0,1345,1346,5,2,0,0,1346,
1347,3,84,42,0,1347,1348,5,3,0,0,1348,1350,1,0,0,0,1349,1343,1,0,0,0,1349,
1350,1,0,0,0,1350,75,1,0,0,0,1351,1352,7,10,0,0,1352,77,1,0,0,0,1353,1361,
3,82,41,0,1354,1356,5,18,0,0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,1357,
1,0,0,0,1357,1359,3,170,85,0,1358,1360,3,80,40,0,1359,1358,1,0,0,0,1359,
1360,1,0,0,0,1360,1362,1,0,0,0,1361,1355,1,0,0,0,1361,1362,1,0,0,0,1362,
79,1,0,0,0,1363,1364,5,2,0,0,1364,1369,3,170,85,0,1365,1366,5,4,0,0,1366,
1368,3,170,85,0,1367,1365,1,0,0,0,1368,1371,1,0,0,0,1369,1367,1,0,0,0,1369,
1370,1,0,0,0,1370,1372,1,0,0,0,1371,1369,1,0,0,0,1372,1373,5,3,0,0,1373,
81,1,0,0,0,1374,1376,3,158,79,0,1375,1377,3,160,80,0,1376,1375,1,0,0,0,1376,
1377,1,0,0,0,1377,1412,1,0,0,0,1378,1379,5,2,0,0,1379,1380,3,8,4,0,1380,
1381,5,3,0,0,1381,1412,1,0,0,0,1382,1383,5,219,0,0,1383,1384,5,2,0,0,1384,
1389,3,84,42,0,1385,1386,5,4,0,0,1386,1388,3,84,42,0,1387,1385,1,0,0,0,1388,
1391,1,0,0,0,1389,1387,1,0,0,0,1389,1390,1,0,0,0,1390,1392,1,0,0,0,1391,
1389,1,0,0,0,1392,1395,5,3,0,0,1393,1394,5,231,0,0,1394,1396,5,148,0,0,1395,
1393,1,0,0,0,1395,1396,1,0,0,0,1396,1412,1,0,0,0,1397,1398,5,114,0,0,1398,
1399,5,2,0,0,1399,1400,3,8,4,0,1400,1401,5,3,0,0,1401,1412,1,0,0,0,1402,
1403,5,2,0,0,1403,1404,3,68,34,0,1404,1405,5,3,0,0,1405,1412,1,0,0,0,1406,
1407,5,200,0,0,1407,1408,5,2,0,0,1408,1409,3,116,58,0,1409,1410,5,3,0,0,
1410,1412,1,0,0,0,1411,1374,1,0,0,0,1411,1378,1,0,0,0,1411,1382,1,0,0,0,
1411,1397,1,0,0,0,1411,1402,1,0,0,0,1411,1406,1,0,0,0,1412,83,1,0,0,0,1413,
1414,3,86,43,0,1414,85,1,0,0,0,1415,1416,6,43,-1,0,1416,1418,3,90,45,0,1417,
1419,3,88,44,0,1418,1417,1,0,0,0,1418,1419,1,0,0,0,1419,1423,1,0,0,0,1420,
1421,5,137,0,0,1421,1423,3,86,43,3,1422,1415,1,0,0,0,1422,1420,1,0,0,0,1423,
1432,1,0,0,0,1424,1425,10,2,0,0,1425,1426,5,15,0,0,1426,1431,3,86,43,3,1427,
1428,10,1,0,0,1428,1429,5,146,0,0,1429,1431,3,86,43,2,1430,1424,1,0,0,0,
1430,1427,1,0,0,0,1431,1434,1,0,0,0,1432,1430,1,0,0,0,1432,1433,1,0,0,0,
1433,87,1,0,0,0,1434,1432,1,0,0,0,1435,1436,3,100,50,0,1436,1437,3,90,45,
0,1437,1497,1,0,0,0,1438,1439,3,100,50,0,1439,1440,3,102,51,0,1440,1441,
5,2,0,0,1441,1442,3,8,4,0,1442,1443,5,3,0,0,1443,1497,1,0,0,0,1444,1446,
5,137,0,0,1445,1444,1,0,0,0,1445,1446,1,0,0,0,1446,1447,1,0,0,0,1447,1448,
5,23,0,0,1448,1449,3,90,45,0,1449,1450,5,15,0,0,1450,1451,3,90,45,0,1451,
1497,1,0,0,0,1452,1454,5,137,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,1454,
1455,1,0,0,0,1455,1456,5,96,0,0,1456,1457,5,2,0,0,1457,1462,3,84,42,0,1458,
1459,5,4,0,0,1459,1461,3,84,42,0,1460,1458,1,0,0,0,1461,1464,1,0,0,0,1462,
1460,1,0,0,0,1462,1463,1,0,0,0,1463,1465,1,0,0,0,1464,1462,1,0,0,0,1465,
1466,5,3,0,0,1466,1497,1,0,0,0,1467,1469,5,137,0,0,1468,1467,1,0,0,0,1468,
1469,1,0,0,0,1469,1470,1,0,0,0,1470,1471,5,96,0,0,1471,1472,5,2,0,0,1472,
1473,3,8,4,0,1473,1474,5,3,0,0,1474,1497,1,0,0,0,1475,1477,5,137,0,0,1476,
1475,1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1479,5,117,0,0,1479,
1482,3,90,45,0,1480,1481,5,66,0,0,1481,1483,3,90,45,0,1482,1480,1,0,0,0,
1482,1483,1,0,0,0,1483,1497,1,0,0,0,1484,1486,5,106,0,0,1485,1487,5,137,
0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,1488,1497,5,138,
0,0,1489,1491,5,106,0,0,1490,1492,5,137,0,0,1491,1490,1,0,0,0,1491,1492,
1,0,0,0,1492,1493,1,0,0,0,1493,1494,5,58,0,0,1494,1495,5,81,0,0,1495,1497,
3,90,45,0,1496,1435,1,0,0,0,1496,1438,1,0,0,0,1496,1445,1,0,0,0,1496,1453,
1,0,0,0,1496,1468,1,0,0,0,1496,1476,1,0,0,0,1496,1484,1,0,0,0,1496,1489,
1,0,0,0,1497,89,1,0,0,0,1498,1499,6,45,-1,0,1499,1503,3,92,46,0,1500,1501,
7,11,0,0,1501,1503,3,90,45,4,1502,1498,1,0,0,0,1502,1500,1,0,0,0,1503,1518,
1,0,0,0,1504,1505,10,3,0,0,1505,1506,7,12,0,0,1506,1517,3,90,45,4,1507,1508,
10,2,0,0,1508,1509,7,11,0,0,1509,1517,3,90,45,3,1510,1511,10,1,0,0,1511,
1512,5,247,0,0,1512,1517,3,90,45,2,1513,1514,10,5,0,0,1514,1515,5,20,0,0,
1515,1517,3,98,49,0,1516,1504,1,0,0,0,1516,1507,1,0,0,0,1516,1510,1,0,0,
0,1516,1513,1,0,0,0,1517,1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,
0,1519,91,1,0,0,0,1520,1518,1,0,0,0,1521,1522,6,46,-1,0,1522,1761,5,138,
0,0,1523,1761,3,106,53,0,1524,1525,3,170,85,0,1525,1526,3,94,47,0,1526,1761,
1,0,0,0,1527,1528,5,260,0,0,1528,1761,3,94,47,0,1529,1761,3,172,86,0,1530,
1761,3,104,52,0,1531,1761,3,94,47,0,1532,1761,5,250,0,0,1533,1761,5,5,0,
0,1534,1535,5,154,0,0,1535,1536,5,2,0,0,1536,1537,3,90,45,0,1537,1538,5,
96,0,0,1538,1539,3,90,45,0,1539,1540,5,3,0,0,1540,1761,1,0,0,0,1541,1542,
5,2,0,0,1542,1545,3,84,42,0,1543,1544,5,4,0,0,1544,1546,3,84,42,0,1545,1543,
1,0,0,0,1546,1547,1,0,0,0,1547,1545,1,0,0,0,1547,1548,1,0,0,0,1548,1549,
1,0,0,0,1549,1550,5,3,0,0,1550,1761,1,0,0,0,1551,1552,5,180,0,0,1552,1553,
5,2,0,0,1553,1558,3,84,42,0,1554,1555,5,4,0,0,1555,1557,3,84,42,0,1556,1554,
1,0,0,0,1557,1560,1,0,0,0,1558,1556,1,0,0,0,1558,1559,1,0,0,0,1559,1561,
1,0,0,0,1560,1558,1,0,0,0,1561,1562,5,3,0,0,1562,1761,1,0,0,0,1563,1564,
3,158,79,0,1564,1565,5,2,0,0,1565,1566,5,244,0,0,1566,1568,5,3,0,0,1567,
1569,3,136,68,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,1571,1,0,0,0,1570,
1572,3,140,70,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1761,1,0,0,0,1573,
1574,3,158,79,0,1574,1586,5,2,0,0,1575,1577,3,64,32,0,1576,1575,1,0,0,0,
1576,1577,1,0,0,0,1577,1578,1,0,0,0,1578,1583,3,84,42,0,1579,1580,5,4,0,
0,1580,1582,3,84,42,0,1581,1579,1,0,0,0,1582,1585,1,0,0,0,1583,1581,1,0,
0,0,1583,1584,1,0,0,0,1584,1587,1,0,0,0,1585,1583,1,0,0,0,1586,1576,1,0,
0,0,1586,1587,1,0,0,0,1587,1598,1,0,0,0,1588,1589,5,147,0,0,1589,1590,5,
24,0,0,1590,1595,3,52,26,0,1591,1592,5,4,0,0,1592,1594,3,52,26,0,1593,1591,
1,0,0,0,1594,1597,1,0,0,0,1595,1593,1,0,0,0,1595,1596,1,0,0,0,1596,1599,
1,0,0,0,1597,1595,1,0,0,0,1598,1588,1,0,0,0,1598,1599,1,0,0,0,1599,1600,
1,0,0,0,1600,1602,5,3,0,0,1601,1603,3,136,68,0,1602,1601,1,0,0,0,1602,1603,
1,0,0,0,1603,1608,1,0,0,0,1604,1606,3,96,48,0,1605,1604,1,0,0,0,1605,1606,
1,0,0,0,1606,1607,1,0,0,0,1607,1609,3,140,70,0,1608,1605,1,0,0,0,1608,1609,
1,0,0,0,1609,1761,1,0,0,0,1610,1611,3,170,85,0,1611,1612,5,6,0,0,1612,1613,
3,84,42,0,1613,1761,1,0,0,0,1614,1623,5,2,0,0,1615,1620,3,170,85,0,1616,
1617,5,4,0,0,1617,1619,3,170,85,0,1618,1616,1,0,0,0,1619,1622,1,0,0,0,1620,
1618,1,0,0,0,1620,1621,1,0,0,0,1621,1624,1,0,0,0,1622,1620,1,0,0,0,1623,
1615,1,0,0,0,1623,1624,1,0,0,0,1624,1625,1,0,0,0,1625,1626,5,3,0,0,1626,
1627,5,6,0,0,1627,1761,3,84,42,0,1628,1629,5,2,0,0,1629,1630,3,8,4,0,1630,
1631,5,3,0,0,1631,1761,1,0,0,0,1632,1633,5,70,0,0,1633,1634,5,2,0,0,1634,
1635,3,8,4,0,1635,1636,5,3,0,0,1636,1761,1,0,0,0,1637,1638,5,28,0,0,1638,
1640,3,90,45,0,1639,1641,3,134,67,0,1640,1639,1,0,0,0,1641,1642,1,0,0,0,
1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,1646,1,0,0,0,1644,1645,5,61,0,0,
1645,1647,3,84,42,0,1646,1644,1,0,0,0,1646,1647,1,0,0,0,1647,1648,1,0,0,
0,1648,1649,5,64,0,0,1649,1761,1,0,0,0,1650,1652,5,28,0,0,1651,1653,3,134,
67,0,1652,1651,1,0,0,0,1653,1654,1,0,0,0,1654,1652,1,0,0,0,1654,1655,1,0,
0,0,1655,1658,1,0,0,0,1656,1657,5,61,0,0,1657,1659,3,84,42,0,1658,1656,1,
0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,0,0,1660,1661,5,64,0,0,1661,1761,1,
0,0,0,1662,1663,5,29,0,0,1663,1664,5,2,0,0,1664,1665,3,84,42,0,1665,1666,
5,18,0,0,1666,1667,3,114,57,0,1667,1668,5,3,0,0,1668,1761,1,0,0,0,1669,1670,
5,212,0,0,1670,1671,5,2,0,0,1671,1672,3,84,42,0,1672,1673,5,18,0,0,1673,
1674,3,114,57,0,1674,1675,5,3,0,0,1675,1761,1,0,0,0,1676,1677,5,17,0,0,1677,
1686,5,7,0,0,1678,1683,3,84,42,0,1679,1680,5,4,0,0,1680,1682,3,84,42,0,1681,
1679,1,0,0,0,1682,1685,1,0,0,0,1683,1681,1,0,0,0,1683,1684,1,0,0,0,1684,
1687,1,0,0,0,1685,1683,1,0,0,0,1686,1678,1,0,0,0,1686,1687,1,0,0,0,1687,
1688,1,0,0,0,1688,1761,5,8,0,0,1689,1761,3,170,85,0,1690,1761,5,42,0,0,1691,
1695,5,44,0,0,1692,1693,5,2,0,0,1693,1694,5,251,0,0,1694,1696,5,3,0,0,1695,
1692,1,0,0,0,1695,1696,1,0,0,0,1696,1761,1,0,0,0,1697,1701,5,45,0,0,1698,
1699,5,2,0,0,1699,1700,5,251,0,0,1700,1702,5,3,0,0,1701,1698,1,0,0,0,1701,
1702,1,0,0,0,1702,1761,1,0,0,0,1703,1707,5,119,0,0,1704,1705,5,2,0,0,1705,
1706,5,251,0,0,1706,1708,5,3,0,0,1707,1704,1,0,0,0,1707,1708,1,0,0,0,1708,
1761,1,0,0,0,1709,1713,5,120,0,0,1710,1711,5,2,0,0,1711,1712,5,251,0,0,1712,
1714,5,3,0,0,1713,1710,1,0,0,0,1713,1714,1,0,0,0,1714,1761,1,0,0,0,1715,
1761,5,46,0,0,1716,1717,5,196,0,0,1717,1718,5,2,0,0,1718,1719,3,90,45,0,
1719,1720,5,81,0,0,1720,1723,3,90,45,0,1721,1722,5,79,0,0,1722,1724,3,90,
45,0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,1725,1,0,0,0,1725,1726,5,3,
0,0,1726,1761,1,0,0,0,1727,1728,5,136,0,0,1728,1729,5,2,0,0,1729,1732,3,
90,45,0,1730,1731,5,4,0,0,1731,1733,3,110,55,0,1732,1730,1,0,0,0,1732,1733,
1,0,0,0,1733,1734,1,0,0,0,1734,1735,5,3,0,0,1735,1761,1,0,0,0,1736,1737,
5,72,0,0,1737,1738,5,2,0,0,1738,1739,3,170,85,0,1739,1740,5,81,0,0,1740,
1741,3,90,45,0,1741,1742,5,3,0,0,1742,1761,1,0,0,0,1743,1744,5,2,0,0,1744,
1745,3,84,42,0,1745,1746,5,3,0,0,1746,1761,1,0,0,0,1747,1748,5,90,0,0,1748,
1757,5,2,0,0,1749,1754,3,158,79,0,1750,1751,5,4,0,0,1751,1753,3,158,79,0,
1752,1750,1,0,0,0,1753,1756,1,0,0,0,1754,1752,1,0,0,0,1754,1755,1,0,0,0,
1755,1758,1,0,0,0,1756,1754,1,0,0,0,1757,1749,1,0,0,0,1757,1758,1,0,0,0,
1758,1759,1,0,0,0,1759,1761,5,3,0,0,1760,1521,1,0,0,0,1760,1523,1,0,0,0,
1760,1524,1,0,0,0,1760,1527,1,0,0,0,1760,1529,1,0,0,0,1760,1530,1,0,0,0,
1760,1531,1,0,0,0,1760,1532,1,0,0,0,1760,1533,1,0,0,0,1760,1534,1,0,0,0,
1760,1541,1,0,0,0,1760,1551,1,0,0,0,1760,1563,1,0,0,0,1760,1573,1,0,0,0,
1760,1610,1,0,0,0,1760,1614,1,0,0,0,1760,1628,1,0,0,0,1760,1632,1,0,0,0,
1760,1637,1,0,0,0,1760,1650,1,0,0,0,1760,1662,1,0,0,0,1760,1669,1,0,0,0,
1760,1676,1,0,0,0,1760,1689,1,0,0,0,1760,1690,1,0,0,0,1760,1691,1,0,0,0,
1760,1697,1,0,0,0,1760,1703,1,0,0,0,1760,1709,1,0,0,0,1760,1715,1,0,0,0,
1760,1716,1,0,0,0,1760,1727,1,0,0,0,1760,1736,1,0,0,0,1760,1743,1,0,0,0,
1760,1747,1,0,0,0,1761,1772,1,0,0,0,1762,1763,10,14,0,0,1763,1764,5,7,0,
0,1764,1765,3,90,45,0,1765,1766,5,8,0,0,1766,1771,1,0,0,0,1767,1768,10,12,
0,0,1768,1769,5,1,0,0,1769,1771,3,170,85,0,1770,1762,1,0,0,0,1770,1767,1,
0,0,0,1771,1774,1,0,0,0,1772,1770,1,0,0,0,1772,1773,1,0,0,0,1773,93,1,0,
0,0,1774,1772,1,0,0,0,1775,1782,5,248,0,0,1776,1779,5,249,0,0,1777,1778,
5,214,0,0,1778,1780,5,248,0,0,1779,1777,1,0,0,0,1779,1780,1,0,0,0,1780,1782,
1,0,0,0,1781,1775,1,0,0,0,1781,1776,1,0,0,0,1782,95,1,0,0,0,1783,1784,5,
95,0,0,1784,1788,5,140,0,0,1785,1786,5,170,0,0,1786,1788,5,140,0,0,1787,
1783,1,0,0,0,1787,1785,1,0,0,0,1788,97,1,0,0,0,1789,1790,5,206,0,0,1790,
1791,5,235,0,0,1791,1796,3,106,53,0,1792,1793,5,206,0,0,1793,1794,5,235,
0,0,1794,1796,3,94,47,0,1795,1789,1,0,0,0,1795,1792,1,0,0,0,1796,99,1,0,
0,0,1797,1798,7,13,0,0,1798,101,1,0,0,0,1799,1800,7,14,0,0,1800,103,1,0,
0,0,1801,1802,7,15,0,0,1802,105,1,0,0,0,1803,1805,5,102,0,0,1804,1806,7,
11,0,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,1807,1,0,0,0,1807,1808,3,
94,47,0,1808,1811,3,108,54,0,1809,1810,5,208,0,0,1810,1812,3,108,54,0,1811,
1809,1,0,0,0,1811,1812,1,0,0,0,1812,107,1,0,0,0,1813,1814,7,16,0,0,1814,
109,1,0,0,0,1815,1816,7,17,0,0,1816,111,1,0,0,0,1817,1826,5,2,0,0,1818,1823,
3,114,57,0,1819,1820,5,4,0,0,1820,1822,3,114,57,0,1821,1819,1,0,0,0,1822,
1825,1,0,0,0,1823,1821,1,0,0,0,1823,1824,1,0,0,0,1824,1827,1,0,0,0,1825,
1823,1,0,0,0,1826,1818,1,0,0,0,1826,1827,1,0,0,0,1827,1828,1,0,0,0,1828,
1829,5,3,0,0,1829,113,1,0,0,0,1830,1831,6,57,-1,0,1831,1832,5,17,0,0,1832,
1833,5,238,0,0,1833,1834,3,114,57,0,1834,1835,5,240,0,0,1835,1878,1,0,0,
0,1836,1837,5,122,0,0,1837,1838,5,238,0,0,1838,1839,3,114,57,0,1839,1840,
5,4,0,0,1840,1841,3,114,57,0,1841,1842,5,240,0,0,1842,1878,1,0,0,0,1843,
1844,5,180,0,0,1844,1845,5,2,0,0,1845,1846,3,170,85,0,1846,1853,3,114,57,
0,1847,1848,5,4,0,0,1848,1849,3,170,85,0,1849,1850,3,114,57,0,1850,1852,
1,0,0,0,1851,1847,1,0,0,0,1852,1855,1,0,0,0,1853,1851,1,0,0,0,1853,1854,
1,0,0,0,1854,1856,1,0,0,0,1855,1853,1,0,0,0,1856,1857,5,3,0,0,1857,1878,
1,0,0,0,1858,1870,3,132,66,0,1859,1860,5,2,0,0,1860,1865,3,130,65,0,1861,
1862,5,4,0,0,1862,1864,3,130,65,0,1863,1861,1,0,0,0,1864,1867,1,0,0,0,1865,
1863,1,0,0,0,1865,1866,1,0,0,0,1866,1868,1,0,0,0,1867,1865,1,0,0,0,1868,
1869,5,3,0,0,1869,1871,1,0,0,0,1870,1859,1,0,0,0,1870,1871,1,0,0,0,1871,
1878,1,0,0,0,1872,1873,5,102,0,0,1873,1874,3,108,54,0,1874,1875,5,208,0,
0,1875,1876,3,108,54,0,1876,1878,1,0,0,0,1877,1830,1,0,0,0,1877,1836,1,0,
0,0,1877,1843,1,0,0,0,1877,1858,1,0,0,0,1877,1872,1,0,0,0,1878,1883,1,0,
0,0,1879,1880,10,6,0,0,1880,1882,5,17,0,0,1881,1879,1,0,0,0,1882,1885,1,
0,0,0,1883,1881,1,0,0,0,1883,1884,1,0,0,0,1884,115,1,0,0,0,1885,1883,1,0,
0,0,1886,1887,3,158,79,0,1887,1896,5,2,0,0,1888,1893,3,118,59,0,1889,1890,
5,4,0,0,1890,1892,3,118,59,0,1891,1889,1,0,0,0,1892,1895,1,0,0,0,1893,1891,
1,0,0,0,1893,1894,1,0,0,0,1894,1897,1,0,0,0,1895,1893,1,0,0,0,1896,1888,
1,0,0,0,1896,1897,1,0,0,0,1897,1907,1,0,0,0,1898,1899,5,38,0,0,1899,1904,
3,128,64,0,1900,1901,5,4,0,0,1901,1903,3,128,64,0,1902,1900,1,0,0,0,1903,
1906,1,0,0,0,1904,1902,1,0,0,0,1904,1905,1,0,0,0,1905,1908,1,0,0,0,1906,
1904,1,0,0,0,1907,1898,1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,0,0,0,1909,
1910,5,3,0,0,1910,117,1,0,0,0,1911,1912,3,170,85,0,1912,1913,5,9,0,0,1913,
1915,1,0,0,0,1914,1911,1,0,0,0,1914,1915,1,0,0,0,1915,1919,1,0,0,0,1916,
1920,3,120,60,0,1917,1920,3,124,62,0,1918,1920,3,84,42,0,1919,1916,1,0,0,
0,1919,1917,1,0,0,0,1919,1918,1,0,0,0,1920,119,1,0,0,0,1921,1939,3,122,61,
0,1922,1923,5,152,0,0,1923,1937,5,24,0,0,1924,1933,5,2,0,0,1925,1930,3,84,
42,0,1926,1927,5,4,0,0,1927,1929,3,84,42,0,1928,1926,1,0,0,0,1929,1932,1,
0,0,0,1930,1928,1,0,0,0,1930,1931,1,0,0,0,1931,1934,1,0,0,0,1932,1930,1,
0,0,0,1933,1925,1,0,0,0,1933,1934,1,0,0,0,1934,1935,1,0,0,0,1935,1938,5,
3,0,0,1936,1938,3,84,42,0,1937,1924,1,0,0,0,1937,1936,1,0,0,0,1938,1940,
1,0,0,0,1939,1922,1,0,0,0,1939,1940,1,0,0,0,1940,1947,1,0,0,0,1941,1942,
5,160,0,0,1942,1943,5,229,0,0,1943,1948,5,62,0,0,1944,1945,5,110,0,0,1945,
1946,5,229,0,0,1946,1948,5,62,0,0,1947,1941,1,0,0,0,1947,1944,1,0,0,0,1947,
1948,1,0,0,0,1948,1965,1,0,0,0,1949,1950,5,147,0,0,1950,1963,5,24,0,0,1951,
1952,5,2,0,0,1952,1957,3,52,26,0,1953,1954,5,4,0,0,1954,1956,3,52,26,0,1955,
1953,1,0,0,0,1956,1959,1,0,0,0,1957,1955,1,0,0,0,1957,1958,1,0,0,0,1958,
1960,1,0,0,0,1959,1957,1,0,0,0,1960,1961,5,3,0,0,1961,1964,1,0,0,0,1962,
1964,3,52,26,0,1963,1951,1,0,0,0,1963,1962,1,0,0,0,1964,1966,1,0,0,0,1965,
1949,1,0,0,0,1965,1966,1,0,0,0,1966,121,1,0,0,0,1967,1968,5,200,0,0,1968,
1969,5,2,0,0,1969,1970,3,158,79,0,1970,1978,5,3,0,0,1971,1973,5,18,0,0,1972,
1971,1,0,0,0,1972,1973,1,0,0,0,1973,1974,1,0,0,0,1974,1976,3,170,85,0,1975,
1977,3,80,40,0,1976,1975,1,0,0,0,1976,1977,1,0,0,0,1977,1979,1,0,0,0,1978,
1972,1,0,0,0,1978,1979,1,0,0,0,1979,1994,1,0,0,0,1980,1981,5,200,0,0,1981,
1982,5,2,0,0,1982,1983,3,8,4,0,1983,1991,5,3,0,0,1984,1986,5,18,0,0,1985,
1984,1,0,0,0,1985,1986,1,0,0,0,1986,1987,1,0,0,0,1987,1989,3,170,85,0,1988,
1990,3,80,40,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1992,1,0,0,0,1991,
1985,1,0,0,0,1991,1992,1,0,0,0,1992,1994,1,0,0,0,1993,1967,1,0,0,0,1993,
1980,1,0,0,0,1994,123,1,0,0,0,1995,1996,5,55,0,0,1996,1997,5,2,0,0,1997,
2002,3,126,63,0,1998,1999,5,4,0,0,1999,2001,3,126,63,0,2000,1998,1,0,0,0,
2001,2004,1,0,0,0,2002,2000,1,0,0,0,2002,2003,1,0,0,0,2003,2005,1,0,0,0,
2004,2002,1,0,0,0,2005,2006,5,3,0,0,2006,2014,1,0,0,0,2007,2008,5,29,0,0,
2008,2009,5,2,0,0,2009,2010,5,138,0,0,2010,2011,5,18,0,0,2011,2012,5,55,
0,0,2012,2014,5,3,0,0,2013,1995,1,0,0,0,2013,2007,1,0,0,0,2014,125,1,0,0,
0,2015,2017,3,170,85,0,2016,2018,3,114,57,0,2017,2016,1,0,0,0,2017,2018,
1,0,0,0,2018,127,1,0,0,0,2019,2020,5,2,0,0,2020,2021,3,158,79,0,2021,2022,
5,4,0,0,2022,2027,3,158,79,0,2023,2024,5,4,0,0,2024,2026,3,158,79,0,2025,
2023,1,0,0,0,2026,2029,1,0,0,0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,
2030,1,0,0,0,2029,2027,1,0,0,0,2030,2031,5,3,0,0,2031,129,1,0,0,0,2032,2035,
5,251,0,0,2033,2035,3,114,57,0,2034,2032,1,0,0,0,2034,2033,1,0,0,0,2035,
131,1,0,0,0,2036,2041,5,258,0,0,2037,2041,5,259,0,0,2038,2041,5,260,0,0,
2039,2041,3,158,79,0,2040,2036,1,0,0,0,2040,2037,1,0,0,0,2040,2038,1,0,0,
0,2040,2039,1,0,0,0,2041,133,1,0,0,0,2042,2043,5,229,0,0,2043,2044,3,84,
42,0,2044,2045,5,205,0,0,2045,2046,3,84,42,0,2046,135,1,0,0,0,2047,2048,
5,76,0,0,2048,2049,5,2,0,0,2049,2050,5,230,0,0,2050,2051,3,86,43,0,2051,
2052,5,3,0,0,2052,137,1,0,0,0,2053,2054,5,229,0,0,2054,2055,5,123,0,0,2055,
2056,5,205,0,0,2056,2057,5,220,0,0,2057,2058,5,189,0,0,2058,2059,3,170,85,
0,2059,2060,5,236,0,0,2060,2068,3,84,42,0,2061,2062,5,4,0,0,2062,2063,3,
170,85,0,2063,2064,5,236,0,0,2064,2065,3,84,42,0,2065,2067,1,0,0,0,2066,
2061,1,0,0,0,2067,2070,1,0,0,0,2068,2066,1,0,0,0,2068,2069,1,0,0,0,2069,
2102,1,0,0,0,2070,2068,1,0,0,0,2071,2072,5,229,0,0,2072,2073,5,137,0,0,2073,
2074,5,123,0,0,2074,2075,5,205,0,0,2075,2087,5,100,0,0,2076,2077,5,2,0,0,
2077,2082,3,170,85,0,2078,2079,5,4,0,0,2079,2081,3,170,85,0,2080,2078,1,
0,0,0,2081,2084,1,0,0,0,2082,2080,1,0,0,0,2082,2083,1,0,0,0,2083,2085,1,
0,0,0,2084,2082,1,0,0,0,2085,2086,5,3,0,0,2086,2088,1,0,0,0,2087,2076,1,
0,0,0,2087,2088,1,0,0,0,2088,2089,1,0,0,0,2089,2090,5,225,0,0,2090,2091,
5,2,0,0,2091,2096,3,84,42,0,2092,2093,5,4,0,0,2093,2095,3,84,42,0,2094,2092,
1,0,0,0,2095,2098,1,0,0,0,2096,2094,1,0,0,0,2096,2097,1,0,0,0,2097,2099,
1,0,0,0,2098,2096,1,0,0,0,2099,2100,5,3,0,0,2100,2102,1,0,0,0,2101,2053,
1,0,0,0,2101,2071,1,0,0,0,2102,139,1,0,0,0,2103,2104,5,151,0,0,2104,2115,
5,2,0,0,2105,2106,5,152,0,0,2106,2107,5,24,0,0,2107,2112,3,84,42,0,2108,
2109,5,4,0,0,2109,2111,3,84,42,0,2110,2108,1,0,0,0,2111,2114,1,0,0,0,2112,
2110,1,0,0,0,2112,2113,1,0,0,0,2113,2116,1,0,0,0,2114,2112,1,0,0,0,2115,
2105,1,0,0,0,2115,2116,1,0,0,0,2116,2127,1,0,0,0,2117,2118,5,147,0,0,2118,
2119,5,24,0,0,2119,2124,3,52,26,0,2120,2121,5,4,0,0,2121,2123,3,52,26,0,
2122,2120,1,0,0,0,2123,2126,1,0,0,0,2124,2122,1,0,0,0,2124,2125,1,0,0,0,
2125,2128,1,0,0,0,2126,2124,1,0,0,0,2127,2117,1,0,0,0,2127,2128,1,0,0,0,
2128,2130,1,0,0,0,2129,2131,3,142,71,0,2130,2129,1,0,0,0,2130,2131,1,0,0,
0,2131,2132,1,0,0,0,2132,2133,5,3,0,0,2133,141,1,0,0,0,2134,2135,5,161,0,
0,2135,2159,3,144,72,0,2136,2137,5,181,0,0,2137,2159,3,144,72,0,2138,2139,
5,91,0,0,2139,2159,3,144,72,0,2140,2141,5,161,0,0,2141,2142,5,23,0,0,2142,
2143,3,144,72,0,2143,2144,5,15,0,0,2144,2145,3,144,72,0,2145,2159,1,0,0,
0,2146,2147,5,181,0,0,2147,2148,5,23,0,0,2148,2149,3,144,72,0,2149,2150,
5,15,0,0,2150,2151,3,144,72,0,2151,2159,1,0,0,0,2152,2153,5,91,0,0,2153,
2154,5,23,0,0,2154,2155,3,144,72,0,2155,2156,5,15,0,0,2156,2157,3,144,72,
0,2157,2159,1,0,0,0,2158,2134,1,0,0,0,2158,2136,1,0,0,0,2158,2138,1,0,0,
0,2158,2140,1,0,0,0,2158,2146,1,0,0,0,2158,2152,1,0,0,0,2159,143,1,0,0,0,
2160,2161,5,215,0,0,2161,2170,5,155,0,0,2162,2163,5,215,0,0,2163,2170,5,
78,0,0,2164,2165,5,41,0,0,2165,2170,5,180,0,0,2166,2167,3,84,42,0,2167,2168,
7,18,0,0,2168,2170,1,0,0,0,2169,2160,1,0,0,0,2169,2162,1,0,0,0,2169,2164,
1,0,0,0,2169,2166,1,0,0,0,2170,145,1,0,0,0,2171,2172,3,170,85,0,2172,2173,
5,236,0,0,2173,2174,3,84,42,0,2174,147,1,0,0,0,2175,2176,5,80,0,0,2176,2180,
7,19,0,0,2177,2178,5,213,0,0,2178,2180,7,20,0,0,2179,2175,1,0,0,0,2179,2177,
1,0,0,0,2180,149,1,0,0,0,2181,2182,5,107,0,0,2182,2183,5,116,0,0,2183,2187,
3,152,76,0,2184,2185,5,162,0,0,2185,2187,7,21,0,0,2186,2181,1,0,0,0,2186,
2184,1,0,0,0,2187,151,1,0,0,0,2188,2189,5,162,0,0,2189,2196,5,216,0,0,2190,
2191,5,162,0,0,2191,2196,5,35,0,0,2192,2193,5,167,0,0,2193,2196,5,162,0,
0,2194,2196,5,187,0,0,2195,2188,1,0,0,0,2195,2190,1,0,0,0,2195,2192,1,0,
0,0,2195,2194,1,0,0,0,2196,153,1,0,0,0,2197,2203,3,84,42,0,2198,2199,3,170,
85,0,2199,2200,5,9,0,0,2200,2201,3,84,42,0,2201,2203,1,0,0,0,2202,2197,1,
0,0,0,2202,2198,1,0,0,0,2203,155,1,0,0,0,2204,2209,5,186,0,0,2205,2209,5,
52,0,0,2206,2209,5,100,0,0,2207,2209,3,170,85,0,2208,2204,1,0,0,0,2208,2205,
1,0,0,0,2208,2206,1,0,0,0,2208,2207,1,0,0,0,2209,157,1,0,0,0,2210,2215,3,
170,85,0,2211,2212,5,1,0,0,2212,2214,3,170,85,0,2213,2211,1,0,0,0,2214,2217,
1,0,0,0,2215,2213,1,0,0,0,2215,2216,1,0,0,0,2216,159,1,0,0,0,2217,2215,1,
0,0,0,2218,2219,5,79,0,0,2219,2220,7,22,0,0,2220,2221,3,162,81,0,2221,2222,
3,90,45,0,2222,161,1,0,0,0,2223,2224,5,18,0,0,2224,2227,5,141,0,0,2225,2227,
5,21,0,0,2226,2223,1,0,0,0,2226,2225,1,0,0,0,2227,163,1,0,0,0,2228,2232,
5,46,0,0,2229,2232,5,43,0,0,2230,2232,3,166,83,0,2231,2228,1,0,0,0,2231,
2229,1,0,0,0,2231,2230,1,0,0,0,2232,165,1,0,0,0,2233,2234,5,222,0,0,2234,
2239,3,170,85,0,2235,2236,5,176,0,0,2236,2239,3,170,85,0,2237,2239,3,170,
85,0,2238,2233,1,0,0,0,2238,2235,1,0,0,0,2238,2237,1,0,0,0,2239,167,1,0,
0,0,2240,2245,3,170,85,0,2241,2242,5,4,0,0,2242,2244,3,170,85,0,2243,2241,
1,0,0,0,2244,2247,1,0,0,0,2245,2243,1,0,0,0,2245,2246,1,0,0,0,2246,169,1,
0,0,0,2247,2245,1,0,0,0,2248,2254,5,254,0,0,2249,2254,5,256,0,0,2250,2254,
3,192,96,0,2251,2254,5,257,0,0,2252,2254,5,255,0,0,2253,2248,1,0,0,0,2253,
2249,1,0,0,0,2253,2250,1,0,0,0,2253,2251,1,0,0,0,2253,2252,1,0,0,0,2254,
171,1,0,0,0,2255,2259,5,252,0,0,2256,2259,5,253,0,0,2257,2259,5,251,0,0,
2258,2255,1,0,0,0,2258,2256,1,0,0,0,2258,2257,1,0,0,0,2259,173,1,0,0,0,2260,
2263,3,176,88,0,2261,2263,3,178,89,0,2262,2260,1,0,0,0,2262,2261,1,0,0,0,
2263,175,1,0,0,0,2264,2265,5,36,0,0,2265,2266,3,170,85,0,2266,2267,3,178,
89,0,2267,177,1,0,0,0,2268,2269,3,180,90,0,2269,2271,3,80,40,0,2270,2272,
3,182,91,0,2271,2270,1,0,0,0,2271,2272,1,0,0,0,2272,179,1,0,0,0,2273,2277,
5,218,0,0,2274,2275,5,157,0,0,2275,2277,5,111,0,0,2276,2273,1,0,0,0,2276,
2274,1,0,0,0,2277,181,1,0,0,0,2278,2280,3,184,92,0,2279,2278,1,0,0,0,2280,
2283,1,0,0,0,2281,2279,1,0,0,0,2281,2282,1,0,0,0,2282,183,1,0,0,0,2283,2281,
1,0,0,0,2284,2288,3,188,94,0,2285,2288,3,186,93,0,2286,2288,3,190,95,0,2287,
2284,1,0,0,0,2287,2285,1,0,0,0,2287,2286,1,0,0,0,2288,185,1,0,0,0,2289,2293,
5,165,0,0,2290,2291,5,137,0,0,2291,2293,5,165,0,0,2292,2289,1,0,0,0,2292,
2290,1,0,0,0,2293,187,1,0,0,0,2294,2295,7,23,0,0,2295,189,1,0,0,0,2296,2300,
5,65,0,0,2297,2298,5,137,0,0,2298,2300,5,65,0,0,2299,2296,1,0,0,0,2299,2297,
1,0,0,0,2300,191,1,0,0,0,2301,2302,7,24,0,0,2302,193,1,0,0,0,296,216,221,
227,231,245,249,253,257,265,269,272,279,288,294,298,304,311,320,329,340,
347,357,364,372,380,388,398,405,413,418,429,434,445,456,468,474,479,485,
494,505,514,519,523,531,538,547,552,555,565,568,575,584,590,595,599,609,
612,622,635,641,646,652,661,667,674,682,687,691,699,705,712,717,721,731,
734,738,741,749,754,779,785,791,793,799,805,807,815,817,836,841,848,860,
862,870,872,890,893,897,901,919,922,938,943,949,952,961,963,966,972,979,
985,991,995,999,1005,1013,1028,1035,1040,1047,1055,1059,1064,1075,1087,1090,
1095,1097,1106,1108,1116,1122,1125,1127,1139,1146,1150,1154,1158,1165,1174,
1177,1181,1186,1190,1193,1200,1211,1214,1224,1227,1238,1243,1251,1254,1258,
1262,1273,1276,1283,1302,1306,1310,1314,1318,1322,1324,1335,1340,1349,1355,
1359,1361,1369,1376,1389,1395,1411,1418,1422,1430,1432,1445,1453,1462,1468,
1476,1482,1486,1491,1496,1502,1516,1518,1547,1558,1568,1571,1576,1583,1586,
1595,1598,1602,1605,1608,1620,1623,1642,1646,1654,1658,1683,1686,1695,1701,
1707,1713,1723,1732,1754,1757,1760,1770,1772,1779,1781,1787,1795,1805,1811,
1823,1826,1853,1865,1870,1877,1883,1893,1896,1904,1907,1914,1919,1930,1933,
1937,1939,1947,1957,1963,1965,1972,1976,1978,1985,1989,1991,1993,2002,2013,
2017,2027,2034,2040,2068,2082,2087,2096,2101,2112,2115,2124,2127,2130,2158,
2169,2179,2186,2195,2202,2208,2215,2226,2231,2238,2245,2253,2258,2262,2271,
2276,2281,2287,2292,2299];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SqlBaseParser extends antlr4.Parser {

    static grammarFileName = "SqlBase.g4";
    static literalNames = [ null, "'.'", "'('", "')'", "','", "'?'", "'->'", 
                            "'['", "']'", "'=>'", "'ADD'", "'ADMIN'", "'ALL'", 
                            "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", 
                            "'AS'", "'ASC'", "'AT'", "'BEFORE'", "'BERNOULLI'", 
                            "'BETWEEN'", "'BY'", "'CALL'", "'CALLED'", "'CASCADE'", 
                            "'CASE'", "'CAST'", "'CATALOGS'", "'COLUMN'", 
                            "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", 
                            "'CONSTRAINT'", "'CREATE'", "'COPARTITION'", 
                            "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                            "'CURRENT_ROLE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                            "'CURRENT_USER'", "'DATA'", "'DATE'", "'DAY'", 
                            "'DEALLOCATE'", "'DEFINER'", "'DELETE'", "'DESC'", 
                            "'DESCRIBE'", "'DESCRIPTOR'", "'DETERMINISTIC'", 
                            "'DISABLED'", "'DISTINCT'", "'DISTRIBUTED'", 
                            "'DROP'", "'ELSE'", "'EMPTY'", "'ENABLED'", 
                            "'END'", "'ENFORCED'", "'ESCAPE'", "'EXCEPT'", 
                            "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
                            "'EXTRACT'", "'EXTERNAL'", "'FALSE'", "'FETCH'", 
                            "'FILTER'", "'FIRST'", "'FOLLOWING'", "'FOR'", 
                            "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTION'", 
                            "'FUNCTIONS'", "'GRANT'", "'GRANTED'", "'GRANTS'", 
                            "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", "'GROUPS'", 
                            "'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", "'IN'", 
                            "'INCLUDING'", "'INNER'", "'INPUT'", "'INSERT'", 
                            "'INTERSECT'", "'INTERVAL'", "'INTO'", "'INVOKER'", 
                            "'IO'", "'IS'", "'ISOLATION'", "'JSON'", "'JOIN'", 
                            "'KEEP'", "'KEY'", "'LANGUAGE'", "'LAST'", "'LATERAL'", 
                            "'LEFT'", "'LEVEL'", "'LIKE'", "'LIMIT'", "'LOCALTIME'", 
                            "'LOCALTIMESTAMP'", "'LOGICAL'", "'MAP'", "'MATCHED'", 
                            "'MATERIALIZED'", "'MERGE'", "'MINUTE'", "'MONTH'", 
                            "'NAME'", "'NATURAL'", "'NFC'", "'NFD'", "'NFKC'", 
                            "'NFKD'", "'NO'", "'NONE'", "'NORMALIZE'", "'NOT'", 
                            "'NULL'", "'NULLIF'", "'NULLS'", "'OF'", "'OFFSET'", 
                            "'ON'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", 
                            "'ORDINALITY'", "'OUTER'", "'OUTPUT'", "'OVER'", 
                            "'PARTITION'", "'PARTITIONS'", "'POSITION'", 
                            "'PRECEDING'", "'PREPARE'", "'PRIMARY'", "'PRIVILEGES'", 
                            "'PROPERTIES'", "'PRUNE'", "'RANGE'", "'READ'", 
                            "'RECURSIVE'", "'REFRESH'", "'RELY'", "'RENAME'", 
                            "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", 
                            "'RESTRICT'", "'RETURN'", "'RETURNS'", "'REVOKE'", 
                            "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
                            "'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEMA'", "'SCHEMAS'", 
                            "'SECOND'", "'SECURITY'", "'SELECT'", "'SERIALIZABLE'", 
                            "'SESSION'", "'SET'", "'SETS'", "'SHOW'", "'SOME'", 
                            "'SQL'", "'START'", "'STATS'", "'SUBSTRING'", 
                            "'SYSTEM'", "'SYSTEM_TIME'", "'SYSTEM_VERSION'", 
                            "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TEMPORARY'", 
                            "'TEXT'", "'THEN'", "'TIME'", "'TIMESTAMP'", 
                            "'TO'", "'TRANSACTION'", "'TRUE'", "'TRUNCATE'", 
                            "'TRY_CAST'", "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", 
                            "'UNCOMMITTED'", "'UNION'", "'UNIQUE'", "'UNNEST'", 
                            "'UPDATE'", "'USE'", "'USER'", "'USING'", "'VALIDATE'", 
                            "'VALUES'", "'VERBOSE'", "'VERSION'", "'VIEW'", 
                            "'WHEN'", "'WHERE'", "'WITH'", "'WORK'", "'WRITE'", 
                            "'YEAR'", "'ZONE'", "'='", null, "'<'", "'<='", 
                            "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", 
                            "'||'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, "ADD", "ADMIN", "ALL", "ALTER", 
                             "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", 
                             "AT", "BEFORE", "BERNOULLI", "BETWEEN", "BY", 
                             "CALL", "CALLED", "CASCADE", "CASE", "CAST", 
                             "CATALOGS", "COLUMN", "COLUMNS", "COMMENT", 
                             "COMMIT", "COMMITTED", "CONSTRAINT", "CREATE", 
                             "COPARTITION", "CROSS", "CUBE", "CURRENT", 
                             "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", 
                             "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", 
                             "DATE", "DAY", "DEALLOCATE", "DEFINER", "DELETE", 
                             "DESC", "DESCRIBE", "DESCRIPTOR", "DETERMINISTIC", 
                             "DISABLED", "DISTINCT", "DISTRIBUTED", "DROP", 
                             "ELSE", "EMPTY", "ENABLED", "END", "ENFORCED", 
                             "ESCAPE", "EXCEPT", "EXCLUDING", "EXECUTE", 
                             "EXISTS", "EXPLAIN", "EXTRACT", "EXTERNAL", 
                             "FALSE", "FETCH", "FILTER", "FIRST", "FOLLOWING", 
                             "FOR", "FORMAT", "FROM", "FULL", "FUNCTION", 
                             "FUNCTIONS", "GRANT", "GRANTED", "GRANTS", 
                             "GRAPHVIZ", "GROUP", "GROUPING", "GROUPS", 
                             "HAVING", "HOUR", "IF", "IGNORE", "IN", "INCLUDING", 
                             "INNER", "INPUT", "INSERT", "INTERSECT", "INTERVAL", 
                             "INTO", "INVOKER", "IO", "IS", "ISOLATION", 
                             "JSON", "JOIN", "KEEP", "KEY", "LANGUAGE", 
                             "LAST", "LATERAL", "LEFT", "LEVEL", "LIKE", 
                             "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "LOGICAL", 
                             "MAP", "MATCHED", "MATERIALIZED", "MERGE", 
                             "MINUTE", "MONTH", "NAME", "NATURAL", "NFC", 
                             "NFD", "NFKC", "NFKD", "NO", "NONE", "NORMALIZE", 
                             "NOT", "NULL", "NULLIF", "NULLS", "OF", "OFFSET", 
                             "ON", "ONLY", "OPTION", "OR", "ORDER", "ORDINALITY", 
                             "OUTER", "OUTPUT", "OVER", "PARTITION", "PARTITIONS", 
                             "POSITION", "PRECEDING", "PREPARE", "PRIMARY", 
                             "PRIVILEGES", "PROPERTIES", "PRUNE", "RANGE", 
                             "READ", "RECURSIVE", "REFRESH", "RELY", "RENAME", 
                             "REPEATABLE", "REPLACE", "RESET", "RESPECT", 
                             "RESTRICT", "RETURN", "RETURNS", "REVOKE", 
                             "RIGHT", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", 
                             "ROW", "ROWS", "SCHEMA", "SCHEMAS", "SECOND", 
                             "SECURITY", "SELECT", "SERIALIZABLE", "SESSION", 
                             "SET", "SETS", "SHOW", "SOME", "SQL", "START", 
                             "STATS", "SUBSTRING", "SYSTEM", "SYSTEM_TIME", 
                             "SYSTEM_VERSION", "TABLE", "TABLES", "TABLESAMPLE", 
                             "TEMPORARY", "TEXT", "THEN", "TIME", "TIMESTAMP", 
                             "TO", "TRANSACTION", "TRUE", "TRUNCATE", "TRY_CAST", 
                             "TYPE", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", 
                             "UNION", "UNIQUE", "UNNEST", "UPDATE", "USE", 
                             "USER", "USING", "VALIDATE", "VALUES", "VERBOSE", 
                             "VERSION", "VIEW", "WHEN", "WHERE", "WITH", 
                             "WORK", "WRITE", "YEAR", "ZONE", "EQ", "NEQ", 
                             "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                             "ASTERISK", "SLASH", "PERCENT", "CONCAT", "STRING", 
                             "UNICODE_STRING", "BINARY_LITERAL", "INTEGER_VALUE", 
                             "DECIMAL_VALUE", "DOUBLE_VALUE", "IDENTIFIER", 
                             "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                             "TIME_WITH_TIME_ZONE", "TIMESTAMP_WITH_TIME_ZONE", 
                             "DOUBLE_PRECISION", "SIMPLE_COMMENT", "BRACKETED_COMMENT", 
                             "WS", "UNRECOGNIZED", "DELIMITER" ];
    static ruleNames = [ "singleStatement", "standaloneExpression", "standaloneRoutineBody", 
                         "statement", "query", "with", "tableElement", "columnDefinition", 
                         "likeClause", "properties", "property", "sqlParameterDeclaration", 
                         "routineCharacteristics", "routineCharacteristic", 
                         "alterRoutineCharacteristics", "alterRoutineCharacteristic", 
                         "routineBody", "returnStatement", "externalBodyReference", 
                         "language", "determinism", "nullCallClause", "externalRoutineName", 
                         "queryNoWith", "queryTerm", "queryPrimary", "sortItem", 
                         "querySpecification", "groupBy", "groupingElement", 
                         "groupingSet", "namedQuery", "setQuantifier", "selectItem", 
                         "relation", "joinType", "joinCriteria", "sampledRelation", 
                         "sampleType", "aliasedRelation", "columnAliases", 
                         "relationPrimary", "expression", "booleanExpression", 
                         "predicate", "valueExpression", "primaryExpression", 
                         "string", "nullTreatment", "timeZoneSpecifier", 
                         "comparisonOperator", "comparisonQuantifier", "booleanValue", 
                         "interval", "intervalField", "normalForm", "types", 
                         "type", "tableFunctionCall", "tableFunctionArgument", 
                         "tableArgument", "tableArgumentRelation", "descriptorArgument", 
                         "descriptorField", "copartitionTables", "typeParameter", 
                         "baseType", "whenClause", "filter", "mergeCase", 
                         "over", "windowFrame", "frameBound", "updateAssignment", 
                         "explainOption", "transactionMode", "levelOfIsolation", 
                         "callArgument", "privilege", "qualifiedName", "tableVersionExpression", 
                         "tableVersionState", "grantor", "principal", "roles", 
                         "identifier", "number", "constraintSpecification", 
                         "namedConstraintSpecification", "unnamedConstraintSpecification", 
                         "constraintType", "constraintQualifiers", "constraintQualifier", 
                         "constraintRely", "constraintEnabled", "constraintEnforced", 
                         "nonReserved" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SqlBaseParser.ruleNames;
        this.literalNames = SqlBaseParser.literalNames;
        this.symbolicNames = SqlBaseParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 24:
    	    		return this.queryTerm_sempred(localctx, predIndex);
    	case 34:
    	    		return this.relation_sempred(localctx, predIndex);
    	case 43:
    	    		return this.booleanExpression_sempred(localctx, predIndex);
    	case 45:
    	    		return this.valueExpression_sempred(localctx, predIndex);
    	case 46:
    	    		return this.primaryExpression_sempred(localctx, predIndex);
    	case 57:
    	    		return this.type_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    queryTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    relation_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    booleanExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 2);
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 3);
    		case 6:
    			return this.precpred(this._ctx, 2);
    		case 7:
    			return this.precpred(this._ctx, 1);
    		case 8:
    			return this.precpred(this._ctx, 5);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    primaryExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.precpred(this._ctx, 14);
    		case 10:
    			return this.precpred(this._ctx, 12);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.precpred(this._ctx, 6);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	singleStatement() {
	    let localctx = new SingleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SqlBaseParser.RULE_singleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 194;
	        this.statement();
	        this.state = 195;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	standaloneExpression() {
	    let localctx = new StandaloneExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SqlBaseParser.RULE_standaloneExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 197;
	        this.expression();
	        this.state = 198;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	standaloneRoutineBody() {
	    let localctx = new StandaloneRoutineBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SqlBaseParser.RULE_standaloneRoutineBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 200;
	        this.routineBody();
	        this.state = 201;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SqlBaseParser.RULE_statement);
	    var _la = 0;
	    try {
	        this.state = 963;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new StatementDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 203;
	            this.query();
	            break;

	        case 2:
	            localctx = new UseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 204;
	            this.match(SqlBaseParser.USE);
	            this.state = 205;
	            localctx.schema = this.identifier();
	            break;

	        case 3:
	            localctx = new UseContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 206;
	            this.match(SqlBaseParser.USE);
	            this.state = 207;
	            localctx.catalog = this.identifier();
	            this.state = 208;
	            this.match(SqlBaseParser.T__0);
	            this.state = 209;
	            localctx.schema = this.identifier();
	            break;

	        case 4:
	            localctx = new CreateSchemaContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 211;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 212;
	            this.match(SqlBaseParser.SCHEMA);
	            this.state = 216;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            if(la_===1) {
	                this.state = 213;
	                this.match(SqlBaseParser.IF);
	                this.state = 214;
	                this.match(SqlBaseParser.NOT);
	                this.state = 215;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 218;
	            this.qualifiedName();
	            this.state = 221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 219;
	                this.match(SqlBaseParser.WITH);
	                this.state = 220;
	                this.properties();
	            }

	            break;

	        case 5:
	            localctx = new DropSchemaContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 223;
	            this.match(SqlBaseParser.DROP);
	            this.state = 224;
	            this.match(SqlBaseParser.SCHEMA);
	            this.state = 227;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	            if(la_===1) {
	                this.state = 225;
	                this.match(SqlBaseParser.IF);
	                this.state = 226;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 229;
	            this.qualifiedName();
	            this.state = 231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27 || _la===171) {
	                this.state = 230;
	                _la = this._input.LA(1);
	                if(!(_la===27 || _la===171)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 6:
	            localctx = new RenameSchemaContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 233;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 234;
	            this.match(SqlBaseParser.SCHEMA);
	            this.state = 235;
	            this.qualifiedName();
	            this.state = 236;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 237;
	            this.match(SqlBaseParser.TO);
	            this.state = 238;
	            this.identifier();
	            break;

	        case 7:
	            localctx = new CreateTableAsSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 240;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 241;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 245;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 242;
	                this.match(SqlBaseParser.IF);
	                this.state = 243;
	                this.match(SqlBaseParser.NOT);
	                this.state = 244;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 247;
	            this.qualifiedName();
	            this.state = 249;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 248;
	                this.columnAliases();
	            }

	            this.state = 253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33) {
	                this.state = 251;
	                this.match(SqlBaseParser.COMMENT);
	                this.state = 252;
	                this.string();
	            }

	            this.state = 257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 255;
	                this.match(SqlBaseParser.WITH);
	                this.state = 256;
	                this.properties();
	            }

	            this.state = 259;
	            this.match(SqlBaseParser.AS);
	            this.state = 265;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 260;
	                this.query();
	                break;

	            case 2:
	                this.state = 261;
	                this.match(SqlBaseParser.T__1);
	                this.state = 262;
	                this.query();
	                this.state = 263;
	                this.match(SqlBaseParser.T__2);
	                break;

	            }
	            this.state = 272;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 267;
	                this.match(SqlBaseParser.WITH);
	                this.state = 269;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===134) {
	                    this.state = 268;
	                    this.match(SqlBaseParser.NO);
	                }

	                this.state = 271;
	                this.match(SqlBaseParser.DATA);
	            }

	            break;

	        case 8:
	            localctx = new CreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 274;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 275;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 279;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	            if(la_===1) {
	                this.state = 276;
	                this.match(SqlBaseParser.IF);
	                this.state = 277;
	                this.match(SqlBaseParser.NOT);
	                this.state = 278;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 281;
	            this.qualifiedName();
	            this.state = 282;
	            this.match(SqlBaseParser.T__1);
	            this.state = 283;
	            this.tableElement();
	            this.state = 288;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 284;
	                this.match(SqlBaseParser.T__3);
	                this.state = 285;
	                this.tableElement();
	                this.state = 290;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 291;
	            this.match(SqlBaseParser.T__2);
	            this.state = 294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33) {
	                this.state = 292;
	                this.match(SqlBaseParser.COMMENT);
	                this.state = 293;
	                this.string();
	            }

	            this.state = 298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 296;
	                this.match(SqlBaseParser.WITH);
	                this.state = 297;
	                this.properties();
	            }

	            break;

	        case 9:
	            localctx = new DropTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 300;
	            this.match(SqlBaseParser.DROP);
	            this.state = 301;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 304;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            if(la_===1) {
	                this.state = 302;
	                this.match(SqlBaseParser.IF);
	                this.state = 303;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 306;
	            this.qualifiedName();
	            break;

	        case 10:
	            localctx = new InsertIntoContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 307;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 308;
	            this.match(SqlBaseParser.INTO);
	            this.state = 309;
	            this.qualifiedName();
	            this.state = 311;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 310;
	                this.columnAliases();

	            }
	            this.state = 313;
	            this.query();
	            break;

	        case 11:
	            localctx = new DeleteContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 315;
	            this.match(SqlBaseParser.DELETE);
	            this.state = 316;
	            this.match(SqlBaseParser.FROM);
	            this.state = 317;
	            this.qualifiedName();
	            this.state = 320;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===230) {
	                this.state = 318;
	                this.match(SqlBaseParser.WHERE);
	                this.state = 319;
	                this.booleanExpression(0);
	            }

	            break;

	        case 12:
	            localctx = new TruncateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 322;
	            this.match(SqlBaseParser.TRUNCATE);
	            this.state = 323;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 324;
	            this.qualifiedName();
	            break;

	        case 13:
	            localctx = new RenameTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 325;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 326;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 329;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	            if(la_===1) {
	                this.state = 327;
	                this.match(SqlBaseParser.IF);
	                this.state = 328;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 331;
	            localctx.from = this.qualifiedName();
	            this.state = 332;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 333;
	            this.match(SqlBaseParser.TO);
	            this.state = 334;
	            localctx.to = this.qualifiedName();
	            break;

	        case 14:
	            localctx = new RenameColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 336;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 337;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 340;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	            if(la_===1) {
	                this.state = 338;
	                this.match(SqlBaseParser.IF);
	                this.state = 339;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 342;
	            localctx.tableName = this.qualifiedName();
	            this.state = 343;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 344;
	            this.match(SqlBaseParser.COLUMN);
	            this.state = 347;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	            if(la_===1) {
	                this.state = 345;
	                this.match(SqlBaseParser.IF);
	                this.state = 346;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 349;
	            localctx.from = this.identifier();
	            this.state = 350;
	            this.match(SqlBaseParser.TO);
	            this.state = 351;
	            localctx.to = this.identifier();
	            break;

	        case 15:
	            localctx = new DropColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 353;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 354;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 357;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	            if(la_===1) {
	                this.state = 355;
	                this.match(SqlBaseParser.IF);
	                this.state = 356;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 359;
	            localctx.tableName = this.qualifiedName();
	            this.state = 360;
	            this.match(SqlBaseParser.DROP);
	            this.state = 361;
	            this.match(SqlBaseParser.COLUMN);
	            this.state = 364;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 362;
	                this.match(SqlBaseParser.IF);
	                this.state = 363;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 366;
	            localctx.column = this.qualifiedName();
	            break;

	        case 16:
	            localctx = new AddColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 368;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 369;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 372;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 370;
	                this.match(SqlBaseParser.IF);
	                this.state = 371;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 374;
	            localctx.tableName = this.qualifiedName();
	            this.state = 375;
	            this.match(SqlBaseParser.ADD);
	            this.state = 376;
	            this.match(SqlBaseParser.COLUMN);
	            this.state = 380;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	            if(la_===1) {
	                this.state = 377;
	                this.match(SqlBaseParser.IF);
	                this.state = 378;
	                this.match(SqlBaseParser.NOT);
	                this.state = 379;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 382;
	            localctx.column = this.columnDefinition();
	            break;

	        case 17:
	            localctx = new AddConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 384;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 385;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 388;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            if(la_===1) {
	                this.state = 386;
	                this.match(SqlBaseParser.IF);
	                this.state = 387;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 390;
	            localctx.tableName = this.qualifiedName();
	            this.state = 391;
	            this.match(SqlBaseParser.ADD);
	            this.state = 392;
	            this.constraintSpecification();
	            break;

	        case 18:
	            localctx = new DropConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 394;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 395;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 398;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	            if(la_===1) {
	                this.state = 396;
	                this.match(SqlBaseParser.IF);
	                this.state = 397;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 400;
	            localctx.tableName = this.qualifiedName();
	            this.state = 401;
	            this.match(SqlBaseParser.DROP);
	            this.state = 402;
	            this.match(SqlBaseParser.CONSTRAINT);
	            this.state = 405;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            if(la_===1) {
	                this.state = 403;
	                this.match(SqlBaseParser.IF);
	                this.state = 404;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 407;
	            localctx.name = this.identifier();
	            break;

	        case 19:
	            localctx = new AlterColumnSetNotNullContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 409;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 410;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 413;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	            if(la_===1) {
	                this.state = 411;
	                this.match(SqlBaseParser.IF);
	                this.state = 412;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 415;
	            localctx.tableName = this.qualifiedName();
	            this.state = 416;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 418;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 417;
	                this.match(SqlBaseParser.COLUMN);

	            }
	            this.state = 420;
	            localctx.column = this.identifier();
	            this.state = 421;
	            this.match(SqlBaseParser.SET);
	            this.state = 422;
	            this.match(SqlBaseParser.NOT);
	            this.state = 423;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 20:
	            localctx = new AlterColumnDropNotNullContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 425;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 426;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 429;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	            if(la_===1) {
	                this.state = 427;
	                this.match(SqlBaseParser.IF);
	                this.state = 428;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 431;
	            localctx.tableName = this.qualifiedName();
	            this.state = 432;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 434;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	            if(la_===1) {
	                this.state = 433;
	                this.match(SqlBaseParser.COLUMN);

	            }
	            this.state = 436;
	            localctx.column = this.identifier();
	            this.state = 437;
	            this.match(SqlBaseParser.DROP);
	            this.state = 438;
	            this.match(SqlBaseParser.NOT);
	            this.state = 439;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 21:
	            localctx = new SetTablePropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 441;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 442;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 445;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	            if(la_===1) {
	                this.state = 443;
	                this.match(SqlBaseParser.IF);
	                this.state = 444;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 447;
	            localctx.tableName = this.qualifiedName();
	            this.state = 448;
	            this.match(SqlBaseParser.SET);
	            this.state = 449;
	            this.match(SqlBaseParser.PROPERTIES);
	            this.state = 450;
	            this.properties();
	            break;

	        case 22:
	            localctx = new AnalyzeContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 452;
	            this.match(SqlBaseParser.ANALYZE);
	            this.state = 453;
	            this.qualifiedName();
	            this.state = 456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 454;
	                this.match(SqlBaseParser.WITH);
	                this.state = 455;
	                this.properties();
	            }

	            break;

	        case 23:
	            localctx = new CreateTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 458;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 459;
	            this.match(SqlBaseParser.TYPE);
	            this.state = 460;
	            this.qualifiedName();
	            this.state = 461;
	            this.match(SqlBaseParser.AS);
	            this.state = 474;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 462;
	                this.match(SqlBaseParser.T__1);
	                this.state = 463;
	                this.sqlParameterDeclaration();
	                this.state = 468;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 464;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 465;
	                    this.sqlParameterDeclaration();
	                    this.state = 470;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 471;
	                this.match(SqlBaseParser.T__2);
	                break;
	            case 10:
	            case 11:
	            case 12:
	            case 14:
	            case 16:
	            case 17:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 25:
	            case 26:
	            case 27:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 38:
	            case 41:
	            case 43:
	            case 47:
	            case 48:
	            case 49:
	            case 51:
	            case 53:
	            case 55:
	            case 56:
	            case 57:
	            case 59:
	            case 62:
	            case 63:
	            case 65:
	            case 68:
	            case 71:
	            case 73:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 80:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 91:
	            case 93:
	            case 94:
	            case 95:
	            case 97:
	            case 99:
	            case 102:
	            case 104:
	            case 105:
	            case 107:
	            case 108:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 116:
	            case 118:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 144:
	            case 145:
	            case 148:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 176:
	            case 177:
	            case 178:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 211:
	            case 212:
	            case 213:
	            case 215:
	            case 216:
	            case 218:
	            case 220:
	            case 221:
	            case 222:
	            case 224:
	            case 226:
	            case 227:
	            case 228:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	                this.state = 473;
	                this.type(0);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 24:
	            localctx = new CreateViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 476;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 479;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 477;
	                this.match(SqlBaseParser.OR);
	                this.state = 478;
	                this.match(SqlBaseParser.REPLACE);
	            }

	            this.state = 481;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 482;
	            this.qualifiedName();
	            this.state = 485;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===185) {
	                this.state = 483;
	                this.match(SqlBaseParser.SECURITY);
	                this.state = 484;
	                _la = this._input.LA(1);
	                if(!(_la===51 || _la===104)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 487;
	            this.match(SqlBaseParser.AS);
	            this.state = 488;
	            this.query();
	            break;

	        case 25:
	            localctx = new RenameViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 490;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 491;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 494;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 492;
	                this.match(SqlBaseParser.IF);
	                this.state = 493;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 496;
	            localctx.from = this.qualifiedName();
	            this.state = 497;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 498;
	            this.match(SqlBaseParser.TO);
	            this.state = 499;
	            localctx.to = this.qualifiedName();
	            break;

	        case 26:
	            localctx = new DropViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 501;
	            this.match(SqlBaseParser.DROP);
	            this.state = 502;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 505;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	            if(la_===1) {
	                this.state = 503;
	                this.match(SqlBaseParser.IF);
	                this.state = 504;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 507;
	            this.qualifiedName();
	            break;

	        case 27:
	            localctx = new CreateMaterializedViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 508;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 509;
	            this.match(SqlBaseParser.MATERIALIZED);
	            this.state = 510;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 514;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	            if(la_===1) {
	                this.state = 511;
	                this.match(SqlBaseParser.IF);
	                this.state = 512;
	                this.match(SqlBaseParser.NOT);
	                this.state = 513;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 516;
	            this.qualifiedName();
	            this.state = 519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33) {
	                this.state = 517;
	                this.match(SqlBaseParser.COMMENT);
	                this.state = 518;
	                this.string();
	            }

	            this.state = 523;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 521;
	                this.match(SqlBaseParser.WITH);
	                this.state = 522;
	                this.properties();
	            }

	            this.state = 525;
	            this.match(SqlBaseParser.AS);
	            this.state = 531;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 526;
	                this.query();
	                break;

	            case 2:
	                this.state = 527;
	                this.match(SqlBaseParser.T__1);
	                this.state = 528;
	                this.query();
	                this.state = 529;
	                this.match(SqlBaseParser.T__2);
	                break;

	            }
	            break;

	        case 28:
	            localctx = new DropMaterializedViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 533;
	            this.match(SqlBaseParser.DROP);
	            this.state = 534;
	            this.match(SqlBaseParser.MATERIALIZED);
	            this.state = 535;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 538;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	            if(la_===1) {
	                this.state = 536;
	                this.match(SqlBaseParser.IF);
	                this.state = 537;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 540;
	            this.qualifiedName();
	            break;

	        case 29:
	            localctx = new RefreshMaterializedViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 541;
	            this.match(SqlBaseParser.REFRESH);
	            this.state = 542;
	            this.match(SqlBaseParser.MATERIALIZED);
	            this.state = 543;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 544;
	            this.qualifiedName();
	            this.state = 547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===230) {
	                this.state = 545;
	                this.match(SqlBaseParser.WHERE);
	                this.state = 546;
	                localctx.where = this.booleanExpression(0);
	            }

	            break;

	        case 30:
	            localctx = new CreateFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 549;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 552;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 550;
	                this.match(SqlBaseParser.OR);
	                this.state = 551;
	                this.match(SqlBaseParser.REPLACE);
	            }

	            this.state = 555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203) {
	                this.state = 554;
	                this.match(SqlBaseParser.TEMPORARY);
	            }

	            this.state = 557;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 558;
	            localctx.functionName = this.qualifiedName();
	            this.state = 559;
	            this.match(SqlBaseParser.T__1);
	            this.state = 568;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3464190976) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3417016911) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 1962720585) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4281068965) !== 0) || ((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 4227128895) !== 0) || ((((_la - 162)) & ~0x1f) === 0 && ((1 << (_la - 162)) & 4278050813) !== 0) || ((((_la - 194)) & ~0x1f) === 0 && ((1 << (_la - 194)) & 1567553471) !== 0) || ((((_la - 226)) & ~0x1f) === 0 && ((1 << (_la - 226)) & 4026532807) !== 0)) {
	                this.state = 560;
	                this.sqlParameterDeclaration();
	                this.state = 565;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 561;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 562;
	                    this.sqlParameterDeclaration();
	                    this.state = 567;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 570;
	            this.match(SqlBaseParser.T__2);
	            this.state = 571;
	            this.match(SqlBaseParser.RETURNS);
	            this.state = 572;
	            localctx.returnType = this.type(0);
	            this.state = 575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33) {
	                this.state = 573;
	                this.match(SqlBaseParser.COMMENT);
	                this.state = 574;
	                this.string();
	            }

	            this.state = 577;
	            this.routineCharacteristics();
	            this.state = 578;
	            this.routineBody();
	            break;

	        case 31:
	            localctx = new AlterFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 580;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 581;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 582;
	            this.qualifiedName();
	            this.state = 584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 583;
	                this.types();
	            }

	            this.state = 586;
	            this.alterRoutineCharacteristics();
	            break;

	        case 32:
	            localctx = new DropFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 588;
	            this.match(SqlBaseParser.DROP);
	            this.state = 590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203) {
	                this.state = 589;
	                this.match(SqlBaseParser.TEMPORARY);
	            }

	            this.state = 592;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 595;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	            if(la_===1) {
	                this.state = 593;
	                this.match(SqlBaseParser.IF);
	                this.state = 594;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 597;
	            this.qualifiedName();
	            this.state = 599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 598;
	                this.types();
	            }

	            break;

	        case 33:
	            localctx = new CallContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 601;
	            this.match(SqlBaseParser.CALL);
	            this.state = 602;
	            this.qualifiedName();
	            this.state = 603;
	            this.match(SqlBaseParser.T__1);
	            this.state = 612;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 4288599817) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 3001745299) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 2933889021) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4160708461) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 3753856511) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 4293910015) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 1977024379) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 335481871) !== 0)) {
	                this.state = 604;
	                this.callArgument();
	                this.state = 609;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 605;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 606;
	                    this.callArgument();
	                    this.state = 611;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 614;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 34:
	            localctx = new CreateRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 616;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 617;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 618;
	            localctx.name = this.identifier();
	            this.state = 622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 619;
	                this.match(SqlBaseParser.WITH);
	                this.state = 620;
	                this.match(SqlBaseParser.ADMIN);
	                this.state = 621;
	                this.grantor();
	            }

	            break;

	        case 35:
	            localctx = new DropRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 624;
	            this.match(SqlBaseParser.DROP);
	            this.state = 625;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 626;
	            localctx.name = this.identifier();
	            break;

	        case 36:
	            localctx = new GrantRolesContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 627;
	            this.match(SqlBaseParser.GRANT);
	            this.state = 628;
	            this.roles();
	            this.state = 629;
	            this.match(SqlBaseParser.TO);
	            this.state = 630;
	            this.principal();
	            this.state = 635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 631;
	                this.match(SqlBaseParser.T__3);
	                this.state = 632;
	                this.principal();
	                this.state = 637;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 641;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 638;
	                this.match(SqlBaseParser.WITH);
	                this.state = 639;
	                this.match(SqlBaseParser.ADMIN);
	                this.state = 640;
	                this.match(SqlBaseParser.OPTION);
	            }

	            this.state = 646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 643;
	                this.match(SqlBaseParser.GRANTED);
	                this.state = 644;
	                this.match(SqlBaseParser.BY);
	                this.state = 645;
	                this.grantor();
	            }

	            break;

	        case 37:
	            localctx = new RevokeRolesContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 648;
	            this.match(SqlBaseParser.REVOKE);
	            this.state = 652;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            if(la_===1) {
	                this.state = 649;
	                this.match(SqlBaseParser.ADMIN);
	                this.state = 650;
	                this.match(SqlBaseParser.OPTION);
	                this.state = 651;
	                this.match(SqlBaseParser.FOR);

	            }
	            this.state = 654;
	            this.roles();
	            this.state = 655;
	            this.match(SqlBaseParser.FROM);
	            this.state = 656;
	            this.principal();
	            this.state = 661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 657;
	                this.match(SqlBaseParser.T__3);
	                this.state = 658;
	                this.principal();
	                this.state = 663;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 664;
	                this.match(SqlBaseParser.GRANTED);
	                this.state = 665;
	                this.match(SqlBaseParser.BY);
	                this.state = 666;
	                this.grantor();
	            }

	            break;

	        case 38:
	            localctx = new SetRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 38);
	            this.state = 669;
	            this.match(SqlBaseParser.SET);
	            this.state = 670;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 674;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 671;
	                this.match(SqlBaseParser.ALL);
	                break;

	            case 2:
	                this.state = 672;
	                this.match(SqlBaseParser.NONE);
	                break;

	            case 3:
	                this.state = 673;
	                localctx.role = this.identifier();
	                break;

	            }
	            break;

	        case 39:
	            localctx = new GrantContext(this, localctx);
	            this.enterOuterAlt(localctx, 39);
	            this.state = 676;
	            this.match(SqlBaseParser.GRANT);
	            this.state = 687;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 677;
	                this.privilege();
	                this.state = 682;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 678;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 679;
	                    this.privilege();
	                    this.state = 684;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 685;
	                this.match(SqlBaseParser.ALL);
	                this.state = 686;
	                this.match(SqlBaseParser.PRIVILEGES);
	                break;

	            }
	            this.state = 689;
	            this.match(SqlBaseParser.ON);
	            this.state = 691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 690;
	                this.match(SqlBaseParser.TABLE);
	            }

	            this.state = 693;
	            this.qualifiedName();
	            this.state = 694;
	            this.match(SqlBaseParser.TO);
	            this.state = 695;
	            localctx.grantee = this.principal();
	            this.state = 699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 696;
	                this.match(SqlBaseParser.WITH);
	                this.state = 697;
	                this.match(SqlBaseParser.GRANT);
	                this.state = 698;
	                this.match(SqlBaseParser.OPTION);
	            }

	            break;

	        case 40:
	            localctx = new RevokeContext(this, localctx);
	            this.enterOuterAlt(localctx, 40);
	            this.state = 701;
	            this.match(SqlBaseParser.REVOKE);
	            this.state = 705;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	            if(la_===1) {
	                this.state = 702;
	                this.match(SqlBaseParser.GRANT);
	                this.state = 703;
	                this.match(SqlBaseParser.OPTION);
	                this.state = 704;
	                this.match(SqlBaseParser.FOR);

	            }
	            this.state = 717;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 707;
	                this.privilege();
	                this.state = 712;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 708;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 709;
	                    this.privilege();
	                    this.state = 714;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 715;
	                this.match(SqlBaseParser.ALL);
	                this.state = 716;
	                this.match(SqlBaseParser.PRIVILEGES);
	                break;

	            }
	            this.state = 719;
	            this.match(SqlBaseParser.ON);
	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 720;
	                this.match(SqlBaseParser.TABLE);
	            }

	            this.state = 723;
	            this.qualifiedName();
	            this.state = 724;
	            this.match(SqlBaseParser.FROM);
	            this.state = 725;
	            localctx.grantee = this.principal();
	            break;

	        case 41:
	            localctx = new ShowGrantsContext(this, localctx);
	            this.enterOuterAlt(localctx, 41);
	            this.state = 727;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 728;
	            this.match(SqlBaseParser.GRANTS);
	            this.state = 734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===143) {
	                this.state = 729;
	                this.match(SqlBaseParser.ON);
	                this.state = 731;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===200) {
	                    this.state = 730;
	                    this.match(SqlBaseParser.TABLE);
	                }

	                this.state = 733;
	                this.qualifiedName();
	            }

	            break;

	        case 42:
	            localctx = new ExplainContext(this, localctx);
	            this.enterOuterAlt(localctx, 42);
	            this.state = 736;
	            this.match(SqlBaseParser.EXPLAIN);
	            this.state = 738;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	            if(la_===1) {
	                this.state = 737;
	                this.match(SqlBaseParser.ANALYZE);

	            }
	            this.state = 741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===226) {
	                this.state = 740;
	                this.match(SqlBaseParser.VERBOSE);
	            }

	            this.state = 754;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	            if(la_===1) {
	                this.state = 743;
	                this.match(SqlBaseParser.T__1);
	                this.state = 744;
	                this.explainOption();
	                this.state = 749;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 745;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 746;
	                    this.explainOption();
	                    this.state = 751;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 752;
	                this.match(SqlBaseParser.T__2);

	            }
	            this.state = 756;
	            this.statement();
	            break;

	        case 43:
	            localctx = new ShowCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 43);
	            this.state = 757;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 758;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 759;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 760;
	            this.qualifiedName();
	            break;

	        case 44:
	            localctx = new ShowCreateSchemaContext(this, localctx);
	            this.enterOuterAlt(localctx, 44);
	            this.state = 761;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 762;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 763;
	            this.match(SqlBaseParser.SCHEMA);
	            this.state = 764;
	            this.qualifiedName();
	            break;

	        case 45:
	            localctx = new ShowCreateViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 45);
	            this.state = 765;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 766;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 767;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 768;
	            this.qualifiedName();
	            break;

	        case 46:
	            localctx = new ShowCreateMaterializedViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 46);
	            this.state = 769;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 770;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 771;
	            this.match(SqlBaseParser.MATERIALIZED);
	            this.state = 772;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 773;
	            this.qualifiedName();
	            break;

	        case 47:
	            localctx = new ShowCreateFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 47);
	            this.state = 774;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 775;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 776;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 777;
	            this.qualifiedName();
	            this.state = 779;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 778;
	                this.types();
	            }

	            break;

	        case 48:
	            localctx = new ShowTablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 48);
	            this.state = 781;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 782;
	            this.match(SqlBaseParser.TABLES);
	            this.state = 785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===96) {
	                this.state = 783;
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===96)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 784;
	                this.qualifiedName();
	            }

	            this.state = 793;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===117) {
	                this.state = 787;
	                this.match(SqlBaseParser.LIKE);
	                this.state = 788;
	                localctx.pattern = this.string();
	                this.state = 791;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===66) {
	                    this.state = 789;
	                    this.match(SqlBaseParser.ESCAPE);
	                    this.state = 790;
	                    localctx.escape = this.string();
	                }

	            }

	            break;

	        case 49:
	            localctx = new ShowSchemasContext(this, localctx);
	            this.enterOuterAlt(localctx, 49);
	            this.state = 795;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 796;
	            this.match(SqlBaseParser.SCHEMAS);
	            this.state = 799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===96) {
	                this.state = 797;
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===96)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 798;
	                this.identifier();
	            }

	            this.state = 807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===117) {
	                this.state = 801;
	                this.match(SqlBaseParser.LIKE);
	                this.state = 802;
	                localctx.pattern = this.string();
	                this.state = 805;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===66) {
	                    this.state = 803;
	                    this.match(SqlBaseParser.ESCAPE);
	                    this.state = 804;
	                    localctx.escape = this.string();
	                }

	            }

	            break;

	        case 50:
	            localctx = new ShowCatalogsContext(this, localctx);
	            this.enterOuterAlt(localctx, 50);
	            this.state = 809;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 810;
	            this.match(SqlBaseParser.CATALOGS);
	            this.state = 817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===117) {
	                this.state = 811;
	                this.match(SqlBaseParser.LIKE);
	                this.state = 812;
	                localctx.pattern = this.string();
	                this.state = 815;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===66) {
	                    this.state = 813;
	                    this.match(SqlBaseParser.ESCAPE);
	                    this.state = 814;
	                    localctx.escape = this.string();
	                }

	            }

	            break;

	        case 51:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 51);
	            this.state = 819;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 820;
	            this.match(SqlBaseParser.COLUMNS);
	            this.state = 821;
	            _la = this._input.LA(1);
	            if(!(_la===81 || _la===96)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 822;
	            this.qualifiedName();
	            break;

	        case 52:
	            localctx = new ShowStatsContext(this, localctx);
	            this.enterOuterAlt(localctx, 52);
	            this.state = 823;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 824;
	            this.match(SqlBaseParser.STATS);
	            this.state = 825;
	            this.match(SqlBaseParser.FOR);
	            this.state = 826;
	            this.qualifiedName();
	            break;

	        case 53:
	            localctx = new ShowStatsForQueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 53);
	            this.state = 827;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 828;
	            this.match(SqlBaseParser.STATS);
	            this.state = 829;
	            this.match(SqlBaseParser.FOR);
	            this.state = 830;
	            this.match(SqlBaseParser.T__1);
	            this.state = 831;
	            this.querySpecification();
	            this.state = 832;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 54:
	            localctx = new ShowRolesContext(this, localctx);
	            this.enterOuterAlt(localctx, 54);
	            this.state = 834;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 836;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===41) {
	                this.state = 835;
	                this.match(SqlBaseParser.CURRENT);
	            }

	            this.state = 838;
	            this.match(SqlBaseParser.ROLES);
	            this.state = 841;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===96) {
	                this.state = 839;
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===96)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 840;
	                this.identifier();
	            }

	            break;

	        case 55:
	            localctx = new ShowRoleGrantsContext(this, localctx);
	            this.enterOuterAlt(localctx, 55);
	            this.state = 843;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 844;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 845;
	            this.match(SqlBaseParser.GRANTS);
	            this.state = 848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===96) {
	                this.state = 846;
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===96)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 847;
	                this.identifier();
	            }

	            break;

	        case 56:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 56);
	            this.state = 850;
	            this.match(SqlBaseParser.DESCRIBE);
	            this.state = 851;
	            this.qualifiedName();
	            break;

	        case 57:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 57);
	            this.state = 852;
	            this.match(SqlBaseParser.DESC);
	            this.state = 853;
	            this.qualifiedName();
	            break;

	        case 58:
	            localctx = new ShowFunctionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 58);
	            this.state = 854;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 855;
	            this.match(SqlBaseParser.FUNCTIONS);
	            this.state = 862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===117) {
	                this.state = 856;
	                this.match(SqlBaseParser.LIKE);
	                this.state = 857;
	                localctx.pattern = this.string();
	                this.state = 860;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===66) {
	                    this.state = 858;
	                    this.match(SqlBaseParser.ESCAPE);
	                    this.state = 859;
	                    localctx.escape = this.string();
	                }

	            }

	            break;

	        case 59:
	            localctx = new ShowSessionContext(this, localctx);
	            this.enterOuterAlt(localctx, 59);
	            this.state = 864;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 865;
	            this.match(SqlBaseParser.SESSION);
	            this.state = 872;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===117) {
	                this.state = 866;
	                this.match(SqlBaseParser.LIKE);
	                this.state = 867;
	                localctx.pattern = this.string();
	                this.state = 870;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===66) {
	                    this.state = 868;
	                    this.match(SqlBaseParser.ESCAPE);
	                    this.state = 869;
	                    localctx.escape = this.string();
	                }

	            }

	            break;

	        case 60:
	            localctx = new SetSessionContext(this, localctx);
	            this.enterOuterAlt(localctx, 60);
	            this.state = 874;
	            this.match(SqlBaseParser.SET);
	            this.state = 875;
	            this.match(SqlBaseParser.SESSION);
	            this.state = 876;
	            this.qualifiedName();
	            this.state = 877;
	            this.match(SqlBaseParser.EQ);
	            this.state = 878;
	            this.expression();
	            break;

	        case 61:
	            localctx = new ResetSessionContext(this, localctx);
	            this.enterOuterAlt(localctx, 61);
	            this.state = 880;
	            this.match(SqlBaseParser.RESET);
	            this.state = 881;
	            this.match(SqlBaseParser.SESSION);
	            this.state = 882;
	            this.qualifiedName();
	            break;

	        case 62:
	            localctx = new StartTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 62);
	            this.state = 883;
	            this.match(SqlBaseParser.START);
	            this.state = 884;
	            this.match(SqlBaseParser.TRANSACTION);
	            this.state = 893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===107 || _la===162) {
	                this.state = 885;
	                this.transactionMode();
	                this.state = 890;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 886;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 887;
	                    this.transactionMode();
	                    this.state = 892;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        case 63:
	            localctx = new CommitContext(this, localctx);
	            this.enterOuterAlt(localctx, 63);
	            this.state = 895;
	            this.match(SqlBaseParser.COMMIT);
	            this.state = 897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===232) {
	                this.state = 896;
	                this.match(SqlBaseParser.WORK);
	            }

	            break;

	        case 64:
	            localctx = new RollbackContext(this, localctx);
	            this.enterOuterAlt(localctx, 64);
	            this.state = 899;
	            this.match(SqlBaseParser.ROLLBACK);
	            this.state = 901;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===232) {
	                this.state = 900;
	                this.match(SqlBaseParser.WORK);
	            }

	            break;

	        case 65:
	            localctx = new PrepareContext(this, localctx);
	            this.enterOuterAlt(localctx, 65);
	            this.state = 903;
	            this.match(SqlBaseParser.PREPARE);
	            this.state = 904;
	            this.identifier();
	            this.state = 905;
	            this.match(SqlBaseParser.FROM);
	            this.state = 906;
	            this.statement();
	            break;

	        case 66:
	            localctx = new DeallocateContext(this, localctx);
	            this.enterOuterAlt(localctx, 66);
	            this.state = 908;
	            this.match(SqlBaseParser.DEALLOCATE);
	            this.state = 909;
	            this.match(SqlBaseParser.PREPARE);
	            this.state = 910;
	            this.identifier();
	            break;

	        case 67:
	            localctx = new ExecuteContext(this, localctx);
	            this.enterOuterAlt(localctx, 67);
	            this.state = 911;
	            this.match(SqlBaseParser.EXECUTE);
	            this.state = 912;
	            this.identifier();
	            this.state = 922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===223) {
	                this.state = 913;
	                this.match(SqlBaseParser.USING);
	                this.state = 914;
	                this.expression();
	                this.state = 919;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 915;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 916;
	                    this.expression();
	                    this.state = 921;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        case 68:
	            localctx = new DescribeInputContext(this, localctx);
	            this.enterOuterAlt(localctx, 68);
	            this.state = 924;
	            this.match(SqlBaseParser.DESCRIBE);
	            this.state = 925;
	            this.match(SqlBaseParser.INPUT);
	            this.state = 926;
	            this.identifier();
	            break;

	        case 69:
	            localctx = new DescribeOutputContext(this, localctx);
	            this.enterOuterAlt(localctx, 69);
	            this.state = 927;
	            this.match(SqlBaseParser.DESCRIBE);
	            this.state = 928;
	            this.match(SqlBaseParser.OUTPUT);
	            this.state = 929;
	            this.identifier();
	            break;

	        case 70:
	            localctx = new UpdateContext(this, localctx);
	            this.enterOuterAlt(localctx, 70);
	            this.state = 930;
	            this.match(SqlBaseParser.UPDATE);
	            this.state = 931;
	            this.qualifiedName();
	            this.state = 932;
	            this.match(SqlBaseParser.SET);
	            this.state = 933;
	            this.updateAssignment();
	            this.state = 938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 934;
	                this.match(SqlBaseParser.T__3);
	                this.state = 935;
	                this.updateAssignment();
	                this.state = 940;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 943;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===230) {
	                this.state = 941;
	                this.match(SqlBaseParser.WHERE);
	                this.state = 942;
	                localctx.where = this.booleanExpression(0);
	            }

	            break;

	        case 71:
	            localctx = new MergeIntoContext(this, localctx);
	            this.enterOuterAlt(localctx, 71);
	            this.state = 945;
	            this.match(SqlBaseParser.MERGE);
	            this.state = 946;
	            this.match(SqlBaseParser.INTO);
	            this.state = 947;
	            this.qualifiedName();
	            this.state = 952;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3464453120) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3417016911) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 1962720585) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4281068965) !== 0) || ((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 4227128895) !== 0) || ((((_la - 162)) & ~0x1f) === 0 && ((1 << (_la - 162)) & 4278050813) !== 0) || ((((_la - 194)) & ~0x1f) === 0 && ((1 << (_la - 194)) & 1567553471) !== 0) || ((((_la - 226)) & ~0x1f) === 0 && ((1 << (_la - 226)) & 4026532807) !== 0)) {
	                this.state = 949;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===18) {
	                    this.state = 948;
	                    this.match(SqlBaseParser.AS);
	                }

	                this.state = 951;
	                this.identifier();
	            }

	            this.state = 954;
	            this.match(SqlBaseParser.USING);
	            this.state = 955;
	            this.relation(0);
	            this.state = 956;
	            this.match(SqlBaseParser.ON);
	            this.state = 957;
	            this.expression();
	            this.state = 959; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 958;
	                this.mergeCase();
	                this.state = 961; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===229);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SqlBaseParser.RULE_query);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===231) {
	            this.state = 965;
	            this.with_();
	        }

	        this.state = 968;
	        this.queryNoWith();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_() {
	    let localctx = new WithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SqlBaseParser.RULE_with);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 970;
	        this.match(SqlBaseParser.WITH);
	        this.state = 972;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===163) {
	            this.state = 971;
	            this.match(SqlBaseParser.RECURSIVE);
	        }

	        this.state = 974;
	        this.namedQuery();
	        this.state = 979;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 975;
	            this.match(SqlBaseParser.T__3);
	            this.state = 976;
	            this.namedQuery();
	            this.state = 981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableElement() {
	    let localctx = new TableElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SqlBaseParser.RULE_tableElement);
	    try {
	        this.state = 985;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 982;
	            this.constraintSpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 983;
	            this.columnDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 984;
	            this.likeClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDefinition() {
	    let localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SqlBaseParser.RULE_columnDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.identifier();
	        this.state = 988;
	        this.type(0);
	        this.state = 991;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===137) {
	            this.state = 989;
	            this.match(SqlBaseParser.NOT);
	            this.state = 990;
	            this.match(SqlBaseParser.NULL);
	        }

	        this.state = 995;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===33) {
	            this.state = 993;
	            this.match(SqlBaseParser.COMMENT);
	            this.state = 994;
	            this.string();
	        }

	        this.state = 999;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===231) {
	            this.state = 997;
	            this.match(SqlBaseParser.WITH);
	            this.state = 998;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeClause() {
	    let localctx = new LikeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SqlBaseParser.RULE_likeClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1001;
	        this.match(SqlBaseParser.LIKE);
	        this.state = 1002;
	        this.qualifiedName();
	        this.state = 1005;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68 || _la===97) {
	            this.state = 1003;
	            localctx.optionType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===68 || _la===97)) {
	                localctx.optionType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1004;
	            this.match(SqlBaseParser.PROPERTIES);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	properties() {
	    let localctx = new PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SqlBaseParser.RULE_properties);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1007;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1008;
	        this.property();
	        this.state = 1013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 1009;
	            this.match(SqlBaseParser.T__3);
	            this.state = 1010;
	            this.property();
	            this.state = 1015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1016;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property() {
	    let localctx = new PropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SqlBaseParser.RULE_property);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1018;
	        this.identifier();
	        this.state = 1019;
	        this.match(SqlBaseParser.EQ);
	        this.state = 1020;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlParameterDeclaration() {
	    let localctx = new SqlParameterDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SqlBaseParser.RULE_sqlParameterDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1022;
	        this.identifier();
	        this.state = 1023;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineCharacteristics() {
	    let localctx = new RoutineCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SqlBaseParser.RULE_routineCharacteristics);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1028;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26 || _la===56 || _la===112 || _la===137 || _la===173) {
	            this.state = 1025;
	            this.routineCharacteristic();
	            this.state = 1030;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineCharacteristic() {
	    let localctx = new RoutineCharacteristicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SqlBaseParser.RULE_routineCharacteristic);
	    try {
	        this.state = 1035;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1031;
	            this.match(SqlBaseParser.LANGUAGE);
	            this.state = 1032;
	            this.language();
	            break;
	        case 56:
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1033;
	            this.determinism();
	            break;
	        case 26:
	        case 173:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1034;
	            this.nullCallClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRoutineCharacteristics() {
	    let localctx = new AlterRoutineCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SqlBaseParser.RULE_alterRoutineCharacteristics);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1040;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26 || _la===173) {
	            this.state = 1037;
	            this.alterRoutineCharacteristic();
	            this.state = 1042;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRoutineCharacteristic() {
	    let localctx = new AlterRoutineCharacteristicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SqlBaseParser.RULE_alterRoutineCharacteristic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1043;
	        this.nullCallClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineBody() {
	    let localctx = new RoutineBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SqlBaseParser.RULE_routineBody);
	    try {
	        this.state = 1047;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 172:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1045;
	            this.returnStatement();
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1046;
	            this.externalBodyReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SqlBaseParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.match(SqlBaseParser.RETURN);
	        this.state = 1050;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalBodyReference() {
	    let localctx = new ExternalBodyReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SqlBaseParser.RULE_externalBodyReference);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1052;
	        this.match(SqlBaseParser.EXTERNAL);
	        this.state = 1055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===128) {
	            this.state = 1053;
	            this.match(SqlBaseParser.NAME);
	            this.state = 1054;
	            this.externalRoutineName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	language() {
	    let localctx = new LanguageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SqlBaseParser.RULE_language);
	    try {
	        this.state = 1059;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1057;
	            this.match(SqlBaseParser.SQL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1058;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	determinism() {
	    let localctx = new DeterminismContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SqlBaseParser.RULE_determinism);
	    try {
	        this.state = 1064;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1061;
	            this.match(SqlBaseParser.DETERMINISTIC);
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1062;
	            this.match(SqlBaseParser.NOT);
	            this.state = 1063;
	            this.match(SqlBaseParser.DETERMINISTIC);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullCallClause() {
	    let localctx = new NullCallClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SqlBaseParser.RULE_nullCallClause);
	    try {
	        this.state = 1075;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 173:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1066;
	            this.match(SqlBaseParser.RETURNS);
	            this.state = 1067;
	            this.match(SqlBaseParser.NULL);
	            this.state = 1068;
	            this.match(SqlBaseParser.ON);
	            this.state = 1069;
	            this.match(SqlBaseParser.NULL);
	            this.state = 1070;
	            this.match(SqlBaseParser.INPUT);
	            break;
	        case 26:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1071;
	            this.match(SqlBaseParser.CALLED);
	            this.state = 1072;
	            this.match(SqlBaseParser.ON);
	            this.state = 1073;
	            this.match(SqlBaseParser.NULL);
	            this.state = 1074;
	            this.match(SqlBaseParser.INPUT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalRoutineName() {
	    let localctx = new ExternalRoutineNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SqlBaseParser.RULE_externalRoutineName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1077;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryNoWith() {
	    let localctx = new QueryNoWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SqlBaseParser.RULE_queryNoWith);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1079;
	        this.queryTerm(0);
	        this.state = 1090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 1080;
	            this.match(SqlBaseParser.ORDER);
	            this.state = 1081;
	            this.match(SqlBaseParser.BY);
	            this.state = 1082;
	            this.sortItem();
	            this.state = 1087;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1083;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1084;
	                this.sortItem();
	                this.state = 1089;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1097;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===142) {
	            this.state = 1092;
	            this.match(SqlBaseParser.OFFSET);
	            this.state = 1093;
	            localctx.offset = this.match(SqlBaseParser.INTEGER_VALUE);
	            this.state = 1095;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===180 || _la===181) {
	                this.state = 1094;
	                _la = this._input.LA(1);
	                if(!(_la===180 || _la===181)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	        }

	        this.state = 1108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75 || _la===118) {
	            this.state = 1106;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 118:
	                this.state = 1099;
	                this.match(SqlBaseParser.LIMIT);
	                this.state = 1100;
	                localctx.limit = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===12 || _la===251)) {
	                    localctx.limit = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case 75:
	                this.state = 1101;
	                this.match(SqlBaseParser.FETCH);
	                this.state = 1102;
	                this.match(SqlBaseParser.FIRST);
	                this.state = 1103;
	                localctx.fetchFirstNRows = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 1104;
	                this.match(SqlBaseParser.ROWS);
	                this.state = 1105;
	                this.match(SqlBaseParser.ONLY);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	queryTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new QueryTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 48;
	    this.enterRecursionRule(localctx, 48, SqlBaseParser.RULE_queryTerm, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new QueryTermDefaultContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1111;
	        this.queryPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1127;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1125;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
	                    this.state = 1113;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1114;
	                    localctx.operator = this.match(SqlBaseParser.INTERSECT);
	                    this.state = 1116;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===12 || _la===58) {
	                        this.state = 1115;
	                        this.setQuantifier();
	                    }

	                    this.state = 1118;
	                    localctx.right = this.queryTerm(3);
	                    break;

	                case 2:
	                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
	                    this.state = 1119;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1120;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===67 || _la===217)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1122;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===12 || _la===58) {
	                        this.state = 1121;
	                        this.setQuantifier();
	                    }

	                    this.state = 1124;
	                    localctx.right = this.queryTerm(2);
	                    break;

	                } 
	            }
	            this.state = 1129;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	queryPrimary() {
	    let localctx = new QueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SqlBaseParser.RULE_queryPrimary);
	    try {
	        this.state = 1146;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 186:
	            localctx = new QueryPrimaryDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1130;
	            this.querySpecification();
	            break;
	        case 200:
	            localctx = new TableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1131;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 1132;
	            this.qualifiedName();
	            break;
	        case 225:
	            localctx = new InlineTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1133;
	            this.match(SqlBaseParser.VALUES);
	            this.state = 1134;
	            this.expression();
	            this.state = 1139;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1135;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1136;
	                    this.expression(); 
	                }
	                this.state = 1141;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
	            }

	            break;
	        case 2:
	            localctx = new SubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1142;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1143;
	            this.queryNoWith();
	            this.state = 1144;
	            this.match(SqlBaseParser.T__2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortItem() {
	    let localctx = new SortItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SqlBaseParser.RULE_sortItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1148;
	        this.expression();
	        this.state = 1150;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19 || _la===53) {
	            this.state = 1149;
	            localctx.ordering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===19 || _la===53)) {
	                localctx.ordering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 1152;
	            this.match(SqlBaseParser.NULLS);
	            this.state = 1153;
	            localctx.nullOrdering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===77 || _la===113)) {
	                localctx.nullOrdering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SqlBaseParser.RULE_querySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1156;
	        this.match(SqlBaseParser.SELECT);
	        this.state = 1158;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        if(la_===1) {
	            this.state = 1157;
	            this.setQuantifier();

	        }
	        this.state = 1160;
	        this.selectItem();
	        this.state = 1165;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1161;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1162;
	                this.selectItem(); 
	            }
	            this.state = 1167;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
	        }

	        this.state = 1177;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 1168;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1169;
	            this.relation(0);
	            this.state = 1174;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,140,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1170;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1171;
	                    this.relation(0); 
	                }
	                this.state = 1176;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,140,this._ctx);
	            }


	        }
	        this.state = 1181;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        if(la_===1) {
	            this.state = 1179;
	            this.match(SqlBaseParser.WHERE);
	            this.state = 1180;
	            localctx.where = this.booleanExpression(0);

	        }
	        this.state = 1186;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        if(la_===1) {
	            this.state = 1183;
	            this.match(SqlBaseParser.GROUP);
	            this.state = 1184;
	            this.match(SqlBaseParser.BY);
	            this.state = 1185;
	            this.groupBy();

	        }
	        this.state = 1190;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        if(la_===1) {
	            this.state = 1188;
	            this.match(SqlBaseParser.HAVING);
	            this.state = 1189;
	            localctx.having = this.booleanExpression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupBy() {
	    let localctx = new GroupByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SqlBaseParser.RULE_groupBy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1193;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        if(la_===1) {
	            this.state = 1192;
	            this.setQuantifier();

	        }
	        this.state = 1195;
	        this.groupingElement();
	        this.state = 1200;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1196;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1197;
	                this.groupingElement(); 
	            }
	            this.state = 1202;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElement() {
	    let localctx = new GroupingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SqlBaseParser.RULE_groupingElement);
	    var _la = 0;
	    try {
	        this.state = 1243;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SingleGroupingSetContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1203;
	            this.groupingSet();
	            break;

	        case 2:
	            localctx = new RollupContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1204;
	            this.match(SqlBaseParser.ROLLUP);
	            this.state = 1205;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 4288599817) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 3001745299) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 2933889021) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4160708461) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 3753856511) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 4293910015) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 1977024379) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 335481871) !== 0)) {
	                this.state = 1206;
	                this.expression();
	                this.state = 1211;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1207;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1208;
	                    this.expression();
	                    this.state = 1213;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1216;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 3:
	            localctx = new CubeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1217;
	            this.match(SqlBaseParser.CUBE);
	            this.state = 1218;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 4288599817) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 3001745299) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 2933889021) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4160708461) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 3753856511) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 4293910015) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 1977024379) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 335481871) !== 0)) {
	                this.state = 1219;
	                this.expression();
	                this.state = 1224;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1220;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1221;
	                    this.expression();
	                    this.state = 1226;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1229;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 4:
	            localctx = new MultipleGroupingSetsContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1230;
	            this.match(SqlBaseParser.GROUPING);
	            this.state = 1231;
	            this.match(SqlBaseParser.SETS);
	            this.state = 1232;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1233;
	            this.groupingSet();
	            this.state = 1238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1234;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1235;
	                this.groupingSet();
	                this.state = 1240;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1241;
	            this.match(SqlBaseParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSet() {
	    let localctx = new GroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SqlBaseParser.RULE_groupingSet);
	    var _la = 0;
	    try {
	        this.state = 1258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1245;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 4288599817) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 3001745299) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 2933889021) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4160708461) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 3753856511) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 4293910015) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 1977024379) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 335481871) !== 0)) {
	                this.state = 1246;
	                this.expression();
	                this.state = 1251;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1247;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1248;
	                    this.expression();
	                    this.state = 1253;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1256;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1257;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedQuery() {
	    let localctx = new NamedQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SqlBaseParser.RULE_namedQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1260;
	        localctx.name = this.identifier();
	        this.state = 1262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1261;
	            this.columnAliases();
	        }

	        this.state = 1264;
	        this.match(SqlBaseParser.AS);
	        this.state = 1265;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1266;
	        this.query();
	        this.state = 1267;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setQuantifier() {
	    let localctx = new SetQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SqlBaseParser.RULE_setQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1269;
	        _la = this._input.LA(1);
	        if(!(_la===12 || _la===58)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SqlBaseParser.RULE_selectItem);
	    var _la = 0;
	    try {
	        this.state = 1283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectSingleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1271;
	            this.expression();
	            this.state = 1276;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	            if(la_===1) {
	                this.state = 1273;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===18) {
	                    this.state = 1272;
	                    this.match(SqlBaseParser.AS);
	                }

	                this.state = 1275;
	                this.identifier();

	            }
	            break;

	        case 2:
	            localctx = new SelectAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1278;
	            this.qualifiedName();
	            this.state = 1279;
	            this.match(SqlBaseParser.T__0);
	            this.state = 1280;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        case 3:
	            localctx = new SelectAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1282;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	relation(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new RelationContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 68;
	    this.enterRecursionRule(localctx, 68, SqlBaseParser.RULE_relation, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new RelationDefaultContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1286;
	        this.sampledRelation();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1306;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JoinRelationContext(this, new RelationContext(this, _parentctx, _parentState));
	                localctx.left = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_relation);
	                this.state = 1288;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1302;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 39:
	                    this.state = 1289;
	                    this.match(SqlBaseParser.CROSS);
	                    this.state = 1290;
	                    this.match(SqlBaseParser.JOIN);
	                    this.state = 1291;
	                    localctx.right = this.sampledRelation();
	                    break;
	                case 82:
	                case 98:
	                case 109:
	                case 115:
	                case 175:
	                    this.state = 1292;
	                    this.joinType();
	                    this.state = 1293;
	                    this.match(SqlBaseParser.JOIN);
	                    this.state = 1294;
	                    localctx.rightRelation = this.relation(0);
	                    this.state = 1295;
	                    this.joinCriteria();
	                    break;
	                case 129:
	                    this.state = 1297;
	                    this.match(SqlBaseParser.NATURAL);
	                    this.state = 1298;
	                    this.joinType();
	                    this.state = 1299;
	                    this.match(SqlBaseParser.JOIN);
	                    this.state = 1300;
	                    localctx.right = this.sampledRelation();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1308;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	joinType() {
	    let localctx = new JoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SqlBaseParser.RULE_joinType);
	    var _la = 0;
	    try {
	        this.state = 1324;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	        case 109:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1310;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98) {
	                this.state = 1309;
	                this.match(SqlBaseParser.INNER);
	            }

	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1312;
	            this.match(SqlBaseParser.LEFT);
	            this.state = 1314;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===149) {
	                this.state = 1313;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1316;
	            this.match(SqlBaseParser.RIGHT);
	            this.state = 1318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===149) {
	                this.state = 1317;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1320;
	            this.match(SqlBaseParser.FULL);
	            this.state = 1322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===149) {
	                this.state = 1321;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinCriteria() {
	    let localctx = new JoinCriteriaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SqlBaseParser.RULE_joinCriteria);
	    var _la = 0;
	    try {
	        this.state = 1340;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 143:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1326;
	            this.match(SqlBaseParser.ON);
	            this.state = 1327;
	            this.booleanExpression(0);
	            break;
	        case 223:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1328;
	            this.match(SqlBaseParser.USING);
	            this.state = 1329;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1330;
	            this.identifier();
	            this.state = 1335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1331;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1332;
	                this.identifier();
	                this.state = 1337;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1338;
	            this.match(SqlBaseParser.T__2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampledRelation() {
	    let localctx = new SampledRelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SqlBaseParser.RULE_sampledRelation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1342;
	        this.aliasedRelation();
	        this.state = 1349;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        if(la_===1) {
	            this.state = 1343;
	            this.match(SqlBaseParser.TABLESAMPLE);
	            this.state = 1344;
	            this.sampleType();
	            this.state = 1345;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1346;
	            localctx.percentage = this.expression();
	            this.state = 1347;
	            this.match(SqlBaseParser.T__2);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampleType() {
	    let localctx = new SampleTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SqlBaseParser.RULE_sampleType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1351;
	        _la = this._input.LA(1);
	        if(!(_la===22 || _la===197)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasedRelation() {
	    let localctx = new AliasedRelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SqlBaseParser.RULE_aliasedRelation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1353;
	        this.relationPrimary();
	        this.state = 1361;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        if(la_===1) {
	            this.state = 1355;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18) {
	                this.state = 1354;
	                this.match(SqlBaseParser.AS);
	            }

	            this.state = 1357;
	            this.identifier();
	            this.state = 1359;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	            if(la_===1) {
	                this.state = 1358;
	                this.columnAliases();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAliases() {
	    let localctx = new ColumnAliasesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SqlBaseParser.RULE_columnAliases);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1363;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1364;
	        this.identifier();
	        this.state = 1369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 1365;
	            this.match(SqlBaseParser.T__3);
	            this.state = 1366;
	            this.identifier();
	            this.state = 1371;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1372;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationPrimary() {
	    let localctx = new RelationPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SqlBaseParser.RULE_relationPrimary);
	    var _la = 0;
	    try {
	        this.state = 1411;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1374;
	            this.qualifiedName();
	            this.state = 1376;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	            if(la_===1) {
	                this.state = 1375;
	                this.tableVersionExpression();

	            }
	            break;

	        case 2:
	            localctx = new SubqueryRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1378;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1379;
	            this.query();
	            this.state = 1380;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 3:
	            localctx = new UnnestContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1382;
	            this.match(SqlBaseParser.UNNEST);
	            this.state = 1383;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1384;
	            this.expression();
	            this.state = 1389;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1385;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1386;
	                this.expression();
	                this.state = 1391;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1392;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1395;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	            if(la_===1) {
	                this.state = 1393;
	                this.match(SqlBaseParser.WITH);
	                this.state = 1394;
	                this.match(SqlBaseParser.ORDINALITY);

	            }
	            break;

	        case 4:
	            localctx = new LateralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1397;
	            this.match(SqlBaseParser.LATERAL);
	            this.state = 1398;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1399;
	            this.query();
	            this.state = 1400;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 5:
	            localctx = new ParenthesizedRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1402;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1403;
	            this.relation(0);
	            this.state = 1404;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 6:
	            localctx = new TableFunctionInvocationContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1406;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 1407;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1408;
	            this.tableFunctionCall();
	            this.state = 1409;
	            this.match(SqlBaseParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SqlBaseParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1413;
	        this.booleanExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	booleanExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 86;
	    this.enterRecursionRule(localctx, 86, SqlBaseParser.RULE_booleanExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1422;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 5:
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 16:
	        case 17:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 53:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 62:
	        case 63:
	        case 65:
	        case 68:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 80:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 90:
	        case 91:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 99:
	        case 102:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 144:
	        case 145:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 215:
	        case 216:
	        case 218:
	        case 220:
	        case 221:
	        case 222:
	        case 224:
	        case 226:
	        case 227:
	        case 228:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 242:
	        case 243:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 260:
	            localctx = new PredicatedContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1416;
	            localctx._valueExpression = this.valueExpression(0);
	            this.state = 1418;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	            if(la_===1) {
	                this.state = 1417;
	                this.predicate(localctx._valueExpression);

	            }
	            break;
	        case 137:
	            localctx = new LogicalNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1420;
	            this.match(SqlBaseParser.NOT);
	            this.state = 1421;
	            this.booleanExpression(3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1432;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,181,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1430;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
	                    this.state = 1424;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1425;
	                    localctx.operator = this.match(SqlBaseParser.AND);
	                    this.state = 1426;
	                    localctx.right = this.booleanExpression(3);
	                    break;

	                case 2:
	                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
	                    this.state = 1427;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1428;
	                    localctx.operator = this.match(SqlBaseParser.OR);
	                    this.state = 1429;
	                    localctx.right = this.booleanExpression(2);
	                    break;

	                } 
	            }
	            this.state = 1434;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,181,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	predicate(value) {
	    let localctx = new PredicateContext(this, this._ctx, this.state, value);
	    this.enterRule(localctx, 88, SqlBaseParser.RULE_predicate);
	    var _la = 0;
	    try {
	        this.state = 1496;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ComparisonContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1435;
	            this.comparisonOperator();
	            this.state = 1436;
	            localctx.right = this.valueExpression(0);
	            break;

	        case 2:
	            localctx = new QuantifiedComparisonContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1438;
	            this.comparisonOperator();
	            this.state = 1439;
	            this.comparisonQuantifier();
	            this.state = 1440;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1441;
	            this.query();
	            this.state = 1442;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 3:
	            localctx = new BetweenContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===137) {
	                this.state = 1444;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1447;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 1448;
	            localctx.lower = this.valueExpression(0);
	            this.state = 1449;
	            this.match(SqlBaseParser.AND);
	            this.state = 1450;
	            localctx.upper = this.valueExpression(0);
	            break;

	        case 4:
	            localctx = new InListContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1453;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===137) {
	                this.state = 1452;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1455;
	            this.match(SqlBaseParser.IN);
	            this.state = 1456;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1457;
	            this.expression();
	            this.state = 1462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1458;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1459;
	                this.expression();
	                this.state = 1464;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1465;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 5:
	            localctx = new InSubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===137) {
	                this.state = 1467;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1470;
	            this.match(SqlBaseParser.IN);
	            this.state = 1471;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1472;
	            this.query();
	            this.state = 1473;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 6:
	            localctx = new LikeContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===137) {
	                this.state = 1475;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1478;
	            this.match(SqlBaseParser.LIKE);
	            this.state = 1479;
	            localctx.pattern = this.valueExpression(0);
	            this.state = 1482;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	            if(la_===1) {
	                this.state = 1480;
	                this.match(SqlBaseParser.ESCAPE);
	                this.state = 1481;
	                localctx.escape = this.valueExpression(0);

	            }
	            break;

	        case 7:
	            localctx = new NullPredicateContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1484;
	            this.match(SqlBaseParser.IS);
	            this.state = 1486;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===137) {
	                this.state = 1485;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1488;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 8:
	            localctx = new DistinctFromContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1489;
	            this.match(SqlBaseParser.IS);
	            this.state = 1491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===137) {
	                this.state = 1490;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1493;
	            this.match(SqlBaseParser.DISTINCT);
	            this.state = 1494;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1495;
	            localctx.right = this.valueExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 90;
	    this.enterRecursionRule(localctx, 90, SqlBaseParser.RULE_valueExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1502;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 5:
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 16:
	        case 17:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 53:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 62:
	        case 63:
	        case 65:
	        case 68:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 80:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 90:
	        case 91:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 99:
	        case 102:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 144:
	        case 145:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 215:
	        case 216:
	        case 218:
	        case 220:
	        case 221:
	        case 222:
	        case 224:
	        case 226:
	        case 227:
	        case 228:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 260:
	            localctx = new ValueExpressionDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1499;
	            this.primaryExpression(0);
	            break;
	        case 242:
	        case 243:
	            localctx = new ArithmeticUnaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1500;
	            localctx.operator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===242 || _la===243)) {
	                localctx.operator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1501;
	            this.valueExpression(4);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1518;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1516;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1504;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1505;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 244)) & ~0x1f) === 0 && ((1 << (_la - 244)) & 7) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1506;
	                    localctx.right = this.valueExpression(4);
	                    break;

	                case 2:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1507;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1508;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===242 || _la===243)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1509;
	                    localctx.right = this.valueExpression(3);
	                    break;

	                case 3:
	                    localctx = new ConcatenationContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1510;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1511;
	                    this.match(SqlBaseParser.CONCAT);
	                    this.state = 1512;
	                    localctx.right = this.valueExpression(2);
	                    break;

	                case 4:
	                    localctx = new AtTimeZoneContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1513;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1514;
	                    this.match(SqlBaseParser.AT);
	                    this.state = 1515;
	                    this.timeZoneSpecifier();
	                    break;

	                } 
	            }
	            this.state = 1520;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	primaryExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 92;
	    this.enterRecursionRule(localctx, 92, SqlBaseParser.RULE_primaryExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1760;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NullLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1522;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 2:
	            localctx = new IntervalLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1523;
	            this.interval();
	            break;

	        case 3:
	            localctx = new TypeConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1524;
	            this.identifier();
	            this.state = 1525;
	            this.string();
	            break;

	        case 4:
	            localctx = new TypeConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1527;
	            this.match(SqlBaseParser.DOUBLE_PRECISION);
	            this.state = 1528;
	            this.string();
	            break;

	        case 5:
	            localctx = new NumericLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1529;
	            this.number();
	            break;

	        case 6:
	            localctx = new BooleanLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1530;
	            this.booleanValue();
	            break;

	        case 7:
	            localctx = new StringLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1531;
	            this.string();
	            break;

	        case 8:
	            localctx = new BinaryLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1532;
	            this.match(SqlBaseParser.BINARY_LITERAL);
	            break;

	        case 9:
	            localctx = new ParameterContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1533;
	            this.match(SqlBaseParser.T__4);
	            break;

	        case 10:
	            localctx = new PositionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1534;
	            this.match(SqlBaseParser.POSITION);
	            this.state = 1535;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1536;
	            this.valueExpression(0);
	            this.state = 1537;
	            this.match(SqlBaseParser.IN);
	            this.state = 1538;
	            this.valueExpression(0);
	            this.state = 1539;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 11:
	            localctx = new RowConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1541;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1542;
	            this.expression();
	            this.state = 1545; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1543;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1544;
	                this.expression();
	                this.state = 1547; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===4);
	            this.state = 1549;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 12:
	            localctx = new RowConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1551;
	            this.match(SqlBaseParser.ROW);
	            this.state = 1552;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1553;
	            this.expression();
	            this.state = 1558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1554;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1555;
	                this.expression();
	                this.state = 1560;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1561;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 13:
	            localctx = new FunctionCallContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1563;
	            this.qualifiedName();
	            this.state = 1564;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1565;
	            this.match(SqlBaseParser.ASTERISK);
	            this.state = 1566;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1568;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	            if(la_===1) {
	                this.state = 1567;
	                this.filter();

	            }
	            this.state = 1571;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	            if(la_===1) {
	                this.state = 1570;
	                this.over();

	            }
	            break;

	        case 14:
	            localctx = new FunctionCallContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1573;
	            this.qualifiedName();
	            this.state = 1574;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 4288599817) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 3018522515) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 2933889021) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4160708461) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 3753856511) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 4293910015) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 1977024379) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 335481871) !== 0)) {
	                this.state = 1576;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	                if(la_===1) {
	                    this.state = 1575;
	                    this.setQuantifier();

	                }
	                this.state = 1578;
	                this.expression();
	                this.state = 1583;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1579;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1580;
	                    this.expression();
	                    this.state = 1585;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===147) {
	                this.state = 1588;
	                this.match(SqlBaseParser.ORDER);
	                this.state = 1589;
	                this.match(SqlBaseParser.BY);
	                this.state = 1590;
	                this.sortItem();
	                this.state = 1595;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1591;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1592;
	                    this.sortItem();
	                    this.state = 1597;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1600;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1602;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	            if(la_===1) {
	                this.state = 1601;
	                this.filter();

	            }
	            this.state = 1608;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	            if(la_===1) {
	                this.state = 1605;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===95 || _la===170) {
	                    this.state = 1604;
	                    this.nullTreatment();
	                }

	                this.state = 1607;
	                this.over();

	            }
	            break;

	        case 15:
	            localctx = new LambdaContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1610;
	            this.identifier();
	            this.state = 1611;
	            this.match(SqlBaseParser.T__5);
	            this.state = 1612;
	            this.expression();
	            break;

	        case 16:
	            localctx = new LambdaContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1614;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1623;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3464190976) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3417016911) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 1962720585) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4281068965) !== 0) || ((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 4227128895) !== 0) || ((((_la - 162)) & ~0x1f) === 0 && ((1 << (_la - 162)) & 4278050813) !== 0) || ((((_la - 194)) & ~0x1f) === 0 && ((1 << (_la - 194)) & 1567553471) !== 0) || ((((_la - 226)) & ~0x1f) === 0 && ((1 << (_la - 226)) & 4026532807) !== 0)) {
	                this.state = 1615;
	                this.identifier();
	                this.state = 1620;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1616;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1617;
	                    this.identifier();
	                    this.state = 1622;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1625;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1626;
	            this.match(SqlBaseParser.T__5);
	            this.state = 1627;
	            this.expression();
	            break;

	        case 17:
	            localctx = new SubqueryExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1628;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1629;
	            this.query();
	            this.state = 1630;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 18:
	            localctx = new ExistsContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1632;
	            this.match(SqlBaseParser.EXISTS);
	            this.state = 1633;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1634;
	            this.query();
	            this.state = 1635;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 19:
	            localctx = new SimpleCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1637;
	            this.match(SqlBaseParser.CASE);
	            this.state = 1638;
	            this.valueExpression(0);
	            this.state = 1640; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1639;
	                this.whenClause();
	                this.state = 1642; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===229);
	            this.state = 1646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===61) {
	                this.state = 1644;
	                this.match(SqlBaseParser.ELSE);
	                this.state = 1645;
	                localctx.elseExpression = this.expression();
	            }

	            this.state = 1648;
	            this.match(SqlBaseParser.END);
	            break;

	        case 20:
	            localctx = new SearchedCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1650;
	            this.match(SqlBaseParser.CASE);
	            this.state = 1652; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1651;
	                this.whenClause();
	                this.state = 1654; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===229);
	            this.state = 1658;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===61) {
	                this.state = 1656;
	                this.match(SqlBaseParser.ELSE);
	                this.state = 1657;
	                localctx.elseExpression = this.expression();
	            }

	            this.state = 1660;
	            this.match(SqlBaseParser.END);
	            break;

	        case 21:
	            localctx = new CastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1662;
	            this.match(SqlBaseParser.CAST);
	            this.state = 1663;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1664;
	            this.expression();
	            this.state = 1665;
	            this.match(SqlBaseParser.AS);
	            this.state = 1666;
	            this.type(0);
	            this.state = 1667;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 22:
	            localctx = new CastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1669;
	            this.match(SqlBaseParser.TRY_CAST);
	            this.state = 1670;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1671;
	            this.expression();
	            this.state = 1672;
	            this.match(SqlBaseParser.AS);
	            this.state = 1673;
	            this.type(0);
	            this.state = 1674;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 23:
	            localctx = new ArrayConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1676;
	            this.match(SqlBaseParser.ARRAY);
	            this.state = 1677;
	            this.match(SqlBaseParser.T__6);
	            this.state = 1686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 4288599817) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 3001745299) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 2933889021) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4160708461) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 3753856511) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 4293910015) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 1977024379) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 335481871) !== 0)) {
	                this.state = 1678;
	                this.expression();
	                this.state = 1683;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1679;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1680;
	                    this.expression();
	                    this.state = 1685;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1688;
	            this.match(SqlBaseParser.T__7);
	            break;

	        case 24:
	            localctx = new ColumnReferenceContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1689;
	            this.identifier();
	            break;

	        case 25:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1690;
	            localctx.name = this.match(SqlBaseParser.CURRENT_DATE);
	            break;

	        case 26:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1691;
	            localctx.name = this.match(SqlBaseParser.CURRENT_TIME);
	            this.state = 1695;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	            if(la_===1) {
	                this.state = 1692;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1693;
	                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 1694;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 27:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1697;
	            localctx.name = this.match(SqlBaseParser.CURRENT_TIMESTAMP);
	            this.state = 1701;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	            if(la_===1) {
	                this.state = 1698;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1699;
	                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 1700;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 28:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1703;
	            localctx.name = this.match(SqlBaseParser.LOCALTIME);
	            this.state = 1707;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	            if(la_===1) {
	                this.state = 1704;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1705;
	                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 1706;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 29:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1709;
	            localctx.name = this.match(SqlBaseParser.LOCALTIMESTAMP);
	            this.state = 1713;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	            if(la_===1) {
	                this.state = 1710;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1711;
	                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 1712;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 30:
	            localctx = new CurrentUserContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1715;
	            localctx.name = this.match(SqlBaseParser.CURRENT_USER);
	            break;

	        case 31:
	            localctx = new SubstringContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1716;
	            this.match(SqlBaseParser.SUBSTRING);
	            this.state = 1717;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1718;
	            this.valueExpression(0);
	            this.state = 1719;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1720;
	            this.valueExpression(0);
	            this.state = 1723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1721;
	                this.match(SqlBaseParser.FOR);
	                this.state = 1722;
	                this.valueExpression(0);
	            }

	            this.state = 1725;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 32:
	            localctx = new NormalizeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1727;
	            this.match(SqlBaseParser.NORMALIZE);
	            this.state = 1728;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1729;
	            this.valueExpression(0);
	            this.state = 1732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4) {
	                this.state = 1730;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1731;
	                this.normalForm();
	            }

	            this.state = 1734;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 33:
	            localctx = new ExtractContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1736;
	            this.match(SqlBaseParser.EXTRACT);
	            this.state = 1737;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1738;
	            this.identifier();
	            this.state = 1739;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1740;
	            this.valueExpression(0);
	            this.state = 1741;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 34:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1743;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1744;
	            this.expression();
	            this.state = 1745;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 35:
	            localctx = new GroupingOperationContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1747;
	            this.match(SqlBaseParser.GROUPING);
	            this.state = 1748;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1757;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3464190976) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3417016911) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 1962720585) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4281068965) !== 0) || ((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 4227128895) !== 0) || ((((_la - 162)) & ~0x1f) === 0 && ((1 << (_la - 162)) & 4278050813) !== 0) || ((((_la - 194)) & ~0x1f) === 0 && ((1 << (_la - 194)) & 1567553471) !== 0) || ((((_la - 226)) & ~0x1f) === 0 && ((1 << (_la - 226)) & 4026532807) !== 0)) {
	                this.state = 1749;
	                this.qualifiedName();
	                this.state = 1754;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1750;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1751;
	                    this.qualifiedName();
	                    this.state = 1756;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1759;
	            this.match(SqlBaseParser.T__2);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1772;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1770;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.value = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 1762;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1763;
	                    this.match(SqlBaseParser.T__6);
	                    this.state = 1764;
	                    localctx.index = this.valueExpression(0);
	                    this.state = 1765;
	                    this.match(SqlBaseParser.T__7);
	                    break;

	                case 2:
	                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.base = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 1767;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1768;
	                    this.match(SqlBaseParser.T__0);
	                    this.state = 1769;
	                    localctx.fieldName = this.identifier();
	                    break;

	                } 
	            }
	            this.state = 1774;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SqlBaseParser.RULE_string);
	    try {
	        this.state = 1781;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 248:
	            localctx = new BasicStringLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1775;
	            this.match(SqlBaseParser.STRING);
	            break;
	        case 249:
	            localctx = new UnicodeStringLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1776;
	            this.match(SqlBaseParser.UNICODE_STRING);
	            this.state = 1779;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	            if(la_===1) {
	                this.state = 1777;
	                this.match(SqlBaseParser.UESCAPE);
	                this.state = 1778;
	                this.match(SqlBaseParser.STRING);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullTreatment() {
	    let localctx = new NullTreatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SqlBaseParser.RULE_nullTreatment);
	    try {
	        this.state = 1787;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1783;
	            this.match(SqlBaseParser.IGNORE);
	            this.state = 1784;
	            this.match(SqlBaseParser.NULLS);
	            break;
	        case 170:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1785;
	            this.match(SqlBaseParser.RESPECT);
	            this.state = 1786;
	            this.match(SqlBaseParser.NULLS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeZoneSpecifier() {
	    let localctx = new TimeZoneSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SqlBaseParser.RULE_timeZoneSpecifier);
	    try {
	        this.state = 1795;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TimeZoneIntervalContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1789;
	            this.match(SqlBaseParser.TIME);
	            this.state = 1790;
	            this.match(SqlBaseParser.ZONE);
	            this.state = 1791;
	            this.interval();
	            break;

	        case 2:
	            localctx = new TimeZoneStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1792;
	            this.match(SqlBaseParser.TIME);
	            this.state = 1793;
	            this.match(SqlBaseParser.ZONE);
	            this.state = 1794;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SqlBaseParser.RULE_comparisonOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1797;
	        _la = this._input.LA(1);
	        if(!(((((_la - 236)) & ~0x1f) === 0 && ((1 << (_la - 236)) & 63) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonQuantifier() {
	    let localctx = new ComparisonQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SqlBaseParser.RULE_comparisonQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1799;
	        _la = this._input.LA(1);
	        if(!(_la===12 || _la===16 || _la===192)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValue() {
	    let localctx = new BooleanValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SqlBaseParser.RULE_booleanValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        _la = this._input.LA(1);
	        if(!(_la===74 || _la===210)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval() {
	    let localctx = new IntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SqlBaseParser.RULE_interval);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1803;
	        this.match(SqlBaseParser.INTERVAL);
	        this.state = 1805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===242 || _la===243) {
	            this.state = 1804;
	            localctx.sign = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===242 || _la===243)) {
	                localctx.sign = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1807;
	        this.string();
	        this.state = 1808;
	        localctx.from = this.intervalField();
	        this.state = 1811;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        if(la_===1) {
	            this.state = 1809;
	            this.match(SqlBaseParser.TO);
	            this.state = 1810;
	            localctx.to = this.intervalField();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalField() {
	    let localctx = new IntervalFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SqlBaseParser.RULE_intervalField);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1813;
	        _la = this._input.LA(1);
	        if(!(_la===49 || _la===93 || _la===126 || _la===127 || _la===184 || _la===234)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalForm() {
	    let localctx = new NormalFormContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SqlBaseParser.RULE_normalForm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1815;
	        _la = this._input.LA(1);
	        if(!(((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	types() {
	    let localctx = new TypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SqlBaseParser.RULE_types);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1817;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 2482216663) !== 0) || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 1381594481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 1767718703) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 532663035) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 4278057583) !== 0) || ((((_la - 171)) & ~0x1f) === 0 && ((1 << (_la - 171)) & 3758063343) !== 0) || ((((_la - 203)) & ~0x1f) === 0 && ((1 << (_la - 203)) & 3819878267) !== 0) || ((((_la - 235)) & ~0x1f) === 0 && ((1 << (_la - 235)) & 66584577) !== 0)) {
	            this.state = 1818;
	            this.type(0);
	            this.state = 1823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1819;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1820;
	                this.type(0);
	                this.state = 1825;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1828;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 114;
	    this.enterRecursionRule(localctx, 114, SqlBaseParser.RULE_type, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1877;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1831;
	            this.match(SqlBaseParser.ARRAY);
	            this.state = 1832;
	            this.match(SqlBaseParser.LT);
	            this.state = 1833;
	            this.type(0);
	            this.state = 1834;
	            this.match(SqlBaseParser.GT);
	            break;

	        case 2:
	            this.state = 1836;
	            this.match(SqlBaseParser.MAP);
	            this.state = 1837;
	            this.match(SqlBaseParser.LT);
	            this.state = 1838;
	            this.type(0);
	            this.state = 1839;
	            this.match(SqlBaseParser.T__3);
	            this.state = 1840;
	            this.type(0);
	            this.state = 1841;
	            this.match(SqlBaseParser.GT);
	            break;

	        case 3:
	            this.state = 1843;
	            this.match(SqlBaseParser.ROW);
	            this.state = 1844;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1845;
	            this.identifier();
	            this.state = 1846;
	            this.type(0);
	            this.state = 1853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1847;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1848;
	                this.identifier();
	                this.state = 1849;
	                this.type(0);
	                this.state = 1855;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1856;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 4:
	            this.state = 1858;
	            this.baseType();
	            this.state = 1870;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	            if(la_===1) {
	                this.state = 1859;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1860;
	                this.typeParameter();
	                this.state = 1865;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1861;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1862;
	                    this.typeParameter();
	                    this.state = 1867;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1868;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 5:
	            this.state = 1872;
	            this.match(SqlBaseParser.INTERVAL);
	            this.state = 1873;
	            localctx.from = this.intervalField();
	            this.state = 1874;
	            this.match(SqlBaseParser.TO);
	            this.state = 1875;
	            localctx.to = this.intervalField();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1883;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,237,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TypeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_type);
	                this.state = 1879;
	                if (!( this.precpred(this._ctx, 6))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                }
	                this.state = 1880;
	                this.match(SqlBaseParser.ARRAY); 
	            }
	            this.state = 1885;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,237,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	tableFunctionCall() {
	    let localctx = new TableFunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SqlBaseParser.RULE_tableFunctionCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1886;
	        this.qualifiedName();
	        this.state = 1887;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1896;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        if(la_===1) {
	            this.state = 1888;
	            this.tableFunctionArgument();
	            this.state = 1893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1889;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1890;
	                this.tableFunctionArgument();
	                this.state = 1895;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 1907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 1898;
	            this.match(SqlBaseParser.COPARTITION);
	            this.state = 1899;
	            this.copartitionTables();
	            this.state = 1904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1900;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1901;
	                this.copartitionTables();
	                this.state = 1906;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1909;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableFunctionArgument() {
	    let localctx = new TableFunctionArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SqlBaseParser.RULE_tableFunctionArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        if(la_===1) {
	            this.state = 1911;
	            this.identifier();
	            this.state = 1912;
	            this.match(SqlBaseParser.T__8);

	        }
	        this.state = 1919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1916;
	            this.tableArgument();
	            break;

	        case 2:
	            this.state = 1917;
	            this.descriptorArgument();
	            break;

	        case 3:
	            this.state = 1918;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableArgument() {
	    let localctx = new TableArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SqlBaseParser.RULE_tableArgument);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1921;
	        this.tableArgumentRelation();
	        this.state = 1939;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===152) {
	            this.state = 1922;
	            this.match(SqlBaseParser.PARTITION);
	            this.state = 1923;
	            this.match(SqlBaseParser.BY);
	            this.state = 1937;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1924;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1933;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 4288599817) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 3001745299) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 2933889021) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4160708461) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 3753856511) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 4293910015) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 1977024379) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 335481871) !== 0)) {
	                    this.state = 1925;
	                    this.expression();
	                    this.state = 1930;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===4) {
	                        this.state = 1926;
	                        this.match(SqlBaseParser.T__3);
	                        this.state = 1927;
	                        this.expression();
	                        this.state = 1932;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 1935;
	                this.match(SqlBaseParser.T__2);
	                break;

	            case 2:
	                this.state = 1936;
	                this.expression();
	                break;

	            }
	        }

	        this.state = 1947;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 160:
	        	this.state = 1941;
	        	this.match(SqlBaseParser.PRUNE);
	        	this.state = 1942;
	        	this.match(SqlBaseParser.WHEN);
	        	this.state = 1943;
	        	this.match(SqlBaseParser.EMPTY);
	        	break;
	        case 110:
	        	this.state = 1944;
	        	this.match(SqlBaseParser.KEEP);
	        	this.state = 1945;
	        	this.match(SqlBaseParser.WHEN);
	        	this.state = 1946;
	        	this.match(SqlBaseParser.EMPTY);
	        	break;
	        case 3:
	        case 4:
	        case 38:
	        case 147:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1965;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 1949;
	            this.match(SqlBaseParser.ORDER);
	            this.state = 1950;
	            this.match(SqlBaseParser.BY);
	            this.state = 1963;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1951;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1952;
	                this.sortItem();
	                this.state = 1957;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 1953;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1954;
	                    this.sortItem();
	                    this.state = 1959;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1960;
	                this.match(SqlBaseParser.T__2);
	                break;

	            case 2:
	                this.state = 1962;
	                this.sortItem();
	                break;

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableArgumentRelation() {
	    let localctx = new TableArgumentRelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SqlBaseParser.RULE_tableArgumentRelation);
	    var _la = 0;
	    try {
	        this.state = 1993;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableArgumentTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1967;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 1968;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1969;
	            this.qualifiedName();
	            this.state = 1970;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1978;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	            if(la_===1) {
	                this.state = 1972;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===18) {
	                    this.state = 1971;
	                    this.match(SqlBaseParser.AS);
	                }

	                this.state = 1974;
	                this.identifier();
	                this.state = 1976;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===2) {
	                    this.state = 1975;
	                    this.columnAliases();
	                }


	            }
	            break;

	        case 2:
	            localctx = new TableArgumentQueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1980;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 1981;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1982;
	            this.query();
	            this.state = 1983;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1991;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	            if(la_===1) {
	                this.state = 1985;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===18) {
	                    this.state = 1984;
	                    this.match(SqlBaseParser.AS);
	                }

	                this.state = 1987;
	                this.identifier();
	                this.state = 1989;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===2) {
	                    this.state = 1988;
	                    this.columnAliases();
	                }


	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descriptorArgument() {
	    let localctx = new DescriptorArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SqlBaseParser.RULE_descriptorArgument);
	    var _la = 0;
	    try {
	        this.state = 2013;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 55:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1995;
	            this.match(SqlBaseParser.DESCRIPTOR);
	            this.state = 1996;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1997;
	            this.descriptorField();
	            this.state = 2002;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 1998;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1999;
	                this.descriptorField();
	                this.state = 2004;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2005;
	            this.match(SqlBaseParser.T__2);
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2007;
	            this.match(SqlBaseParser.CAST);
	            this.state = 2008;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2009;
	            this.match(SqlBaseParser.NULL);
	            this.state = 2010;
	            this.match(SqlBaseParser.AS);
	            this.state = 2011;
	            this.match(SqlBaseParser.DESCRIPTOR);
	            this.state = 2012;
	            this.match(SqlBaseParser.T__2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descriptorField() {
	    let localctx = new DescriptorFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SqlBaseParser.RULE_descriptorField);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2015;
	        this.identifier();
	        this.state = 2017;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 2482216663) !== 0) || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 1381594481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 1767718703) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 532663035) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 4278057583) !== 0) || ((((_la - 171)) & ~0x1f) === 0 && ((1 << (_la - 171)) & 3758063343) !== 0) || ((((_la - 203)) & ~0x1f) === 0 && ((1 << (_la - 203)) & 3819878267) !== 0) || ((((_la - 235)) & ~0x1f) === 0 && ((1 << (_la - 235)) & 66584577) !== 0)) {
	            this.state = 2016;
	            this.type(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copartitionTables() {
	    let localctx = new CopartitionTablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SqlBaseParser.RULE_copartitionTables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2019;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2020;
	        this.qualifiedName();
	        this.state = 2021;
	        this.match(SqlBaseParser.T__3);
	        this.state = 2022;
	        this.qualifiedName();
	        this.state = 2027;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 2023;
	            this.match(SqlBaseParser.T__3);
	            this.state = 2024;
	            this.qualifiedName();
	            this.state = 2029;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2030;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SqlBaseParser.RULE_typeParameter);
	    try {
	        this.state = 2034;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 251:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2032;
	            this.match(SqlBaseParser.INTEGER_VALUE);
	            break;
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 16:
	        case 17:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 25:
	        case 26:
	        case 27:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 41:
	        case 43:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 53:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 62:
	        case 63:
	        case 65:
	        case 68:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 80:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 99:
	        case 102:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 118:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 144:
	        case 145:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 215:
	        case 216:
	        case 218:
	        case 220:
	        case 221:
	        case 222:
	        case 224:
	        case 226:
	        case 227:
	        case 228:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2033;
	            this.type(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseType() {
	    let localctx = new BaseTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SqlBaseParser.RULE_baseType);
	    try {
	        this.state = 2040;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 258:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2036;
	            this.match(SqlBaseParser.TIME_WITH_TIME_ZONE);
	            break;
	        case 259:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2037;
	            this.match(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE);
	            break;
	        case 260:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2038;
	            this.match(SqlBaseParser.DOUBLE_PRECISION);
	            break;
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 16:
	        case 17:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 25:
	        case 26:
	        case 27:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 41:
	        case 43:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 53:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 62:
	        case 63:
	        case 65:
	        case 68:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 80:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 99:
	        case 102:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 118:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 144:
	        case 145:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 215:
	        case 216:
	        case 218:
	        case 220:
	        case 221:
	        case 222:
	        case 224:
	        case 226:
	        case 227:
	        case 228:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2039;
	            this.qualifiedName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenClause() {
	    let localctx = new WhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SqlBaseParser.RULE_whenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2042;
	        this.match(SqlBaseParser.WHEN);
	        this.state = 2043;
	        localctx.condition = this.expression();
	        this.state = 2044;
	        this.match(SqlBaseParser.THEN);
	        this.state = 2045;
	        localctx.result = this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter() {
	    let localctx = new FilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SqlBaseParser.RULE_filter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2047;
	        this.match(SqlBaseParser.FILTER);
	        this.state = 2048;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2049;
	        this.match(SqlBaseParser.WHERE);
	        this.state = 2050;
	        this.booleanExpression(0);
	        this.state = 2051;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeCase() {
	    let localctx = new MergeCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SqlBaseParser.RULE_mergeCase);
	    var _la = 0;
	    try {
	        this.state = 2101;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MergeUpdateContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2053;
	            this.match(SqlBaseParser.WHEN);
	            this.state = 2054;
	            this.match(SqlBaseParser.MATCHED);
	            this.state = 2055;
	            this.match(SqlBaseParser.THEN);
	            this.state = 2056;
	            this.match(SqlBaseParser.UPDATE);
	            this.state = 2057;
	            this.match(SqlBaseParser.SET);
	            this.state = 2058;
	            localctx._identifier = this.identifier();
	            localctx.targetColumns.push(localctx._identifier);
	            this.state = 2059;
	            this.match(SqlBaseParser.EQ);
	            this.state = 2060;
	            localctx._expression = this.expression();
	            localctx.values.push(localctx._expression);
	            this.state = 2068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 2061;
	                this.match(SqlBaseParser.T__3);
	                this.state = 2062;
	                localctx._identifier = this.identifier();
	                localctx.targetColumns.push(localctx._identifier);
	                this.state = 2063;
	                this.match(SqlBaseParser.EQ);
	                this.state = 2064;
	                localctx._expression = this.expression();
	                localctx.values.push(localctx._expression);
	                this.state = 2070;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new MergeInsertContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2071;
	            this.match(SqlBaseParser.WHEN);
	            this.state = 2072;
	            this.match(SqlBaseParser.NOT);
	            this.state = 2073;
	            this.match(SqlBaseParser.MATCHED);
	            this.state = 2074;
	            this.match(SqlBaseParser.THEN);
	            this.state = 2075;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 2087;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 2076;
	                this.match(SqlBaseParser.T__1);
	                this.state = 2077;
	                localctx._identifier = this.identifier();
	                localctx.columns.push(localctx._identifier);
	                this.state = 2082;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===4) {
	                    this.state = 2078;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 2079;
	                    localctx._identifier = this.identifier();
	                    localctx.columns.push(localctx._identifier);
	                    this.state = 2084;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2085;
	                this.match(SqlBaseParser.T__2);
	            }

	            this.state = 2089;
	            this.match(SqlBaseParser.VALUES);
	            this.state = 2090;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2091;
	            localctx._expression = this.expression();
	            localctx.values.push(localctx._expression);
	            this.state = 2096;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 2092;
	                this.match(SqlBaseParser.T__3);
	                this.state = 2093;
	                localctx._expression = this.expression();
	                localctx.values.push(localctx._expression);
	                this.state = 2098;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2099;
	            this.match(SqlBaseParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	over() {
	    let localctx = new OverContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SqlBaseParser.RULE_over);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2103;
	        this.match(SqlBaseParser.OVER);
	        this.state = 2104;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2115;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===152) {
	            this.state = 2105;
	            this.match(SqlBaseParser.PARTITION);
	            this.state = 2106;
	            this.match(SqlBaseParser.BY);
	            this.state = 2107;
	            localctx._expression = this.expression();
	            localctx.partition.push(localctx._expression);
	            this.state = 2112;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 2108;
	                this.match(SqlBaseParser.T__3);
	                this.state = 2109;
	                localctx._expression = this.expression();
	                localctx.partition.push(localctx._expression);
	                this.state = 2114;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 2117;
	            this.match(SqlBaseParser.ORDER);
	            this.state = 2118;
	            this.match(SqlBaseParser.BY);
	            this.state = 2119;
	            this.sortItem();
	            this.state = 2124;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===4) {
	                this.state = 2120;
	                this.match(SqlBaseParser.T__3);
	                this.state = 2121;
	                this.sortItem();
	                this.state = 2126;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===91 || _la===161 || _la===181) {
	            this.state = 2129;
	            this.windowFrame();
	        }

	        this.state = 2132;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrame() {
	    let localctx = new WindowFrameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SqlBaseParser.RULE_windowFrame);
	    try {
	        this.state = 2158;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2134;
	            localctx.frameType = this.match(SqlBaseParser.RANGE);
	            this.state = 2135;
	            localctx.start = this.frameBound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2136;
	            localctx.frameType = this.match(SqlBaseParser.ROWS);
	            this.state = 2137;
	            localctx.start = this.frameBound();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2138;
	            localctx.frameType = this.match(SqlBaseParser.GROUPS);
	            this.state = 2139;
	            localctx.start = this.frameBound();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2140;
	            localctx.frameType = this.match(SqlBaseParser.RANGE);
	            this.state = 2141;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 2142;
	            localctx.start = this.frameBound();
	            this.state = 2143;
	            this.match(SqlBaseParser.AND);
	            this.state = 2144;
	            localctx.end = this.frameBound();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2146;
	            localctx.frameType = this.match(SqlBaseParser.ROWS);
	            this.state = 2147;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 2148;
	            localctx.start = this.frameBound();
	            this.state = 2149;
	            this.match(SqlBaseParser.AND);
	            this.state = 2150;
	            localctx.end = this.frameBound();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2152;
	            localctx.frameType = this.match(SqlBaseParser.GROUPS);
	            this.state = 2153;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 2154;
	            localctx.start = this.frameBound();
	            this.state = 2155;
	            this.match(SqlBaseParser.AND);
	            this.state = 2156;
	            localctx.end = this.frameBound();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameBound() {
	    let localctx = new FrameBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SqlBaseParser.RULE_frameBound);
	    var _la = 0;
	    try {
	        this.state = 2169;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UnboundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2160;
	            this.match(SqlBaseParser.UNBOUNDED);
	            this.state = 2161;
	            localctx.boundType = this.match(SqlBaseParser.PRECEDING);
	            break;

	        case 2:
	            localctx = new UnboundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2162;
	            this.match(SqlBaseParser.UNBOUNDED);
	            this.state = 2163;
	            localctx.boundType = this.match(SqlBaseParser.FOLLOWING);
	            break;

	        case 3:
	            localctx = new CurrentRowBoundContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2164;
	            this.match(SqlBaseParser.CURRENT);
	            this.state = 2165;
	            this.match(SqlBaseParser.ROW);
	            break;

	        case 4:
	            localctx = new BoundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2166;
	            this.expression();
	            this.state = 2167;
	            localctx.boundType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===78 || _la===155)) {
	                localctx.boundType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateAssignment() {
	    let localctx = new UpdateAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SqlBaseParser.RULE_updateAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2171;
	        this.identifier();
	        this.state = 2172;
	        this.match(SqlBaseParser.EQ);
	        this.state = 2173;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainOption() {
	    let localctx = new ExplainOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SqlBaseParser.RULE_explainOption);
	    var _la = 0;
	    try {
	        this.state = 2179;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            localctx = new ExplainFormatContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2175;
	            this.match(SqlBaseParser.FORMAT);
	            this.state = 2176;
	            localctx.value = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===88 || _la===108 || _la===204)) {
	                localctx.value = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 213:
	            localctx = new ExplainTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2177;
	            this.match(SqlBaseParser.TYPE);
	            this.state = 2178;
	            localctx.value = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===59 || _la===105 || _la===121 || _la===224)) {
	                localctx.value = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SqlBaseParser.RULE_transactionMode);
	    var _la = 0;
	    try {
	        this.state = 2186;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 107:
	            localctx = new IsolationLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2181;
	            this.match(SqlBaseParser.ISOLATION);
	            this.state = 2182;
	            this.match(SqlBaseParser.LEVEL);
	            this.state = 2183;
	            this.levelOfIsolation();
	            break;
	        case 162:
	            localctx = new TransactionAccessModeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2184;
	            this.match(SqlBaseParser.READ);
	            this.state = 2185;
	            localctx.accessMode = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===144 || _la===233)) {
	                localctx.accessMode = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	levelOfIsolation() {
	    let localctx = new LevelOfIsolationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SqlBaseParser.RULE_levelOfIsolation);
	    try {
	        this.state = 2195;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ReadUncommittedContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2188;
	            this.match(SqlBaseParser.READ);
	            this.state = 2189;
	            this.match(SqlBaseParser.UNCOMMITTED);
	            break;

	        case 2:
	            localctx = new ReadCommittedContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2190;
	            this.match(SqlBaseParser.READ);
	            this.state = 2191;
	            this.match(SqlBaseParser.COMMITTED);
	            break;

	        case 3:
	            localctx = new RepeatableReadContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2192;
	            this.match(SqlBaseParser.REPEATABLE);
	            this.state = 2193;
	            this.match(SqlBaseParser.READ);
	            break;

	        case 4:
	            localctx = new SerializableContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2194;
	            this.match(SqlBaseParser.SERIALIZABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callArgument() {
	    let localctx = new CallArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SqlBaseParser.RULE_callArgument);
	    try {
	        this.state = 2202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PositionalArgumentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2197;
	            this.expression();
	            break;

	        case 2:
	            localctx = new NamedArgumentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2198;
	            this.identifier();
	            this.state = 2199;
	            this.match(SqlBaseParser.T__8);
	            this.state = 2200;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilege() {
	    let localctx = new PrivilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SqlBaseParser.RULE_privilege);
	    try {
	        this.state = 2208;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 186:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2204;
	            this.match(SqlBaseParser.SELECT);
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2205;
	            this.match(SqlBaseParser.DELETE);
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2206;
	            this.match(SqlBaseParser.INSERT);
	            break;
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 16:
	        case 17:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 25:
	        case 26:
	        case 27:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 41:
	        case 43:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 53:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 62:
	        case 63:
	        case 65:
	        case 68:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 80:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 99:
	        case 102:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 118:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 144:
	        case 145:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 215:
	        case 216:
	        case 218:
	        case 220:
	        case 221:
	        case 222:
	        case 224:
	        case 226:
	        case 227:
	        case 228:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2207;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SqlBaseParser.RULE_qualifiedName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2210;
	        this.identifier();
	        this.state = 2215;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,282,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2211;
	                this.match(SqlBaseParser.T__0);
	                this.state = 2212;
	                this.identifier(); 
	            }
	            this.state = 2217;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,282,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableVersionExpression() {
	    let localctx = new TableVersionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SqlBaseParser.RULE_tableVersionExpression);
	    var _la = 0;
	    try {
	        localctx = new TableVersionContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2218;
	        this.match(SqlBaseParser.FOR);
	        this.state = 2219;
	        localctx.tableVersionType = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 536871427) !== 0))) {
	            localctx.tableVersionType = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2220;
	        this.tableVersionState();
	        this.state = 2221;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableVersionState() {
	    let localctx = new TableVersionStateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SqlBaseParser.RULE_tableVersionState);
	    try {
	        this.state = 2226;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            localctx = new TableversionasofContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2223;
	            this.match(SqlBaseParser.AS);
	            this.state = 2224;
	            this.match(SqlBaseParser.OF);
	            break;
	        case 21:
	            localctx = new TableversionbeforeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2225;
	            this.match(SqlBaseParser.BEFORE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantor() {
	    let localctx = new GrantorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SqlBaseParser.RULE_grantor);
	    try {
	        this.state = 2231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CurrentUserGrantorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2228;
	            this.match(SqlBaseParser.CURRENT_USER);
	            break;

	        case 2:
	            localctx = new CurrentRoleGrantorContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2229;
	            this.match(SqlBaseParser.CURRENT_ROLE);
	            break;

	        case 3:
	            localctx = new SpecifiedPrincipalContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2230;
	            this.principal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principal() {
	    let localctx = new PrincipalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SqlBaseParser.RULE_principal);
	    try {
	        this.state = 2238;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UserPrincipalContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2233;
	            this.match(SqlBaseParser.USER);
	            this.state = 2234;
	            this.identifier();
	            break;

	        case 2:
	            localctx = new RolePrincipalContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2235;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 2236;
	            this.identifier();
	            break;

	        case 3:
	            localctx = new UnspecifiedPrincipalContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2237;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roles() {
	    let localctx = new RolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SqlBaseParser.RULE_roles);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2240;
	        this.identifier();
	        this.state = 2245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4) {
	            this.state = 2241;
	            this.match(SqlBaseParser.T__3);
	            this.state = 2242;
	            this.identifier();
	            this.state = 2247;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SqlBaseParser.RULE_identifier);
	    try {
	        this.state = 2253;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 254:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2248;
	            this.match(SqlBaseParser.IDENTIFIER);
	            break;
	        case 256:
	            localctx = new QuotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2249;
	            this.match(SqlBaseParser.QUOTED_IDENTIFIER);
	            break;
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 16:
	        case 17:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 25:
	        case 26:
	        case 27:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 41:
	        case 43:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 53:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 62:
	        case 63:
	        case 65:
	        case 68:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 80:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 99:
	        case 102:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 118:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 144:
	        case 145:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 215:
	        case 216:
	        case 218:
	        case 220:
	        case 221:
	        case 222:
	        case 224:
	        case 226:
	        case 227:
	        case 228:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2250;
	            this.nonReserved();
	            break;
	        case 257:
	            localctx = new BackQuotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2251;
	            this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
	            break;
	        case 255:
	            localctx = new DigitIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2252;
	            this.match(SqlBaseParser.DIGIT_IDENTIFIER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SqlBaseParser.RULE_number);
	    try {
	        this.state = 2258;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 252:
	            localctx = new DecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2255;
	            this.match(SqlBaseParser.DECIMAL_VALUE);
	            break;
	        case 253:
	            localctx = new DoubleLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2256;
	            this.match(SqlBaseParser.DOUBLE_VALUE);
	            break;
	        case 251:
	            localctx = new IntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2257;
	            this.match(SqlBaseParser.INTEGER_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintSpecification() {
	    let localctx = new ConstraintSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SqlBaseParser.RULE_constraintSpecification);
	    try {
	        this.state = 2262;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 36:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2260;
	            this.namedConstraintSpecification();
	            break;
	        case 157:
	        case 218:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2261;
	            this.unnamedConstraintSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedConstraintSpecification() {
	    let localctx = new NamedConstraintSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SqlBaseParser.RULE_namedConstraintSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2264;
	        this.match(SqlBaseParser.CONSTRAINT);
	        this.state = 2265;
	        localctx.name = this.identifier();
	        this.state = 2266;
	        this.unnamedConstraintSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unnamedConstraintSpecification() {
	    let localctx = new UnnamedConstraintSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SqlBaseParser.RULE_unnamedConstraintSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2268;
	        this.constraintType();
	        this.state = 2269;
	        this.columnAliases();
	        this.state = 2271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	        if(la_===1) {
	            this.state = 2270;
	            this.constraintQualifiers();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintType() {
	    let localctx = new ConstraintTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SqlBaseParser.RULE_constraintType);
	    try {
	        this.state = 2276;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 218:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2273;
	            this.match(SqlBaseParser.UNIQUE);
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2274;
	            this.match(SqlBaseParser.PRIMARY);
	            this.state = 2275;
	            this.match(SqlBaseParser.KEY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintQualifiers() {
	    let localctx = new ConstraintQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SqlBaseParser.RULE_constraintQualifiers);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 321) !== 0) || _la===137 || _la===165) {
	            this.state = 2278;
	            this.constraintQualifier();
	            this.state = 2283;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintQualifier() {
	    let localctx = new ConstraintQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SqlBaseParser.RULE_constraintQualifier);
	    try {
	        this.state = 2287;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2284;
	            this.constraintEnabled();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2285;
	            this.constraintRely();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2286;
	            this.constraintEnforced();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintRely() {
	    let localctx = new ConstraintRelyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SqlBaseParser.RULE_constraintRely);
	    try {
	        this.state = 2292;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 165:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2289;
	            this.match(SqlBaseParser.RELY);
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2290;
	            this.match(SqlBaseParser.NOT);
	            this.state = 2291;
	            this.match(SqlBaseParser.RELY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintEnabled() {
	    let localctx = new ConstraintEnabledContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SqlBaseParser.RULE_constraintEnabled);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2294;
	        _la = this._input.LA(1);
	        if(!(_la===57 || _la===63)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintEnforced() {
	    let localctx = new ConstraintEnforcedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, SqlBaseParser.RULE_constraintEnforced);
	    try {
	        this.state = 2299;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2296;
	            this.match(SqlBaseParser.ENFORCED);
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2297;
	            this.match(SqlBaseParser.NOT);
	            this.state = 2298;
	            this.match(SqlBaseParser.ENFORCED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonReserved() {
	    let localctx = new NonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, SqlBaseParser.RULE_nonReserved);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2301;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 3464190976) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3417016911) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 1962720585) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4281068965) !== 0) || ((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 4227128895) !== 0) || ((((_la - 162)) & ~0x1f) === 0 && ((1 << (_la - 162)) & 4278050813) !== 0) || ((((_la - 194)) & ~0x1f) === 0 && ((1 << (_la - 194)) & 1567553471) !== 0) || ((((_la - 226)) & ~0x1f) === 0 && ((1 << (_la - 226)) & 967) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SqlBaseParser.EOF = antlr4.Token.EOF;
SqlBaseParser.T__0 = 1;
SqlBaseParser.T__1 = 2;
SqlBaseParser.T__2 = 3;
SqlBaseParser.T__3 = 4;
SqlBaseParser.T__4 = 5;
SqlBaseParser.T__5 = 6;
SqlBaseParser.T__6 = 7;
SqlBaseParser.T__7 = 8;
SqlBaseParser.T__8 = 9;
SqlBaseParser.ADD = 10;
SqlBaseParser.ADMIN = 11;
SqlBaseParser.ALL = 12;
SqlBaseParser.ALTER = 13;
SqlBaseParser.ANALYZE = 14;
SqlBaseParser.AND = 15;
SqlBaseParser.ANY = 16;
SqlBaseParser.ARRAY = 17;
SqlBaseParser.AS = 18;
SqlBaseParser.ASC = 19;
SqlBaseParser.AT = 20;
SqlBaseParser.BEFORE = 21;
SqlBaseParser.BERNOULLI = 22;
SqlBaseParser.BETWEEN = 23;
SqlBaseParser.BY = 24;
SqlBaseParser.CALL = 25;
SqlBaseParser.CALLED = 26;
SqlBaseParser.CASCADE = 27;
SqlBaseParser.CASE = 28;
SqlBaseParser.CAST = 29;
SqlBaseParser.CATALOGS = 30;
SqlBaseParser.COLUMN = 31;
SqlBaseParser.COLUMNS = 32;
SqlBaseParser.COMMENT = 33;
SqlBaseParser.COMMIT = 34;
SqlBaseParser.COMMITTED = 35;
SqlBaseParser.CONSTRAINT = 36;
SqlBaseParser.CREATE = 37;
SqlBaseParser.COPARTITION = 38;
SqlBaseParser.CROSS = 39;
SqlBaseParser.CUBE = 40;
SqlBaseParser.CURRENT = 41;
SqlBaseParser.CURRENT_DATE = 42;
SqlBaseParser.CURRENT_ROLE = 43;
SqlBaseParser.CURRENT_TIME = 44;
SqlBaseParser.CURRENT_TIMESTAMP = 45;
SqlBaseParser.CURRENT_USER = 46;
SqlBaseParser.DATA = 47;
SqlBaseParser.DATE = 48;
SqlBaseParser.DAY = 49;
SqlBaseParser.DEALLOCATE = 50;
SqlBaseParser.DEFINER = 51;
SqlBaseParser.DELETE = 52;
SqlBaseParser.DESC = 53;
SqlBaseParser.DESCRIBE = 54;
SqlBaseParser.DESCRIPTOR = 55;
SqlBaseParser.DETERMINISTIC = 56;
SqlBaseParser.DISABLED = 57;
SqlBaseParser.DISTINCT = 58;
SqlBaseParser.DISTRIBUTED = 59;
SqlBaseParser.DROP = 60;
SqlBaseParser.ELSE = 61;
SqlBaseParser.EMPTY = 62;
SqlBaseParser.ENABLED = 63;
SqlBaseParser.END = 64;
SqlBaseParser.ENFORCED = 65;
SqlBaseParser.ESCAPE = 66;
SqlBaseParser.EXCEPT = 67;
SqlBaseParser.EXCLUDING = 68;
SqlBaseParser.EXECUTE = 69;
SqlBaseParser.EXISTS = 70;
SqlBaseParser.EXPLAIN = 71;
SqlBaseParser.EXTRACT = 72;
SqlBaseParser.EXTERNAL = 73;
SqlBaseParser.FALSE = 74;
SqlBaseParser.FETCH = 75;
SqlBaseParser.FILTER = 76;
SqlBaseParser.FIRST = 77;
SqlBaseParser.FOLLOWING = 78;
SqlBaseParser.FOR = 79;
SqlBaseParser.FORMAT = 80;
SqlBaseParser.FROM = 81;
SqlBaseParser.FULL = 82;
SqlBaseParser.FUNCTION = 83;
SqlBaseParser.FUNCTIONS = 84;
SqlBaseParser.GRANT = 85;
SqlBaseParser.GRANTED = 86;
SqlBaseParser.GRANTS = 87;
SqlBaseParser.GRAPHVIZ = 88;
SqlBaseParser.GROUP = 89;
SqlBaseParser.GROUPING = 90;
SqlBaseParser.GROUPS = 91;
SqlBaseParser.HAVING = 92;
SqlBaseParser.HOUR = 93;
SqlBaseParser.IF = 94;
SqlBaseParser.IGNORE = 95;
SqlBaseParser.IN = 96;
SqlBaseParser.INCLUDING = 97;
SqlBaseParser.INNER = 98;
SqlBaseParser.INPUT = 99;
SqlBaseParser.INSERT = 100;
SqlBaseParser.INTERSECT = 101;
SqlBaseParser.INTERVAL = 102;
SqlBaseParser.INTO = 103;
SqlBaseParser.INVOKER = 104;
SqlBaseParser.IO = 105;
SqlBaseParser.IS = 106;
SqlBaseParser.ISOLATION = 107;
SqlBaseParser.JSON = 108;
SqlBaseParser.JOIN = 109;
SqlBaseParser.KEEP = 110;
SqlBaseParser.KEY = 111;
SqlBaseParser.LANGUAGE = 112;
SqlBaseParser.LAST = 113;
SqlBaseParser.LATERAL = 114;
SqlBaseParser.LEFT = 115;
SqlBaseParser.LEVEL = 116;
SqlBaseParser.LIKE = 117;
SqlBaseParser.LIMIT = 118;
SqlBaseParser.LOCALTIME = 119;
SqlBaseParser.LOCALTIMESTAMP = 120;
SqlBaseParser.LOGICAL = 121;
SqlBaseParser.MAP = 122;
SqlBaseParser.MATCHED = 123;
SqlBaseParser.MATERIALIZED = 124;
SqlBaseParser.MERGE = 125;
SqlBaseParser.MINUTE = 126;
SqlBaseParser.MONTH = 127;
SqlBaseParser.NAME = 128;
SqlBaseParser.NATURAL = 129;
SqlBaseParser.NFC = 130;
SqlBaseParser.NFD = 131;
SqlBaseParser.NFKC = 132;
SqlBaseParser.NFKD = 133;
SqlBaseParser.NO = 134;
SqlBaseParser.NONE = 135;
SqlBaseParser.NORMALIZE = 136;
SqlBaseParser.NOT = 137;
SqlBaseParser.NULL = 138;
SqlBaseParser.NULLIF = 139;
SqlBaseParser.NULLS = 140;
SqlBaseParser.OF = 141;
SqlBaseParser.OFFSET = 142;
SqlBaseParser.ON = 143;
SqlBaseParser.ONLY = 144;
SqlBaseParser.OPTION = 145;
SqlBaseParser.OR = 146;
SqlBaseParser.ORDER = 147;
SqlBaseParser.ORDINALITY = 148;
SqlBaseParser.OUTER = 149;
SqlBaseParser.OUTPUT = 150;
SqlBaseParser.OVER = 151;
SqlBaseParser.PARTITION = 152;
SqlBaseParser.PARTITIONS = 153;
SqlBaseParser.POSITION = 154;
SqlBaseParser.PRECEDING = 155;
SqlBaseParser.PREPARE = 156;
SqlBaseParser.PRIMARY = 157;
SqlBaseParser.PRIVILEGES = 158;
SqlBaseParser.PROPERTIES = 159;
SqlBaseParser.PRUNE = 160;
SqlBaseParser.RANGE = 161;
SqlBaseParser.READ = 162;
SqlBaseParser.RECURSIVE = 163;
SqlBaseParser.REFRESH = 164;
SqlBaseParser.RELY = 165;
SqlBaseParser.RENAME = 166;
SqlBaseParser.REPEATABLE = 167;
SqlBaseParser.REPLACE = 168;
SqlBaseParser.RESET = 169;
SqlBaseParser.RESPECT = 170;
SqlBaseParser.RESTRICT = 171;
SqlBaseParser.RETURN = 172;
SqlBaseParser.RETURNS = 173;
SqlBaseParser.REVOKE = 174;
SqlBaseParser.RIGHT = 175;
SqlBaseParser.ROLE = 176;
SqlBaseParser.ROLES = 177;
SqlBaseParser.ROLLBACK = 178;
SqlBaseParser.ROLLUP = 179;
SqlBaseParser.ROW = 180;
SqlBaseParser.ROWS = 181;
SqlBaseParser.SCHEMA = 182;
SqlBaseParser.SCHEMAS = 183;
SqlBaseParser.SECOND = 184;
SqlBaseParser.SECURITY = 185;
SqlBaseParser.SELECT = 186;
SqlBaseParser.SERIALIZABLE = 187;
SqlBaseParser.SESSION = 188;
SqlBaseParser.SET = 189;
SqlBaseParser.SETS = 190;
SqlBaseParser.SHOW = 191;
SqlBaseParser.SOME = 192;
SqlBaseParser.SQL = 193;
SqlBaseParser.START = 194;
SqlBaseParser.STATS = 195;
SqlBaseParser.SUBSTRING = 196;
SqlBaseParser.SYSTEM = 197;
SqlBaseParser.SYSTEM_TIME = 198;
SqlBaseParser.SYSTEM_VERSION = 199;
SqlBaseParser.TABLE = 200;
SqlBaseParser.TABLES = 201;
SqlBaseParser.TABLESAMPLE = 202;
SqlBaseParser.TEMPORARY = 203;
SqlBaseParser.TEXT = 204;
SqlBaseParser.THEN = 205;
SqlBaseParser.TIME = 206;
SqlBaseParser.TIMESTAMP = 207;
SqlBaseParser.TO = 208;
SqlBaseParser.TRANSACTION = 209;
SqlBaseParser.TRUE = 210;
SqlBaseParser.TRUNCATE = 211;
SqlBaseParser.TRY_CAST = 212;
SqlBaseParser.TYPE = 213;
SqlBaseParser.UESCAPE = 214;
SqlBaseParser.UNBOUNDED = 215;
SqlBaseParser.UNCOMMITTED = 216;
SqlBaseParser.UNION = 217;
SqlBaseParser.UNIQUE = 218;
SqlBaseParser.UNNEST = 219;
SqlBaseParser.UPDATE = 220;
SqlBaseParser.USE = 221;
SqlBaseParser.USER = 222;
SqlBaseParser.USING = 223;
SqlBaseParser.VALIDATE = 224;
SqlBaseParser.VALUES = 225;
SqlBaseParser.VERBOSE = 226;
SqlBaseParser.VERSION = 227;
SqlBaseParser.VIEW = 228;
SqlBaseParser.WHEN = 229;
SqlBaseParser.WHERE = 230;
SqlBaseParser.WITH = 231;
SqlBaseParser.WORK = 232;
SqlBaseParser.WRITE = 233;
SqlBaseParser.YEAR = 234;
SqlBaseParser.ZONE = 235;
SqlBaseParser.EQ = 236;
SqlBaseParser.NEQ = 237;
SqlBaseParser.LT = 238;
SqlBaseParser.LTE = 239;
SqlBaseParser.GT = 240;
SqlBaseParser.GTE = 241;
SqlBaseParser.PLUS = 242;
SqlBaseParser.MINUS = 243;
SqlBaseParser.ASTERISK = 244;
SqlBaseParser.SLASH = 245;
SqlBaseParser.PERCENT = 246;
SqlBaseParser.CONCAT = 247;
SqlBaseParser.STRING = 248;
SqlBaseParser.UNICODE_STRING = 249;
SqlBaseParser.BINARY_LITERAL = 250;
SqlBaseParser.INTEGER_VALUE = 251;
SqlBaseParser.DECIMAL_VALUE = 252;
SqlBaseParser.DOUBLE_VALUE = 253;
SqlBaseParser.IDENTIFIER = 254;
SqlBaseParser.DIGIT_IDENTIFIER = 255;
SqlBaseParser.QUOTED_IDENTIFIER = 256;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 257;
SqlBaseParser.TIME_WITH_TIME_ZONE = 258;
SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE = 259;
SqlBaseParser.DOUBLE_PRECISION = 260;
SqlBaseParser.SIMPLE_COMMENT = 261;
SqlBaseParser.BRACKETED_COMMENT = 262;
SqlBaseParser.WS = 263;
SqlBaseParser.UNRECOGNIZED = 264;
SqlBaseParser.DELIMITER = 265;

SqlBaseParser.RULE_singleStatement = 0;
SqlBaseParser.RULE_standaloneExpression = 1;
SqlBaseParser.RULE_standaloneRoutineBody = 2;
SqlBaseParser.RULE_statement = 3;
SqlBaseParser.RULE_query = 4;
SqlBaseParser.RULE_with = 5;
SqlBaseParser.RULE_tableElement = 6;
SqlBaseParser.RULE_columnDefinition = 7;
SqlBaseParser.RULE_likeClause = 8;
SqlBaseParser.RULE_properties = 9;
SqlBaseParser.RULE_property = 10;
SqlBaseParser.RULE_sqlParameterDeclaration = 11;
SqlBaseParser.RULE_routineCharacteristics = 12;
SqlBaseParser.RULE_routineCharacteristic = 13;
SqlBaseParser.RULE_alterRoutineCharacteristics = 14;
SqlBaseParser.RULE_alterRoutineCharacteristic = 15;
SqlBaseParser.RULE_routineBody = 16;
SqlBaseParser.RULE_returnStatement = 17;
SqlBaseParser.RULE_externalBodyReference = 18;
SqlBaseParser.RULE_language = 19;
SqlBaseParser.RULE_determinism = 20;
SqlBaseParser.RULE_nullCallClause = 21;
SqlBaseParser.RULE_externalRoutineName = 22;
SqlBaseParser.RULE_queryNoWith = 23;
SqlBaseParser.RULE_queryTerm = 24;
SqlBaseParser.RULE_queryPrimary = 25;
SqlBaseParser.RULE_sortItem = 26;
SqlBaseParser.RULE_querySpecification = 27;
SqlBaseParser.RULE_groupBy = 28;
SqlBaseParser.RULE_groupingElement = 29;
SqlBaseParser.RULE_groupingSet = 30;
SqlBaseParser.RULE_namedQuery = 31;
SqlBaseParser.RULE_setQuantifier = 32;
SqlBaseParser.RULE_selectItem = 33;
SqlBaseParser.RULE_relation = 34;
SqlBaseParser.RULE_joinType = 35;
SqlBaseParser.RULE_joinCriteria = 36;
SqlBaseParser.RULE_sampledRelation = 37;
SqlBaseParser.RULE_sampleType = 38;
SqlBaseParser.RULE_aliasedRelation = 39;
SqlBaseParser.RULE_columnAliases = 40;
SqlBaseParser.RULE_relationPrimary = 41;
SqlBaseParser.RULE_expression = 42;
SqlBaseParser.RULE_booleanExpression = 43;
SqlBaseParser.RULE_predicate = 44;
SqlBaseParser.RULE_valueExpression = 45;
SqlBaseParser.RULE_primaryExpression = 46;
SqlBaseParser.RULE_string = 47;
SqlBaseParser.RULE_nullTreatment = 48;
SqlBaseParser.RULE_timeZoneSpecifier = 49;
SqlBaseParser.RULE_comparisonOperator = 50;
SqlBaseParser.RULE_comparisonQuantifier = 51;
SqlBaseParser.RULE_booleanValue = 52;
SqlBaseParser.RULE_interval = 53;
SqlBaseParser.RULE_intervalField = 54;
SqlBaseParser.RULE_normalForm = 55;
SqlBaseParser.RULE_types = 56;
SqlBaseParser.RULE_type = 57;
SqlBaseParser.RULE_tableFunctionCall = 58;
SqlBaseParser.RULE_tableFunctionArgument = 59;
SqlBaseParser.RULE_tableArgument = 60;
SqlBaseParser.RULE_tableArgumentRelation = 61;
SqlBaseParser.RULE_descriptorArgument = 62;
SqlBaseParser.RULE_descriptorField = 63;
SqlBaseParser.RULE_copartitionTables = 64;
SqlBaseParser.RULE_typeParameter = 65;
SqlBaseParser.RULE_baseType = 66;
SqlBaseParser.RULE_whenClause = 67;
SqlBaseParser.RULE_filter = 68;
SqlBaseParser.RULE_mergeCase = 69;
SqlBaseParser.RULE_over = 70;
SqlBaseParser.RULE_windowFrame = 71;
SqlBaseParser.RULE_frameBound = 72;
SqlBaseParser.RULE_updateAssignment = 73;
SqlBaseParser.RULE_explainOption = 74;
SqlBaseParser.RULE_transactionMode = 75;
SqlBaseParser.RULE_levelOfIsolation = 76;
SqlBaseParser.RULE_callArgument = 77;
SqlBaseParser.RULE_privilege = 78;
SqlBaseParser.RULE_qualifiedName = 79;
SqlBaseParser.RULE_tableVersionExpression = 80;
SqlBaseParser.RULE_tableVersionState = 81;
SqlBaseParser.RULE_grantor = 82;
SqlBaseParser.RULE_principal = 83;
SqlBaseParser.RULE_roles = 84;
SqlBaseParser.RULE_identifier = 85;
SqlBaseParser.RULE_number = 86;
SqlBaseParser.RULE_constraintSpecification = 87;
SqlBaseParser.RULE_namedConstraintSpecification = 88;
SqlBaseParser.RULE_unnamedConstraintSpecification = 89;
SqlBaseParser.RULE_constraintType = 90;
SqlBaseParser.RULE_constraintQualifiers = 91;
SqlBaseParser.RULE_constraintQualifier = 92;
SqlBaseParser.RULE_constraintRely = 93;
SqlBaseParser.RULE_constraintEnabled = 94;
SqlBaseParser.RULE_constraintEnforced = 95;
SqlBaseParser.RULE_nonReserved = 96;

class SingleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSingleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSingleStatement(this);
		}
	}


}



class StandaloneExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_standaloneExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStandaloneExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStandaloneExpression(this);
		}
	}


}



class StandaloneRoutineBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_standaloneRoutineBody;
    }

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStandaloneRoutineBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStandaloneRoutineBody(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplainContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXPLAIN() {
	    return this.getToken(SqlBaseParser.EXPLAIN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	VERBOSE() {
	    return this.getToken(SqlBaseParser.VERBOSE, 0);
	};

	explainOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExplainOptionContext);
	    } else {
	        return this.getTypedRuleContext(ExplainOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExplain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExplain(this);
		}
	}


}

SqlBaseParser.ExplainContext = ExplainContext;

class PrepareContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PREPARE() {
	    return this.getToken(SqlBaseParser.PREPARE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPrepare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPrepare(this);
		}
	}


}

SqlBaseParser.PrepareContext = PrepareContext;

class DropMaterializedViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropMaterializedView(this);
		}
	}


}

SqlBaseParser.DropMaterializedViewContext = DropMaterializedViewContext;

class UseContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.schema = null;;
        this.catalog = null;;
        super.copyFrom(ctx);
    }

	USE() {
	    return this.getToken(SqlBaseParser.USE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUse(this);
		}
	}


}

SqlBaseParser.UseContext = UseContext;

class AddConstraintContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	constraintSpecification() {
	    return this.getTypedRuleContext(ConstraintSpecificationContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAddConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAddConstraint(this);
		}
	}


}

SqlBaseParser.AddConstraintContext = AddConstraintContext;

class DeallocateContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DEALLOCATE() {
	    return this.getToken(SqlBaseParser.DEALLOCATE, 0);
	};

	PREPARE() {
	    return this.getToken(SqlBaseParser.PREPARE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDeallocate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDeallocate(this);
		}
	}


}

SqlBaseParser.DeallocateContext = DeallocateContext;

class RenameTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.from = null;;
        this.to = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRenameTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRenameTable(this);
		}
	}


}

SqlBaseParser.RenameTableContext = RenameTableContext;

class CommitContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMIT() {
	    return this.getToken(SqlBaseParser.COMMIT, 0);
	};

	WORK() {
	    return this.getToken(SqlBaseParser.WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCommit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCommit(this);
		}
	}


}

SqlBaseParser.CommitContext = CommitContext;

class CreateRoleContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	ADMIN() {
	    return this.getToken(SqlBaseParser.ADMIN, 0);
	};

	grantor() {
	    return this.getTypedRuleContext(GrantorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateRole(this);
		}
	}


}

SqlBaseParser.CreateRoleContext = CreateRoleContext;

class ShowCreateFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	types() {
	    return this.getTypedRuleContext(TypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCreateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCreateFunction(this);
		}
	}


}

SqlBaseParser.ShowCreateFunctionContext = ShowCreateFunctionContext;

class DropColumnContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        this.column = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.IF);
	    } else {
	        return this.getToken(SqlBaseParser.IF, i);
	    }
	};


	EXISTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.EXISTS);
	    } else {
	        return this.getToken(SqlBaseParser.EXISTS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropColumn(this);
		}
	}


}

SqlBaseParser.DropColumnContext = DropColumnContext;

class DropViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropView(this);
		}
	}


}

SqlBaseParser.DropViewContext = DropViewContext;

class ShowTablesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        this.escape = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowTables(this);
		}
	}


}

SqlBaseParser.ShowTablesContext = ShowTablesContext;

class ShowCatalogsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        this.escape = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CATALOGS() {
	    return this.getToken(SqlBaseParser.CATALOGS, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCatalogs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCatalogs(this);
		}
	}


}

SqlBaseParser.ShowCatalogsContext = ShowCatalogsContext;

class ShowRolesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	ROLES() {
	    return this.getToken(SqlBaseParser.ROLES, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowRoles(this);
		}
	}


}

SqlBaseParser.ShowRolesContext = ShowRolesContext;

class RenameColumnContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        this.from = null;;
        this.to = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.IF);
	    } else {
	        return this.getToken(SqlBaseParser.IF, i);
	    }
	};


	EXISTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.EXISTS);
	    } else {
	        return this.getToken(SqlBaseParser.EXISTS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRenameColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRenameColumn(this);
		}
	}


}

SqlBaseParser.RenameColumnContext = RenameColumnContext;

class RevokeRolesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	roles() {
	    return this.getTypedRuleContext(RolesContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	principal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrincipalContext);
	    } else {
	        return this.getTypedRuleContext(PrincipalContext,i);
	    }
	};

	ADMIN() {
	    return this.getToken(SqlBaseParser.ADMIN, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	GRANTED() {
	    return this.getToken(SqlBaseParser.GRANTED, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	grantor() {
	    return this.getTypedRuleContext(GrantorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRevokeRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRevokeRoles(this);
		}
	}


}

SqlBaseParser.RevokeRolesContext = RevokeRolesContext;

class ShowCreateTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCreateTable(this);
		}
	}


}

SqlBaseParser.ShowCreateTableContext = ShowCreateTableContext;

class ShowColumnsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowColumns(this);
		}
	}


}

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

class ShowRoleGrantsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	GRANTS() {
	    return this.getToken(SqlBaseParser.GRANTS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowRoleGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowRoleGrants(this);
		}
	}


}

SqlBaseParser.ShowRoleGrantsContext = ShowRoleGrantsContext;

class AddColumnContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        this.column = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.IF);
	    } else {
	        return this.getToken(SqlBaseParser.IF, i);
	    }
	};


	EXISTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.EXISTS);
	    } else {
	        return this.getToken(SqlBaseParser.EXISTS, i);
	    }
	};


	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAddColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAddColumn(this);
		}
	}


}

SqlBaseParser.AddColumnContext = AddColumnContext;

class ResetSessionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterResetSession(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitResetSession(this);
		}
	}


}

SqlBaseParser.ResetSessionContext = ResetSessionContext;

class DropConstraintContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        this.name = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	CONSTRAINT() {
	    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.IF);
	    } else {
	        return this.getToken(SqlBaseParser.IF, i);
	    }
	};


	EXISTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.EXISTS);
	    } else {
	        return this.getToken(SqlBaseParser.EXISTS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropConstraint(this);
		}
	}


}

SqlBaseParser.DropConstraintContext = DropConstraintContext;

class InsertIntoContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInsertInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInsertInto(this);
		}
	}


}

SqlBaseParser.InsertIntoContext = InsertIntoContext;

class ShowSessionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        this.escape = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowSession(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowSession(this);
		}
	}


}

SqlBaseParser.ShowSessionContext = ShowSessionContext;

class CreateSchemaContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateSchema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateSchema(this);
		}
	}


}

SqlBaseParser.CreateSchemaContext = CreateSchemaContext;

class ExecuteContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXECUTE() {
	    return this.getToken(SqlBaseParser.EXECUTE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExecute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExecute(this);
		}
	}


}

SqlBaseParser.ExecuteContext = ExecuteContext;

class RenameSchemaContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRenameSchema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRenameSchema(this);
		}
	}


}

SqlBaseParser.RenameSchemaContext = RenameSchemaContext;

class DropRoleContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropRole(this);
		}
	}


}

SqlBaseParser.DropRoleContext = DropRoleContext;

class AnalyzeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAnalyze(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAnalyze(this);
		}
	}


}

SqlBaseParser.AnalyzeContext = AnalyzeContext;

class SetRoleContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.role = null;;
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	NONE() {
	    return this.getToken(SqlBaseParser.NONE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSetRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSetRole(this);
		}
	}


}

SqlBaseParser.SetRoleContext = SetRoleContext;

class CreateFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.functionName = null;;
        this.returnType = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	RETURNS() {
	    return this.getToken(SqlBaseParser.RETURNS, 0);
	};

	routineCharacteristics() {
	    return this.getTypedRuleContext(RoutineCharacteristicsContext,0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	sqlParameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(SqlParameterDeclarationContext,i);
	    }
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateFunction(this);
		}
	}


}

SqlBaseParser.CreateFunctionContext = CreateFunctionContext;

class ShowGrantsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	GRANTS() {
	    return this.getToken(SqlBaseParser.GRANTS, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowGrants(this);
		}
	}


}

SqlBaseParser.ShowGrantsContext = ShowGrantsContext;

class DropSchemaContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropSchema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropSchema(this);
		}
	}


}

SqlBaseParser.DropSchemaContext = DropSchemaContext;

class ShowCreateViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCreateView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCreateView(this);
		}
	}


}

SqlBaseParser.ShowCreateViewContext = ShowCreateViewContext;

class CreateTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	tableElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableElementContext);
	    } else {
	        return this.getTypedRuleContext(TableElementContext,i);
	    }
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateTable(this);
		}
	}


}

SqlBaseParser.CreateTableContext = CreateTableContext;

class StartTransactionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStartTransaction(this);
		}
	}


}

SqlBaseParser.StartTransactionContext = StartTransactionContext;

class CreateTableAsSelectContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.WITH);
	    } else {
	        return this.getToken(SqlBaseParser.WITH, i);
	    }
	};


	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	DATA() {
	    return this.getToken(SqlBaseParser.DATA, 0);
	};

	NO() {
	    return this.getToken(SqlBaseParser.NO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateTableAsSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateTableAsSelect(this);
		}
	}


}

SqlBaseParser.CreateTableAsSelectContext = CreateTableAsSelectContext;

class ShowStatsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	STATS() {
	    return this.getToken(SqlBaseParser.STATS, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowStats(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowStats(this);
		}
	}


}

SqlBaseParser.ShowStatsContext = ShowStatsContext;

class ShowCreateSchemaContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCreateSchema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCreateSchema(this);
		}
	}


}

SqlBaseParser.ShowCreateSchemaContext = ShowCreateSchemaContext;

class DropFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	types() {
	    return this.getTypedRuleContext(TypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropFunction(this);
		}
	}


}

SqlBaseParser.DropFunctionContext = DropFunctionContext;

class RevokeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.grantee = null;;
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	principal() {
	    return this.getTypedRuleContext(PrincipalContext,0);
	};

	privilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivilegeContext);
	    } else {
	        return this.getTypedRuleContext(PrivilegeContext,i);
	    }
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	GRANT() {
	    return this.getToken(SqlBaseParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRevoke(this);
		}
	}


}

SqlBaseParser.RevokeContext = RevokeContext;

class UpdateContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.where = null;;
        super.copyFrom(ctx);
    }

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	updateAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdateAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(UpdateAssignmentContext,i);
	    }
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUpdate(this);
		}
	}


}

SqlBaseParser.UpdateContext = UpdateContext;

class CreateTypeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	sqlParameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(SqlParameterDeclarationContext,i);
	    }
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateType(this);
		}
	}


}

SqlBaseParser.CreateTypeContext = CreateTypeContext;

class DeleteContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDelete(this);
		}
	}


}

SqlBaseParser.DeleteContext = DeleteContext;

class MergeIntoContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MERGE() {
	    return this.getToken(SqlBaseParser.MERGE, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	relation() {
	    return this.getTypedRuleContext(RelationContext,0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	mergeCase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MergeCaseContext);
	    } else {
	        return this.getTypedRuleContext(MergeCaseContext,i);
	    }
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterMergeInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitMergeInto(this);
		}
	}


}

SqlBaseParser.MergeIntoContext = MergeIntoContext;

class DescribeInputContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	INPUT() {
	    return this.getToken(SqlBaseParser.INPUT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDescribeInput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDescribeInput(this);
		}
	}


}

SqlBaseParser.DescribeInputContext = DescribeInputContext;

class ShowStatsForQueryContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	STATS() {
	    return this.getToken(SqlBaseParser.STATS, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowStatsForQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowStatsForQuery(this);
		}
	}


}

SqlBaseParser.ShowStatsForQueryContext = ShowStatsForQueryContext;

class StatementDefaultContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStatementDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStatementDefault(this);
		}
	}


}

SqlBaseParser.StatementDefaultContext = StatementDefaultContext;

class TruncateTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRUNCATE() {
	    return this.getToken(SqlBaseParser.TRUNCATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTruncateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTruncateTable(this);
		}
	}


}

SqlBaseParser.TruncateTableContext = TruncateTableContext;

class AlterColumnSetNotNullContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        this.column = null;;
        super.copyFrom(ctx);
    }

	ALTER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.ALTER);
	    } else {
	        return this.getToken(SqlBaseParser.ALTER, i);
	    }
	};


	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAlterColumnSetNotNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAlterColumnSetNotNull(this);
		}
	}


}

SqlBaseParser.AlterColumnSetNotNullContext = AlterColumnSetNotNullContext;

class CreateMaterializedViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateMaterializedView(this);
		}
	}


}

SqlBaseParser.CreateMaterializedViewContext = CreateMaterializedViewContext;

class AlterFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	alterRoutineCharacteristics() {
	    return this.getTypedRuleContext(AlterRoutineCharacteristicsContext,0);
	};

	types() {
	    return this.getTypedRuleContext(TypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAlterFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAlterFunction(this);
		}
	}


}

SqlBaseParser.AlterFunctionContext = AlterFunctionContext;

class SetSessionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSetSession(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSetSession(this);
		}
	}


}

SqlBaseParser.SetSessionContext = SetSessionContext;

class CreateViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	SECURITY() {
	    return this.getToken(SqlBaseParser.SECURITY, 0);
	};

	DEFINER() {
	    return this.getToken(SqlBaseParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(SqlBaseParser.INVOKER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateView(this);
		}
	}


}

SqlBaseParser.CreateViewContext = CreateViewContext;

class ShowSchemasContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        this.escape = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SCHEMAS() {
	    return this.getToken(SqlBaseParser.SCHEMAS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowSchemas(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowSchemas(this);
		}
	}


}

SqlBaseParser.ShowSchemasContext = ShowSchemasContext;

class DropTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropTable(this);
		}
	}


}

SqlBaseParser.DropTableContext = DropTableContext;

class RollbackContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROLLBACK() {
	    return this.getToken(SqlBaseParser.ROLLBACK, 0);
	};

	WORK() {
	    return this.getToken(SqlBaseParser.WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRollback(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRollback(this);
		}
	}


}

SqlBaseParser.RollbackContext = RollbackContext;

class RenameViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.from = null;;
        this.to = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRenameView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRenameView(this);
		}
	}


}

SqlBaseParser.RenameViewContext = RenameViewContext;

class AlterColumnDropNotNullContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        this.column = null;;
        super.copyFrom(ctx);
    }

	ALTER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.ALTER);
	    } else {
	        return this.getToken(SqlBaseParser.ALTER, i);
	    }
	};


	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAlterColumnDropNotNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAlterColumnDropNotNull(this);
		}
	}


}

SqlBaseParser.AlterColumnDropNotNullContext = AlterColumnDropNotNullContext;

class GrantRolesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRANT() {
	    return this.getToken(SqlBaseParser.GRANT, 0);
	};

	roles() {
	    return this.getTypedRuleContext(RolesContext,0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	principal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrincipalContext);
	    } else {
	        return this.getTypedRuleContext(PrincipalContext,i);
	    }
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	ADMIN() {
	    return this.getToken(SqlBaseParser.ADMIN, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	GRANTED() {
	    return this.getToken(SqlBaseParser.GRANTED, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	grantor() {
	    return this.getTypedRuleContext(GrantorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGrantRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGrantRoles(this);
		}
	}


}

SqlBaseParser.GrantRolesContext = GrantRolesContext;

class CallContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CALL() {
	    return this.getToken(SqlBaseParser.CALL, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	callArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallArgumentContext);
	    } else {
	        return this.getTypedRuleContext(CallArgumentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCall(this);
		}
	}


}

SqlBaseParser.CallContext = CallContext;

class RefreshMaterializedViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.where = null;;
        super.copyFrom(ctx);
    }

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRefreshMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRefreshMaterializedView(this);
		}
	}


}

SqlBaseParser.RefreshMaterializedViewContext = RefreshMaterializedViewContext;

class ShowCreateMaterializedViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCreateMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCreateMaterializedView(this);
		}
	}


}

SqlBaseParser.ShowCreateMaterializedViewContext = ShowCreateMaterializedViewContext;

class ShowFunctionsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        this.escape = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowFunctions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowFunctions(this);
		}
	}


}

SqlBaseParser.ShowFunctionsContext = ShowFunctionsContext;

class DescribeOutputContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	OUTPUT() {
	    return this.getToken(SqlBaseParser.OUTPUT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDescribeOutput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDescribeOutput(this);
		}
	}


}

SqlBaseParser.DescribeOutputContext = DescribeOutputContext;

class GrantContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.grantee = null;;
        super.copyFrom(ctx);
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.GRANT);
	    } else {
	        return this.getToken(SqlBaseParser.GRANT, i);
	    }
	};


	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	principal() {
	    return this.getTypedRuleContext(PrincipalContext,0);
	};

	privilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivilegeContext);
	    } else {
	        return this.getTypedRuleContext(PrivilegeContext,i);
	    }
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGrant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGrant(this);
		}
	}


}

SqlBaseParser.GrantContext = GrantContext;

class SetTablePropertiesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	PROPERTIES() {
	    return this.getToken(SqlBaseParser.PROPERTIES, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSetTableProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSetTableProperties(this);
		}
	}


}

SqlBaseParser.SetTablePropertiesContext = SetTablePropertiesContext;

class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_query;
    }

	queryNoWith() {
	    return this.getTypedRuleContext(QueryNoWithContext,0);
	};

	with_() {
	    return this.getTypedRuleContext(WithContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQuery(this);
		}
	}


}



class WithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_with;
    }

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	namedQuery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedQueryContext);
	    } else {
	        return this.getTypedRuleContext(NamedQueryContext,i);
	    }
	};

	RECURSIVE() {
	    return this.getToken(SqlBaseParser.RECURSIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitWith(this);
		}
	}


}



class TableElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableElement;
    }

	constraintSpecification() {
	    return this.getTypedRuleContext(ConstraintSpecificationContext,0);
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	likeClause() {
	    return this.getTypedRuleContext(LikeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableElement(this);
		}
	}


}



class ColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columnDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitColumnDefinition(this);
		}
	}


}



class LikeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_likeClause;
        this.optionType = null;
    }

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	PROPERTIES() {
	    return this.getToken(SqlBaseParser.PROPERTIES, 0);
	};

	INCLUDING() {
	    return this.getToken(SqlBaseParser.INCLUDING, 0);
	};

	EXCLUDING() {
	    return this.getToken(SqlBaseParser.EXCLUDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLikeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLikeClause(this);
		}
	}


}



class PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_properties;
    }

	property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyContext);
	    } else {
	        return this.getTypedRuleContext(PropertyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitProperties(this);
		}
	}


}



class PropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_property;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitProperty(this);
		}
	}


}



class SqlParameterDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sqlParameterDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSqlParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSqlParameterDeclaration(this);
		}
	}


}



class RoutineCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_routineCharacteristics;
    }

	routineCharacteristic = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineCharacteristicContext);
	    } else {
	        return this.getTypedRuleContext(RoutineCharacteristicContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRoutineCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRoutineCharacteristics(this);
		}
	}


}



class RoutineCharacteristicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_routineCharacteristic;
    }

	LANGUAGE() {
	    return this.getToken(SqlBaseParser.LANGUAGE, 0);
	};

	language() {
	    return this.getTypedRuleContext(LanguageContext,0);
	};

	determinism() {
	    return this.getTypedRuleContext(DeterminismContext,0);
	};

	nullCallClause() {
	    return this.getTypedRuleContext(NullCallClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRoutineCharacteristic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRoutineCharacteristic(this);
		}
	}


}



class AlterRoutineCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_alterRoutineCharacteristics;
    }

	alterRoutineCharacteristic = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterRoutineCharacteristicContext);
	    } else {
	        return this.getTypedRuleContext(AlterRoutineCharacteristicContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAlterRoutineCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAlterRoutineCharacteristics(this);
		}
	}


}



class AlterRoutineCharacteristicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_alterRoutineCharacteristic;
    }

	nullCallClause() {
	    return this.getTypedRuleContext(NullCallClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAlterRoutineCharacteristic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAlterRoutineCharacteristic(this);
		}
	}


}



class RoutineBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_routineBody;
    }

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	externalBodyReference() {
	    return this.getTypedRuleContext(ExternalBodyReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRoutineBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRoutineBody(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(SqlBaseParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ExternalBodyReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_externalBodyReference;
    }

	EXTERNAL() {
	    return this.getToken(SqlBaseParser.EXTERNAL, 0);
	};

	NAME() {
	    return this.getToken(SqlBaseParser.NAME, 0);
	};

	externalRoutineName() {
	    return this.getTypedRuleContext(ExternalRoutineNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExternalBodyReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExternalBodyReference(this);
		}
	}


}



class LanguageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_language;
    }

	SQL() {
	    return this.getToken(SqlBaseParser.SQL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLanguage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLanguage(this);
		}
	}


}



class DeterminismContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_determinism;
    }

	DETERMINISTIC() {
	    return this.getToken(SqlBaseParser.DETERMINISTIC, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDeterminism(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDeterminism(this);
		}
	}


}



class NullCallClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nullCallClause;
    }

	RETURNS() {
	    return this.getToken(SqlBaseParser.RETURNS, 0);
	};

	NULL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.NULL);
	    } else {
	        return this.getToken(SqlBaseParser.NULL, i);
	    }
	};


	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	INPUT() {
	    return this.getToken(SqlBaseParser.INPUT, 0);
	};

	CALLED() {
	    return this.getToken(SqlBaseParser.CALLED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNullCallClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNullCallClause(this);
		}
	}


}



class ExternalRoutineNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_externalRoutineName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExternalRoutineName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExternalRoutineName(this);
		}
	}


}



class QueryNoWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryNoWith;
        this.offset = null;
        this.limit = null;
        this.fetchFirstNRows = null;
    }

	queryTerm() {
	    return this.getTypedRuleContext(QueryTermContext,0);
	};

	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	OFFSET() {
	    return this.getToken(SqlBaseParser.OFFSET, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
	    }
	};


	LIMIT() {
	    return this.getToken(SqlBaseParser.LIMIT, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	ROWS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.ROWS);
	    } else {
	        return this.getToken(SqlBaseParser.ROWS, i);
	    }
	};


	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	FETCH() {
	    return this.getToken(SqlBaseParser.FETCH, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQueryNoWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQueryNoWith(this);
		}
	}


}



class QueryTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryTerm;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class QueryTermDefaultContext extends QueryTermContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	queryPrimary() {
	    return this.getTypedRuleContext(QueryPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQueryTermDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQueryTermDefault(this);
		}
	}


}

SqlBaseParser.QueryTermDefaultContext = QueryTermDefaultContext;

class SetOperationContext extends QueryTermContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.operator = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	queryTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryTermContext);
	    } else {
	        return this.getTypedRuleContext(QueryTermContext,i);
	    }
	};

	INTERSECT() {
	    return this.getToken(SqlBaseParser.INTERSECT, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	UNION() {
	    return this.getToken(SqlBaseParser.UNION, 0);
	};

	EXCEPT() {
	    return this.getToken(SqlBaseParser.EXCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSetOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSetOperation(this);
		}
	}


}

SqlBaseParser.SetOperationContext = SetOperationContext;

class QueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	queryNoWith() {
	    return this.getTypedRuleContext(QueryNoWithContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubquery(this);
		}
	}


}

SqlBaseParser.SubqueryContext = SubqueryContext;

class QueryPrimaryDefaultContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQueryPrimaryDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQueryPrimaryDefault(this);
		}
	}


}

SqlBaseParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;

class TableContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTable(this);
		}
	}


}

SqlBaseParser.TableContext = TableContext;

class InlineTableContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUES() {
	    return this.getToken(SqlBaseParser.VALUES, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInlineTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInlineTable(this);
		}
	}


}

SqlBaseParser.InlineTableContext = InlineTableContext;

class SortItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sortItem;
        this.ordering = null;
        this.nullOrdering = null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	ASC() {
	    return this.getToken(SqlBaseParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSortItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSortItem(this);
		}
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_querySpecification;
        this.where = null;
        this.having = null;
    }

	SELECT() {
	    return this.getToken(SqlBaseParser.SELECT, 0);
	};

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationContext);
	    } else {
	        return this.getTypedRuleContext(RelationContext,i);
	    }
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	GROUP() {
	    return this.getToken(SqlBaseParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	groupBy() {
	    return this.getTypedRuleContext(GroupByContext,0);
	};

	HAVING() {
	    return this.getToken(SqlBaseParser.HAVING, 0);
	};

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQuerySpecification(this);
		}
	}


}



class GroupByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_groupBy;
    }

	groupingElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingElementContext);
	    } else {
	        return this.getTypedRuleContext(GroupingElementContext,i);
	    }
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGroupBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGroupBy(this);
		}
	}


}



class GroupingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_groupingElement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MultipleGroupingSetsContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GROUPING() {
	    return this.getToken(SqlBaseParser.GROUPING, 0);
	};

	SETS() {
	    return this.getToken(SqlBaseParser.SETS, 0);
	};

	groupingSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingSetContext);
	    } else {
	        return this.getTypedRuleContext(GroupingSetContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterMultipleGroupingSets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitMultipleGroupingSets(this);
		}
	}


}

SqlBaseParser.MultipleGroupingSetsContext = MultipleGroupingSetsContext;

class SingleGroupingSetContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	groupingSet() {
	    return this.getTypedRuleContext(GroupingSetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSingleGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSingleGroupingSet(this);
		}
	}


}

SqlBaseParser.SingleGroupingSetContext = SingleGroupingSetContext;

class CubeContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CUBE() {
	    return this.getToken(SqlBaseParser.CUBE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCube(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCube(this);
		}
	}


}

SqlBaseParser.CubeContext = CubeContext;

class RollupContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROLLUP() {
	    return this.getToken(SqlBaseParser.ROLLUP, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRollup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRollup(this);
		}
	}


}

SqlBaseParser.RollupContext = RollupContext;

class GroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_groupingSet;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGroupingSet(this);
		}
	}


}



class NamedQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedQuery;
        this.name = null;
    }

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNamedQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNamedQuery(this);
		}
	}


}



class SetQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_setQuantifier;
    }

	DISTINCT() {
	    return this.getToken(SqlBaseParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSetQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSetQuantifier(this);
		}
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_selectItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectAllContext extends SelectItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSelectAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSelectAll(this);
		}
	}


}

SqlBaseParser.SelectAllContext = SelectAllContext;

class SelectSingleContext extends SelectItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSelectSingle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSelectSingle(this);
		}
	}


}

SqlBaseParser.SelectSingleContext = SelectSingleContext;

class RelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_relation;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RelationDefaultContext extends RelationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sampledRelation() {
	    return this.getTypedRuleContext(SampledRelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRelationDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRelationDefault(this);
		}
	}


}

SqlBaseParser.RelationDefaultContext = RelationDefaultContext;

class JoinRelationContext extends RelationContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        this.rightRelation = null;;
        super.copyFrom(ctx);
    }

	relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationContext);
	    } else {
	        return this.getTypedRuleContext(RelationContext,i);
	    }
	};

	CROSS() {
	    return this.getToken(SqlBaseParser.CROSS, 0);
	};

	JOIN() {
	    return this.getToken(SqlBaseParser.JOIN, 0);
	};

	joinType() {
	    return this.getTypedRuleContext(JoinTypeContext,0);
	};

	joinCriteria() {
	    return this.getTypedRuleContext(JoinCriteriaContext,0);
	};

	NATURAL() {
	    return this.getToken(SqlBaseParser.NATURAL, 0);
	};

	sampledRelation() {
	    return this.getTypedRuleContext(SampledRelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterJoinRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitJoinRelation(this);
		}
	}


}

SqlBaseParser.JoinRelationContext = JoinRelationContext;

class JoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_joinType;
    }

	INNER() {
	    return this.getToken(SqlBaseParser.INNER, 0);
	};

	LEFT() {
	    return this.getToken(SqlBaseParser.LEFT, 0);
	};

	OUTER() {
	    return this.getToken(SqlBaseParser.OUTER, 0);
	};

	RIGHT() {
	    return this.getToken(SqlBaseParser.RIGHT, 0);
	};

	FULL() {
	    return this.getToken(SqlBaseParser.FULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterJoinType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitJoinType(this);
		}
	}


}



class JoinCriteriaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    }

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterJoinCriteria(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitJoinCriteria(this);
		}
	}


}



class SampledRelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sampledRelation;
        this.percentage = null;
    }

	aliasedRelation() {
	    return this.getTypedRuleContext(AliasedRelationContext,0);
	};

	TABLESAMPLE() {
	    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
	};

	sampleType() {
	    return this.getTypedRuleContext(SampleTypeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSampledRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSampledRelation(this);
		}
	}


}



class SampleTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sampleType;
    }

	BERNOULLI() {
	    return this.getToken(SqlBaseParser.BERNOULLI, 0);
	};

	SYSTEM() {
	    return this.getToken(SqlBaseParser.SYSTEM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSampleType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSampleType(this);
		}
	}


}



class AliasedRelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_aliasedRelation;
    }

	relationPrimary() {
	    return this.getTypedRuleContext(RelationPrimaryContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAliasedRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAliasedRelation(this);
		}
	}


}



class ColumnAliasesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columnAliases;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterColumnAliases(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitColumnAliases(this);
		}
	}


}



class RelationPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryRelationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubqueryRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubqueryRelation(this);
		}
	}


}

SqlBaseParser.SubqueryRelationContext = SubqueryRelationContext;

class ParenthesizedRelationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	relation() {
	    return this.getTypedRuleContext(RelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterParenthesizedRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitParenthesizedRelation(this);
		}
	}


}

SqlBaseParser.ParenthesizedRelationContext = ParenthesizedRelationContext;

class UnnestContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNNEST() {
	    return this.getToken(SqlBaseParser.UNNEST, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	ORDINALITY() {
	    return this.getToken(SqlBaseParser.ORDINALITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnnest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnnest(this);
		}
	}


}

SqlBaseParser.UnnestContext = UnnestContext;

class TableFunctionInvocationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	tableFunctionCall() {
	    return this.getTypedRuleContext(TableFunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableFunctionInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableFunctionInvocation(this);
		}
	}


}

SqlBaseParser.TableFunctionInvocationContext = TableFunctionInvocationContext;

class LateralContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LATERAL() {
	    return this.getToken(SqlBaseParser.LATERAL, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLateral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLateral(this);
		}
	}


}

SqlBaseParser.LateralContext = LateralContext;

class TableNameContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	tableVersionExpression() {
	    return this.getTypedRuleContext(TableVersionExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableName(this);
		}
	}


}

SqlBaseParser.TableNameContext = TableNameContext;

class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_expression;
    }

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExpression(this);
		}
	}


}



class BooleanExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LogicalNotContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLogicalNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLogicalNot(this);
		}
	}


}

SqlBaseParser.LogicalNotContext = LogicalNotContext;

class PredicatedContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this._valueExpression = null;;
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPredicated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPredicated(this);
		}
	}


}

SqlBaseParser.PredicatedContext = PredicatedContext;

class LogicalBinaryContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.operator = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLogicalBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLogicalBinary(this);
		}
	}


}

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, value) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_predicate;
        this.value = null
        this.value = value || null;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}

}


class ComparisonContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.right = null;;
        super.copyFrom(ctx);
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitComparison(this);
		}
	}


}

SqlBaseParser.ComparisonContext = ComparisonContext;

class LikeContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        this.escape = null;;
        super.copyFrom(ctx);
    }

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLike(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLike(this);
		}
	}


}

SqlBaseParser.LikeContext = LikeContext;

class InSubqueryContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInSubquery(this);
		}
	}


}

SqlBaseParser.InSubqueryContext = InSubqueryContext;

class DistinctFromContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.right = null;;
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	DISTINCT() {
	    return this.getToken(SqlBaseParser.DISTINCT, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDistinctFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDistinctFrom(this);
		}
	}


}

SqlBaseParser.DistinctFromContext = DistinctFromContext;

class InListContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInList(this);
		}
	}


}

SqlBaseParser.InListContext = InListContext;

class NullPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNullPredicate(this);
		}
	}


}

SqlBaseParser.NullPredicateContext = NullPredicateContext;

class BetweenContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.lower = null;;
        this.upper = null;;
        super.copyFrom(ctx);
    }

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBetween(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBetween(this);
		}
	}


}

SqlBaseParser.BetweenContext = BetweenContext;

class QuantifiedComparisonContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	comparisonQuantifier() {
	    return this.getTypedRuleContext(ComparisonQuantifierContext,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQuantifiedComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQuantifiedComparison(this);
		}
	}


}

SqlBaseParser.QuantifiedComparisonContext = QuantifiedComparisonContext;

class ValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ValueExpressionDefaultContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterValueExpressionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitValueExpressionDefault(this);
		}
	}


}

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

class ConcatenationContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	CONCAT() {
	    return this.getToken(SqlBaseParser.CONCAT, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitConcatenation(this);
		}
	}


}

SqlBaseParser.ConcatenationContext = ConcatenationContext;

class ArithmeticBinaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.operator = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	SLASH() {
	    return this.getToken(SqlBaseParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(SqlBaseParser.PERCENT, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterArithmeticBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitArithmeticBinary(this);
		}
	}


}

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

class ArithmeticUnaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterArithmeticUnary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitArithmeticUnary(this);
		}
	}


}

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

class AtTimeZoneContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	AT() {
	    return this.getToken(SqlBaseParser.AT, 0);
	};

	timeZoneSpecifier() {
	    return this.getTypedRuleContext(TimeZoneSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAtTimeZone(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAtTimeZone(this);
		}
	}


}

SqlBaseParser.AtTimeZoneContext = AtTimeZoneContext;

class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DereferenceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.base = null;;
        this.fieldName = null;;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDereference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDereference(this);
		}
	}


}

SqlBaseParser.DereferenceContext = DereferenceContext;

class TypeConstructorContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	DOUBLE_PRECISION() {
	    return this.getToken(SqlBaseParser.DOUBLE_PRECISION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTypeConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTypeConstructor(this);
		}
	}


}

SqlBaseParser.TypeConstructorContext = TypeConstructorContext;

class SpecialDateTimeFunctionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.precision = null;;
        super.copyFrom(ctx);
    }

	CURRENT_DATE() {
	    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(SqlBaseParser.CURRENT_TIME, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
	};

	LOCALTIME() {
	    return this.getToken(SqlBaseParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(SqlBaseParser.LOCALTIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSpecialDateTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSpecialDateTimeFunction(this);
		}
	}


}

SqlBaseParser.SpecialDateTimeFunctionContext = SpecialDateTimeFunctionContext;

class SubstringContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SUBSTRING() {
	    return this.getToken(SqlBaseParser.SUBSTRING, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubstring(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubstring(this);
		}
	}


}

SqlBaseParser.SubstringContext = SubstringContext;

class CastContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CAST() {
	    return this.getToken(SqlBaseParser.CAST, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	TRY_CAST() {
	    return this.getToken(SqlBaseParser.TRY_CAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCast(this);
		}
	}


}

SqlBaseParser.CastContext = CastContext;

class LambdaContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLambda(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLambda(this);
		}
	}


}

SqlBaseParser.LambdaContext = LambdaContext;

class ParenthesizedExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}


}

SqlBaseParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class ParameterContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }


	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitParameter(this);
		}
	}


}

SqlBaseParser.ParameterContext = ParameterContext;

class NormalizeContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NORMALIZE() {
	    return this.getToken(SqlBaseParser.NORMALIZE, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNormalize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNormalize(this);
		}
	}


}

SqlBaseParser.NormalizeContext = NormalizeContext;

class IntervalLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitIntervalLiteral(this);
		}
	}


}

SqlBaseParser.IntervalLiteralContext = IntervalLiteralContext;

class NumericLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}

SqlBaseParser.NumericLiteralContext = NumericLiteralContext;

class BooleanLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}

SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext;

class SimpleCaseContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseExpression = null;;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(SqlBaseParser.CASE, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(SqlBaseParser.ELSE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSimpleCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSimpleCase(this);
		}
	}


}

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

class ColumnReferenceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterColumnReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitColumnReference(this);
		}
	}


}

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

class NullLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}

SqlBaseParser.NullLiteralContext = NullLiteralContext;

class RowConstructorContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRowConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRowConstructor(this);
		}
	}


}

SqlBaseParser.RowConstructorContext = RowConstructorContext;

class SubscriptContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null;;
        this.index = null;;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubscript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubscript(this);
		}
	}


}

SqlBaseParser.SubscriptContext = SubscriptContext;

class SubqueryExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubqueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubqueryExpression(this);
		}
	}


}

SqlBaseParser.SubqueryExpressionContext = SubqueryExpressionContext;

class BinaryLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BINARY_LITERAL() {
	    return this.getToken(SqlBaseParser.BINARY_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBinaryLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBinaryLiteral(this);
		}
	}


}

SqlBaseParser.BinaryLiteralContext = BinaryLiteralContext;

class CurrentUserContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	CURRENT_USER() {
	    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCurrentUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCurrentUser(this);
		}
	}


}

SqlBaseParser.CurrentUserContext = CurrentUserContext;

class ExtractContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXTRACT() {
	    return this.getToken(SqlBaseParser.EXTRACT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExtract(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExtract(this);
		}
	}


}

SqlBaseParser.ExtractContext = ExtractContext;

class StringLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}

SqlBaseParser.StringLiteralContext = StringLiteralContext;

class ArrayConstructorContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterArrayConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitArrayConstructor(this);
		}
	}


}

SqlBaseParser.ArrayConstructorContext = ArrayConstructorContext;

class FunctionCallContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	filter() {
	    return this.getTypedRuleContext(FilterContext,0);
	};

	over() {
	    return this.getTypedRuleContext(OverContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	nullTreatment() {
	    return this.getTypedRuleContext(NullTreatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}

SqlBaseParser.FunctionCallContext = FunctionCallContext;

class ExistsContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExists(this);
		}
	}


}

SqlBaseParser.ExistsContext = ExistsContext;

class PositionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	POSITION() {
	    return this.getToken(SqlBaseParser.POSITION, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPosition(this);
		}
	}


}

SqlBaseParser.PositionContext = PositionContext;

class SearchedCaseContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseExpression = null;;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(SqlBaseParser.CASE, 0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(SqlBaseParser.ELSE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSearchedCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSearchedCase(this);
		}
	}


}

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

class GroupingOperationContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GROUPING() {
	    return this.getToken(SqlBaseParser.GROUPING, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGroupingOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGroupingOperation(this);
		}
	}


}

SqlBaseParser.GroupingOperationContext = GroupingOperationContext;

class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_string;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnicodeStringLiteralContext extends StringContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNICODE_STRING() {
	    return this.getToken(SqlBaseParser.UNICODE_STRING, 0);
	};

	UESCAPE() {
	    return this.getToken(SqlBaseParser.UESCAPE, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnicodeStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnicodeStringLiteral(this);
		}
	}


}

SqlBaseParser.UnicodeStringLiteralContext = UnicodeStringLiteralContext;

class BasicStringLiteralContext extends StringContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBasicStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBasicStringLiteral(this);
		}
	}


}

SqlBaseParser.BasicStringLiteralContext = BasicStringLiteralContext;

class NullTreatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nullTreatment;
    }

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	RESPECT() {
	    return this.getToken(SqlBaseParser.RESPECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNullTreatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNullTreatment(this);
		}
	}


}



class TimeZoneSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_timeZoneSpecifier;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TimeZoneIntervalContext extends TimeZoneSpecifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTimeZoneInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTimeZoneInterval(this);
		}
	}


}

SqlBaseParser.TimeZoneIntervalContext = TimeZoneIntervalContext;

class TimeZoneStringContext extends TimeZoneSpecifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTimeZoneString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTimeZoneString(this);
		}
	}


}

SqlBaseParser.TimeZoneStringContext = TimeZoneStringContext;

class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_comparisonOperator;
    }

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(SqlBaseParser.NEQ, 0);
	};

	LT() {
	    return this.getToken(SqlBaseParser.LT, 0);
	};

	LTE() {
	    return this.getToken(SqlBaseParser.LTE, 0);
	};

	GT() {
	    return this.getToken(SqlBaseParser.GT, 0);
	};

	GTE() {
	    return this.getToken(SqlBaseParser.GTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitComparisonOperator(this);
		}
	}


}



class ComparisonQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_comparisonQuantifier;
    }

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	SOME() {
	    return this.getToken(SqlBaseParser.SOME, 0);
	};

	ANY() {
	    return this.getToken(SqlBaseParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterComparisonQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitComparisonQuantifier(this);
		}
	}


}



class BooleanValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_booleanValue;
    }

	TRUE() {
	    return this.getToken(SqlBaseParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(SqlBaseParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBooleanValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBooleanValue(this);
		}
	}


}



class IntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_interval;
        this.sign = null;
        this.from = null;
        this.to = null;
    }

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	intervalField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalFieldContext);
	    } else {
	        return this.getTypedRuleContext(IntervalFieldContext,i);
	    }
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInterval(this);
		}
	}


}



class IntervalFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_intervalField;
    }

	YEAR() {
	    return this.getToken(SqlBaseParser.YEAR, 0);
	};

	MONTH() {
	    return this.getToken(SqlBaseParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(SqlBaseParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(SqlBaseParser.HOUR, 0);
	};

	MINUTE() {
	    return this.getToken(SqlBaseParser.MINUTE, 0);
	};

	SECOND() {
	    return this.getToken(SqlBaseParser.SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterIntervalField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitIntervalField(this);
		}
	}


}



class NormalFormContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_normalForm;
    }

	NFD() {
	    return this.getToken(SqlBaseParser.NFD, 0);
	};

	NFC() {
	    return this.getToken(SqlBaseParser.NFC, 0);
	};

	NFKD() {
	    return this.getToken(SqlBaseParser.NFKD, 0);
	};

	NFKC() {
	    return this.getToken(SqlBaseParser.NFKC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNormalForm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNormalForm(this);
		}
	}


}



class TypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_types;
    }

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTypes(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_type;
        this.from = null;
        this.to = null;
    }

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	LT() {
	    return this.getToken(SqlBaseParser.LT, 0);
	};

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	GT() {
	    return this.getToken(SqlBaseParser.GT, 0);
	};

	MAP() {
	    return this.getToken(SqlBaseParser.MAP, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	baseType() {
	    return this.getTypedRuleContext(BaseTypeContext,0);
	};

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	intervalField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalFieldContext);
	    } else {
	        return this.getTypedRuleContext(IntervalFieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitType(this);
		}
	}


}



class TableFunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableFunctionCall;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	tableFunctionArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableFunctionArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TableFunctionArgumentContext,i);
	    }
	};

	COPARTITION() {
	    return this.getToken(SqlBaseParser.COPARTITION, 0);
	};

	copartitionTables = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CopartitionTablesContext);
	    } else {
	        return this.getTypedRuleContext(CopartitionTablesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableFunctionCall(this);
		}
	}


}



class TableFunctionArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableFunctionArgument;
    }

	tableArgument() {
	    return this.getTypedRuleContext(TableArgumentContext,0);
	};

	descriptorArgument() {
	    return this.getTypedRuleContext(DescriptorArgumentContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableFunctionArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableFunctionArgument(this);
		}
	}


}



class TableArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableArgument;
    }

	tableArgumentRelation() {
	    return this.getTypedRuleContext(TableArgumentRelationContext,0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	PRUNE() {
	    return this.getToken(SqlBaseParser.PRUNE, 0);
	};

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	EMPTY() {
	    return this.getToken(SqlBaseParser.EMPTY, 0);
	};

	KEEP() {
	    return this.getToken(SqlBaseParser.KEEP, 0);
	};

	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableArgument(this);
		}
	}


}



class TableArgumentRelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableArgumentRelation;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableArgumentQueryContext extends TableArgumentRelationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableArgumentQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableArgumentQuery(this);
		}
	}


}

SqlBaseParser.TableArgumentQueryContext = TableArgumentQueryContext;

class TableArgumentTableContext extends TableArgumentRelationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableArgumentTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableArgumentTable(this);
		}
	}


}

SqlBaseParser.TableArgumentTableContext = TableArgumentTableContext;

class DescriptorArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_descriptorArgument;
    }

	DESCRIPTOR() {
	    return this.getToken(SqlBaseParser.DESCRIPTOR, 0);
	};

	descriptorField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DescriptorFieldContext);
	    } else {
	        return this.getTypedRuleContext(DescriptorFieldContext,i);
	    }
	};

	CAST() {
	    return this.getToken(SqlBaseParser.CAST, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDescriptorArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDescriptorArgument(this);
		}
	}


}



class DescriptorFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_descriptorField;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDescriptorField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDescriptorField(this);
		}
	}


}



class CopartitionTablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_copartitionTables;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCopartitionTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCopartitionTables(this);
		}
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_typeParameter;
    }

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTypeParameter(this);
		}
	}


}



class BaseTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_baseType;
    }

	TIME_WITH_TIME_ZONE() {
	    return this.getToken(SqlBaseParser.TIME_WITH_TIME_ZONE, 0);
	};

	TIMESTAMP_WITH_TIME_ZONE() {
	    return this.getToken(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE, 0);
	};

	DOUBLE_PRECISION() {
	    return this.getToken(SqlBaseParser.DOUBLE_PRECISION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBaseType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBaseType(this);
		}
	}


}



class WhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_whenClause;
        this.condition = null;
        this.result = null;
    }

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(SqlBaseParser.THEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitWhenClause(this);
		}
	}


}



class FilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_filter;
    }

	FILTER() {
	    return this.getToken(SqlBaseParser.FILTER, 0);
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitFilter(this);
		}
	}


}



class MergeCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_mergeCase;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MergeInsertContext extends MergeCaseContext {

    constructor(parser, ctx) {
        super(parser);
        this._identifier = null;;
        this.columns = [];;
        this._expression = null;;
        this.values = [];;
        super.copyFrom(ctx);
    }

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	MATCHED() {
	    return this.getToken(SqlBaseParser.MATCHED, 0);
	};

	THEN() {
	    return this.getToken(SqlBaseParser.THEN, 0);
	};

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	VALUES() {
	    return this.getToken(SqlBaseParser.VALUES, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterMergeInsert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitMergeInsert(this);
		}
	}


}

SqlBaseParser.MergeInsertContext = MergeInsertContext;

class MergeUpdateContext extends MergeCaseContext {

    constructor(parser, ctx) {
        super(parser);
        this._identifier = null;;
        this.targetColumns = [];;
        this._expression = null;;
        this.values = [];;
        super.copyFrom(ctx);
    }

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	MATCHED() {
	    return this.getToken(SqlBaseParser.MATCHED, 0);
	};

	THEN() {
	    return this.getToken(SqlBaseParser.THEN, 0);
	};

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.EQ);
	    } else {
	        return this.getToken(SqlBaseParser.EQ, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterMergeUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitMergeUpdate(this);
		}
	}


}

SqlBaseParser.MergeUpdateContext = MergeUpdateContext;

class OverContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_over;
        this._expression = null;
        this.partition = [];
    }

	OVER() {
	    return this.getToken(SqlBaseParser.OVER, 0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	windowFrame() {
	    return this.getTypedRuleContext(WindowFrameContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterOver(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitOver(this);
		}
	}


}



class WindowFrameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_windowFrame;
        this.frameType = null;
        this.start = null;
        this.end = null;
    }

	RANGE() {
	    return this.getToken(SqlBaseParser.RANGE, 0);
	};

	frameBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FrameBoundContext);
	    } else {
	        return this.getTypedRuleContext(FrameBoundContext,i);
	    }
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	GROUPS() {
	    return this.getToken(SqlBaseParser.GROUPS, 0);
	};

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterWindowFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitWindowFrame(this);
		}
	}


}



class FrameBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_frameBound;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoundedFrameContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        this.boundType = null;;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBoundedFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBoundedFrame(this);
		}
	}


}

SqlBaseParser.BoundedFrameContext = BoundedFrameContext;

class UnboundedFrameContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        this.boundType = null;;
        super.copyFrom(ctx);
    }

	UNBOUNDED() {
	    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnboundedFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnboundedFrame(this);
		}
	}


}

SqlBaseParser.UnboundedFrameContext = UnboundedFrameContext;

class CurrentRowBoundContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCurrentRowBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCurrentRowBound(this);
		}
	}


}

SqlBaseParser.CurrentRowBoundContext = CurrentRowBoundContext;

class UpdateAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_updateAssignment;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUpdateAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUpdateAssignment(this);
		}
	}


}



class ExplainOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_explainOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplainFormatContext extends ExplainOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null;;
        super.copyFrom(ctx);
    }

	FORMAT() {
	    return this.getToken(SqlBaseParser.FORMAT, 0);
	};

	TEXT() {
	    return this.getToken(SqlBaseParser.TEXT, 0);
	};

	GRAPHVIZ() {
	    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
	};

	JSON() {
	    return this.getToken(SqlBaseParser.JSON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExplainFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExplainFormat(this);
		}
	}


}

SqlBaseParser.ExplainFormatContext = ExplainFormatContext;

class ExplainTypeContext extends ExplainOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null;;
        super.copyFrom(ctx);
    }

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	LOGICAL() {
	    return this.getToken(SqlBaseParser.LOGICAL, 0);
	};

	DISTRIBUTED() {
	    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
	};

	VALIDATE() {
	    return this.getToken(SqlBaseParser.VALIDATE, 0);
	};

	IO() {
	    return this.getToken(SqlBaseParser.IO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExplainType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExplainType(this);
		}
	}


}

SqlBaseParser.ExplainTypeContext = ExplainTypeContext;

class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_transactionMode;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TransactionAccessModeContext extends TransactionModeContext {

    constructor(parser, ctx) {
        super(parser);
        this.accessMode = null;;
        super.copyFrom(ctx);
    }

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	WRITE() {
	    return this.getToken(SqlBaseParser.WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTransactionAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTransactionAccessMode(this);
		}
	}


}

SqlBaseParser.TransactionAccessModeContext = TransactionAccessModeContext;

class IsolationLevelContext extends TransactionModeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ISOLATION() {
	    return this.getToken(SqlBaseParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(SqlBaseParser.LEVEL, 0);
	};

	levelOfIsolation() {
	    return this.getTypedRuleContext(LevelOfIsolationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterIsolationLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitIsolationLevel(this);
		}
	}


}

SqlBaseParser.IsolationLevelContext = IsolationLevelContext;

class LevelOfIsolationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_levelOfIsolation;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ReadUncommittedContext extends LevelOfIsolationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterReadUncommitted(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitReadUncommitted(this);
		}
	}


}

SqlBaseParser.ReadUncommittedContext = ReadUncommittedContext;

class SerializableContext extends LevelOfIsolationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SERIALIZABLE() {
	    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSerializable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSerializable(this);
		}
	}


}

SqlBaseParser.SerializableContext = SerializableContext;

class ReadCommittedContext extends LevelOfIsolationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	COMMITTED() {
	    return this.getToken(SqlBaseParser.COMMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterReadCommitted(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitReadCommitted(this);
		}
	}


}

SqlBaseParser.ReadCommittedContext = ReadCommittedContext;

class RepeatableReadContext extends LevelOfIsolationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPEATABLE() {
	    return this.getToken(SqlBaseParser.REPEATABLE, 0);
	};

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRepeatableRead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRepeatableRead(this);
		}
	}


}

SqlBaseParser.RepeatableReadContext = RepeatableReadContext;

class CallArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_callArgument;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PositionalArgumentContext extends CallArgumentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPositionalArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPositionalArgument(this);
		}
	}


}

SqlBaseParser.PositionalArgumentContext = PositionalArgumentContext;

class NamedArgumentContext extends CallArgumentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNamedArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNamedArgument(this);
		}
	}


}

SqlBaseParser.NamedArgumentContext = NamedArgumentContext;

class PrivilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_privilege;
    }

	SELECT() {
	    return this.getToken(SqlBaseParser.SELECT, 0);
	};

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPrivilege(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPrivilege(this);
		}
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_qualifiedName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQualifiedName(this);
		}
	}


}



class TableVersionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableVersionExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableVersionContext extends TableVersionExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableVersionType = null;;
        super.copyFrom(ctx);
    }

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	tableVersionState() {
	    return this.getTypedRuleContext(TableVersionStateContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	SYSTEM_TIME() {
	    return this.getToken(SqlBaseParser.SYSTEM_TIME, 0);
	};

	SYSTEM_VERSION() {
	    return this.getToken(SqlBaseParser.SYSTEM_VERSION, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SqlBaseParser.TIMESTAMP, 0);
	};

	VERSION() {
	    return this.getToken(SqlBaseParser.VERSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableVersion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableVersion(this);
		}
	}


}

SqlBaseParser.TableVersionContext = TableVersionContext;

class TableVersionStateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableVersionState;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableversionbeforeContext extends TableVersionStateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BEFORE() {
	    return this.getToken(SqlBaseParser.BEFORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableversionbefore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableversionbefore(this);
		}
	}


}

SqlBaseParser.TableversionbeforeContext = TableversionbeforeContext;

class TableversionasofContext extends TableVersionStateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	OF() {
	    return this.getToken(SqlBaseParser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableversionasof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableversionasof(this);
		}
	}


}

SqlBaseParser.TableversionasofContext = TableversionasofContext;

class GrantorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_grantor;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CurrentUserGrantorContext extends GrantorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT_USER() {
	    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCurrentUserGrantor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCurrentUserGrantor(this);
		}
	}


}

SqlBaseParser.CurrentUserGrantorContext = CurrentUserGrantorContext;

class SpecifiedPrincipalContext extends GrantorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	principal() {
	    return this.getTypedRuleContext(PrincipalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSpecifiedPrincipal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSpecifiedPrincipal(this);
		}
	}


}

SqlBaseParser.SpecifiedPrincipalContext = SpecifiedPrincipalContext;

class CurrentRoleGrantorContext extends GrantorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT_ROLE() {
	    return this.getToken(SqlBaseParser.CURRENT_ROLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCurrentRoleGrantor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCurrentRoleGrantor(this);
		}
	}


}

SqlBaseParser.CurrentRoleGrantorContext = CurrentRoleGrantorContext;

class PrincipalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_principal;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnspecifiedPrincipalContext extends PrincipalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnspecifiedPrincipal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnspecifiedPrincipal(this);
		}
	}


}

SqlBaseParser.UnspecifiedPrincipalContext = UnspecifiedPrincipalContext;

class UserPrincipalContext extends PrincipalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUserPrincipal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUserPrincipal(this);
		}
	}


}

SqlBaseParser.UserPrincipalContext = UserPrincipalContext;

class RolePrincipalContext extends PrincipalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRolePrincipal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRolePrincipal(this);
		}
	}


}

SqlBaseParser.RolePrincipalContext = RolePrincipalContext;

class RolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_roles;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRoles(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_identifier;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BackQuotedIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BACKQUOTED_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBackQuotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBackQuotedIdentifier(this);
		}
	}


}

SqlBaseParser.BackQuotedIdentifierContext = BackQuotedIdentifierContext;

class QuotedIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	QUOTED_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQuotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQuotedIdentifier(this);
		}
	}


}

SqlBaseParser.QuotedIdentifierContext = QuotedIdentifierContext;

class DigitIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DIGIT_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDigitIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDigitIdentifier(this);
		}
	}


}

SqlBaseParser.DigitIdentifierContext = DigitIdentifierContext;

class UnquotedIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IDENTIFIER() {
	    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
	};

	nonReserved() {
	    return this.getTypedRuleContext(NonReservedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnquotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnquotedIdentifier(this);
		}
	}


}

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_number;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DecimalLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL_VALUE() {
	    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}


}

SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext;

class DoubleLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOUBLE_VALUE() {
	    return this.getToken(SqlBaseParser.DOUBLE_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDoubleLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDoubleLiteral(this);
		}
	}


}

SqlBaseParser.DoubleLiteralContext = DoubleLiteralContext;

class IntegerLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}

SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext;

class ConstraintSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constraintSpecification;
    }

	namedConstraintSpecification() {
	    return this.getTypedRuleContext(NamedConstraintSpecificationContext,0);
	};

	unnamedConstraintSpecification() {
	    return this.getTypedRuleContext(UnnamedConstraintSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterConstraintSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitConstraintSpecification(this);
		}
	}


}



class NamedConstraintSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedConstraintSpecification;
        this.name = null;
    }

	CONSTRAINT() {
	    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
	};

	unnamedConstraintSpecification() {
	    return this.getTypedRuleContext(UnnamedConstraintSpecificationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNamedConstraintSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNamedConstraintSpecification(this);
		}
	}


}



class UnnamedConstraintSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_unnamedConstraintSpecification;
    }

	constraintType() {
	    return this.getTypedRuleContext(ConstraintTypeContext,0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	constraintQualifiers() {
	    return this.getTypedRuleContext(ConstraintQualifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnnamedConstraintSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnnamedConstraintSpecification(this);
		}
	}


}



class ConstraintTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constraintType;
    }

	UNIQUE() {
	    return this.getToken(SqlBaseParser.UNIQUE, 0);
	};

	PRIMARY() {
	    return this.getToken(SqlBaseParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(SqlBaseParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterConstraintType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitConstraintType(this);
		}
	}


}



class ConstraintQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constraintQualifiers;
    }

	constraintQualifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstraintQualifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstraintQualifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterConstraintQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitConstraintQualifiers(this);
		}
	}


}



class ConstraintQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constraintQualifier;
    }

	constraintEnabled() {
	    return this.getTypedRuleContext(ConstraintEnabledContext,0);
	};

	constraintRely() {
	    return this.getTypedRuleContext(ConstraintRelyContext,0);
	};

	constraintEnforced() {
	    return this.getTypedRuleContext(ConstraintEnforcedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterConstraintQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitConstraintQualifier(this);
		}
	}


}



class ConstraintRelyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constraintRely;
    }

	RELY() {
	    return this.getToken(SqlBaseParser.RELY, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterConstraintRely(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitConstraintRely(this);
		}
	}


}



class ConstraintEnabledContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constraintEnabled;
    }

	ENABLED() {
	    return this.getToken(SqlBaseParser.ENABLED, 0);
	};

	DISABLED() {
	    return this.getToken(SqlBaseParser.DISABLED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterConstraintEnabled(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitConstraintEnabled(this);
		}
	}


}



class ConstraintEnforcedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constraintEnforced;
    }

	ENFORCED() {
	    return this.getToken(SqlBaseParser.ENFORCED, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterConstraintEnforced(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitConstraintEnforced(this);
		}
	}


}



class NonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    }

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	ADMIN() {
	    return this.getToken(SqlBaseParser.ADMIN, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	ANY() {
	    return this.getToken(SqlBaseParser.ANY, 0);
	};

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	ASC() {
	    return this.getToken(SqlBaseParser.ASC, 0);
	};

	AT() {
	    return this.getToken(SqlBaseParser.AT, 0);
	};

	BEFORE() {
	    return this.getToken(SqlBaseParser.BEFORE, 0);
	};

	BERNOULLI() {
	    return this.getToken(SqlBaseParser.BERNOULLI, 0);
	};

	CALL() {
	    return this.getToken(SqlBaseParser.CALL, 0);
	};

	CALLED() {
	    return this.getToken(SqlBaseParser.CALLED, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	CATALOGS() {
	    return this.getToken(SqlBaseParser.CATALOGS, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	COMMIT() {
	    return this.getToken(SqlBaseParser.COMMIT, 0);
	};

	COMMITTED() {
	    return this.getToken(SqlBaseParser.COMMITTED, 0);
	};

	COPARTITION() {
	    return this.getToken(SqlBaseParser.COPARTITION, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	CURRENT_ROLE() {
	    return this.getToken(SqlBaseParser.CURRENT_ROLE, 0);
	};

	DATA() {
	    return this.getToken(SqlBaseParser.DATA, 0);
	};

	DATE() {
	    return this.getToken(SqlBaseParser.DATE, 0);
	};

	DAY() {
	    return this.getToken(SqlBaseParser.DAY, 0);
	};

	DEFINER() {
	    return this.getToken(SqlBaseParser.DEFINER, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	DESCRIPTOR() {
	    return this.getToken(SqlBaseParser.DESCRIPTOR, 0);
	};

	DETERMINISTIC() {
	    return this.getToken(SqlBaseParser.DETERMINISTIC, 0);
	};

	DISABLED() {
	    return this.getToken(SqlBaseParser.DISABLED, 0);
	};

	DISTRIBUTED() {
	    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
	};

	EMPTY() {
	    return this.getToken(SqlBaseParser.EMPTY, 0);
	};

	ENABLED() {
	    return this.getToken(SqlBaseParser.ENABLED, 0);
	};

	ENFORCED() {
	    return this.getToken(SqlBaseParser.ENFORCED, 0);
	};

	EXCLUDING() {
	    return this.getToken(SqlBaseParser.EXCLUDING, 0);
	};

	EXPLAIN() {
	    return this.getToken(SqlBaseParser.EXPLAIN, 0);
	};

	EXTERNAL() {
	    return this.getToken(SqlBaseParser.EXTERNAL, 0);
	};

	FETCH() {
	    return this.getToken(SqlBaseParser.FETCH, 0);
	};

	FILTER() {
	    return this.getToken(SqlBaseParser.FILTER, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	FORMAT() {
	    return this.getToken(SqlBaseParser.FORMAT, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
	};

	GRANT() {
	    return this.getToken(SqlBaseParser.GRANT, 0);
	};

	GRANTED() {
	    return this.getToken(SqlBaseParser.GRANTED, 0);
	};

	GRANTS() {
	    return this.getToken(SqlBaseParser.GRANTS, 0);
	};

	GRAPHVIZ() {
	    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
	};

	GROUPS() {
	    return this.getToken(SqlBaseParser.GROUPS, 0);
	};

	HOUR() {
	    return this.getToken(SqlBaseParser.HOUR, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	INCLUDING() {
	    return this.getToken(SqlBaseParser.INCLUDING, 0);
	};

	INPUT() {
	    return this.getToken(SqlBaseParser.INPUT, 0);
	};

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	INVOKER() {
	    return this.getToken(SqlBaseParser.INVOKER, 0);
	};

	IO() {
	    return this.getToken(SqlBaseParser.IO, 0);
	};

	ISOLATION() {
	    return this.getToken(SqlBaseParser.ISOLATION, 0);
	};

	JSON() {
	    return this.getToken(SqlBaseParser.JSON, 0);
	};

	KEEP() {
	    return this.getToken(SqlBaseParser.KEEP, 0);
	};

	KEY() {
	    return this.getToken(SqlBaseParser.KEY, 0);
	};

	LANGUAGE() {
	    return this.getToken(SqlBaseParser.LANGUAGE, 0);
	};

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	LATERAL() {
	    return this.getToken(SqlBaseParser.LATERAL, 0);
	};

	LEVEL() {
	    return this.getToken(SqlBaseParser.LEVEL, 0);
	};

	LIMIT() {
	    return this.getToken(SqlBaseParser.LIMIT, 0);
	};

	LOGICAL() {
	    return this.getToken(SqlBaseParser.LOGICAL, 0);
	};

	MAP() {
	    return this.getToken(SqlBaseParser.MAP, 0);
	};

	MATCHED() {
	    return this.getToken(SqlBaseParser.MATCHED, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	MERGE() {
	    return this.getToken(SqlBaseParser.MERGE, 0);
	};

	MINUTE() {
	    return this.getToken(SqlBaseParser.MINUTE, 0);
	};

	MONTH() {
	    return this.getToken(SqlBaseParser.MONTH, 0);
	};

	NAME() {
	    return this.getToken(SqlBaseParser.NAME, 0);
	};

	NFC() {
	    return this.getToken(SqlBaseParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(SqlBaseParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(SqlBaseParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(SqlBaseParser.NFKD, 0);
	};

	NO() {
	    return this.getToken(SqlBaseParser.NO, 0);
	};

	NONE() {
	    return this.getToken(SqlBaseParser.NONE, 0);
	};

	NULLIF() {
	    return this.getToken(SqlBaseParser.NULLIF, 0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	OF() {
	    return this.getToken(SqlBaseParser.OF, 0);
	};

	OFFSET() {
	    return this.getToken(SqlBaseParser.OFFSET, 0);
	};

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	ORDINALITY() {
	    return this.getToken(SqlBaseParser.ORDINALITY, 0);
	};

	OUTPUT() {
	    return this.getToken(SqlBaseParser.OUTPUT, 0);
	};

	OVER() {
	    return this.getToken(SqlBaseParser.OVER, 0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	PARTITIONS() {
	    return this.getToken(SqlBaseParser.PARTITIONS, 0);
	};

	POSITION() {
	    return this.getToken(SqlBaseParser.POSITION, 0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	PRIMARY() {
	    return this.getToken(SqlBaseParser.PRIMARY, 0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	PROPERTIES() {
	    return this.getToken(SqlBaseParser.PROPERTIES, 0);
	};

	PRUNE() {
	    return this.getToken(SqlBaseParser.PRUNE, 0);
	};

	RANGE() {
	    return this.getToken(SqlBaseParser.RANGE, 0);
	};

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	RELY() {
	    return this.getToken(SqlBaseParser.RELY, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	REPEATABLE() {
	    return this.getToken(SqlBaseParser.REPEATABLE, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	RESPECT() {
	    return this.getToken(SqlBaseParser.RESPECT, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	RETURN() {
	    return this.getToken(SqlBaseParser.RETURN, 0);
	};

	RETURNS() {
	    return this.getToken(SqlBaseParser.RETURNS, 0);
	};

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ROLES() {
	    return this.getToken(SqlBaseParser.ROLES, 0);
	};

	ROLLBACK() {
	    return this.getToken(SqlBaseParser.ROLLBACK, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	SCHEMAS() {
	    return this.getToken(SqlBaseParser.SCHEMAS, 0);
	};

	SECOND() {
	    return this.getToken(SqlBaseParser.SECOND, 0);
	};

	SECURITY() {
	    return this.getToken(SqlBaseParser.SECURITY, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	SETS() {
	    return this.getToken(SqlBaseParser.SETS, 0);
	};

	SQL() {
	    return this.getToken(SqlBaseParser.SQL, 0);
	};

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SOME() {
	    return this.getToken(SqlBaseParser.SOME, 0);
	};

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	STATS() {
	    return this.getToken(SqlBaseParser.STATS, 0);
	};

	SUBSTRING() {
	    return this.getToken(SqlBaseParser.SUBSTRING, 0);
	};

	SYSTEM() {
	    return this.getToken(SqlBaseParser.SYSTEM, 0);
	};

	SYSTEM_TIME() {
	    return this.getToken(SqlBaseParser.SYSTEM_TIME, 0);
	};

	SYSTEM_VERSION() {
	    return this.getToken(SqlBaseParser.SYSTEM_VERSION, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	TEXT() {
	    return this.getToken(SqlBaseParser.TEXT, 0);
	};

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SqlBaseParser.TIMESTAMP, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	TRUNCATE() {
	    return this.getToken(SqlBaseParser.TRUNCATE, 0);
	};

	TRY_CAST() {
	    return this.getToken(SqlBaseParser.TRY_CAST, 0);
	};

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	UNBOUNDED() {
	    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
	};

	UNIQUE() {
	    return this.getToken(SqlBaseParser.UNIQUE, 0);
	};

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	USE() {
	    return this.getToken(SqlBaseParser.USE, 0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	VALIDATE() {
	    return this.getToken(SqlBaseParser.VALIDATE, 0);
	};

	VERBOSE() {
	    return this.getToken(SqlBaseParser.VERBOSE, 0);
	};

	VERSION() {
	    return this.getToken(SqlBaseParser.VERSION, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	WORK() {
	    return this.getToken(SqlBaseParser.WORK, 0);
	};

	WRITE() {
	    return this.getToken(SqlBaseParser.WRITE, 0);
	};

	YEAR() {
	    return this.getToken(SqlBaseParser.YEAR, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNonReserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNonReserved(this);
		}
	}


}




SqlBaseParser.SingleStatementContext = SingleStatementContext; 
SqlBaseParser.StandaloneExpressionContext = StandaloneExpressionContext; 
SqlBaseParser.StandaloneRoutineBodyContext = StandaloneRoutineBodyContext; 
SqlBaseParser.StatementContext = StatementContext; 
SqlBaseParser.QueryContext = QueryContext; 
SqlBaseParser.WithContext = WithContext; 
SqlBaseParser.TableElementContext = TableElementContext; 
SqlBaseParser.ColumnDefinitionContext = ColumnDefinitionContext; 
SqlBaseParser.LikeClauseContext = LikeClauseContext; 
SqlBaseParser.PropertiesContext = PropertiesContext; 
SqlBaseParser.PropertyContext = PropertyContext; 
SqlBaseParser.SqlParameterDeclarationContext = SqlParameterDeclarationContext; 
SqlBaseParser.RoutineCharacteristicsContext = RoutineCharacteristicsContext; 
SqlBaseParser.RoutineCharacteristicContext = RoutineCharacteristicContext; 
SqlBaseParser.AlterRoutineCharacteristicsContext = AlterRoutineCharacteristicsContext; 
SqlBaseParser.AlterRoutineCharacteristicContext = AlterRoutineCharacteristicContext; 
SqlBaseParser.RoutineBodyContext = RoutineBodyContext; 
SqlBaseParser.ReturnStatementContext = ReturnStatementContext; 
SqlBaseParser.ExternalBodyReferenceContext = ExternalBodyReferenceContext; 
SqlBaseParser.LanguageContext = LanguageContext; 
SqlBaseParser.DeterminismContext = DeterminismContext; 
SqlBaseParser.NullCallClauseContext = NullCallClauseContext; 
SqlBaseParser.ExternalRoutineNameContext = ExternalRoutineNameContext; 
SqlBaseParser.QueryNoWithContext = QueryNoWithContext; 
SqlBaseParser.QueryTermContext = QueryTermContext; 
SqlBaseParser.QueryPrimaryContext = QueryPrimaryContext; 
SqlBaseParser.SortItemContext = SortItemContext; 
SqlBaseParser.QuerySpecificationContext = QuerySpecificationContext; 
SqlBaseParser.GroupByContext = GroupByContext; 
SqlBaseParser.GroupingElementContext = GroupingElementContext; 
SqlBaseParser.GroupingSetContext = GroupingSetContext; 
SqlBaseParser.NamedQueryContext = NamedQueryContext; 
SqlBaseParser.SetQuantifierContext = SetQuantifierContext; 
SqlBaseParser.SelectItemContext = SelectItemContext; 
SqlBaseParser.RelationContext = RelationContext; 
SqlBaseParser.JoinTypeContext = JoinTypeContext; 
SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext; 
SqlBaseParser.SampledRelationContext = SampledRelationContext; 
SqlBaseParser.SampleTypeContext = SampleTypeContext; 
SqlBaseParser.AliasedRelationContext = AliasedRelationContext; 
SqlBaseParser.ColumnAliasesContext = ColumnAliasesContext; 
SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext; 
SqlBaseParser.ExpressionContext = ExpressionContext; 
SqlBaseParser.BooleanExpressionContext = BooleanExpressionContext; 
SqlBaseParser.PredicateContext = PredicateContext; 
SqlBaseParser.ValueExpressionContext = ValueExpressionContext; 
SqlBaseParser.PrimaryExpressionContext = PrimaryExpressionContext; 
SqlBaseParser.StringContext = StringContext; 
SqlBaseParser.NullTreatmentContext = NullTreatmentContext; 
SqlBaseParser.TimeZoneSpecifierContext = TimeZoneSpecifierContext; 
SqlBaseParser.ComparisonOperatorContext = ComparisonOperatorContext; 
SqlBaseParser.ComparisonQuantifierContext = ComparisonQuantifierContext; 
SqlBaseParser.BooleanValueContext = BooleanValueContext; 
SqlBaseParser.IntervalContext = IntervalContext; 
SqlBaseParser.IntervalFieldContext = IntervalFieldContext; 
SqlBaseParser.NormalFormContext = NormalFormContext; 
SqlBaseParser.TypesContext = TypesContext; 
SqlBaseParser.TypeContext = TypeContext; 
SqlBaseParser.TableFunctionCallContext = TableFunctionCallContext; 
SqlBaseParser.TableFunctionArgumentContext = TableFunctionArgumentContext; 
SqlBaseParser.TableArgumentContext = TableArgumentContext; 
SqlBaseParser.TableArgumentRelationContext = TableArgumentRelationContext; 
SqlBaseParser.DescriptorArgumentContext = DescriptorArgumentContext; 
SqlBaseParser.DescriptorFieldContext = DescriptorFieldContext; 
SqlBaseParser.CopartitionTablesContext = CopartitionTablesContext; 
SqlBaseParser.TypeParameterContext = TypeParameterContext; 
SqlBaseParser.BaseTypeContext = BaseTypeContext; 
SqlBaseParser.WhenClauseContext = WhenClauseContext; 
SqlBaseParser.FilterContext = FilterContext; 
SqlBaseParser.MergeCaseContext = MergeCaseContext; 
SqlBaseParser.OverContext = OverContext; 
SqlBaseParser.WindowFrameContext = WindowFrameContext; 
SqlBaseParser.FrameBoundContext = FrameBoundContext; 
SqlBaseParser.UpdateAssignmentContext = UpdateAssignmentContext; 
SqlBaseParser.ExplainOptionContext = ExplainOptionContext; 
SqlBaseParser.TransactionModeContext = TransactionModeContext; 
SqlBaseParser.LevelOfIsolationContext = LevelOfIsolationContext; 
SqlBaseParser.CallArgumentContext = CallArgumentContext; 
SqlBaseParser.PrivilegeContext = PrivilegeContext; 
SqlBaseParser.QualifiedNameContext = QualifiedNameContext; 
SqlBaseParser.TableVersionExpressionContext = TableVersionExpressionContext; 
SqlBaseParser.TableVersionStateContext = TableVersionStateContext; 
SqlBaseParser.GrantorContext = GrantorContext; 
SqlBaseParser.PrincipalContext = PrincipalContext; 
SqlBaseParser.RolesContext = RolesContext; 
SqlBaseParser.IdentifierContext = IdentifierContext; 
SqlBaseParser.NumberContext = NumberContext; 
SqlBaseParser.ConstraintSpecificationContext = ConstraintSpecificationContext; 
SqlBaseParser.NamedConstraintSpecificationContext = NamedConstraintSpecificationContext; 
SqlBaseParser.UnnamedConstraintSpecificationContext = UnnamedConstraintSpecificationContext; 
SqlBaseParser.ConstraintTypeContext = ConstraintTypeContext; 
SqlBaseParser.ConstraintQualifiersContext = ConstraintQualifiersContext; 
SqlBaseParser.ConstraintQualifierContext = ConstraintQualifierContext; 
SqlBaseParser.ConstraintRelyContext = ConstraintRelyContext; 
SqlBaseParser.ConstraintEnabledContext = ConstraintEnabledContext; 
SqlBaseParser.ConstraintEnforcedContext = ConstraintEnforcedContext; 
SqlBaseParser.NonReservedContext = NonReservedContext; 
